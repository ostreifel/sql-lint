// Generated from TSqlParser.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var TSqlParserListener = require('./TSqlParserListener').TSqlParserListener;
var grammarFileName = "TSqlParser.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0332\u28db\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004",
    "\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t",
    "\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0004",
    "\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004\u00d6\t",
    "\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t\u00d9\u0004",
    "\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004\u00dd\t",
    "\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t\u00e0\u0004",
    "\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004\u00e4\t",
    "\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t\u00e7\u0004",
    "\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004\u00eb\t",
    "\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t\u00ee\u0004",
    "\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004\u00f2\t",
    "\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t\u00f5\u0004",
    "\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004\u00f9\t",
    "\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t\u00fc\u0004",
    "\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004\u0100\t",
    "\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t\u0103\u0004",
    "\u0104\t\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0004\u0107\t",
    "\u0107\u0004\u0108\t\u0108\u0004\u0109\t\u0109\u0004\u010a\t\u010a\u0004",
    "\u010b\t\u010b\u0004\u010c\t\u010c\u0004\u010d\t\u010d\u0004\u010e\t",
    "\u010e\u0004\u010f\t\u010f\u0004\u0110\t\u0110\u0004\u0111\t\u0111\u0004",
    "\u0112\t\u0112\u0004\u0113\t\u0113\u0004\u0114\t\u0114\u0004\u0115\t",
    "\u0115\u0004\u0116\t\u0116\u0004\u0117\t\u0117\u0004\u0118\t\u0118\u0004",
    "\u0119\t\u0119\u0004\u011a\t\u011a\u0004\u011b\t\u011b\u0004\u011c\t",
    "\u011c\u0004\u011d\t\u011d\u0004\u011e\t\u011e\u0004\u011f\t\u011f\u0004",
    "\u0120\t\u0120\u0004\u0121\t\u0121\u0004\u0122\t\u0122\u0004\u0123\t",
    "\u0123\u0004\u0124\t\u0124\u0004\u0125\t\u0125\u0004\u0126\t\u0126\u0004",
    "\u0127\t\u0127\u0004\u0128\t\u0128\u0004\u0129\t\u0129\u0004\u012a\t",
    "\u012a\u0004\u012b\t\u012b\u0004\u012c\t\u012c\u0004\u012d\t\u012d\u0004",
    "\u012e\t\u012e\u0004\u012f\t\u012f\u0004\u0130\t\u0130\u0004\u0131\t",
    "\u0131\u0004\u0132\t\u0132\u0004\u0133\t\u0133\u0004\u0134\t\u0134\u0004",
    "\u0135\t\u0135\u0004\u0136\t\u0136\u0004\u0137\t\u0137\u0004\u0138\t",
    "\u0138\u0004\u0139\t\u0139\u0004\u013a\t\u013a\u0004\u013b\t\u013b\u0004",
    "\u013c\t\u013c\u0004\u013d\t\u013d\u0004\u013e\t\u013e\u0004\u013f\t",
    "\u013f\u0004\u0140\t\u0140\u0004\u0141\t\u0141\u0004\u0142\t\u0142\u0004",
    "\u0143\t\u0143\u0004\u0144\t\u0144\u0004\u0145\t\u0145\u0004\u0146\t",
    "\u0146\u0004\u0147\t\u0147\u0004\u0148\t\u0148\u0004\u0149\t\u0149\u0004",
    "\u014a\t\u014a\u0004\u014b\t\u014b\u0004\u014c\t\u014c\u0004\u014d\t",
    "\u014d\u0004\u014e\t\u014e\u0004\u014f\t\u014f\u0004\u0150\t\u0150\u0004",
    "\u0151\t\u0151\u0004\u0152\t\u0152\u0004\u0153\t\u0153\u0004\u0154\t",
    "\u0154\u0004\u0155\t\u0155\u0004\u0156\t\u0156\u0004\u0157\t\u0157\u0004",
    "\u0158\t\u0158\u0004\u0159\t\u0159\u0004\u015a\t\u015a\u0004\u015b\t",
    "\u015b\u0004\u015c\t\u015c\u0004\u015d\t\u015d\u0004\u015e\t\u015e\u0004",
    "\u015f\t\u015f\u0004\u0160\t\u0160\u0004\u0161\t\u0161\u0004\u0162\t",
    "\u0162\u0004\u0163\t\u0163\u0004\u0164\t\u0164\u0004\u0165\t\u0165\u0004",
    "\u0166\t\u0166\u0004\u0167\t\u0167\u0004\u0168\t\u0168\u0004\u0169\t",
    "\u0169\u0004\u016a\t\u016a\u0004\u016b\t\u016b\u0004\u016c\t\u016c\u0004",
    "\u016d\t\u016d\u0004\u016e\t\u016e\u0004\u016f\t\u016f\u0004\u0170\t",
    "\u0170\u0004\u0171\t\u0171\u0004\u0172\t\u0172\u0004\u0173\t\u0173\u0004",
    "\u0174\t\u0174\u0004\u0175\t\u0175\u0004\u0176\t\u0176\u0004\u0177\t",
    "\u0177\u0004\u0178\t\u0178\u0004\u0179\t\u0179\u0004\u017a\t\u017a\u0004",
    "\u017b\t\u017b\u0004\u017c\t\u017c\u0004\u017d\t\u017d\u0004\u017e\t",
    "\u017e\u0004\u017f\t\u017f\u0004\u0180\t\u0180\u0004\u0181\t\u0181\u0004",
    "\u0182\t\u0182\u0004\u0183\t\u0183\u0004\u0184\t\u0184\u0004\u0185\t",
    "\u0185\u0004\u0186\t\u0186\u0004\u0187\t\u0187\u0004\u0188\t\u0188\u0004",
    "\u0189\t\u0189\u0004\u018a\t\u018a\u0004\u018b\t\u018b\u0004\u018c\t",
    "\u018c\u0004\u018d\t\u018d\u0004\u018e\t\u018e\u0004\u018f\t\u018f\u0004",
    "\u0190\t\u0190\u0004\u0191\t\u0191\u0004\u0192\t\u0192\u0004\u0193\t",
    "\u0193\u0004\u0194\t\u0194\u0004\u0195\t\u0195\u0004\u0196\t\u0196\u0004",
    "\u0197\t\u0197\u0004\u0198\t\u0198\u0004\u0199\t\u0199\u0004\u019a\t",
    "\u019a\u0004\u019b\t\u019b\u0004\u019c\t\u019c\u0004\u019d\t\u019d\u0004",
    "\u019e\t\u019e\u0004\u019f\t\u019f\u0004\u01a0\t\u01a0\u0004\u01a1\t",
    "\u01a1\u0004\u01a2\t\u01a2\u0004\u01a3\t\u01a3\u0004\u01a4\t\u01a4\u0004",
    "\u01a5\t\u01a5\u0004\u01a6\t\u01a6\u0004\u01a7\t\u01a7\u0004\u01a8\t",
    "\u01a8\u0004\u01a9\t\u01a9\u0004\u01aa\t\u01aa\u0004\u01ab\t\u01ab\u0004",
    "\u01ac\t\u01ac\u0004\u01ad\t\u01ad\u0004\u01ae\t\u01ae\u0004\u01af\t",
    "\u01af\u0004\u01b0\t\u01b0\u0004\u01b1\t\u01b1\u0004\u01b2\t\u01b2\u0004",
    "\u01b3\t\u01b3\u0004\u01b4\t\u01b4\u0004\u01b5\t\u01b5\u0004\u01b6\t",
    "\u01b6\u0004\u01b7\t\u01b7\u0004\u01b8\t\u01b8\u0004\u01b9\t\u01b9\u0004",
    "\u01ba\t\u01ba\u0004\u01bb\t\u01bb\u0004\u01bc\t\u01bc\u0004\u01bd\t",
    "\u01bd\u0004\u01be\t\u01be\u0004\u01bf\t\u01bf\u0004\u01c0\t\u01c0\u0004",
    "\u01c1\t\u01c1\u0004\u01c2\t\u01c2\u0004\u01c3\t\u01c3\u0004\u01c4\t",
    "\u01c4\u0004\u01c5\t\u01c5\u0004\u01c6\t\u01c6\u0004\u01c7\t\u01c7\u0004",
    "\u01c8\t\u01c8\u0004\u01c9\t\u01c9\u0004\u01ca\t\u01ca\u0004\u01cb\t",
    "\u01cb\u0004\u01cc\t\u01cc\u0004\u01cd\t\u01cd\u0004\u01ce\t\u01ce\u0004",
    "\u01cf\t\u01cf\u0004\u01d0\t\u01d0\u0004\u01d1\t\u01d1\u0004\u01d2\t",
    "\u01d2\u0004\u01d3\t\u01d3\u0004\u01d4\t\u01d4\u0004\u01d5\t\u01d5\u0004",
    "\u01d6\t\u01d6\u0004\u01d7\t\u01d7\u0004\u01d8\t\u01d8\u0004\u01d9\t",
    "\u01d9\u0004\u01da\t\u01da\u0004\u01db\t\u01db\u0003\u0002\u0007\u0002",
    "\u03b8\n\u0002\f\u0002\u000e\u0002\u03bb\u000b\u0002\u0003\u0002\u0003",
    "\u0002\u0003\u0003\u0003\u0003\u0007\u0003\u03c1\n\u0003\f\u0003\u000e",
    "\u0003\u03c4\u000b\u0003\u0003\u0004\u0003\u0004\u0005\u0004\u03c8\n",
    "\u0004\u0006\u0004\u03ca\n\u0004\r\u0004\u000e\u0004\u03cb\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u03d5\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u03dc\n\u0006\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007",
    "\u047b\n\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u0482",
    "\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0490\n\t\u0003\n\u0003\n\u0005",
    "\n\u0494\n\n\u0003\n\u0005\n\u0497\n\n\u0003\n\u0003\n\u0005\n\u049b",
    "\n\n\u0003\u000b\u0003\u000b\u0005\u000b\u049f\n\u000b\u0003\f\u0003",
    "\f\u0005\f\u04a3\n\f\u0003\r\u0003\r\u0003\r\u0005\r\u04a8\n\r\u0003",
    "\r\u0003\r\u0003\r\u0005\r\u04ad\n\r\u0005\r\u04af\n\r\u0003\u000e\u0003",
    "\u000e\u0005\u000e\u04b3\n\u000e\u0003\u000e\u0005\u000e\u04b6\n\u000e",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f",
    "\u04bd\n\u000f\u0003\u000f\u0005\u000f\u04c0\n\u000f\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005",
    "\u0010\u04c9\n\u0010\u0003\u0010\u0005\u0010\u04cc\n\u0010\u0003\u0011",
    "\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0005\u0014\u04d7\n\u0014\u0003\u0014\u0005",
    "\u0014\u04da\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014",
    "\u04df\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u04e4",
    "\n\u0014\u0003\u0014\u0005\u0014\u04e7\n\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0005\u0014\u04ec\n\u0014\u0003\u0015\u0003\u0015\u0005",
    "\u0015\u04f0\n\u0015\u0003\u0015\u0005\u0015\u04f3\n\u0015\u0003\u0015",
    "\u0003\u0015\u0005\u0015\u04f7\n\u0015\u0003\u0015\u0005\u0015\u04fa",
    "\n\u0015\u0003\u0015\u0005\u0015\u04fd\n\u0015\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0504\n\u0016\u0003",
    "\u0016\u0003\u0016\u0005\u0016\u0508\n\u0016\u0005\u0016\u050a\n\u0016",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u050f\n\u0017\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u051a\n\u0018\f\u0018\u000e",
    "\u0018\u051d\u000b\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018",
    "\u0522\n\u0018\u0003\u0018\u0005\u0018\u0525\n\u0018\u0003\u0019\u0003",
    "\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0005\u001a\u0535\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u053d\n\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0542\n\u001b\u0003\u001b",
    "\u0005\u001b\u0545\n\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005",
    "\u001b\u054a\n\u001b\u0003\u001b\u0005\u001b\u054d\n\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0005\u001b\u0552\n\u001b\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u055a",
    "\n\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u055f\n\u001c",
    "\u0003\u001c\u0005\u001c\u0562\n\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0005\u001c\u0567\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0005\u001d\u056d\n\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0005\u001d\u0572\n\u001d\u0003\u001d\u0003\u001d\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003!\u0005!\u0583\n",
    "!\u0003!\u0005!\u0586\n!\u0003!\u0005!\u0589\n!\u0003!\u0005!\u058c",
    "\n!\u0003\"\u0003\"\u0003\"\u0005\"\u0591\n\"\u0003#\u0003#\u0003$\u0003",
    "$\u0003$\u0003%\u0003%\u0005%\u059a\n%\u0003&\u0003&\u0003\'\u0003\'",
    "\u0003\'\u0003(\u0003(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003)\u0005",
    ")\u05a9\n)\u0003*\u0003*\u0003+\u0003+\u0003+\u0003,\u0003,\u0003-\u0003",
    "-\u0003-\u0003.\u0003.\u0003/\u0003/\u0003/\u0005/\u05ba\n/\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00050\u05c5\n0\u0003",
    "0\u00030\u00070\u05c9\n0\f0\u000e0\u05cc\u000b0\u00031\u00031\u0003",
    "1\u00031\u00032\u00032\u00033\u00033\u00034\u00034\u00034\u00034\u0005",
    "4\u05da\n4\u00035\u00035\u00036\u00036\u00036\u00037\u00037\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00058\u05e9\n8\u00039\u00039\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0005:\u05f2\n:\u0003:\u0003:\u0005:\u05f6\n",
    ":\u0003:\u0006:\u05f9\n:\r:\u000e:\u05fa\u0003:\u0003:\u0003:\u0003",
    ":\u0005:\u0601\n:\u0003;\u0003;\u0003;\u0003;\u0005;\u0607\n;\u0003",
    ";\u0005;\u060a\n;\u0003;\u0006;\u060d\n;\r;\u000e;\u060e\u0003;\u0003",
    ";\u0003;\u0005;\u0614\n;\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0005",
    "<\u061c\n<\u0003=\u0003=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003>\u0005",
    ">\u0626\n>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003?\u0003?\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u0639",
    "\n@\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0005A\u0641\nA\u0003",
    "A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003",
    "A\u0005A\u064e\nA\u0005A\u0650\nA\u0003A\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0003A\u0003A\u0005A\u065c\nA\u0005A\u065e\n",
    "A\u0003A\u0003A\u0003A\u0003A\u0003A\u0005A\u0665\nA\u0003B\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0005B\u066e\nB\u0003C\u0003C\u0003C\u0003",
    "C\u0005C\u0674\nC\u0003C\u0003C\u0003C\u0003C\u0003D\u0003D\u0003D\u0005",
    "D\u067d\nD\u0003E\u0003E\u0003F\u0003F\u0003F\u0003G\u0003G\u0003G\u0003",
    "G\u0003H\u0003H\u0003H\u0003H\u0005H\u068c\nH\u0003H\u0003H\u0003H\u0003",
    "H\u0003I\u0003I\u0003I\u0003I\u0005I\u0696\nI\u0003I\u0003I\u0003I\u0003",
    "I\u0003J\u0003J\u0003J\u0003J\u0005J\u06a0\nJ\u0003J\u0003J\u0003J\u0003",
    "J\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003K\u0005K\u06c8\nK\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0005L\u06df\nL\u0003",
    "M\u0003M\u0003N\u0003N\u0003O\u0003O\u0003O\u0003O\u0003O\u0003P\u0003",
    "P\u0003P\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0005R\u0703\nR\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0005R\u0715\nR\u0003R\u0005R\u0718\nR\u0003R\u0003R\u0003",
    "R\u0005R\u071d\nR\u0003R\u0005R\u0720\nR\u0003R\u0003R\u0003R\u0005",
    "R\u0725\nR\u0003R\u0005R\u0728\nR\u0003R\u0003R\u0003R\u0005R\u072d",
    "\nR\u0003R\u0005R\u0730\nR\u0003R\u0003R\u0003R\u0005R\u0735\nR\u0003",
    "R\u0005R\u0738\nR\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0005R\u0740",
    "\nR\u0003R\u0005R\u0743\nR\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0005R\u074b\nR\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0005R\u0758\nR\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0005R\u0763\nR\u0003R\u0007R\u0766\n",
    "R\fR\u000eR\u0769\u000bR\u0003R\u0005R\u076c\nR\u0003R\u0003R\u0003",
    "R\u0003R\u0005R\u0772\nR\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0005R\u0789\nR\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0005R\u0795\nR\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0005R\u07a0\nR\u0003",
    "R\u0007R\u07a3\nR\fR\u000eR\u07a6\u000bR\u0003R\u0005R\u07a9\nR\u0003",
    "R\u0003R\u0003R\u0003R\u0005R\u07af\nR\u0005R\u07b1\nR\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0005",
    "R\u07be\nR\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0006R\u07d3\nR\rR\u000eR\u07d4\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0005R\u07dc\nR\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0005",
    "R\u07e5\nR\u0003R\u0003R\u0003R\u0005R\u07ea\nR\u0003R\u0005R\u07ed",
    "\nR\u0003R\u0003R\u0003R\u0005R\u07f2\nR\u0003R\u0005R\u07f5\nR\u0003",
    "R\u0003R\u0003R\u0005R\u07fa\nR\u0003R\u0006R\u07fd\nR\rR\u000eR\u07fe",
    "\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0005R\u081b\nR\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0005R\u0822\nR\u0003R\u0006R\u0825\nR\rR\u000e",
    "R\u0826\u0003R\u0003R\u0003R\u0003R\u0003R\u0005R\u082e\nR\u0005R\u0830",
    "\nR\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0005",
    "R\u083b\nR\u0003R\u0003R\u0003R\u0003R\u0005R\u0841\nR\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0005R\u0850\nR\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003",
    "S\u0003S\u0003S\u0003S\u0003S\u0003S\u0005S\u085e\nS\u0003S\u0005S\u0861",
    "\nS\u0005S\u0863\nS\u0003S\u0003S\u0003S\u0005S\u0868\nS\u0003S\u0003",
    "S\u0005S\u086c\nS\u0003S\u0005S\u086f\nS\u0005S\u0871\nS\u0003S\u0003",
    "S\u0003S\u0003S\u0005S\u0877\nS\u0003S\u0005S\u087a\nS\u0005S\u087c",
    "\nS\u0003S\u0003S\u0003S\u0003S\u0005S\u0882\nS\u0005S\u0884\nS\u0003",
    "S\u0003S\u0003T\u0003T\u0003T\u0003T\u0003T\u0003U\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0005",
    "U\u089a\nU\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0005U\u08a2\n",
    "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0005U\u08aa\nU\u0006U\u08ac",
    "\nU\rU\u000eU\u08ad\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0005U\u08b7\nU\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0005V\u08cc\nV\u0003V\u0003V\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003W\u0003W\u0005W\u08d9\nW\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0005",
    "W\u08e8\nW\u0006W\u08ea\nW\rW\u000eW\u08eb\u0003X\u0003X\u0003X\u0003",
    "X\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0003[\u0003[\u0003[\u0003[\u0003\\\u0003\\\u0003\\",
    "\u0003\\\u0003]\u0003]\u0003]\u0003]\u0003]\u0003^\u0003^\u0003^\u0003",
    "^\u0005^\u090f\n^\u0003^\u0005^\u0912\n^\u0003^\u0006^\u0915\n^\r^\u000e",
    "^\u0916\u0003_\u0003_\u0003_\u0003_\u0003_\u0003_\u0003`\u0003`\u0003",
    "`\u0003`\u0003`\u0003`\u0003a\u0003a\u0003a\u0003a\u0005a\u0929\na\u0003",
    "a\u0005a\u092c\na\u0003a\u0003a\u0003a\u0005a\u0931\na\u0003a\u0003",
    "a\u0003b\u0003b\u0003b\u0003b\u0003c\u0003c\u0003c\u0003c\u0003c\u0003",
    "c\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0003e\u0003e\u0003e\u0003",
    "e\u0003e\u0003e\u0005e\u094b\ne\u0003f\u0003f\u0003f\u0003f\u0003f\u0003",
    "f\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0005g\u0959\ng\u0003g\u0003",
    "g\u0003g\u0005g\u095e\ng\u0003g\u0003g\u0003h\u0003h\u0003h\u0003h\u0005",
    "h\u0966\nh\u0003h\u0006h\u0969\nh\rh\u000eh\u096a\u0003h\u0003h\u0003",
    "h\u0003h\u0003h\u0005h\u0972\nh\u0003i\u0003i\u0003i\u0003i\u0003i\u0003",
    "i\u0003i\u0003j\u0003j\u0003j\u0003j\u0003j\u0003k\u0003k\u0003k\u0003",
    "k\u0003k\u0003k\u0003k\u0005k\u0987\nk\u0003k\u0003k\u0003l\u0003l\u0003",
    "l\u0003l\u0003l\u0003m\u0003m\u0003m\u0003m\u0003n\u0003n\u0003n\u0003",
    "n\u0003o\u0003o\u0003o\u0003o\u0003o\u0003p\u0003p\u0003p\u0003p\u0003",
    "p\u0003q\u0003q\u0003q\u0003q\u0003q\u0003r\u0003r\u0003r\u0003r\u0003",
    "r\u0005r\u09ac\nr\u0003r\u0003r\u0003r\u0005r\u09b1\nr\u0003r\u0003",
    "r\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003t\u0003t\u0003t\u0003",
    "t\u0003t\u0003u\u0003u\u0003u\u0003u\u0005u\u09c4\nu\u0003u\u0003u\u0003",
    "v\u0003v\u0003v\u0003v\u0003w\u0003w\u0003w\u0003w\u0005w\u09d0\nw\u0003",
    "w\u0005w\u09d3\nw\u0003w\u0003w\u0003w\u0005w\u09d8\nw\u0003w\u0005",
    "w\u09db\nw\u0003x\u0003x\u0003x\u0003x\u0005x\u09e1\nx\u0003x\u0003",
    "x\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0005z\u09f0\nz\u0003z\u0003z\u0003z\u0005z\u09f5\nz\u0003",
    "z\u0003z\u0003{\u0003{\u0003{\u0003{\u0005{\u09fd\n{\u0003{\u0005{\u0a00",
    "\n{\u0003{\u0003{\u0003{\u0005{\u0a05\n{\u0003{\u0003{\u0003{\u0005",
    "{\u0a0a\n{\u0003{\u0005{\u0a0d\n{\u0003|\u0003|\u0003|\u0003|\u0003",
    "|\u0003}\u0003}\u0003}\u0003}\u0003}\u0003}\u0003~\u0003~\u0003~\u0003",
    "~\u0003~\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u0080",
    "\u0003\u0080\u0005\u0080\u0a25\n\u0080\u0003\u0080\u0003\u0080\u0003",
    "\u0080\u0003\u0080\u0003\u0080\u0005\u0080\u0a2c\n\u0080\u0003\u0080",
    "\u0003\u0080\u0003\u0080\u0005\u0080\u0a31\n\u0080\u0003\u0080\u0003",
    "\u0080\u0003\u0080\u0005\u0080\u0a36\n\u0080\u0003\u0080\u0003\u0080",
    "\u0003\u0080\u0006\u0080\u0a3b\n\u0080\r\u0080\u000e\u0080\u0a3c\u0003",
    "\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u0a44",
    "\n\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0082",
    "\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082",
    "\u0005\u0082\u0a51\n\u0082\u0003\u0083\u0003\u0083\u0003\u0083\u0003",
    "\u0083\u0005\u0083\u0a57\n\u0083\u0003\u0083\u0003\u0083\u0003\u0083",
    "\u0005\u0083\u0a5c\n\u0083\u0003\u0083\u0003\u0083\u0003\u0084\u0003",
    "\u0084\u0003\u0084\u0003\u0084\u0005\u0084\u0a64\n\u0084\u0003\u0084",
    "\u0003\u0084\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085",
    "\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086",
    "\u0003\u0086\u0005\u0086\u0a74\n\u0086\u0003\u0086\u0003\u0086\u0003",
    "\u0087\u0003\u0087\u0003\u0087\u0005\u0087\u0a7b\n\u0087\u0003\u0087",
    "\u0003\u0087\u0003\u0087\u0005\u0087\u0a80\n\u0087\u0003\u0087\u0006",
    "\u0087\u0a83\n\u0087\r\u0087\u000e\u0087\u0a84\u0003\u0087\u0005\u0087",
    "\u0a88\n\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0005",
    "\u0087\u0a8e\n\u0087\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087",
    "\u0005\u0087\u0a94\n\u0087\u0003\u0088\u0003\u0088\u0003\u0088\u0005",
    "\u0088\u0a99\n\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0005\u0088",
    "\u0a9e\n\u0088\u0003\u0088\u0006\u0088\u0aa1\n\u0088\r\u0088\u000e\u0088",
    "\u0aa2\u0003\u0088\u0005\u0088\u0aa6\n\u0088\u0003\u0088\u0003\u0088",
    "\u0003\u0088\u0003\u0088\u0005\u0088\u0aac\n\u0088\u0003\u0088\u0003",
    "\u0088\u0003\u0088\u0003\u0088\u0005\u0088\u0ab2\n\u0088\u0003\u0089",
    "\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0005\u0089\u0ab9\n",
    "\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0005\u0089\u0abe\n\u0089",
    "\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003\u0089",
    "\u0005\u0089\u0ac6\n\u0089\u0003\u0089\u0003\u0089\u0003\u0089\u0003",
    "\u0089\u0005\u0089\u0acc\n\u0089\u0006\u0089\u0ace\n\u0089\r\u0089\u000e",
    "\u0089\u0acf\u0003\u0089\u0003\u0089\u0005\u0089\u0ad4\n\u0089\u0003",
    "\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003",
    "\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003",
    "\u008a\u0003\u008a\u0003\u008a\u0003\u008a\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0003\u008b\u0005\u008b\u0af1\n\u008b\u0003\u008c",
    "\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c",
    "\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0005\u008c\u0afe\n",
    "\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0005\u008c\u0b04",
    "\n\u008c\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d",
    "\u0003\u008d\u0003\u008d\u0003\u008d\u0005\u008d\u0b0e\n\u008d\u0003",
    "\u008d\u0005\u008d\u0b11\n\u008d\u0003\u008e\u0003\u008e\u0003\u008e",
    "\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e",
    "\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f",
    "\u0003\u008f\u0003\u008f\u0003\u008f\u0005\u008f\u0b25\n\u008f\u0003",
    "\u008f\u0003\u008f\u0005\u008f\u0b29\n\u008f\u0003\u008f\u0003\u008f",
    "\u0005\u008f\u0b2d\n\u008f\u0003\u008f\u0006\u008f\u0b30\n\u008f\r\u008f",
    "\u000e\u008f\u0b31\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003",
    "\u008f\u0003\u008f\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003",
    "\u0090\u0003\u0090\u0003\u0090\u0005\u0090\u0b41\n\u0090\u0003\u0090",
    "\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0005\u0090\u0b48\n",
    "\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003",
    "\u0090\u0003\u0090\u0005\u0090\u0b51\n\u0090\u0003\u0090\u0003\u0090",
    "\u0003\u0090\u0003\u0090\u0007\u0090\u0b57\n\u0090\f\u0090\u000e\u0090",
    "\u0b5a\u000b\u0090\u0005\u0090\u0b5c\n\u0090\u0003\u0090\u0003\u0090",
    "\u0003\u0090\u0005\u0090\u0b61\n\u0090\u0003\u0090\u0003\u0090\u0003",
    "\u0090\u0005\u0090\u0b66\n\u0090\u0003\u0090\u0003\u0090\u0003\u0090",
    "\u0003\u0090\u0006\u0090\u0b6c\n\u0090\r\u0090\u000e\u0090\u0b6d\u0003",
    "\u0090\u0003\u0090\u0006\u0090\u0b72\n\u0090\r\u0090\u000e\u0090\u0b73",
    "\u0003\u0090\u0003\u0090\u0005\u0090\u0b78\n\u0090\u0003\u0090\u0003",
    "\u0090\u0007\u0090\u0b7c\n\u0090\f\u0090\u000e\u0090\u0b7f\u000b\u0090",
    "\u0007\u0090\u0b81\n\u0090\f\u0090\u000e\u0090\u0b84\u000b\u0090\u0003",
    "\u0090\u0005\u0090\u0b87\n\u0090\u0003\u0090\u0003\u0090\u0003\u0090",
    "\u0003\u0090\u0003\u0090\u0005\u0090\u0b8e\n\u0090\u0003\u0090\u0003",
    "\u0090\u0003\u0090\u0003\u0090\u0007\u0090\u0b94\n\u0090\f\u0090\u000e",
    "\u0090\u0b97\u000b\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090",
    "\u0003\u0090\u0005\u0090\u0b9e\n\u0090\u0003\u0090\u0003\u0090\u0003",
    "\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0005\u0090\u0ba7",
    "\n\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0005\u0090\u0bac\n\u0090",
    "\u0003\u0090\u0003\u0090\u0005\u0090\u0bb0\n\u0090\u0003\u0090\u0005",
    "\u0090\u0bb3\n\u0090\u0006\u0090\u0bb5\n\u0090\r\u0090\u000e\u0090\u0bb6",
    "\u0003\u0090\u0003\u0090\u0007\u0090\u0bbb\n\u0090\f\u0090\u000e\u0090",
    "\u0bbe\u000b\u0090\u0007\u0090\u0bc0\n\u0090\f\u0090\u000e\u0090\u0bc3",
    "\u000b\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090",
    "\u0005\u0090\u0bca\n\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003",
    "\u0090\u0007\u0090\u0bd0\n\u0090\f\u0090\u000e\u0090\u0bd3\u000b\u0090",
    "\u0003\u0090\u0003\u0090\u0003\u0090\u0005\u0090\u0bd8\n\u0090\u0003",
    "\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0005\u0090\u0bde\n\u0090",
    "\u0003\u0090\u0005\u0090\u0be1\n\u0090\u0003\u0090\u0003\u0090\u0003",
    "\u0090\u0005\u0090\u0be6\n\u0090\u0003\u0090\u0005\u0090\u0be9\n\u0090",
    "\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0005\u0090",
    "\u0bf0\n\u0090\u0005\u0090\u0bf2\n\u0090\u0003\u0090\u0005\u0090\u0bf5",
    "\n\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0005\u0090",
    "\u0bfb\n\u0090\u0003\u0090\u0005\u0090\u0bfe\n\u0090\u0003\u0090\u0003",
    "\u0090\u0003\u0090\u0005\u0090\u0c03\n\u0090\u0003\u0090\u0005\u0090",
    "\u0c06\n\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0005\u0090\u0c0b",
    "\n\u0090\u0003\u0090\u0005\u0090\u0c0e\n\u0090\u0003\u0090\u0003\u0090",
    "\u0003\u0090\u0005\u0090\u0c13\n\u0090\u0003\u0090\u0005\u0090\u0c16",
    "\n\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0005\u0090\u0c1b\n\u0090",
    "\u0003\u0091\u0005\u0091\u0c1e\n\u0091\u0003\u0091\u0005\u0091\u0c21",
    "\n\u0091\u0003\u0091\u0005\u0091\u0c24\n\u0091\u0003\u0091\u0003\u0091",
    "\u0003\u0091\u0003\u0091\u0003\u0091\u0005\u0091\u0c2b\n\u0091\u0006",
    "\u0091\u0c2d\n\u0091\r\u0091\u000e\u0091\u0c2e\u0003\u0092\u0003\u0092",
    "\u0003\u0092\u0003\u0092\u0003\u0092\u0005\u0092\u0c36\n\u0092\u0003",
    "\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0005\u0093\u0c3d",
    "\n\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0005\u0093",
    "\u0c43\n\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003",
    "\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003",
    "\u0093\u0005\u0093\u0c50\n\u0093\u0003\u0093\u0003\u0093\u0005\u0093",
    "\u0c54\n\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0005\u0093\u0c59",
    "\n\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093",
    "\u0003\u0093\u0003\u0093\u0003\u0093\u0005\u0093\u0c63\n\u0093\u0003",
    "\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003\u0093\u0003",
    "\u0093\u0005\u0093\u0c6c\n\u0093\u0003\u0093\u0003\u0093\u0005\u0093",
    "\u0c70\n\u0093\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003",
    "\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0005",
    "\u0094\u0c7c\n\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094",
    "\u0005\u0094\u0c82\n\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0006",
    "\u0094\u0c87\n\u0094\r\u0094\u000e\u0094\u0c88\u0003\u0094\u0003\u0094",
    "\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094",
    "\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094",
    "\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u0c9d\n",
    "\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u0ca1\n\u0094\u0003\u0095",
    "\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0005\u0095",
    "\u0ca9\n\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003",
    "\u0095\u0003\u0095\u0003\u0095\u0005\u0095\u0cb2\n\u0095\u0003\u0095",
    "\u0003\u0095\u0003\u0095\u0003\u0095\u0005\u0095\u0cb8\n\u0095\u0003",
    "\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0005\u0095\u0cbe\n\u0095",
    "\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095\u0003\u0095",
    "\u0006\u0095\u0cc6\n\u0095\r\u0095\u000e\u0095\u0cc7\u0003\u0095\u0003",
    "\u0095\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003",
    "\u0096\u0005\u0096\u0cd2\n\u0096\u0003\u0096\u0003\u0096\u0005\u0096",
    "\u0cd6\n\u0096\u0003\u0096\u0005\u0096\u0cd9\n\u0096\u0003\u0096\u0003",
    "\u0096\u0005\u0096\u0cdd\n\u0096\u0003\u0096\u0003\u0096\u0003\u0096",
    "\u0005\u0096\u0ce2\n\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003",
    "\u0096\u0005\u0096\u0ce8\n\u0096\u0003\u0096\u0005\u0096\u0ceb\n\u0096",
    "\u0003\u0096\u0003\u0096\u0005\u0096\u0cef\n\u0096\u0003\u0096\u0003",
    "\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0006\u0096\u0cf7",
    "\n\u0096\r\u0096\u000e\u0096\u0cf8\u0003\u0096\u0005\u0096\u0cfc\n\u0096",
    "\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097",
    "\u0005\u0097\u0d04\n\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0003",
    "\u0097\u0003\u0097\u0003\u0097\u0005\u0097\u0d0c\n\u0097\u0003\u0097",
    "\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0005\u0097\u0d13\n",
    "\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0006",
    "\u0097\u0d1a\n\u0097\r\u0097\u000e\u0097\u0d1b\u0005\u0097\u0d1e\n\u0097",
    "\u0003\u0097\u0003\u0097\u0003\u0097\u0005\u0097\u0d23\n\u0097\u0003",
    "\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0005\u0097\u0d29\n\u0097",
    "\u0003\u0097\u0006\u0097\u0d2c\n\u0097\r\u0097\u000e\u0097\u0d2d\u0005",
    "\u0097\u0d30\n\u0097\u0003\u0097\u0005\u0097\u0d33\n\u0097\u0003\u0097",
    "\u0003\u0097\u0003\u0097\u0005\u0097\u0d38\n\u0097\u0003\u0097\u0005",
    "\u0097\u0d3b\n\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0005\u0097",
    "\u0d40\n\u0097\u0003\u0097\u0003\u0097\u0003\u0098\u0003\u0098\u0003",
    "\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003",
    "\u0098\u0003\u0098\u0003\u0098\u0005\u0098\u0d4f\n\u0098\u0003\u0098",
    "\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0005\u0098\u0d56\n",
    "\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0006",
    "\u0098\u0d5d\n\u0098\r\u0098\u000e\u0098\u0d5e\u0005\u0098\u0d61\n\u0098",
    "\u0003\u0098\u0003\u0098\u0003\u0098\u0005\u0098\u0d66\n\u0098\u0003",
    "\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0005\u0098\u0d6c\n\u0098",
    "\u0003\u0098\u0006\u0098\u0d6f\n\u0098\r\u0098\u000e\u0098\u0d70\u0005",
    "\u0098\u0d73\n\u0098\u0003\u0098\u0005\u0098\u0d76\n\u0098\u0003\u0098",
    "\u0003\u0098\u0003\u0098\u0005\u0098\u0d7b\n\u0098\u0003\u0098\u0005",
    "\u0098\u0d7e\n\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0005\u0098",
    "\u0d83\n\u0098\u0003\u0098\u0003\u0098\u0003\u0099\u0003\u0099\u0003",
    "\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003",
    "\u0099\u0005\u0099\u0d90\n\u0099\u0003\u0099\u0003\u0099\u0003\u0099",
    "\u0005\u0099\u0d95\n\u0099\u0003\u009a\u0003\u009a\u0003\u009a\u0003",
    "\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0005\u009a\u0d9e\n\u009a",
    "\u0003\u009a\u0003\u009a\u0003\u009a\u0005\u009a\u0da3\n\u009a\u0003",
    "\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0005\u009a\u0da9\n\u009a",
    "\u0003\u009a\u0003\u009a\u0005\u009a\u0dad\n\u009a\u0003\u009a\u0003",
    "\u009a\u0005\u009a\u0db1\n\u009a\u0003\u009b\u0003\u009b\u0003\u009b",
    "\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b",
    "\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009b",
    "\u0005\u009b\u0dc2\n\u009b\u0005\u009b\u0dc4\n\u009b\u0003\u009c\u0003",
    "\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003",
    "\u009c\u0005\u009c\u0dce\n\u009c\u0003\u009c\u0003\u009c\u0003\u009c",
    "\u0005\u009c\u0dd3\n\u009c\u0005\u009c\u0dd5\n\u009c\u0003\u009c\u0003",
    "\u009c\u0005\u009c\u0dd9\n\u009c\u0003\u009d\u0003\u009d\u0003\u009d",
    "\u0003\u009d\u0005\u009d\u0ddf\n\u009d\u0003\u009d\u0003\u009d\u0003",
    "\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0005\u009d\u0de7\n\u009d",
    "\u0003\u009d\u0007\u009d\u0dea\n\u009d\f\u009d\u000e\u009d\u0ded\u000b",
    "\u009d\u0005\u009d\u0def\n\u009d\u0003\u009d\u0003\u009d\u0003\u009d",
    "\u0003\u009d\u0007\u009d\u0df5\n\u009d\f\u009d\u000e\u009d\u0df8\u000b",
    "\u009d\u0005\u009d\u0dfa\n\u009d\u0003\u009d\u0003\u009d\u0003\u009d",
    "\u0005\u009d\u0dff\n\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0005",
    "\u009d\u0e04\n\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0005\u009d",
    "\u0e09\n\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0005\u009d\u0e0e",
    "\n\u009d\u0003\u009d\u0003\u009d\u0003\u009d\u0005\u009d\u0e13\n\u009d",
    "\u0003\u009d\u0003\u009d\u0003\u009d\u0005\u009d\u0e18\n\u009d\u0003",
    "\u009d\u0003\u009d\u0005\u009d\u0e1c\n\u009d\u0003\u009d\u0003\u009d",
    "\u0003\u009d\u0005\u009d\u0e21\n\u009d\u0003\u009e\u0003\u009e\u0003",
    "\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003",
    "\u009e\u0005\u009e\u0e2c\n\u009e\u0003\u009e\u0007\u009e\u0e2f\n\u009e",
    "\f\u009e\u000e\u009e\u0e32\u000b\u009e\u0005\u009e\u0e34\n\u009e\u0003",
    "\u009e\u0005\u009e\u0e37\n\u009e\u0003\u009e\u0003\u009e\u0003\u009e",
    "\u0005\u009e\u0e3c\n\u009e\u0003\u009e\u0005\u009e\u0e3f\n\u009e\u0003",
    "\u009e\u0003\u009e\u0003\u009e\u0005\u009e\u0e44\n\u009e\u0003\u009e",
    "\u0005\u009e\u0e47\n\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0005",
    "\u009e\u0e4c\n\u009e\u0003\u009e\u0005\u009e\u0e4f\n\u009e\u0003\u009e",
    "\u0003\u009e\u0003\u009e\u0005\u009e\u0e54\n\u009e\u0003\u009e\u0005",
    "\u009e\u0e57\n\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0005\u009e",
    "\u0e5c\n\u009e\u0003\u009e\u0005\u009e\u0e5f\n\u009e\u0003\u009e\u0003",
    "\u009e\u0003\u009e\u0005\u009e\u0e64\n\u009e\u0003\u009e\u0003\u009e",
    "\u0003\u009e\u0003\u009e\u0005\u009e\u0e6a\n\u009e\u0003\u009e\u0003",
    "\u009e\u0003\u009e\u0005\u009e\u0e6f\n\u009e\u0003\u009e\u0005\u009e",
    "\u0e72\n\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0005\u009e\u0e77",
    "\n\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e\u0003\u009e",
    "\u0005\u009e\u0e7e\n\u009e\u0005\u009e\u0e80\n\u009e\u0003\u009f\u0003",
    "\u009f\u0003\u009f\u0003\u009f\u0005\u009f\u0e86\n\u009f\u0003\u009f",
    "\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0003\u009f",
    "\u0005\u009f\u0e8f\n\u009f\u0003\u009f\u0003\u009f\u0003\u009f\u0005",
    "\u009f\u0e94\n\u009f\u0005\u009f\u0e96\n\u009f\u0003\u00a0\u0003\u00a0",
    "\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0",
    "\u0003\u00a0\u0003\u00a0\u0005\u00a0\u0ea2\n\u00a0\u0003\u00a1\u0003",
    "\u00a1\u0003\u00a1\u0003\u00a1\u0005\u00a1\u0ea8\n\u00a1\u0003\u00a1",
    "\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1",
    "\u0003\u00a1\u0007\u00a1\u0eb2\n\u00a1\f\u00a1\u000e\u00a1\u0eb5\u000b",
    "\u00a1\u0005\u00a1\u0eb7\n\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1",
    "\u0005\u00a1\u0ebc\n\u00a1\u0005\u00a1\u0ebe\n\u00a1\u0003\u00a2\u0003",
    "\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0003",
    "\u00a2\u0005\u00a2\u0ec8\n\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2",
    "\u0005\u00a2\u0ecd\n\u00a2\u0005\u00a2\u0ecf\n\u00a2\u0003\u00a2\u0003",
    "\u00a2\u0005\u00a2\u0ed3\n\u00a2\u0003\u00a3\u0003\u00a3\u0003\u00a3",
    "\u0003\u00a3\u0005\u00a3\u0ed9\n\u00a3\u0003\u00a3\u0003\u00a3\u0003",
    "\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003",
    "\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0003",
    "\u00a3\u0003\u00a3\u0005\u00a3\u0eeb\n\u00a3\u0005\u00a3\u0eed\n\u00a3",
    "\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a4",
    "\u0003\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a5\u0003\u00a5\u0003\u00a5",
    "\u0003\u00a5\u0005\u00a5\u0efc\n\u00a5\u0003\u00a5\u0003\u00a5\u0003",
    "\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003",
    "\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003",
    "\u00a5\u0003\u00a5\u0005\u00a5\u0f0e\n\u00a5\u0003\u00a5\u0003\u00a5",
    "\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0005\u00a5\u0f16\n",
    "\u00a5\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003",
    "\u00a6\u0003\u00a6\u0003\u00a6\u0005\u00a6\u0f20\n\u00a6\u0003\u00a7",
    "\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7",
    "\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7",
    "\u0003\u00a7\u0005\u00a7\u0f30\n\u00a7\u0003\u00a8\u0003\u00a8\u0003",
    "\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003",
    "\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a9\u0003\u00a9\u0003",
    "\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0005\u00a9\u0f45",
    "\n\u00a9\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa",
    "\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0005\u00aa\u0f50\n",
    "\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0005\u00aa\u0f56",
    "\n\u00aa\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab",
    "\u0003\u00ab\u0003\u00ab\u0005\u00ab\u0f5f\n\u00ab\u0003\u00ab\u0003",
    "\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0005",
    "\u00ab\u0f68\n\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab\u0003\u00ab",
    "\u0005\u00ab\u0f6e\n\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003",
    "\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u0f77\n\u00ac",
    "\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u0f7c\n\u00ac\u0003",
    "\u00ac\u0005\u00ac\u0f7f\n\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac",
    "\u0005\u00ac\u0f84\n\u00ac\u0003\u00ac\u0005\u00ac\u0f87\n\u00ac\u0003",
    "\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u0f8c\n\u00ac\u0003\u00ac",
    "\u0005\u00ac\u0f8f\n\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003",
    "\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u0f97\n\u00ac\u0003\u00ac",
    "\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u0f9d\n\u00ac\u0006",
    "\u00ac\u0f9f\n\u00ac\r\u00ac\u000e\u00ac\u0fa0\u0003\u00ac\u0003\u00ac",
    "\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u0fa8\n\u00ac\u0003",
    "\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u0fae\n\u00ac",
    "\u0006\u00ac\u0fb0\n\u00ac\r\u00ac\u000e\u00ac\u0fb1\u0003\u00ac\u0005",
    "\u00ac\u0fb5\n\u00ac\u0005\u00ac\u0fb7\n\u00ac\u0003\u00ac\u0005\u00ac",
    "\u0fba\n\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u0fbf",
    "\n\u00ac\u0003\u00ac\u0005\u00ac\u0fc2\n\u00ac\u0003\u00ac\u0003\u00ac",
    "\u0003\u00ac\u0005\u00ac\u0fc7\n\u00ac\u0003\u00ac\u0005\u00ac\u0fca",
    "\n\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0005\u00ac\u0fcf\n\u00ac",
    "\u0003\u00ac\u0005\u00ac\u0fd2\n\u00ac\u0003\u00ac\u0003\u00ac\u0003",
    "\u00ac\u0005\u00ac\u0fd7\n\u00ac\u0003\u00ac\u0005\u00ac\u0fda\n\u00ac",
    "\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad",
    "\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad",
    "\u0003\u00ad\u0005\u00ad\u0fe9\n\u00ad\u0003\u00ad\u0003\u00ad\u0003",
    "\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003",
    "\u00ad\u0005\u00ad\u0ff4\n\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00ae",
    "\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae",
    "\u0003\u00ae\u0005\u00ae\u1000\n\u00ae\u0003\u00af\u0003\u00af\u0003",
    "\u00af\u0003\u00af\u0003\u00af\u0005\u00af\u1007\n\u00af\u0003\u00b0",
    "\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0\u100e\n",
    "\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0\u1012\n\u00b0\u0003\u00b0",
    "\u0003\u00b0\u0003\u00b0\u0005\u00b0\u1017\n\u00b0\u0003\u00b0\u0005",
    "\u00b0\u101a\n\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0",
    "\u101f\n\u00b0\u0003\u00b0\u0005\u00b0\u1022\n\u00b0\u0003\u00b0\u0003",
    "\u00b0\u0003\u00b0\u0005\u00b0\u1027\n\u00b0\u0003\u00b0\u0005\u00b0",
    "\u102a\n\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003",
    "\u00b0\u0003\u00b0\u0003\u00b0\u0005\u00b0\u1033\n\u00b0\u0003\u00b1",
    "\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0005\u00b1\u103a\n",
    "\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b2\u0003",
    "\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003",
    "\u00b2\u0003\u00b2\u0005\u00b2\u1049\n\u00b2\u0003\u00b2\u0003\u00b2",
    "\u0005\u00b2\u104d\n\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0005",
    "\u00b2\u1052\n\u00b2\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3",
    "\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0005\u00b3",
    "\u105d\n\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003",
    "\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0005\u00b3\u1067\n\u00b3",
    "\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3",
    "\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0005\u00b3\u1073\n",
    "\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0003\u00b3\u0007\u00b3\u1079",
    "\n\u00b3\f\u00b3\u000e\u00b3\u107c\u000b\u00b3\u0003\u00b4\u0003\u00b4",
    "\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0005\u00b4\u1083\n\u00b4\u0003",
    "\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5\u0003",
    "\u00b5\u0005\u00b5\u108c\n\u00b5\u0003\u00b5\u0003\u00b5\u0003\u00b5",
    "\u0005\u00b5\u1091\n\u00b5\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003",
    "\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0005",
    "\u00b6\u109c\n\u00b6\u0003\u00b6\u0005\u00b6\u109f\n\u00b6\u0003\u00b6",
    "\u0003\u00b6\u0005\u00b6\u10a3\n\u00b6\u0003\u00b7\u0003\u00b7\u0003",
    "\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u10ab\n\u00b7",
    "\u0003\u00b7\u0003\u00b7\u0005\u00b7\u10af\n\u00b7\u0003\u00b7\u0003",
    "\u00b7\u0005\u00b7\u10b3\n\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7",
    "\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u10bb\n\u00b7\u0003",
    "\u00b7\u0006\u00b7\u10be\n\u00b7\r\u00b7\u000e\u00b7\u10bf\u0003\u00b7",
    "\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7",
    "\u10c8\n\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u10cd",
    "\n\u00b7\u0003\u00b7\u0003\u00b7\u0007\u00b7\u10d1\n\u00b7\f\u00b7\u000e",
    "\u00b7\u10d4\u000b\u00b7\u0006\u00b7\u10d6\n\u00b7\r\u00b7\u000e\u00b7",
    "\u10d7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003",
    "\u00b7\u0003\u00b7\u0005\u00b7\u10e1\n\u00b7\u0003\u00b7\u0005\u00b7",
    "\u10e4\n\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u10e9",
    "\n\u00b7\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8",
    "\u0005\u00b8\u10f0\n\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003",
    "\u00b8\u0005\u00b8\u10f6\n\u00b8\u0005\u00b8\u10f8\n\u00b8\u0003\u00b8",
    "\u0003\u00b8\u0003\u00b8\u0005\u00b8\u10fd\n\u00b8\u0003\u00b8\u0003",
    "\u00b8\u0003\u00b8\u0003\u00b8\u0005\u00b8\u1103\n\u00b8\u0003\u00b8",
    "\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0005\u00b8\u1109\n\u00b8\u0003",
    "\u00b8\u0003\u00b8\u0003\u00b8\u0005\u00b8\u110e\n\u00b8\u0003\u00b8",
    "\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0005\u00b8\u1114\n\u00b8\u0003",
    "\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9\u111b",
    "\n\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9\u1120\n\u00b9",
    "\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9\u1125\n\u00b9\u0003",
    "\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9\u112a\n\u00b9\u0003\u00b9",
    "\u0005\u00b9\u112d\n\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9\u1131",
    "\n\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9\u1135\n\u00b9\u0003\u00b9",
    "\u0003\u00b9\u0005\u00b9\u1139\n\u00b9\u0003\u00b9\u0003\u00b9\u0005",
    "\u00b9\u113d\n\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9",
    "\u1142\n\u00b9\u0003\u00b9\u0003\u00b9\u0005\u00b9\u1146\n\u00b9\u0003",
    "\u00b9\u0003\u00b9\u0005\u00b9\u114a\n\u00b9\u0003\u00ba\u0003\u00ba",
    "\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba",
    "\u0005\u00ba\u1154\n\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003",
    "\u00ba\u0005\u00ba\u115a\n\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba",
    "\u0003\u00ba\u0003\u00ba\u0005\u00ba\u1161\n\u00ba\u0003\u00ba\u0005",
    "\u00ba\u1164\n\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba",
    "\u0005\u00ba\u116a\n\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003",
    "\u00ba\u0005\u00ba\u1170\n\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba",
    "\u0007\u00ba\u1175\n\u00ba\f\u00ba\u000e\u00ba\u1178\u000b\u00ba\u0003",
    "\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba\u117d\n\u00ba\u0005\u00ba",
    "\u117f\n\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba\u1184",
    "\n\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba",
    "\u118a\n\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0005",
    "\u00ba\u1190\n\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0007\u00ba",
    "\u1195\n\u00ba\f\u00ba\u000e\u00ba\u1198\u000b\u00ba\u0003\u00ba\u0005",
    "\u00ba\u119b\n\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba\u119f\n\u00ba",
    "\u0003\u00ba\u0005\u00ba\u11a2\n\u00ba\u0003\u00ba\u0003\u00ba\u0003",
    "\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003",
    "\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba\u11b0\n\u00ba",
    "\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba\u11b5\n\u00ba\u0003",
    "\u00ba\u0003\u00ba\u0005\u00ba\u11b9\n\u00ba\u0003\u00ba\u0003\u00ba",
    "\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba",
    "\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba\u11c6\n\u00ba\u0003",
    "\u00ba\u0005\u00ba\u11c9\n\u00ba\u0005\u00ba\u11cb\n\u00ba\u0003\u00ba",
    "\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba",
    "\u11d3\n\u00ba\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb\u11dd\n\u00bb",
    "\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb\u11e3\n",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0005",
    "\u00bb\u11ea\n\u00bb\u0003\u00bb\u0005\u00bb\u11ed\n\u00bb\u0003\u00bb",
    "\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb\u11f3\n\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb\u11f9\n\u00bb",
    "\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0007\u00bb\u11fe\n\u00bb\f\u00bb",
    "\u000e\u00bb\u1201\u000b\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0005",
    "\u00bb\u1206\n\u00bb\u0005\u00bb\u1208\n\u00bb\u0003\u00bb\u0003\u00bb",
    "\u0003\u00bb\u0005\u00bb\u120d\n\u00bb\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0005\u00bb\u1213\n\u00bb\u0003\u00bb\u0003\u00bb",
    "\u0003\u00bb\u0003\u00bb\u0005\u00bb\u1219\n\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb\u121f\n\u00bb\u0003\u00bb",
    "\u0003\u00bb\u0003\u00bb\u0007\u00bb\u1224\n\u00bb\f\u00bb\u000e\u00bb",
    "\u1227\u000b\u00bb\u0003\u00bb\u0005\u00bb\u122a\n\u00bb\u0003\u00bb",
    "\u0003\u00bb\u0005\u00bb\u122e\n\u00bb\u0003\u00bb\u0005\u00bb\u1231",
    "\n\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb",
    "\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb",
    "\u0003\u00bb\u0005\u00bb\u123f\n\u00bb\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0005\u00bb\u1244\n\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb",
    "\u1248\n\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0005\u00bb\u1255\n\u00bb\u0003\u00bb\u0005\u00bb\u1258\n\u00bb",
    "\u0005\u00bb\u125a\n\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb\u1262\n\u00bb\u0003\u00bc",
    "\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc",
    "\u0003\u00bc\u0003\u00bc\u0005\u00bc\u126d\n\u00bc\u0003\u00bc\u0003",
    "\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0007\u00bc\u1274\n\u00bc",
    "\f\u00bc\u000e\u00bc\u1277\u000b\u00bc\u0003\u00bc\u0003\u00bc\u0003",
    "\u00bc\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0005\u00bc\u127f\n\u00bc",
    "\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd",
    "\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd\u128a\n\u00bd\u0003",
    "\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0007\u00bd\u1291",
    "\n\u00bd\f\u00bd\u000e\u00bd\u1294\u000b\u00bd\u0003\u00bd\u0003\u00bd",
    "\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd\u129c\n",
    "\u00bd\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003",
    "\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0005\u00be\u12a8",
    "\n\u00be\u0003\u00be\u0003\u00be\u0005\u00be\u12ac\n\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0006\u00be\u12b1\n\u00be\r\u00be\u000e\u00be",
    "\u12b2\u0005\u00be\u12b5\n\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0005\u00be\u12ba\n\u00be\u0003\u00be\u0003\u00be\u0005\u00be\u12be",
    "\n\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0006\u00be\u12c3\n\u00be",
    "\r\u00be\u000e\u00be\u12c4\u0005\u00be\u12c7\n\u00be\u0003\u00be\u0003",
    "\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003",
    "\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0005\u00be\u12d5",
    "\n\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0005\u00be\u12da\n\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0003\u00be\u0003\u00be\u0005\u00be\u12f0\n\u00be\u0003\u00be\u0003",
    "\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003",
    "\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003",
    "\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003",
    "\u00be\u0005\u00be\u1306\n\u00be\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0005\u00be\u130b\n\u00be\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003",
    "\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003",
    "\u00bf\u0003\u00bf\u0005\u00bf\u1318\n\u00bf\u0003\u00c0\u0003\u00c0",
    "\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0005\u00c0\u1320\n",
    "\u00c0\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003",
    "\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0005\u00c2\u1334\n\u00c2\u0003\u00c2\u0005\u00c2\u1337\n\u00c2",
    "\u0003\u00c2\u0003\u00c2\u0007\u00c2\u133b\n\u00c2\f\u00c2\u000e\u00c2",
    "\u133e\u000b\u00c2\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0005\u00c3\u1345\n\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3",
    "\u0003\u00c3\u0003\u00c3\u0005\u00c3\u134c\n\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0005\u00c3\u1351\n\u00c3\u0003\u00c3\u0003\u00c3",
    "\u0005\u00c3\u1355\n\u00c3\u0006\u00c3\u1357\n\u00c3\r\u00c3\u000e\u00c3",
    "\u1358\u0003\u00c3\u0005\u00c3\u135c\n\u00c3\u0003\u00c4\u0003\u00c4",
    "\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0005\u00c4\u1363\n\u00c4\u0003",
    "\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003",
    "\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003",
    "\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0005\u00c4\u1375\n\u00c4",
    "\u0005\u00c4\u1377\n\u00c4\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003",
    "\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003",
    "\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003",
    "\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5\u138b\n\u00c5\u0003\u00c6",
    "\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0005\u00c6",
    "\u1393\n\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0005\u00c6\u1398",
    "\n\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6",
    "\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6",
    "\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0005\u00c6",
    "\u13aa\n\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c6\u0005\u00c6\u13b9\n\u00c6\u0005\u00c6",
    "\u13bb\n\u00c6\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003",
    "\u00c7\u0005\u00c7\u13c2\n\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7",
    "\u0003\u00c7\u0003\u00c7\u0005\u00c7\u13c9\n\u00c7\u0003\u00c7\u0003",
    "\u00c7\u0003\u00c7\u0005\u00c7\u13ce\n\u00c7\u0003\u00c7\u0003\u00c7",
    "\u0003\u00c7\u0005\u00c7\u13d3\n\u00c7\u0003\u00c7\u0003\u00c7\u0003",
    "\u00c7\u0003\u00c7\u0005\u00c7\u13d9\n\u00c7\u0003\u00c7\u0003\u00c7",
    "\u0003\u00c7\u0005\u00c7\u13de\n\u00c7\u0005\u00c7\u13e0\n\u00c7\u0003",
    "\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0005\u00c8\u13e7",
    "\n\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0005\u00c8",
    "\u13ed\n\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0005",
    "\u00c8\u13f3\n\u00c8\u0003\u00c8\u0005\u00c8\u13f6\n\u00c8\u0003\u00c8",
    "\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0005\u00c8\u13fc\n\u00c8\u0003",
    "\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0006",
    "\u00c8\u1404\n\u00c8\r\u00c8\u000e\u00c8\u1405\u0003\u00c8\u0005\u00c8",
    "\u1409\n\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0003",
    "\u00c8\u0005\u00c8\u1410\n\u00c8\u0003\u00c8\u0005\u00c8\u1413\n\u00c8",
    "\u0003\u00c8\u0003\u00c8\u0003\u00c8\u0006\u00c8\u1418\n\u00c8\r\u00c8",
    "\u000e\u00c8\u1419\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003",
    "\u00c9\u0003\u00c9\u0005\u00c9\u1422\n\u00c9\u0003\u00c9\u0003\u00c9",
    "\u0005\u00c9\u1426\n\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003",
    "\u00c9\u0005\u00c9\u142c\n\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9",
    "\u0007\u00c9\u1431\n\u00c9\f\u00c9\u000e\u00c9\u1434\u000b\u00c9\u0005",
    "\u00c9\u1436\n\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9",
    "\u0003\u00c9\u0005\u00c9\u143d\n\u00c9\u0003\u00c9\u0003\u00c9\u0003",
    "\u00c9\u0003\u00c9\u0005\u00c9\u1443\n\u00c9\u0003\u00c9\u0003\u00c9",
    "\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9\u144a\n\u00c9\u0003",
    "\u00c9\u0005\u00c9\u144d\n\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9",
    "\u0003\u00c9\u0005\u00c9\u1453\n\u00c9\u0003\u00c9\u0003\u00c9\u0003",
    "\u00c9\u0007\u00c9\u1458\n\u00c9\f\u00c9\u000e\u00c9\u145b\u000b\u00c9",
    "\u0005\u00c9\u145d\n\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003",
    "\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9\u1465\n\u00c9\u0003\u00c9",
    "\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9\u146b\n\u00c9\u0003",
    "\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9\u1472",
    "\n\u00c9\u0003\u00c9\u0005\u00c9\u1475\n\u00c9\u0003\u00c9\u0003\u00c9",
    "\u0003\u00c9\u0003\u00c9\u0005\u00c9\u147b\n\u00c9\u0003\u00c9\u0003",
    "\u00c9\u0003\u00c9\u0007\u00c9\u1480\n\u00c9\f\u00c9\u000e\u00c9\u1483",
    "\u000b\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9",
    "\u0005\u00c9\u148a\n\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003",
    "\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9\u1492\n\u00c9\u0003\u00c9",
    "\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9\u1498\n\u00c9\u0003",
    "\u00c9\u0003\u00c9\u0003\u00c9\u0007\u00c9\u149d\n\u00c9\f\u00c9\u000e",
    "\u00c9\u14a0\u000b\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9",
    "\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9\u14a9\n\u00c9\u0003",
    "\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9\u14ae\n\u00c9\u0003\u00ca",
    "\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca",
    "\u0003\u00ca\u0005\u00ca\u14b8\n\u00ca\u0003\u00ca\u0003\u00ca\u0003",
    "\u00ca\u0003\u00ca\u0005\u00ca\u14be\n\u00ca\u0003\u00ca\u0003\u00ca",
    "\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca",
    "\u0003\u00ca\u0003\u00ca\u0005\u00ca\u14ca\n\u00ca\u0005\u00ca\u14cc",
    "\n\u00ca\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb",
    "\u0005\u00cb\u14d3\n\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003",
    "\u00cb\u0005\u00cb\u14d9\n\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb",
    "\u0003\u00cb\u0005\u00cb\u14df\n\u00cb\u0003\u00cb\u0003\u00cb\u0003",
    "\u00cb\u0003\u00cb\u0005\u00cb\u14e5\n\u00cb\u0003\u00cb\u0003\u00cb",
    "\u0003\u00cb\u0006\u00cb\u14ea\n\u00cb\r\u00cb\u000e\u00cb\u14eb\u0003",
    "\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc\u14f3",
    "\n\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc",
    "\u0003\u00cc\u0005\u00cc\u14fb\n\u00cc\u0003\u00cc\u0003\u00cc\u0003",
    "\u00cc\u0003\u00cc\u0005\u00cc\u1501\n\u00cc\u0003\u00cc\u0003\u00cc",
    "\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc",
    "\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0006\u00cc\u150f\n",
    "\u00cc\r\u00cc\u000e\u00cc\u1510\u0003\u00cc\u0005\u00cc\u1514\n\u00cc",
    "\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc\u1519\n\u00cc\u0005",
    "\u00cc\u151b\n\u00cc\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd",
    "\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd",
    "\u0005\u00cd\u1527\n\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003",
    "\u00cd\u0005\u00cd\u152d\n\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd",
    "\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd",
    "\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0006\u00cd\u153b\n\u00cd\r\u00cd",
    "\u000e\u00cd\u153c\u0003\u00cd\u0005\u00cd\u1540\n\u00cd\u0003\u00cd",
    "\u0003\u00cd\u0003\u00cd\u0005\u00cd\u1545\n\u00cd\u0003\u00cd\u0005",
    "\u00cd\u1548\n\u00cd\u0003\u00cd\u0003\u00cd\u0003\u00cd\u0005\u00cd",
    "\u154d\n\u00cd\u0005\u00cd\u154f\n\u00cd\u0003\u00ce\u0003\u00ce\u0003",
    "\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0005\u00ce\u1558",
    "\n\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce",
    "\u0005\u00ce\u155f\n\u00ce\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0003",
    "\u00cf\u0005\u00cf\u1565\n\u00cf\u0003\u00cf\u0005\u00cf\u1568\n\u00cf",
    "\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf\u156d\n\u00cf\u0003",
    "\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0005\u00d0\u1574",
    "\n\u00d0\u0005\u00d0\u1576\n\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0",
    "\u0003\u00d0\u0005\u00d0\u157c\n\u00d0\u0005\u00d0\u157e\n\u00d0\u0003",
    "\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0005",
    "\u00d0\u1586\n\u00d0\u0005\u00d0\u1588\n\u00d0\u0003\u00d0\u0003\u00d0",
    "\u0003\u00d0\u0003\u00d0\u0005\u00d0\u158e\n\u00d0\u0005\u00d0\u1590",
    "\n\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0005\u00d0",
    "\u1596\n\u00d0\u0005\u00d0\u1598\n\u00d0\u0003\u00d0\u0003\u00d0\u0003",
    "\u00d0\u0003\u00d0\u0003\u00d0\u0005\u00d0\u159f\n\u00d0\u0003\u00d0",
    "\u0005\u00d0\u15a2\n\u00d0\u0005\u00d0\u15a4\n\u00d0\u0003\u00d0\u0005",
    "\u00d0\u15a7\n\u00d0\u0003\u00d0\u0003\u00d0\u0005\u00d0\u15ab\n\u00d0",
    "\u0005\u00d0\u15ad\n\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0003",
    "\u00d0\u0003\u00d0\u0003\u00d0\u0003\u00d0\u0005\u00d0\u15b6\n\u00d0",
    "\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d1\u0005\u00d1\u15bc\n",
    "\u00d1\u0003\u00d1\u0003\u00d1\u0005\u00d1\u15c0\n\u00d1\u0003\u00d2",
    "\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0005\u00d2",
    "\u15c8\n\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003",
    "\u00d2\u0005\u00d2\u15cf\n\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2",
    "\u0003\u00d2\u0005\u00d2\u15d5\n\u00d2\u0005\u00d2\u15d7\n\u00d2\u0003",
    "\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d4\u0003\u00d4\u0003",
    "\u00d4\u0003\u00d4\u0003\u00d4\u0005\u00d4\u15e2\n\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0003\u00d4\u0005\u00d4\u15e7\n\u00d4\u0003\u00d4\u0003",
    "\u00d4\u0003\u00d4\u0003\u00d4\u0005\u00d4\u15ed\n\u00d4\u0006\u00d4",
    "\u15ef\n\u00d4\r\u00d4\u000e\u00d4\u15f0\u0003\u00d4\u0003\u00d4\u0003",
    "\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0005",
    "\u00d5\u15fb\n\u00d5\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6",
    "\u0003\u00d6\u0003\u00d6\u0005\u00d6\u1603\n\u00d6\u0003\u00d6\u0003",
    "\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003\u00d6\u0003",
    "\u00d6\u0003\u00d6\u0003\u00d6\u0005\u00d6\u160f\n\u00d6\u0003\u00d7",
    "\u0005\u00d7\u1612\n\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003",
    "\u00d7\u0003\u00d7\u0003\u00d7\u0005\u00d7\u161a\n\u00d7\u0005\u00d7",
    "\u161c\n\u00d7\u0003\u00d7\u0005\u00d7\u161f\n\u00d7\u0003\u00d7\u0003",
    "\u00d7\u0005\u00d7\u1623\n\u00d7\u0003\u00d7\u0005\u00d7\u1626\n\u00d7",
    "\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7",
    "\u0003\u00d7\u0003\u00d7\u0005\u00d7\u1630\n\u00d7\u0003\u00d7\u0003",
    "\u00d7\u0007\u00d7\u1634\n\u00d7\f\u00d7\u000e\u00d7\u1637\u000b\u00d7",
    "\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0005\u00d7",
    "\u163e\n\u00d7\u0003\u00d7\u0003\u00d7\u0005\u00d7\u1642\n\u00d7\u0003",
    "\u00d7\u0003\u00d7\u0005\u00d7\u1646\n\u00d7\u0003\u00d7\u0003\u00d7",
    "\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0005\u00d7",
    "\u164f\n\u00d7\u0003\u00d7\u0003\u00d7\u0007\u00d7\u1653\n\u00d7\f\u00d7",
    "\u000e\u00d7\u1656\u000b\u00d7\u0003\u00d7\u0005\u00d7\u1659\n\u00d7",
    "\u0003\u00d7\u0005\u00d7\u165c\n\u00d7\u0003\u00d7\u0003\u00d7\u0003",
    "\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0007\u00d8\u1665",
    "\n\u00d8\f\u00d8\u000e\u00d8\u1668\u000b\u00d8\u0003\u00d8\u0005\u00d8",
    "\u166b\n\u00d8\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003",
    "\u00d9\u0005\u00d9\u1672\n\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9",
    "\u0005\u00d9\u1677\n\u00d9\u0003\u00da\u0005\u00da\u167a\n\u00da\u0003",
    "\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0005",
    "\u00da\u1682\n\u00da\u0005\u00da\u1684\n\u00da\u0003\u00da\u0005\u00da",
    "\u1687\n\u00da\u0003\u00da\u0003\u00da\u0005\u00da\u168b\n\u00da\u0003",
    "\u00da\u0005\u00da\u168e\n\u00da\u0003\u00da\u0003\u00da\u0005\u00da",
    "\u1692\n\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003",
    "\u00da\u0005\u00da\u1699\n\u00da\u0003\u00da\u0003\u00da\u0005\u00da",
    "\u169d\n\u00da\u0005\u00da\u169f\n\u00da\u0005\u00da\u16a1\n\u00da\u0003",
    "\u00da\u0005\u00da\u16a4\n\u00da\u0003\u00da\u0005\u00da\u16a7\n\u00da",
    "\u0003\u00da\u0005\u00da\u16aa\n\u00da\u0003\u00db\u0003\u00db\u0003",
    "\u00db\u0003\u00db\u0005\u00db\u16b0\n\u00db\u0003\u00dc\u0005\u00dc",
    "\u16b3\n\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003",
    "\u00dc\u0003\u00dc\u0005\u00dc\u16bb\n\u00dc\u0005\u00dc\u16bd\n\u00dc",
    "\u0003\u00dc\u0005\u00dc\u16c0\n\u00dc\u0003\u00dc\u0003\u00dc\u0005",
    "\u00dc\u16c4\n\u00dc\u0003\u00dc\u0005\u00dc\u16c7\n\u00dc\u0003\u00dc",
    "\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0005\u00dc\u16cd\n\u00dc\u0003",
    "\u00dc\u0005\u00dc\u16d0\n\u00dc\u0003\u00dc\u0003\u00dc\u0005\u00dc",
    "\u16d4\n\u00dc\u0003\u00dc\u0005\u00dc\u16d7\n\u00dc\u0003\u00dc\u0005",
    "\u00dc\u16da\n\u00dc\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd",
    "\u0003\u00dd\u0005\u00dd\u16e1\n\u00dd\u0003\u00de\u0005\u00de\u16e4",
    "\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0005\u00de\u16eb\n\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003",
    "\u00de\u0005\u00de\u16f1\n\u00de\u0007\u00de\u16f3\n\u00de\f\u00de\u000e",
    "\u00de\u16f6\u000b\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0003\u00de\u0005\u00de\u16ff\n\u00de\u0003",
    "\u00de\u0005\u00de\u1702\n\u00de\u0003\u00df\u0005\u00df\u1705\n\u00df",
    "\u0003\u00df\u0003\u00df\u0005\u00df\u1709\n\u00df\u0003\u00df\u0005",
    "\u00df\u170c\n\u00df\u0003\u00df\u0005\u00df\u170f\n\u00df\u0003\u00df",
    "\u0005\u00df\u1712\n\u00df\u0003\u00e0\u0003\u00e0\u0005\u00e0\u1716",
    "\n\u00e0\u0003\u00e1\u0005\u00e1\u1719\n\u00e1\u0003\u00e1\u0003\u00e1",
    "\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0005\u00e1\u1721\n",
    "\u00e1\u0005\u00e1\u1723\n\u00e1\u0003\u00e1\u0003\u00e1\u0005\u00e1",
    "\u1727\n\u00e1\u0003\u00e1\u0005\u00e1\u172a\n\u00e1\u0003\u00e1\u0003",
    "\u00e1\u0003\u00e1\u0003\u00e1\u0007\u00e1\u1730\n\u00e1\f\u00e1\u000e",
    "\u00e1\u1733\u000b\u00e1\u0003\u00e1\u0005\u00e1\u1736\n\u00e1\u0003",
    "\u00e1\u0003\u00e1\u0005\u00e1\u173a\n\u00e1\u0003\u00e1\u0003\u00e1",
    "\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0005\u00e1\u1741\n\u00e1\u0003",
    "\u00e1\u0003\u00e1\u0005\u00e1\u1745\n\u00e1\u0005\u00e1\u1747\n\u00e1",
    "\u0005\u00e1\u1749\n\u00e1\u0003\u00e1\u0005\u00e1\u174c\n\u00e1\u0003",
    "\u00e1\u0005\u00e1\u174f\n\u00e1\u0003\u00e1\u0005\u00e1\u1752\n\u00e1",
    "\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0007\u00e2\u1758\n",
    "\u00e2\f\u00e2\u000e\u00e2\u175b\u000b\u00e2\u0003\u00e2\u0003\u00e2",
    "\u0003\u00e2\u0005\u00e2\u1760\n\u00e2\u0003\u00e2\u0003\u00e2\u0003",
    "\u00e2\u0003\u00e2\u0005\u00e2\u1766\n\u00e2\u0005\u00e2\u1768\n\u00e2",
    "\u0003\u00e3\u0003\u00e3\u0005\u00e3\u176c\n\u00e3\u0003\u00e3\u0005",
    "\u00e3\u176f\n\u00e3\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0005\u00e4",
    "\u1774\n\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0005\u00e4\u1779",
    "\n\u00e4\u0003\u00e4\u0005\u00e4\u177c\n\u00e4\u0003\u00e5\u0003\u00e5",
    "\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0005\u00e5\u1784\n",
    "\u00e5\u0003\u00e5\u0003\u00e5\u0005\u00e5\u1788\n\u00e5\u0003\u00e5",
    "\u0003\u00e5\u0003\u00e5\u0007\u00e5\u178d\n\u00e5\f\u00e5\u000e\u00e5",
    "\u1790\u000b\u00e5\u0005\u00e5\u1792\n\u00e5\u0003\u00e5\u0003\u00e5",
    "\u0003\u00e5\u0003\u00e5\u0003\u00e5\u0007\u00e5\u1799\n\u00e5\f\u00e5",
    "\u000e\u00e5\u179c\u000b\u00e5\u0005\u00e5\u179e\n\u00e5\u0003\u00e5",
    "\u0003\u00e5\u0005\u00e5\u17a2\n\u00e5\u0003\u00e5\u0003\u00e5\u0003",
    "\u00e5\u0003\u00e5\u0007\u00e5\u17a8\n\u00e5\f\u00e5\u000e\u00e5\u17ab",
    "\u000b\u00e5\u0005\u00e5\u17ad\n\u00e5\u0003\u00e6\u0003\u00e6\u0005",
    "\u00e6\u17b1\n\u00e6\u0003\u00e6\u0005\u00e6\u17b4\n\u00e6\u0003\u00e6",
    "\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6",
    "\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0005\u00e6",
    "\u17c2\n\u00e6\u0003\u00e6\u0003\u00e6\u0005\u00e6\u17c6\n\u00e6\u0003",
    "\u00e6\u0005\u00e6\u17c9\n\u00e6\u0003\u00e6\u0003\u00e6\u0005\u00e6",
    "\u17cd\n\u00e6\u0003\u00e6\u0005\u00e6\u17d0\n\u00e6\u0003\u00e7\u0003",
    "\u00e7\u0003\u00e7\u0005\u00e7\u17d5\n\u00e7\u0003\u00e7\u0005\u00e7",
    "\u17d8\n\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0005",
    "\u00e7\u17de\n\u00e7\u0003\u00e7\u0005\u00e7\u17e1\n\u00e7\u0003\u00e7",
    "\u0003\u00e7\u0003\u00e7\u0007\u00e7\u17e6\n\u00e7\f\u00e7\u000e\u00e7",
    "\u17e9\u000b\u00e7\u0003\u00e7\u0005\u00e7\u17ec\n\u00e7\u0005\u00e7",
    "\u17ee\n\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0007",
    "\u00e7\u17f4\n\u00e7\f\u00e7\u000e\u00e7\u17f7\u000b\u00e7\u0005\u00e7",
    "\u17f9\n\u00e7\u0003\u00e7\u0003\u00e7\u0005\u00e7\u17fd\n\u00e7\u0003",
    "\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e8\u0003\u00e8\u0005\u00e8\u1804",
    "\n\u00e8\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0005\u00e9\u1809\n\u00e9",
    "\u0003\u00e9\u0005\u00e9\u180c\n\u00e9\u0003\u00e9\u0003\u00e9\u0003",
    "\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0007",
    "\u00e9\u1816\n\u00e9\f\u00e9\u000e\u00e9\u1819\u000b\u00e9\u0005\u00e9",
    "\u181b\n\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0005",
    "\u00e9\u1821\n\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0007\u00e9",
    "\u1826\n\u00e9\f\u00e9\u000e\u00e9\u1829\u000b\u00e9\u0003\u00e9\u0003",
    "\u00e9\u0005\u00e9\u182d\n\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00e9",
    "\u0005\u00e9\u1832\n\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0003",
    "\u00ea\u0003\u00ea\u0005\u00ea\u1839\n\u00ea\u0003\u00eb\u0003\u00eb",
    "\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0005\u00ec\u1840\n\u00ec\u0003",
    "\u00ec\u0005\u00ec\u1843\n\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec",
    "\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0005\u00ec\u184b\n\u00ec\u0003",
    "\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0007\u00ec\u1851\n\u00ec",
    "\f\u00ec\u000e\u00ec\u1854\u000b\u00ec\u0005\u00ec\u1856\n\u00ec\u0003",
    "\u00ec\u0003\u00ec\u0003\u00ec\u0003\u00ec\u0007\u00ec\u185c\n\u00ec",
    "\f\u00ec\u000e\u00ec\u185f\u000b\u00ec\u0003\u00ec\u0003\u00ec\u0003",
    "\u00ec\u0003\u00ed\u0003\u00ed\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0005",
    "\u00ee\u1869\n\u00ee\u0003\u00ee\u0005\u00ee\u186c\n\u00ee\u0003\u00ee",
    "\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0007\u00ee",
    "\u1874\n\u00ee\f\u00ee\u000e\u00ee\u1877\u000b\u00ee\u0003\u00ee\u0003",
    "\u00ee\u0003\u00ee\u0003\u00ee\u0005\u00ee\u187d\n\u00ee\u0003\u00ee",
    "\u0003\u00ee\u0003\u00ee\u0005\u00ee\u1882\n\u00ee\u0003\u00ee\u0005",
    "\u00ee\u1885\n\u00ee\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00ef",
    "\u0003\u00ef\u0003\u00ef\u0007\u00ef\u188d\n\u00ef\f\u00ef\u000e\u00ef",
    "\u1890\u000b\u00ef\u0005\u00ef\u1892\n\u00ef\u0003\u00ef\u0005\u00ef",
    "\u1895\n\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0003\u00ef\u0003",
    "\u00ef\u0003\u00ef\u0005\u00ef\u189d\n\u00ef\u0003\u00f0\u0003\u00f0",
    "\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0007\u00f0",
    "\u18a6\n\u00f0\f\u00f0\u000e\u00f0\u18a9\u000b\u00f0\u0005\u00f0\u18ab",
    "\n\u00f0\u0003\u00f0\u0005\u00f0\u18ae\n\u00f0\u0003\u00f0\u0003\u00f0",
    "\u0007\u00f0\u18b2\n\u00f0\f\u00f0\u000e\u00f0\u18b5\u000b\u00f0\u0003",
    "\u00f0\u0003\u00f0\u0005\u00f0\u18b9\n\u00f0\u0003\u00f0\u0003\u00f0",
    "\u0005\u00f0\u18bd\n\u00f0\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003",
    "\u00f1\u0003\u00f1\u0003\u00f1\u0007\u00f1\u18c5\n\u00f1\f\u00f1\u000e",
    "\u00f1\u18c8\u000b\u00f1\u0005\u00f1\u18ca\n\u00f1\u0003\u00f1\u0005",
    "\u00f1\u18cd\n\u00f1\u0003\u00f1\u0003\u00f1\u0007\u00f1\u18d1\n\u00f1",
    "\f\u00f1\u000e\u00f1\u18d4\u000b\u00f1\u0003\u00f1\u0003\u00f1\u0003",
    "\u00f1\u0005\u00f1\u18d9\n\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f2",
    "\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0005\u00f2\u18e1\n\u00f2\u0003",
    "\u00f2\u0005\u00f2\u18e4\n\u00f2\u0003\u00f2\u0003\u00f2\u0005\u00f2",
    "\u18e8\n\u00f2\u0003\u00f2\u0003\u00f2\u0005\u00f2\u18ec\n\u00f2\u0003",
    "\u00f2\u0005\u00f2\u18ef\n\u00f2\u0003\u00f3\u0003\u00f3\u0003\u00f3",
    "\u0005\u00f3\u18f4\n\u00f3\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003",
    "\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003",
    "\u00f4\u0003\u00f4\u0003\u00f4\u0005\u00f4\u1902\n\u00f4\u0003\u00f5",
    "\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5",
    "\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5",
    "\u0003\u00f5\u0005\u00f5\u1912\n\u00f5\u0003\u00f5\u0003\u00f5\u0005",
    "\u00f5\u1916\n\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5",
    "\u0005\u00f5\u191c\n\u00f5\u0005\u00f5\u191e\n\u00f5\u0003\u00f5\u0005",
    "\u00f5\u1921\n\u00f5\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6",
    "\u0003\u00f6\u0003\u00f6\u0005\u00f6\u1929\n\u00f6\u0003\u00f6\u0003",
    "\u00f6\u0007\u00f6\u192d\n\u00f6\f\u00f6\u000e\u00f6\u1930\u000b\u00f6",
    "\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0005\u00f6\u1935\n\u00f6\u0003",
    "\u00f6\u0003\u00f6\u0003\u00f6\u0005\u00f6\u193a\n\u00f6\u0003\u00f6",
    "\u0005\u00f6\u193d\n\u00f6\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003",
    "\u00f7\u0003\u00f7\u0007\u00f7\u1944\n\u00f7\f\u00f7\u000e\u00f7\u1947",
    "\u000b\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f8\u0003\u00f8\u0003\u00f8",
    "\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0005\u00f8\u1952\n",
    "\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0007\u00f8\u1958",
    "\n\u00f8\f\u00f8\u000e\u00f8\u195b\u000b\u00f8\u0005\u00f8\u195d\n\u00f8",
    "\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0005\u00f8",
    "\u1964\n\u00f8\u0003\u00f8\u0005\u00f8\u1967\n\u00f8\u0003\u00f9\u0003",
    "\u00f9\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003",
    "\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003",
    "\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003",
    "\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003",
    "\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003",
    "\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003",
    "\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0005",
    "\u00fa\u1994\n\u00fa\u0003\u00fa\u0005\u00fa\u1997\n\u00fa\u0003\u00fb",
    "\u0003\u00fb\u0003\u00fb\u0003\u00fb\u0005\u00fb\u199d\n\u00fb\u0003",
    "\u00fb\u0003\u00fb\u0003\u00fb\u0003\u00fb\u0003\u00fb\u0003\u00fb\u0003",
    "\u00fb\u0003\u00fb\u0003\u00fb\u0003\u00fb\u0005\u00fb\u19a9\n\u00fb",
    "\u0005\u00fb\u19ab\n\u00fb\u0003\u00fb\u0005\u00fb\u19ae\n\u00fb\u0003",
    "\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0003",
    "\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0003",
    "\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0003",
    "\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0003\u00fc\u0005\u00fc\u19c7",
    "\n\u00fc\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fd",
    "\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0005\u00fd\u19d2\n",
    "\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0003",
    "\u00fd\u0005\u00fd\u19da\n\u00fd\u0003\u00fe\u0003\u00fe\u0003\u00fe",
    "\u0003\u00fe\u0003\u00fe\u0003\u00fe\u0003\u00fe\u0007\u00fe\u19e3\n",
    "\u00fe\f\u00fe\u000e\u00fe\u19e6\u000b\u00fe\u0007\u00fe\u19e8\n\u00fe",
    "\f\u00fe\u000e\u00fe\u19eb\u000b\u00fe\u0005\u00fe\u19ed\n\u00fe\u0003",
    "\u00ff\u0003\u00ff\u0003\u00ff\u0003\u00ff\u0003\u00ff\u0003\u00ff\u0005",
    "\u00ff\u19f5\n\u00ff\u0003\u0100\u0003\u0100\u0003\u0100\u0003\u0100",
    "\u0003\u0101\u0003\u0101\u0003\u0101\u0003\u0101\u0005\u0101\u19ff\n",
    "\u0101\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0005",
    "\u0102\u1a06\n\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102",
    "\u0003\u0102\u0005\u0102\u1a0d\n\u0102\u0005\u0102\u1a0f\n\u0102\u0003",
    "\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003",
    "\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0005\u0102\u1a1b\n\u0102",
    "\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102",
    "\u0003\u0102\u0003\u0102\u0003\u0102\u0005\u0102\u1a26\n\u0102\u0003",
    "\u0102\u0003\u0102\u0005\u0102\u1a2a\n\u0102\u0003\u0102\u0003\u0102",
    "\u0003\u0102\u0005\u0102\u1a2f\n\u0102\u0003\u0102\u0005\u0102\u1a32",
    "\n\u0102\u0005\u0102\u1a34\n\u0102\u0003\u0102\u0005\u0102\u1a37\n\u0102",
    "\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102",
    "\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0005\u0102\u1a43\n",
    "\u0102\u0005\u0102\u1a45\n\u0102\u0005\u0102\u1a47\n\u0102\u0003\u0102",
    "\u0005\u0102\u1a4a\n\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0005",
    "\u0102\u1a4f\n\u0102\u0003\u0102\u0005\u0102\u1a52\n\u0102\u0003\u0102",
    "\u0003\u0102\u0003\u0102\u0005\u0102\u1a57\n\u0102\u0003\u0102\u0003",
    "\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003",
    "\u0102\u0005\u0102\u1a61\n\u0102\u0003\u0102\u0003\u0102\u0005\u0102",
    "\u1a65\n\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0005\u0102\u1a6a",
    "\n\u0102\u0003\u0102\u0005\u0102\u1a6d\n\u0102\u0005\u0102\u1a6f\n\u0102",
    "\u0003\u0102\u0005\u0102\u1a72\n\u0102\u0003\u0102\u0003\u0102\u0003",
    "\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0003",
    "\u0102\u0003\u0102\u0005\u0102\u1a7e\n\u0102\u0005\u0102\u1a80\n\u0102",
    "\u0005\u0102\u1a82\n\u0102\u0003\u0102\u0005\u0102\u1a85\n\u0102\u0003",
    "\u0102\u0003\u0102\u0003\u0102\u0003\u0102\u0005\u0102\u1a8b\n\u0102",
    "\u0003\u0103\u0003\u0103\u0003\u0104\u0003\u0104\u0003\u0104\u0003\u0104",
    "\u0003\u0104\u0003\u0104\u0005\u0104\u1a95\n\u0104\u0003\u0105\u0003",
    "\u0105\u0003\u0106\u0003\u0106\u0003\u0107\u0003\u0107\u0003\u0108\u0003",
    "\u0108\u0003\u0108\u0003\u0108\u0003\u0108\u0003\u0108\u0003\u0108\u0003",
    "\u0108\u0003\u0108\u0003\u0108\u0003\u0108\u0003\u0108\u0005\u0108\u1aa9",
    "\n\u0108\u0003\u0109\u0003\u0109\u0003\u0109\u0003\u0109\u0005\u0109",
    "\u1aaf\n\u0109\u0003\u010a\u0003\u010a\u0003\u010b\u0003\u010b\u0003",
    "\u010b\u0003\u010b\u0003\u010b\u0003\u010c\u0003\u010c\u0003\u010d\u0003",
    "\u010d\u0003\u010d\u0003\u010d\u0003\u010e\u0003\u010e\u0003\u010f\u0003",
    "\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003",
    "\u010f\u0005\u010f\u1ac8\n\u010f\u0005\u010f\u1aca\n\u010f\u0003\u0110",
    "\u0003\u0110\u0003\u0110\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0112",
    "\u0003\u0112\u0003\u0113\u0003\u0113\u0003\u0114\u0003\u0114\u0003\u0115",
    "\u0003\u0115\u0003\u0115\u0003\u0115\u0003\u0116\u0003\u0116\u0003\u0116",
    "\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0005\u0116",
    "\u1ae4\n\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0005",
    "\u0116\u1aea\n\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116",
    "\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0003\u0116\u0005\u0116",
    "\u1af5\n\u0116\u0003\u0117\u0003\u0117\u0003\u0117\u0003\u0117\u0003",
    "\u0117\u0003\u0117\u0005\u0117\u1afd\n\u0117\u0003\u0117\u0005\u0117",
    "\u1b00\n\u0117\u0003\u0118\u0003\u0118\u0003\u0118\u0003\u0119\u0003",
    "\u0119\u0003\u0119\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003",
    "\u011a\u0003\u011a\u0005\u011a\u1b0e\n\u011a\u0003\u011b\u0003\u011b",
    "\u0003\u011b\u0003\u011b\u0003\u011b\u0003\u011b\u0005\u011b\u1b16\n",
    "\u011b\u0003\u011c\u0003\u011c\u0003\u011c\u0003\u011c\u0003\u011c\u0005",
    "\u011c\u1b1d\n\u011c\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d",
    "\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d",
    "\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d",
    "\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0003\u011d\u0005\u011d",
    "\u1b34\n\u011d\u0003\u011e\u0003\u011e\u0003\u011e\u0003\u011e\u0003",
    "\u011e\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003",
    "\u011f\u0005\u011f\u1b41\n\u011f\u0003\u0120\u0003\u0120\u0003\u0120",
    "\u0003\u0120\u0005\u0120\u1b47\n\u0120\u0003\u0120\u0003\u0120\u0003",
    "\u0120\u0007\u0120\u1b4c\n\u0120\f\u0120\u000e\u0120\u1b4f\u000b\u0120",
    "\u0003\u0120\u0003\u0120\u0003\u0120\u0007\u0120\u1b54\n\u0120\f\u0120",
    "\u000e\u0120\u1b57\u000b\u0120\u0005\u0120\u1b59\n\u0120\u0003\u0120",
    "\u0005\u0120\u1b5c\n\u0120\u0003\u0121\u0003\u0121\u0003\u0121\u0003",
    "\u0121\u0003\u0122\u0003\u0122\u0003\u0122\u0005\u0122\u1b65\n\u0122",
    "\u0003\u0122\u0003\u0122\u0003\u0122\u0003\u0122\u0003\u0123\u0003\u0123",
    "\u0003\u0123\u0003\u0123\u0005\u0123\u1b6f\n\u0123\u0003\u0123\u0003",
    "\u0123\u0003\u0123\u0007\u0123\u1b74\n\u0123\f\u0123\u000e\u0123\u1b77",
    "\u000b\u0123\u0003\u0123\u0005\u0123\u1b7a\n\u0123\u0003\u0124\u0003",
    "\u0124\u0005\u0124\u1b7e\n\u0124\u0003\u0125\u0003\u0125\u0003\u0125",
    "\u0003\u0125\u0005\u0125\u1b84\n\u0125\u0003\u0125\u0003\u0125\u0003",
    "\u0125\u0007\u0125\u1b89\n\u0125\f\u0125\u000e\u0125\u1b8c\u000b\u0125",
    "\u0003\u0125\u0005\u0125\u1b8f\n\u0125\u0003\u0126\u0003\u0126\u0003",
    "\u0126\u0003\u0126\u0005\u0126\u1b95\n\u0126\u0003\u0126\u0003\u0126",
    "\u0003\u0126\u0007\u0126\u1b9a\n\u0126\f\u0126\u000e\u0126\u1b9d\u000b",
    "\u0126\u0003\u0126\u0003\u0126\u0003\u0126\u0003\u0126\u0005\u0126\u1ba3",
    "\n\u0126\u0003\u0126\u0005\u0126\u1ba6\n\u0126\u0003\u0127\u0003\u0127",
    "\u0003\u0127\u0003\u0127\u0005\u0127\u1bac\n\u0127\u0003\u0127\u0003",
    "\u0127\u0003\u0127\u0007\u0127\u1bb1\n\u0127\f\u0127\u000e\u0127\u1bb4",
    "\u000b\u0127\u0003\u0127\u0005\u0127\u1bb7\n\u0127\u0003\u0128\u0003",
    "\u0128\u0003\u0128\u0005\u0128\u1bbc\n\u0128\u0003\u0128\u0003\u0128",
    "\u0003\u0128\u0005\u0128\u1bc1\n\u0128\u0003\u0128\u0006\u0128\u1bc4",
    "\n\u0128\r\u0128\u000e\u0128\u1bc5\u0003\u0128\u0003\u0128\u0003\u0129",
    "\u0003\u0129\u0003\u0129\u0003\u0129\u0005\u0129\u1bce\n\u0129\u0003",
    "\u0129\u0003\u0129\u0005\u0129\u1bd2\n\u0129\u0003\u012a\u0003\u012a",
    "\u0003\u012a\u0003\u012a\u0005\u012a\u1bd8\n\u012a\u0003\u012a\u0003",
    "\u012a\u0003\u012a\u0007\u012a\u1bdd\n\u012a\f\u012a\u000e\u012a\u1be0",
    "\u000b\u012a\u0003\u012a\u0005\u012a\u1be3\n\u012a\u0003\u012b\u0003",
    "\u012b\u0003\u012b\u0003\u012b\u0003\u012b\u0003\u012b\u0003\u012b\u0005",
    "\u012b\u1bec\n\u012b\u0003\u012b\u0003\u012b\u0003\u012b\u0003\u012b",
    "\u0003\u012b\u0003\u012b\u0005\u012b\u1bf4\n\u012b\u0003\u012c\u0003",
    "\u012c\u0003\u012c\u0003\u012c\u0005\u012c\u1bfa\n\u012c\u0003\u012c",
    "\u0003\u012c\u0003\u012d\u0003\u012d\u0005\u012d\u1c00\n\u012d\u0003",
    "\u012e\u0003\u012e\u0003\u012e\u0003\u012e\u0003\u012e\u0003\u012e\u0003",
    "\u012e\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003\u012f\u0003",
    "\u012f\u0003\u012f\u0003\u012f\u0005\u012f\u1c11\n\u012f\u0003\u012f",
    "\u0003\u012f\u0005\u012f\u1c15\n\u012f\u0003\u012f\u0003\u012f\u0003",
    "\u012f\u0003\u0130\u0003\u0130\u0003\u0130\u0005\u0130\u1c1d\n\u0130",
    "\u0003\u0130\u0003\u0130\u0005\u0130\u1c21\n\u0130\u0003\u0130\u0003",
    "\u0130\u0003\u0130\u0003\u0130\u0007\u0130\u1c27\n\u0130\f\u0130\u000e",
    "\u0130\u1c2a\u000b\u0130\u0003\u0130\u0005\u0130\u1c2d\n\u0130\u0003",
    "\u0130\u0003\u0130\u0003\u0130\u0005\u0130\u1c32\n\u0130\u0003\u0130",
    "\u0003\u0130\u0005\u0130\u1c36\n\u0130\u0003\u0130\u0003\u0130\u0003",
    "\u0130\u0003\u0130\u0003\u0130\u0005\u0130\u1c3d\n\u0130\u0003\u0130",
    "\u0003\u0130\u0003\u0130\u0003\u0130\u0005\u0130\u1c43\n\u0130\u0005",
    "\u0130\u1c45\n\u0130\u0003\u0131\u0003\u0131\u0005\u0131\u1c49\n\u0131",
    "\u0003\u0131\u0003\u0131\u0005\u0131\u1c4d\n\u0131\u0003\u0131\u0003",
    "\u0131\u0005\u0131\u1c51\n\u0131\u0003\u0131\u0003\u0131\u0005\u0131",
    "\u1c55\n\u0131\u0003\u0131\u0003\u0131\u0003\u0131\u0003\u0131\u0005",
    "\u0131\u1c5b\n\u0131\u0003\u0131\u0003\u0131\u0005\u0131\u1c5f\n\u0131",
    "\u0005\u0131\u1c61\n\u0131\u0003\u0132\u0003\u0132\u0003\u0132\u0003",
    "\u0132\u0003\u0132\u0005\u0132\u1c68\n\u0132\u0003\u0132\u0003\u0132",
    "\u0003\u0132\u0007\u0132\u1c6d\n\u0132\f\u0132\u000e\u0132\u1c70\u000b",
    "\u0132\u0005\u0132\u1c72\n\u0132\u0003\u0132\u0005\u0132\u1c75\n\u0132",
    "\u0003\u0132\u0003\u0132\u0003\u0132\u0007\u0132\u1c7a\n\u0132\f\u0132",
    "\u000e\u0132\u1c7d\u000b\u0132\u0003\u0132\u0003\u0132\u0005\u0132\u1c81",
    "\n\u0132\u0003\u0132\u0006\u0132\u1c84\n\u0132\r\u0132\u000e\u0132\u1c85",
    "\u0003\u0132\u0003\u0132\u0005\u0132\u1c8a\n\u0132\u0003\u0132\u0003",
    "\u0132\u0003\u0132\u0003\u0132\u0005\u0132\u1c90\n\u0132\u0006\u0132",
    "\u1c92\n\u0132\r\u0132\u000e\u0132\u1c93\u0005\u0132\u1c96\n\u0132\u0003",
    "\u0132\u0003\u0132\u0003\u0132\u0005\u0132\u1c9b\n\u0132\u0003\u0132",
    "\u0006\u0132\u1c9e\n\u0132\r\u0132\u000e\u0132\u1c9f\u0006\u0132\u1ca2",
    "\n\u0132\r\u0132\u000e\u0132\u1ca3\u0003\u0132\u0003\u0132\u0003\u0132",
    "\u0005\u0132\u1ca9\n\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003",
    "\u0132\u0005\u0132\u1caf\n\u0132\u0006\u0132\u1cb1\n\u0132\r\u0132\u000e",
    "\u0132\u1cb2\u0006\u0132\u1cb5\n\u0132\r\u0132\u000e\u0132\u1cb6\u0005",
    "\u0132\u1cb9\n\u0132\u0003\u0132\u0003\u0132\u0005\u0132\u1cbd\n\u0132",
    "\u0003\u0132\u0003\u0132\u0005\u0132\u1cc1\n\u0132\u0003\u0132\u0003",
    "\u0132\u0005\u0132\u1cc5\n\u0132\u0003\u0132\u0003\u0132\u0005\u0132",
    "\u1cc9\n\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0005",
    "\u0132\u1ccf\n\u0132\u0003\u0132\u0005\u0132\u1cd2\n\u0132\u0003\u0132",
    "\u0003\u0132\u0003\u0132\u0003\u0132\u0005\u0132\u1cd8\n\u0132\u0003",
    "\u0132\u0003\u0132\u0005\u0132\u1cdc\n\u0132\u0003\u0132\u0003\u0132",
    "\u0005\u0132\u1ce0\n\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003",
    "\u0132\u0005\u0132\u1ce6\n\u0132\u0003\u0132\u0003\u0132\u0003\u0132",
    "\u0003\u0132\u0005\u0132\u1cec\n\u0132\u0005\u0132\u1cee\n\u0132\u0003",
    "\u0132\u0005\u0132\u1cf1\n\u0132\u0003\u0132\u0003\u0132\u0005\u0132",
    "\u1cf5\n\u0132\u0003\u0132\u0003\u0132\u0005\u0132\u1cf9\n\u0132\u0003",
    "\u0132\u0003\u0132\u0005\u0132\u1cfd\n\u0132\u0003\u0132\u0003\u0132",
    "\u0003\u0132\u0003\u0132\u0005\u0132\u1d03\n\u0132\u0003\u0132\u0005",
    "\u0132\u1d06\n\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132",
    "\u0005\u0132\u1d0c\n\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003",
    "\u0132\u0005\u0132\u1d12\n\u0132\u0003\u0132\u0005\u0132\u1d15\n\u0132",
    "\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0005\u0132\u1d1b\n",
    "\u0132\u0003\u0132\u0005\u0132\u1d1e\n\u0132\u0003\u0132\u0003\u0132",
    "\u0003\u0132\u0003\u0132\u0005\u0132\u1d24\n\u0132\u0003\u0132\u0005",
    "\u0132\u1d27\n\u0132\u0003\u0132\u0003\u0132\u0005\u0132\u1d2b\n\u0132",
    "\u0003\u0132\u0003\u0132\u0005\u0132\u1d2f\n\u0132\u0003\u0132\u0003",
    "\u0132\u0005\u0132\u1d33\n\u0132\u0003\u0132\u0003\u0132\u0003\u0132",
    "\u0005\u0132\u1d38\n\u0132\u0003\u0132\u0005\u0132\u1d3b\n\u0132\u0003",
    "\u0132\u0003\u0132\u0005\u0132\u1d3f\n\u0132\u0003\u0132\u0003\u0132",
    "\u0005\u0132\u1d43\n\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003",
    "\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003",
    "\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0005",
    "\u0132\u1d54\n\u0132\u0007\u0132\u1d56\n\u0132\f\u0132\u000e\u0132\u1d59",
    "\u000b\u0132\u0005\u0132\u1d5b\n\u0132\u0003\u0133\u0003\u0133\u0003",
    "\u0133\u0003\u0133\u0003\u0133\u0005\u0133\u1d62\n\u0133\u0003\u0133",
    "\u0006\u0133\u1d65\n\u0133\r\u0133\u000e\u0133\u1d66\u0003\u0133\u0003",
    "\u0133\u0005\u0133\u1d6b\n\u0133\u0003\u0133\u0003\u0133\u0003\u0133",
    "\u0003\u0133\u0005\u0133\u1d71\n\u0133\u0006\u0133\u1d73\n\u0133\r\u0133",
    "\u000e\u0133\u1d74\u0005\u0133\u1d77\n\u0133\u0003\u0133\u0003\u0133",
    "\u0003\u0133\u0005\u0133\u1d7c\n\u0133\u0003\u0133\u0006\u0133\u1d7f",
    "\n\u0133\r\u0133\u000e\u0133\u1d80\u0006\u0133\u1d83\n\u0133\r\u0133",
    "\u000e\u0133\u1d84\u0003\u0133\u0003\u0133\u0003\u0133\u0005\u0133\u1d8a",
    "\n\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0005\u0133",
    "\u1d90\n\u0133\u0006\u0133\u1d92\n\u0133\r\u0133\u000e\u0133\u1d93\u0006",
    "\u0133\u1d96\n\u0133\r\u0133\u000e\u0133\u1d97\u0005\u0133\u1d9a\n\u0133",
    "\u0003\u0133\u0003\u0133\u0005\u0133\u1d9e\n\u0133\u0003\u0133\u0003",
    "\u0133\u0005\u0133\u1da2\n\u0133\u0003\u0133\u0003\u0133\u0005\u0133",
    "\u1da6\n\u0133\u0003\u0133\u0003\u0133\u0005\u0133\u1daa\n\u0133\u0003",
    "\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0005\u0133\u1db0\n\u0133",
    "\u0003\u0133\u0005\u0133\u1db3\n\u0133\u0003\u0133\u0003\u0133\u0003",
    "\u0133\u0003\u0133\u0005\u0133\u1db9\n\u0133\u0003\u0133\u0003\u0133",
    "\u0005\u0133\u1dbd\n\u0133\u0003\u0133\u0003\u0133\u0005\u0133\u1dc1",
    "\n\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0005\u0133",
    "\u1dc7\n\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0005",
    "\u0133\u1dcd\n\u0133\u0005\u0133\u1dcf\n\u0133\u0003\u0133\u0005\u0133",
    "\u1dd2\n\u0133\u0003\u0133\u0003\u0133\u0005\u0133\u1dd6\n\u0133\u0003",
    "\u0133\u0003\u0133\u0005\u0133\u1dda\n\u0133\u0003\u0133\u0003\u0133",
    "\u0005\u0133\u1dde\n\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0003",
    "\u0133\u0005\u0133\u1de4\n\u0133\u0003\u0133\u0005\u0133\u1de7\n\u0133",
    "\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0005\u0133\u1ded\n",
    "\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0005\u0133\u1df3",
    "\n\u0133\u0003\u0133\u0005\u0133\u1df6\n\u0133\u0003\u0133\u0003\u0133",
    "\u0003\u0133\u0003\u0133\u0005\u0133\u1dfc\n\u0133\u0003\u0133\u0005",
    "\u0133\u1dff\n\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133",
    "\u0005\u0133\u1e05\n\u0133\u0003\u0133\u0005\u0133\u1e08\n\u0133\u0003",
    "\u0133\u0003\u0133\u0005\u0133\u1e0c\n\u0133\u0003\u0133\u0003\u0133",
    "\u0005\u0133\u1e10\n\u0133\u0003\u0133\u0003\u0133\u0005\u0133\u1e14",
    "\n\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0005\u0133\u1e19\n\u0133",
    "\u0003\u0133\u0005\u0133\u1e1c\n\u0133\u0003\u0133\u0003\u0133\u0005",
    "\u0133\u1e20\n\u0133\u0003\u0133\u0003\u0133\u0005\u0133\u1e24\n\u0133",
    "\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0005\u0133\u1e2a\n",
    "\u0133\u0003\u0133\u0005\u0133\u1e2d\n\u0133\u0003\u0133\u0003\u0133",
    "\u0005\u0133\u1e31\n\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0003",
    "\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0003",
    "\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0003\u0133\u0005",
    "\u0133\u1e42\n\u0133\u0007\u0133\u1e44\n\u0133\f\u0133\u000e\u0133\u1e47",
    "\u000b\u0133\u0005\u0133\u1e49\n\u0133\u0003\u0134\u0003\u0134\u0003",
    "\u0134\u0003\u0134\u0003\u0134\u0003\u0134\u0003\u0134\u0003\u0134\u0003",
    "\u0134\u0003\u0134\u0003\u0134\u0003\u0134\u0005\u0134\u1e57\n\u0134",
    "\u0003\u0134\u0003\u0134\u0003\u0134\u0003\u0134\u0005\u0134\u1e5d\n",
    "\u0134\u0003\u0134\u0003\u0134\u0003\u0134\u0003\u0134\u0003\u0134\u0003",
    "\u0134\u0005\u0134\u1e65\n\u0134\u0003\u0134\u0003\u0134\u0003\u0134",
    "\u0003\u0134\u0003\u0134\u0006\u0134\u1e6c\n\u0134\r\u0134\u000e\u0134",
    "\u1e6d\u0003\u0134\u0005\u0134\u1e71\n\u0134\u0003\u0135\u0003\u0135",
    "\u0003\u0135\u0003\u0135\u0003\u0135\u0003\u0135\u0003\u0135\u0003\u0135",
    "\u0003\u0135\u0003\u0135\u0003\u0135\u0003\u0135\u0003\u0135\u0003\u0136",
    "\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0136",
    "\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0136",
    "\u0003\u0136\u0003\u0137\u0003\u0137\u0003\u0137\u0005\u0137\u1e91\n",
    "\u0137\u0003\u0137\u0003\u0137\u0005\u0137\u1e95\n\u0137\u0003\u0137",
    "\u0003\u0137\u0003\u0137\u0007\u0137\u1e9a\n\u0137\f\u0137\u000e\u0137",
    "\u1e9d\u000b\u0137\u0005\u0137\u1e9f\n\u0137\u0003\u0137\u0005\u0137",
    "\u1ea2\n\u0137\u0003\u0137\u0003\u0137\u0003\u0137\u0003\u0137\u0003",
    "\u0137\u0007\u0137\u1ea9\n\u0137\f\u0137\u000e\u0137\u1eac\u000b\u0137",
    "\u0003\u0137\u0003\u0137\u0005\u0137\u1eb0\n\u0137\u0003\u0137\u0003",
    "\u0137\u0003\u0137\u0005\u0137\u1eb5\n\u0137\u0003\u0137\u0005\u0137",
    "\u1eb8\n\u0137\u0005\u0137\u1eba\n\u0137\u0003\u0138\u0003\u0138\u0005",
    "\u0138\u1ebe\n\u0138\u0003\u0138\u0003\u0138\u0005\u0138\u1ec2\n\u0138",
    "\u0003\u0138\u0005\u0138\u1ec5\n\u0138\u0003\u0138\u0003\u0138\u0005",
    "\u0138\u1ec9\n\u0138\u0003\u0139\u0003\u0139\u0003\u013a\u0003\u013a",
    "\u0005\u013a\u1ecf\n\u013a\u0003\u013a\u0003\u013a\u0003\u013a\u0005",
    "\u013a\u1ed4\n\u013a\u0003\u013a\u0003\u013a\u0003\u013a\u0003\u013a",
    "\u0003\u013a\u0005\u013a\u1edb\n\u013a\u0005\u013a\u1edd\n\u013a\u0003",
    "\u013a\u0003\u013a\u0005\u013a\u1ee1\n\u013a\u0003\u013a\u0003\u013a",
    "\u0003\u013a\u0003\u013a\u0007\u013a\u1ee7\n\u013a\f\u013a\u000e\u013a",
    "\u1eea\u000b\u013a\u0003\u013a\u0003\u013a\u0003\u013a\u0005\u013a\u1eef",
    "\n\u013a\u0003\u013a\u0003\u013a\u0005\u013a\u1ef3\n\u013a\u0003\u013a",
    "\u0005\u013a\u1ef6\n\u013a\u0003\u013a\u0003\u013a\u0003\u013a\u0003",
    "\u013a\u0003\u013a\u0003\u013a\u0003\u013a\u0005\u013a\u1eff\n\u013a",
    "\u0003\u013a\u0005\u013a\u1f02\n\u013a\u0003\u013a\u0003\u013a\u0003",
    "\u013a\u0003\u013a\u0005\u013a\u1f08\n\u013a\u0003\u013b\u0003\u013b",
    "\u0003\u013b\u0003\u013b\u0003\u013b\u0005\u013b\u1f0f\n\u013b\u0003",
    "\u013b\u0003\u013b\u0003\u013b\u0005\u013b\u1f14\n\u013b\u0003\u013b",
    "\u0003\u013b\u0003\u013b\u0003\u013b\u0003\u013b\u0003\u013b\u0005\u013b",
    "\u1f1c\n\u013b\u0003\u013c\u0003\u013c\u0003\u013c\u0005\u013c\u1f21",
    "\n\u013c\u0003\u013c\u0003\u013c\u0003\u013c\u0003\u013c\u0003\u013c",
    "\u0003\u013c\u0003\u013c\u0003\u013c\u0003\u013c\u0003\u013c\u0005\u013c",
    "\u1f2d\n\u013c\u0005\u013c\u1f2f\n\u013c\u0003\u013d\u0003\u013d\u0003",
    "\u013d\u0003\u013d\u0003\u013d\u0003\u013d\u0003\u013d\u0003\u013d\u0003",
    "\u013d\u0005\u013d\u1f3a\n\u013d\u0003\u013e\u0003\u013e\u0003\u013e",
    "\u0003\u013e\u0003\u013e\u0005\u013e\u1f41\n\u013e\u0003\u013e\u0003",
    "\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0007\u013e\u1f49",
    "\n\u013e\f\u013e\u000e\u013e\u1f4c\u000b\u013e\u0003\u013f\u0003\u013f",
    "\u0003\u013f\u0003\u013f\u0003\u0140\u0003\u0140\u0003\u0140\u0003\u0140",
    "\u0003\u0140\u0003\u0140\u0003\u0140\u0003\u0140\u0003\u0140\u0003\u0140",
    "\u0003\u0140\u0003\u0140\u0003\u0140\u0003\u0140\u0003\u0140\u0003\u0140",
    "\u0005\u0140\u1f62\n\u0140\u0003\u0141\u0003\u0141\u0003\u0141\u0003",
    "\u0141\u0003\u0141\u0003\u0141\u0003\u0141\u0003\u0141\u0003\u0141\u0003",
    "\u0141\u0003\u0141\u0005\u0141\u1f6f\n\u0141\u0003\u0142\u0003\u0142",
    "\u0003\u0142\u0003\u0142\u0003\u0142\u0003\u0142\u0003\u0142\u0003\u0142",
    "\u0003\u0142\u0003\u0142\u0003\u0142\u0003\u0142\u0003\u0142\u0003\u0142",
    "\u0005\u0142\u1f7f\n\u0142\u0003\u0142\u0003\u0142\u0003\u0142\u0005",
    "\u0142\u1f84\n\u0142\u0003\u0142\u0003\u0142\u0003\u0142\u0003\u0142",
    "\u0003\u0142\u0005\u0142\u1f8b\n\u0142\u0003\u0142\u0005\u0142\u1f8e",
    "\n\u0142\u0006\u0142\u1f90\n\u0142\r\u0142\u000e\u0142\u1f91\u0005\u0142",
    "\u1f94\n\u0142\u0003\u0143\u0003\u0143\u0003\u0143\u0003\u0143\u0003",
    "\u0143\u0003\u0143\u0003\u0143\u0003\u0143\u0003\u0143\u0003\u0143\u0003",
    "\u0143\u0003\u0143\u0003\u0143\u0003\u0143\u0003\u0143\u0005\u0143\u1fa5",
    "\n\u0143\u0003\u0144\u0003\u0144\u0003\u0145\u0003\u0145\u0003\u0145",
    "\u0003\u0145\u0003\u0145\u0003\u0145\u0003\u0145\u0003\u0145\u0003\u0145",
    "\u0003\u0145\u0003\u0145\u0005\u0145\u1fb4\n\u0145\u0003\u0146\u0003",
    "\u0146\u0003\u0146\u0003\u0146\u0003\u0146\u0003\u0146\u0005\u0146\u1fbc",
    "\n\u0146\u0003\u0146\u0003\u0146\u0003\u0146\u0003\u0146\u0003\u0146",
    "\u0003\u0146\u0003\u0146\u0005\u0146\u1fc5\n\u0146\u0003\u0146\u0003",
    "\u0146\u0003\u0146\u0003\u0146\u0003\u0146\u0003\u0146\u0005\u0146\u1fcd",
    "\n\u0146\u0003\u0147\u0003\u0147\u0003\u0147\u0003\u0147\u0003\u0147",
    "\u0003\u0147\u0003\u0147\u0005\u0147\u1fd6\n\u0147\u0003\u0147\u0003",
    "\u0147\u0003\u0147\u0003\u0147\u0003\u0147\u0003\u0147\u0003\u0147\u0003",
    "\u0147\u0003\u0147\u0005\u0147\u1fe1\n\u0147\u0003\u0147\u0003\u0147",
    "\u0005\u0147\u1fe5\n\u0147\u0005\u0147\u1fe7\n\u0147\u0005\u0147\u1fe9",
    "\n\u0147\u0003\u0148\u0003\u0148\u0003\u0148\u0003\u0148\u0005\u0148",
    "\u1fef\n\u0148\u0003\u0148\u0003\u0148\u0003\u0148\u0005\u0148\u1ff4",
    "\n\u0148\u0003\u0148\u0003\u0148\u0003\u0148\u0003\u0148\u0003\u0148",
    "\u0005\u0148\u1ffb\n\u0148\u0003\u0148\u0003\u0148\u0003\u0148\u0003",
    "\u0148\u0003\u0148\u0003\u0148\u0003\u0148\u0003\u0148\u0003\u0148\u0003",
    "\u0148\u0003\u0148\u0005\u0148\u2008\n\u0148\u0005\u0148\u200a\n\u0148",
    "\u0005\u0148\u200c\n\u0148\u0003\u0148\u0005\u0148\u200f\n\u0148\u0003",
    "\u0148\u0005\u0148\u2012\n\u0148\u0003\u0149\u0003\u0149\u0003\u0149",
    "\u0003\u0149\u0003\u0149\u0005\u0149\u2019\n\u0149\u0003\u0149\u0005",
    "\u0149\u201c\n\u0149\u0003\u0149\u0003\u0149\u0003\u0149\u0003\u0149",
    "\u0005\u0149\u2022\n\u0149\u0003\u0149\u0003\u0149\u0003\u0149\u0005",
    "\u0149\u2027\n\u0149\u0005\u0149\u2029\n\u0149\u0003\u0149\u0005\u0149",
    "\u202c\n\u0149\u0003\u0149\u0003\u0149\u0003\u0149\u0003\u0149\u0005",
    "\u0149\u2032\n\u0149\u0003\u0149\u0003\u0149\u0003\u0149\u0003\u0149",
    "\u0003\u0149\u0003\u0149\u0005\u0149\u203a\n\u0149\u0005\u0149\u203c",
    "\n\u0149\u0003\u0149\u0005\u0149\u203f\n\u0149\u0003\u0149\u0003\u0149",
    "\u0005\u0149\u2043\n\u0149\u0003\u0149\u0005\u0149\u2046\n\u0149\u0003",
    "\u0149\u0003\u0149\u0003\u0149\u0003\u0149\u0005\u0149\u204c\n\u0149",
    "\u0003\u0149\u0005\u0149\u204f\n\u0149\u0003\u0149\u0003\u0149\u0005",
    "\u0149\u2053\n\u0149\u0003\u0149\u0005\u0149\u2056\n\u0149\u0003\u0149",
    "\u0003\u0149\u0003\u0149\u0003\u0149\u0005\u0149\u205c\n\u0149\u0003",
    "\u0149\u0005\u0149\u205f\n\u0149\u0005\u0149\u2061\n\u0149\u0003\u014a",
    "\u0003\u014a\u0005\u014a\u2065\n\u014a\u0003\u014b\u0003\u014b\u0003",
    "\u014b\u0005\u014b\u206a\n\u014b\u0003\u014c\u0003\u014c\u0003\u014c",
    "\u0003\u014c\u0003\u014c\u0003\u014c\u0005\u014c\u2072\n\u014c\u0003",
    "\u014c\u0003\u014c\u0005\u014c\u2076\n\u014c\u0003\u014c\u0005\u014c",
    "\u2079\n\u014c\u0003\u014d\u0003\u014d\u0003\u014d\u0005\u014d\u207e",
    "\n\u014d\u0003\u014e\u0003\u014e\u0003\u014e\u0003\u014e\u0003\u014f",
    "\u0003\u014f\u0005\u014f\u2086\n\u014f\u0003\u014f\u0003\u014f\u0003",
    "\u014f\u0005\u014f\u208b\n\u014f\u0003\u0150\u0003\u0150\u0003\u0150",
    "\u0003\u0150\u0003\u0150\u0003\u0151\u0003\u0151\u0003\u0151\u0005\u0151",
    "\u2095\n\u0151\u0003\u0151\u0003\u0151\u0003\u0151\u0003\u0152\u0003",
    "\u0152\u0003\u0152\u0003\u0152\u0003\u0153\u0003\u0153\u0005\u0153\u20a0",
    "\n\u0153\u0003\u0153\u0007\u0153\u20a3\n\u0153\f\u0153\u000e\u0153\u20a6",
    "\u000b\u0153\u0003\u0154\u0003\u0154\u0005\u0154\u20aa\n\u0154\u0003",
    "\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0005\u0155\u20b0\n\u0155",
    "\u0003\u0155\u0003\u0155\u0005\u0155\u20b4\n\u0155\u0003\u0155\u0005",
    "\u0155\u20b7\n\u0155\u0003\u0155\u0003\u0155\u0005\u0155\u20bb\n\u0155",
    "\u0003\u0155\u0003\u0155\u0005\u0155\u20bf\n\u0155\u0003\u0155\u0003",
    "\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0005\u0155\u20c7",
    "\n\u0155\u0003\u0155\u0003\u0155\u0003\u0155\u0005\u0155\u20cc\n\u0155",
    "\u0005\u0155\u20ce\n\u0155\u0003\u0155\u0005\u0155\u20d1\n\u0155\u0003",
    "\u0155\u0007\u0155\u20d4\n\u0155\f\u0155\u000e\u0155\u20d7\u000b\u0155",
    "\u0003\u0156\u0003\u0156\u0005\u0156\u20db\n\u0156\u0003\u0156\u0003",
    "\u0156\u0003\u0156\u0005\u0156\u20e0\n\u0156\u0003\u0156\u0005\u0156",
    "\u20e3\n\u0156\u0003\u0156\u0005\u0156\u20e6\n\u0156\u0003\u0156\u0003",
    "\u0156\u0003\u0156\u0003\u0156\u0005\u0156\u20ec\n\u0156\u0003\u0156",
    "\u0003\u0156\u0003\u0156\u0003\u0156\u0003\u0156\u0003\u0156\u0005\u0156",
    "\u20f4\n\u0156\u0003\u0156\u0003\u0156\u0003\u0156\u0003\u0156\u0003",
    "\u0156\u0003\u0156\u0005\u0156\u20fc\n\u0156\u0003\u0156\u0005\u0156",
    "\u20ff\n\u0156\u0003\u0156\u0005\u0156\u2102\n\u0156\u0003\u0157\u0003",
    "\u0157\u0005\u0157\u2106\n\u0157\u0003\u0157\u0003\u0157\u0003\u0157",
    "\u0005\u0157\u210b\n\u0157\u0003\u0157\u0005\u0157\u210e\n\u0157\u0003",
    "\u0157\u0003\u0157\u0003\u0157\u0003\u0157\u0005\u0157\u2114\n\u0157",
    "\u0003\u0157\u0003\u0157\u0005\u0157\u2118\n\u0157\u0003\u0157\u0003",
    "\u0157\u0003\u0157\u0003\u0157\u0005\u0157\u211e\n\u0157\u0003\u0157",
    "\u0003\u0157\u0003\u0157\u0003\u0157\u0003\u0157\u0003\u0157\u0005\u0157",
    "\u2126\n\u0157\u0003\u0157\u0003\u0157\u0003\u0157\u0003\u0157\u0006",
    "\u0157\u212c\n\u0157\r\u0157\u000e\u0157\u212d\u0003\u0157\u0005\u0157",
    "\u2131\n\u0157\u0003\u0157\u0003\u0157\u0003\u0157\u0003\u0157\u0003",
    "\u0157\u0003\u0157\u0003\u0157\u0003\u0157\u0003\u0157\u0003\u0157\u0003",
    "\u0157\u0003\u0157\u0003\u0157\u0005\u0157\u2140\n\u0157\u0003\u0157",
    "\u0005\u0157\u2143\n\u0157\u0005\u0157\u2145\n\u0157\u0003\u0158\u0003",
    "\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003\u0158\u0003",
    "\u0158\u0003\u0158\u0005\u0158\u2150\n\u0158\u0003\u0159\u0003\u0159",
    "\u0003\u0159\u0003\u0159\u0003\u0159\u0003\u0159\u0003\u0159\u0003\u0159",
    "\u0003\u0159\u0005\u0159\u215b\n\u0159\u0003\u015a\u0003\u015a\u0003",
    "\u015a\u0003\u015a\u0003\u015a\u0007\u015a\u2162\n\u015a\f\u015a\u000e",
    "\u015a\u2165\u000b\u015a\u0003\u015a\u0003\u015a\u0003\u015b\u0003\u015b",
    "\u0003\u015b\u0003\u015b\u0003\u015b\u0005\u015b\u216e\n\u015b\u0003",
    "\u015c\u0003\u015c\u0003\u015c\u0003\u015c\u0003\u015c\u0003\u015c\u0003",
    "\u015c\u0003\u015c\u0005\u015c\u2178\n\u015c\u0005\u015c\u217a\n\u015c",
    "\u0005\u015c\u217c\n\u015c\u0003\u015c\u0005\u015c\u217f\n\u015c\u0003",
    "\u015c\u0005\u015c\u2182\n\u015c\u0003\u015c\u0003\u015c\u0003\u015c",
    "\u0003\u015c\u0003\u015c\u0003\u015c\u0003\u015c\u0003\u015c\u0003\u015c",
    "\u0005\u015c\u218d\n\u015c\u0005\u015c\u218f\n\u015c\u0005\u015c\u2191",
    "\n\u015c\u0003\u015c\u0005\u015c\u2194\n\u015c\u0003\u015d\u0007\u015d",
    "\u2197\n\u015d\f\u015d\u000e\u015d\u219a\u000b\u015d\u0003\u015d\u0003",
    "\u015d\u0003\u015d\u0003\u015e\u0003\u015e\u0003\u015e\u0003\u015e\u0003",
    "\u015e\u0005\u015e\u21a4\n\u015e\u0003\u015f\u0003\u015f\u0003\u015f",
    "\u0003\u015f\u0003\u015f\u0003\u015f\u0003\u015f\u0005\u015f\u21ad\n",
    "\u015f\u0003\u015f\u0005\u015f\u21b0\n\u015f\u0003\u015f\u0005\u015f",
    "\u21b3\n\u015f\u0003\u015f\u0003\u015f\u0003\u015f\u0003\u015f\u0003",
    "\u015f\u0007\u015f\u21ba\n\u015f\f\u015f\u000e\u015f\u21bd\u000b\u015f",
    "\u0005\u015f\u21bf\n\u015f\u0003\u015f\u0005\u015f\u21c2\n\u015f\u0003",
    "\u0160\u0003\u0160\u0003\u0160\u0003\u0160\u0003\u0160\u0005\u0160\u21c9",
    "\n\u0160\u0003\u0160\u0005\u0160\u21cc\n\u0160\u0003\u0160\u0003\u0160",
    "\u0003\u0160\u0003\u0160\u0003\u0160\u0003\u0160\u0003\u0160\u0003\u0160",
    "\u0003\u0160\u0003\u0160\u0003\u0160\u0003\u0160\u0005\u0160\u21da\n",
    "\u0160\u0003\u0160\u0005\u0160\u21dd\n\u0160\u0003\u0160\u0003\u0160",
    "\u0003\u0160\u0003\u0160\u0003\u0160\u0005\u0160\u21e4\n\u0160\u0003",
    "\u0160\u0003\u0160\u0003\u0160\u0003\u0160\u0003\u0160\u0003\u0160\u0003",
    "\u0160\u0003\u0160\u0003\u0160\u0003\u0160\u0003\u0160\u0003\u0160\u0003",
    "\u0160\u0003\u0160\u0005\u0160\u21f4\n\u0160\u0003\u0161\u0003\u0161",
    "\u0005\u0161\u21f8\n\u0161\u0003\u0162\u0003\u0162\u0003\u0162\u0003",
    "\u0162\u0003\u0162\u0003\u0162\u0003\u0162\u0003\u0162\u0005\u0162\u2202",
    "\n\u0162\u0003\u0162\u0003\u0162\u0003\u0162\u0003\u0162\u0003\u0162",
    "\u0003\u0162\u0003\u0162\u0003\u0162\u0003\u0162\u0003\u0162\u0003\u0162",
    "\u0003\u0162\u0003\u0162\u0003\u0162\u0003\u0162\u0003\u0162\u0003\u0162",
    "\u0007\u0162\u2215\n\u0162\f\u0162\u000e\u0162\u2218\u000b\u0162\u0003",
    "\u0163\u0003\u0163\u0003\u0163\u0003\u0163\u0005\u0163\u221e\n\u0163",
    "\u0003\u0164\u0003\u0164\u0003\u0164\u0006\u0164\u2223\n\u0164\r\u0164",
    "\u000e\u0164\u2224\u0003\u0164\u0003\u0164\u0005\u0164\u2229\n\u0164",
    "\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0006\u0164\u222f\n",
    "\u0164\r\u0164\u000e\u0164\u2230\u0003\u0164\u0003\u0164\u0005\u0164",
    "\u2235\n\u0164\u0003\u0164\u0003\u0164\u0005\u0164\u2239\n\u0164\u0003",
    "\u0165\u0003\u0165\u0003\u0165\u0003\u0165\u0005\u0165\u223f\n\u0165",
    "\u0003\u0166\u0003\u0166\u0003\u0166\u0003\u0166\u0003\u0166\u0003\u0166",
    "\u0003\u0166\u0003\u0166\u0005\u0166\u2249\n\u0166\u0003\u0167\u0003",
    "\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003\u0167\u0003",
    "\u0167\u0005\u0167\u2253\n\u0167\u0003\u0168\u0003\u0168\u0003\u0169",
    "\u0003\u0169\u0003\u0169\u0005\u0169\u225a\n\u0169\u0003\u0169\u0003",
    "\u0169\u0003\u0169\u0007\u0169\u225f\n\u0169\f\u0169\u000e\u0169\u2262",
    "\u000b\u0169\u0003\u0169\u0003\u0169\u0003\u0169\u0003\u0169\u0003\u0169",
    "\u0003\u0169\u0005\u0169\u226a\n\u0169\u0003\u0169\u0003\u0169\u0003",
    "\u0169\u0003\u0169\u0003\u0169\u0005\u0169\u2271\n\u0169\u0003\u016a",
    "\u0003\u016a\u0003\u016a\u0003\u016a\u0003\u016a\u0005\u016a\u2278\n",
    "\u016a\u0003\u016a\u0003\u016a\u0003\u016a\u0003\u016a\u0003\u016a\u0003",
    "\u016b\u0003\u016b\u0005\u016b\u2281\n\u016b\u0003\u016b\u0003\u016b",
    "\u0005\u016b\u2285\n\u016b\u0003\u016b\u0003\u016b\u0003\u016b\u0003",
    "\u016b\u0003\u016b\u0003\u016b\u0003\u016b\u0003\u016b\u0005\u016b\u228f",
    "\n\u016b\u0003\u016c\u0003\u016c\u0003\u016c\u0007\u016c\u2294\n\u016c",
    "\f\u016c\u000e\u016c\u2297\u000b\u016c\u0003\u016d\u0003\u016d\u0003",
    "\u016d\u0007\u016d\u229c\n\u016d\f\u016d\u000e\u016d\u229f\u000b\u016d",
    "\u0003\u016e\u0003\u016e\u0003\u016e\u0007\u016e\u22a4\n\u016e\f\u016e",
    "\u000e\u016e\u22a7\u000b\u016e\u0003\u016f\u0005\u016f\u22aa\n\u016f",
    "\u0003\u016f\u0003\u016f\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0170",
    "\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0170",
    "\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0170",
    "\u0003\u0170\u0003\u0170\u0005\u0170\u22c0\n\u0170\u0003\u0170\u0003",
    "\u0170\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0170\u0005",
    "\u0170\u22c9\n\u0170\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0170",
    "\u0005\u0170\u22cf\n\u0170\u0003\u0170\u0003\u0170\u0003\u0170\u0003",
    "\u0170\u0005\u0170\u22d5\n\u0170\u0003\u0170\u0003\u0170\u0003\u0170",
    "\u0003\u0170\u0005\u0170\u22db\n\u0170\u0003\u0170\u0003\u0170\u0003",
    "\u0170\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0170\u0005",
    "\u0170\u22e5\n\u0170\u0003\u0171\u0003\u0171\u0003\u0171\u0003\u0171",
    "\u0003\u0171\u0005\u0171\u22ec\n\u0171\u0003\u0171\u0007\u0171\u22ef",
    "\n\u0171\f\u0171\u000e\u0171\u22f2\u000b\u0171\u0003\u0172\u0003\u0172",
    "\u0005\u0172\u22f6\n\u0172\u0003\u0172\u0003\u0172\u0005\u0172\u22fa",
    "\n\u0172\u0003\u0172\u0003\u0172\u0003\u0172\u0003\u0172\u0003\u0172",
    "\u0005\u0172\u2301\n\u0172\u0003\u0173\u0003\u0173\u0005\u0173\u2305",
    "\n\u0173\u0003\u0173\u0005\u0173\u2308\n\u0173\u0003\u0173\u0003\u0173",
    "\u0003\u0173\u0005\u0173\u230d\n\u0173\u0003\u0173\u0003\u0173\u0005",
    "\u0173\u2311\n\u0173\u0003\u0173\u0003\u0173\u0005\u0173\u2315\n\u0173",
    "\u0003\u0173\u0003\u0173\u0003\u0173\u0005\u0173\u231a\n\u0173\u0003",
    "\u0173\u0003\u0173\u0003\u0173\u0007\u0173\u231f\n\u0173\f\u0173\u000e",
    "\u0173\u2322\u000b\u0173\u0005\u0173\u2324\n\u0173\u0003\u0173\u0003",
    "\u0173\u0005\u0173\u2328\n\u0173\u0003\u0174\u0003\u0174\u0003\u0174",
    "\u0005\u0174\u232d\n\u0174\u0003\u0174\u0003\u0174\u0005\u0174\u2331",
    "\n\u0174\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0175",
    "\u0003\u0175\u0003\u0175\u0005\u0175\u233a\n\u0175\u0003\u0176\u0003",
    "\u0176\u0003\u0176\u0003\u0176\u0003\u0176\u0005\u0176\u2341\n\u0176",
    "\u0003\u0177\u0003\u0177\u0003\u0177\u0003\u0177\u0003\u0177\u0007\u0177",
    "\u2348\n\u0177\f\u0177\u000e\u0177\u234b\u000b\u0177\u0003\u0177\u0003",
    "\u0177\u0003\u0177\u0003\u0177\u0003\u0177\u0003\u0177\u0003\u0177\u0003",
    "\u0177\u0003\u0177\u0005\u0177\u2356\n\u0177\u0005\u0177\u2358\n\u0177",
    "\u0003\u0178\u0003\u0178\u0003\u0178\u0003\u0178\u0003\u0178\u0005\u0178",
    "\u235f\n\u0178\u0003\u0178\u0003\u0178\u0003\u0178\u0003\u0178\u0005",
    "\u0178\u2365\n\u0178\u0003\u0178\u0003\u0178\u0003\u0178\u0005\u0178",
    "\u236a\n\u0178\u0003\u0178\u0007\u0178\u236d\n\u0178\f\u0178\u000e\u0178",
    "\u2370\u000b\u0178\u0005\u0178\u2372\n\u0178\u0003\u0179\u0003\u0179",
    "\u0003\u0179\u0003\u017a\u0003\u017a\u0005\u017a\u2379\n\u017a\u0003",
    "\u017b\u0003\u017b\u0003\u017c\u0003\u017c\u0003\u017c\u0003\u017c\u0003",
    "\u017c\u0007\u017c\u2382\n\u017c\f\u017c\u000e\u017c\u2385\u000b\u017c",
    "\u0003\u017c\u0003\u017c\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d",
    "\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d",
    "\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d",
    "\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d",
    "\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0007\u017d",
    "\u23a4\n\u017d\f\u017d\u000e\u017d\u23a7\u000b\u017d\u0003\u017d\u0003",
    "\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003",
    "\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0003\u017d\u0005",
    "\u017d\u23b6\n\u017d\u0003\u017e\u0003\u017e\u0003\u017e\u0003\u017e",
    "\u0003\u017e\u0005\u017e\u23bd\n\u017e\u0005\u017e\u23bf\n\u017e\u0003",
    "\u017f\u0003\u017f\u0003\u017f\u0007\u017f\u23c4\n\u017f\f\u017f\u000e",
    "\u017f\u23c7\u000b\u017f\u0003\u0180\u0003\u0180\u0003\u0180\u0003\u0180",
    "\u0007\u0180\u23cd\n\u0180\f\u0180\u000e\u0180\u23d0\u000b\u0180\u0003",
    "\u0180\u0003\u0180\u0003\u0181\u0003\u0181\u0003\u0181\u0003\u0181\u0003",
    "\u0181\u0005\u0181\u23d9\n\u0181\u0003\u0182\u0003\u0182\u0003\u0182",
    "\u0005\u0182\u23de\n\u0182\u0003\u0182\u0003\u0182\u0003\u0182\u0003",
    "\u0182\u0003\u0182\u0005\u0182\u23e5\n\u0182\u0003\u0182\u0005\u0182",
    "\u23e8\n\u0182\u0003\u0183\u0003\u0183\u0003\u0183\u0003\u0183\u0003",
    "\u0183\u0005\u0183\u23ef\n\u0183\u0003\u0183\u0003\u0183\u0003\u0183",
    "\u0003\u0183\u0003\u0183\u0005\u0183\u23f6\n\u0183\u0003\u0183\u0005",
    "\u0183\u23f9\n\u0183\u0005\u0183\u23fb\n\u0183\u0003\u0184\u0003\u0184",
    "\u0003\u0184\u0003\u0184\u0003\u0184\u0003\u0184\u0005\u0184\u2403\n",
    "\u0184\u0005\u0184\u2405\n\u0184\u0003\u0185\u0003\u0185\u0003\u0185",
    "\u0003\u0185\u0005\u0185\u240b\n\u0185\u0003\u0186\u0003\u0186\u0003",
    "\u0186\u0007\u0186\u2410\n\u0186\f\u0186\u000e\u0186\u2413\u000b\u0186",
    "\u0003\u0187\u0003\u0187\u0003\u0187\u0003\u0187\u0003\u0187\u0005\u0187",
    "\u241a\n\u0187\u0003\u0188\u0003\u0188\u0007\u0188\u241e\n\u0188\f\u0188",
    "\u000e\u0188\u2421\u000b\u0188\u0003\u0189\u0003\u0189\u0005\u0189\u2425",
    "\n\u0189\u0003\u0189\u0003\u0189\u0005\u0189\u2429\n\u0189\u0003\u0189",
    "\u0003\u0189\u0005\u0189\u242d\n\u0189\u0003\u0189\u0003\u0189\u0003",
    "\u0189\u0005\u0189\u2432\n\u0189\u0005\u0189\u2434\n\u0189\u0003\u0189",
    "\u0003\u0189\u0003\u0189\u0003\u0189\u0003\u0189\u0005\u0189\u243b\n",
    "\u0189\u0003\u0189\u0003\u0189\u0005\u0189\u243f\n\u0189\u0003\u0189",
    "\u0003\u0189\u0003\u0189\u0003\u0189\u0003\u0189\u0005\u0189\u2446\n",
    "\u0189\u0005\u0189\u2448\n\u0189\u0003\u0189\u0003\u0189\u0003\u0189",
    "\u0003\u0189\u0003\u0189\u0005\u0189\u244f\n\u0189\u0005\u0189\u2451",
    "\n\u0189\u0003\u018a\u0003\u018a\u0003\u018a\u0003\u018a\u0003\u018a",
    "\u0003\u018a\u0003\u018a\u0005\u018a\u245a\n\u018a\u0003\u018a\u0003",
    "\u018a\u0003\u018a\u0003\u018a\u0003\u018a\u0003\u018a\u0005\u018a\u2462",
    "\n\u018a\u0003\u018b\u0003\u018b\u0003\u018b\u0007\u018b\u2467\n\u018b",
    "\f\u018b\u000e\u018b\u246a\u000b\u018b\u0003\u018c\u0003\u018c\u0003",
    "\u018c\u0005\u018c\u246f\n\u018c\u0003\u018d\u0003\u018d\u0003\u018d",
    "\u0003\u018d\u0003\u018d\u0003\u018d\u0003\u018d\u0003\u018d\u0003\u018e",
    "\u0005\u018e\u247a\n\u018e\u0003\u018e\u0003\u018e\u0005\u018e\u247e",
    "\n\u018e\u0005\u018e\u2480\n\u018e\u0003\u018e\u0005\u018e\u2483\n\u018e",
    "\u0003\u018e\u0003\u018e\u0003\u018e\u0003\u018e\u0003\u018e\u0003\u018e",
    "\u0003\u018e\u0003\u018e\u0003\u018e\u0003\u018e\u0003\u018e\u0003\u018e",
    "\u0003\u018e\u0003\u018e\u0003\u018e\u0003\u018e\u0003\u018e\u0003\u018e",
    "\u0003\u018e\u0003\u018e\u0003\u018e\u0003\u018e\u0005\u018e\u249b\n",
    "\u018e\u0003\u018f\u0003\u018f\u0003\u018f\u0003\u018f\u0003\u018f\u0003",
    "\u018f\u0003\u018f\u0003\u018f\u0003\u0190\u0003\u0190\u0003\u0190\u0003",
    "\u0190\u0003\u0190\u0003\u0190\u0003\u0190\u0003\u0190\u0003\u0190\u0003",
    "\u0190\u0003\u0191\u0003\u0191\u0003\u0191\u0007\u0191\u24b2\n\u0191",
    "\f\u0191\u000e\u0191\u24b5\u000b\u0191\u0003\u0192\u0003\u0192\u0005",
    "\u0192\u24b9\n\u0192\u0003\u0193\u0003\u0193\u0003\u0193\u0003\u0193",
    "\u0003\u0193\u0003\u0193\u0003\u0193\u0003\u0193\u0003\u0193\u0003\u0193",
    "\u0003\u0193\u0003\u0193\u0003\u0193\u0003\u0193\u0003\u0193\u0003\u0193",
    "\u0007\u0193\u24cb\n\u0193\f\u0193\u000e\u0193\u24ce\u000b\u0193\u0003",
    "\u0193\u0005\u0193\u24d1\n\u0193\u0003\u0193\u0003\u0193\u0005\u0193",
    "\u24d5\n\u0193\u0003\u0194\u0003\u0194\u0003\u0194\u0003\u0194\u0003",
    "\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0003",
    "\u0195\u0003\u0195\u0003\u0195\u0003\u0195\u0005\u0195\u24e5\n\u0195",
    "\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196",
    "\u0005\u0196\u24ed\n\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003",
    "\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003",
    "\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003",
    "\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0005\u0196\u2503",
    "\n\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196",
    "\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196",
    "\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196",
    "\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196",
    "\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196",
    "\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196",
    "\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196",
    "\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196",
    "\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196",
    "\u0003\u0196\u0003\u0196\u0003\u0196\u0005\u0196\u253d\n\u0196\u0003",
    "\u0196\u0003\u0196\u0005\u0196\u2541\n\u0196\u0003\u0196\u0003\u0196",
    "\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196",
    "\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196",
    "\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196",
    "\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196",
    "\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0003\u0196\u0005\u0196",
    "\u2562\n\u0196\u0003\u0197\u0003\u0197\u0003\u0197\u0003\u0197\u0003",
    "\u0197\u0005\u0197\u2569\n\u0197\u0003\u0198\u0003\u0198\u0003\u0198",
    "\u0003\u0198\u0005\u0198\u256f\n\u0198\u0003\u0198\u0003\u0198\u0003",
    "\u0198\u0003\u0198\u0003\u0198\u0003\u0198\u0003\u0198\u0003\u0198\u0003",
    "\u0198\u0003\u0198\u0003\u0198\u0005\u0198\u257c\n\u0198\u0003\u0198",
    "\u0003\u0198\u0003\u0198\u0003\u0198\u0003\u0198\u0003\u0198\u0003\u0198",
    "\u0003\u0198\u0003\u0198\u0003\u0198\u0003\u0198\u0003\u0198\u0003\u0198",
    "\u0005\u0198\u258b\n\u0198\u0003\u0198\u0003\u0198\u0003\u0198\u0003",
    "\u0198\u0003\u0198\u0003\u0198\u0003\u0198\u0003\u0198\u0003\u0198\u0005",
    "\u0198\u2596\n\u0198\u0003\u0199\u0003\u0199\u0003\u0199\u0005\u0199",
    "\u259b\n\u0199\u0003\u0199\u0003\u0199\u0003\u0199\u0003\u0199\u0003",
    "\u0199\u0003\u0199\u0003\u0199\u0003\u0199\u0005\u0199\u25a5\n\u0199",
    "\u0003\u0199\u0003\u0199\u0003\u0199\u0003\u0199\u0003\u0199\u0003\u0199",
    "\u0003\u0199\u0005\u0199\u25ae\n\u0199\u0003\u019a\u0003\u019a\u0003",
    "\u019a\u0003\u019a\u0003\u019a\u0003\u019a\u0003\u019a\u0003\u019b\u0003",
    "\u019b\u0003\u019b\u0003\u019b\u0003\u019b\u0003\u019b\u0003\u019b\u0003",
    "\u019c\u0003\u019c\u0003\u019c\u0003\u019c\u0003\u019c\u0003\u019c\u0003",
    "\u019c\u0003\u019d\u0003\u019d\u0003\u019d\u0003\u019d\u0003\u019d\u0003",
    "\u019e\u0003\u019e\u0003\u019e\u0003\u019e\u0003\u019e\u0003\u019f\u0005",
    "\u019f\u25d0\n\u019f\u0003\u019f\u0003\u019f\u0003\u01a0\u0005\u01a0",
    "\u25d5\n\u01a0\u0003\u01a0\u0003\u01a0\u0003\u01a1\u0003\u01a1\u0005",
    "\u01a1\u25db\n\u01a1\u0003\u01a2\u0005\u01a2\u25de\n\u01a2\u0003\u01a2",
    "\u0003\u01a2\u0003\u01a2\u0005\u01a2\u25e3\n\u01a2\u0003\u01a2\u0007",
    "\u01a2\u25e6\n\u01a2\f\u01a2\u000e\u01a2\u25e9\u000b\u01a2\u0003\u01a2",
    "\u0003\u01a2\u0003\u01a3\u0003\u01a3\u0003\u01a3\u0003\u01a3\u0005\u01a3",
    "\u25f1\n\u01a3\u0003\u01a3\u0007\u01a3\u25f4\n\u01a3\f\u01a3\u000e\u01a3",
    "\u25f7\u000b\u01a3\u0003\u01a3\u0003\u01a3\u0003\u01a4\u0005\u01a4\u25fc",
    "\n\u01a4\u0003\u01a4\u0003\u01a4\u0003\u01a4\u0003\u01a4\u0003\u01a4",
    "\u0007\u01a4\u2603\n\u01a4\f\u01a4\u000e\u01a4\u2606\u000b\u01a4\u0003",
    "\u01a4\u0003\u01a4\u0003\u01a4\u0003\u01a4\u0003\u01a4\u0003\u01a4\u0003",
    "\u01a4\u0003\u01a4\u0003\u01a4\u0003\u01a4\u0003\u01a4\u0003\u01a4\u0007",
    "\u01a4\u2614\n\u01a4\f\u01a4\u000e\u01a4\u2617\u000b\u01a4\u0003\u01a4",
    "\u0003\u01a4\u0003\u01a4\u0005\u01a4\u261c\n\u01a4\u0003\u01a4\u0003",
    "\u01a4\u0003\u01a4\u0003\u01a4\u0003\u01a4\u0003\u01a4\u0005\u01a4\u2624",
    "\n\u01a4\u0003\u01a5\u0003\u01a5\u0005\u01a5\u2628\n\u01a5\u0003\u01a6",
    "\u0003\u01a6\u0003\u01a6\u0003\u01a6\u0007\u01a6\u262e\n\u01a6\f\u01a6",
    "\u000e\u01a6\u2631\u000b\u01a6\u0003\u01a6\u0003\u01a6\u0003\u01a7\u0003",
    "\u01a7\u0005\u01a7\u2637\n\u01a7\u0003\u01a8\u0003\u01a8\u0003\u01a8",
    "\u0003\u01a8\u0003\u01a8\u0003\u01a8\u0003\u01a8\u0003\u01a8\u0003\u01a8",
    "\u0007\u01a8\u2642\n\u01a8\f\u01a8\u000e\u01a8\u2645\u000b\u01a8\u0003",
    "\u01a9\u0003\u01a9\u0003\u01a9\u0007\u01a9\u264a\n\u01a9\f\u01a9\u000e",
    "\u01a9\u264d\u000b\u01a9\u0003\u01aa\u0003\u01aa\u0003\u01aa\u0003\u01aa",
    "\u0003\u01aa\u0003\u01aa\u0003\u01aa\u0003\u01aa\u0003\u01aa\u0003\u01aa",
    "\u0005\u01aa\u2659\n\u01aa\u0003\u01ab\u0003\u01ab\u0003\u01ab\u0003",
    "\u01ab\u0003\u01ab\u0005\u01ab\u2660\n\u01ab\u0003\u01ab\u0003\u01ab",
    "\u0003\u01ab\u0003\u01ab\u0005\u01ab\u2666\n\u01ab\u0003\u01ab\u0003",
    "\u01ab\u0005\u01ab\u266a\n\u01ab\u0003\u01ab\u0003\u01ab\u0003\u01ab",
    "\u0003\u01ab\u0003\u01ab\u0003\u01ab\u0003\u01ab\u0003\u01ab\u0003\u01ab",
    "\u0003\u01ab\u0003\u01ab\u0003\u01ab\u0003\u01ab\u0003\u01ab\u0003\u01ab",
    "\u0005\u01ab\u267b\n\u01ab\u0003\u01ac\u0003\u01ac\u0003\u01ac\u0003",
    "\u01ac\u0003\u01ac\u0003\u01ac\u0003\u01ac\u0003\u01ac\u0003\u01ac\u0003",
    "\u01ac\u0003\u01ac\u0003\u01ac\u0003\u01ac\u0005\u01ac\u268a\n\u01ac",
    "\u0005\u01ac\u268c\n\u01ac\u0003\u01ac\u0003\u01ac\u0003\u01ac\u0005",
    "\u01ac\u2691\n\u01ac\u0003\u01ad\u0005\u01ad\u2694\n\u01ad\u0003\u01ad",
    "\u0003\u01ad\u0003\u01ae\u0003\u01ae\u0003\u01ae\u0003\u01ae\u0003\u01ae",
    "\u0005\u01ae\u269d\n\u01ae\u0003\u01ae\u0005\u01ae\u26a0\n\u01ae\u0003",
    "\u01ae\u0005\u01ae\u26a3\n\u01ae\u0003\u01ae\u0003\u01ae\u0003\u01af",
    "\u0003\u01af\u0003\u01af\u0003\u01b0\u0003\u01b0\u0003\u01b0\u0003\u01b0",
    "\u0003\u01b0\u0003\u01b0\u0005\u01b0\u26b0\n\u01b0\u0003\u01b1\u0003",
    "\u01b1\u0005\u01b1\u26b4\n\u01b1\u0003\u01b2\u0003\u01b2\u0003\u01b2",
    "\u0003\u01b2\u0003\u01b2\u0003\u01b2\u0005\u01b2\u26bc\n\u01b2\u0003",
    "\u01b3\u0003\u01b3\u0003\u01b3\u0003\u01b3\u0005\u01b3\u26c2\n\u01b3",
    "\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0007\u01b4\u26c8\n",
    "\u01b4\f\u01b4\u000e\u01b4\u26cb\u000b\u01b4\u0003\u01b4\u0003\u01b4",
    "\u0003\u01b4\u0003\u01b4\u0005\u01b4\u26d1\n\u01b4\u0003\u01b4\u0003",
    "\u01b4\u0003\u01b4\u0003\u01b4\u0005\u01b4\u26d7\n\u01b4\u0003\u01b4",
    "\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4",
    "\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4\u0003\u01b4",
    "\u0005\u01b4\u26e6\n\u01b4\u0003\u01b5\u0003\u01b5\u0003\u01b5\u0003",
    "\u01b5\u0003\u01b5\u0003\u01b5\u0003\u01b5\u0005\u01b5\u26ef\n\u01b5",
    "\u0003\u01b5\u0003\u01b5\u0003\u01b6\u0003\u01b6\u0005\u01b6\u26f5\n",
    "\u01b6\u0003\u01b7\u0003\u01b7\u0003\u01b7\u0003\u01b7\u0005\u01b7\u26fb",
    "\n\u01b7\u0003\u01b7\u0005\u01b7\u26fe\n\u01b7\u0003\u01b7\u0003\u01b7",
    "\u0005\u01b7\u2702\n\u01b7\u0003\u01b7\u0003\u01b7\u0003\u01b7\u0007",
    "\u01b7\u2707\n\u01b7\f\u01b7\u000e\u01b7\u270a\u000b\u01b7\u0003\u01b8",
    "\u0003\u01b8\u0003\u01b8\u0003\u01b8\u0003\u01b8\u0005\u01b8\u2711\n",
    "\u01b8\u0003\u01b8\u0005\u01b8\u2714\n\u01b8\u0003\u01b8\u0003\u01b8",
    "\u0003\u01b8\u0003\u01b8\u0005\u01b8\u271a\n\u01b8\u0003\u01b8\u0003",
    "\u01b8\u0003\u01b8\u0003\u01b8\u0005\u01b8\u2720\n\u01b8\u0005\u01b8",
    "\u2722\n\u01b8\u0003\u01b8\u0003\u01b8\u0003\u01b8\u0003\u01b8\u0005",
    "\u01b8\u2728\n\u01b8\u0003\u01b8\u0005\u01b8\u272b\n\u01b8\u0005\u01b8",
    "\u272d\n\u01b8\u0003\u01b8\u0003\u01b8\u0003\u01b8\u0003\u01b8\u0005",
    "\u01b8\u2733\n\u01b8\u0005\u01b8\u2735\n\u01b8\u0003\u01b8\u0003\u01b8",
    "\u0003\u01b9\u0003\u01b9\u0003\u01b9\u0003\u01b9\u0003\u01b9\u0003\u01b9",
    "\u0003\u01b9\u0003\u01b9\u0003\u01b9\u0003\u01b9\u0005\u01b9\u2743\n",
    "\u01b9\u0003\u01b9\u0003\u01b9\u0003\u01b9\u0003\u01b9\u0003\u01b9\u0005",
    "\u01b9\u274a\n\u01b9\u0003\u01b9\u0003\u01b9\u0003\u01ba\u0003\u01ba",
    "\u0003\u01ba\u0003\u01ba\u0003\u01ba\u0005\u01ba\u2753\n\u01ba\u0003",
    "\u01bb\u0003\u01bb\u0003\u01bb\u0003\u01bb\u0003\u01bb\u0005\u01bb\u275a",
    "\n\u01bb\u0003\u01bc\u0003\u01bc\u0003\u01bc\u0003\u01bc\u0003\u01bc",
    "\u0003\u01bc\u0003\u01bc\u0003\u01bc\u0003\u01bc\u0003\u01bc\u0005\u01bc",
    "\u2766\n\u01bc\u0003\u01bc\u0003\u01bc\u0003\u01bc\u0003\u01bc\u0003",
    "\u01bc\u0005\u01bc\u276d\n\u01bc\u0003\u01bc\u0003\u01bc\u0003\u01bd",
    "\u0003\u01bd\u0003\u01bd\u0005\u01bd\u2774\n\u01bd\u0003\u01bd\u0003",
    "\u01bd\u0003\u01bd\u0003\u01bd\u0003\u01bd\u0005\u01bd\u277b\n\u01bd",
    "\u0003\u01bd\u0003\u01bd\u0003\u01bd\u0003\u01bd\u0005\u01bd\u2781\n",
    "\u01bd\u0003\u01bd\u0003\u01bd\u0003\u01bd\u0003\u01bd\u0003\u01bd\u0005",
    "\u01bd\u2788\n\u01bd\u0003\u01bd\u0005\u01bd\u278b\n\u01bd\u0003\u01be",
    "\u0003\u01be\u0003\u01be\u0005\u01be\u2790\n\u01be\u0003\u01be\u0003",
    "\u01be\u0003\u01bf\u0003\u01bf\u0003\u01bf\u0005\u01bf\u2797\n\u01bf",
    "\u0003\u01bf\u0003\u01bf\u0003\u01bf\u0003\u01bf\u0003\u01bf\u0005\u01bf",
    "\u279e\n\u01bf\u0003\u01bf\u0003\u01bf\u0003\u01c0\u0003\u01c0\u0005",
    "\u01c0\u27a4\n\u01c0\u0003\u01c1\u0003\u01c1\u0003\u01c1\u0005\u01c1",
    "\u27a9\n\u01c1\u0003\u01c1\u0003\u01c1\u0003\u01c1\u0003\u01c1\u0005",
    "\u01c1\u27af\n\u01c1\u0003\u01c1\u0003\u01c1\u0003\u01c1\u0003\u01c1",
    "\u0005\u01c1\u27b5\n\u01c1\u0003\u01c1\u0003\u01c1\u0003\u01c1\u0003",
    "\u01c1\u0005\u01c1\u27bb\n\u01c1\u0003\u01c1\u0003\u01c1\u0003\u01c1",
    "\u0003\u01c1\u0005\u01c1\u27c1\n\u01c1\u0003\u01c1\u0003\u01c1\u0003",
    "\u01c1\u0003\u01c1\u0005\u01c1\u27c7\n\u01c1\u0003\u01c1\u0003\u01c1",
    "\u0003\u01c1\u0003\u01c1\u0005\u01c1\u27cd\n\u01c1\u0003\u01c1\u0003",
    "\u01c1\u0003\u01c1\u0003\u01c1\u0005\u01c1\u27d3\n\u01c1\u0003\u01c1",
    "\u0005\u01c1\u27d6\n\u01c1\u0003\u01c2\u0003\u01c2\u0005\u01c2\u27da",
    "\n\u01c2\u0003\u01c2\u0003\u01c2\u0003\u01c2\u0005\u01c2\u27df\n\u01c2",
    "\u0007\u01c2\u27e1\n\u01c2\f\u01c2\u000e\u01c2\u27e4\u000b\u01c2\u0003",
    "\u01c3\u0003\u01c3\u0003\u01c3\u0007\u01c3\u27e9\n\u01c3\f\u01c3\u000e",
    "\u01c3\u27ec\u000b\u01c3\u0003\u01c4\u0003\u01c4\u0005\u01c4\u27f0\n",
    "\u01c4\u0003\u01c5\u0003\u01c5\u0003\u01c6\u0003\u01c6\u0003\u01c7\u0005",
    "\u01c7\u27f7\n\u01c7\u0003\u01c7\u0003\u01c7\u0003\u01c8\u0003\u01c8",
    "\u0003\u01c8\u0003\u01c8\u0003\u01c8\u0005\u01c8\u2800\n\u01c8\u0005",
    "\u01c8\u2802\n\u01c8\u0003\u01c9\u0003\u01c9\u0003\u01c9\u0003\u01c9",
    "\u0003\u01c9\u0005\u01c9\u2809\n\u01c9\u0003\u01ca\u0003\u01ca\u0003",
    "\u01ca\u0003\u01ca\u0003\u01ca\u0003\u01ca\u0003\u01ca\u0003\u01ca\u0003",
    "\u01ca\u0003\u01ca\u0005\u01ca\u2815\n\u01ca\u0003\u01cb\u0003\u01cb",
    "\u0003\u01cb\u0005\u01cb\u281a\n\u01cb\u0003\u01cb\u0003\u01cb\u0003",
    "\u01cb\u0003\u01cb\u0003\u01cb\u0003\u01cb\u0003\u01cb\u0003\u01cb\u0003",
    "\u01cb\u0005\u01cb\u2825\n\u01cb\u0003\u01cb\u0003\u01cb\u0003\u01cb",
    "\u0003\u01cb\u0003\u01cb\u0003\u01cb\u0003\u01cb\u0003\u01cb\u0005\u01cb",
    "\u282f\n\u01cb\u0005\u01cb\u2831\n\u01cb\u0003\u01cb\u0003\u01cb\u0003",
    "\u01cb\u0003\u01cb\u0005\u01cb\u2837\n\u01cb\u0005\u01cb\u2839\n\u01cb",
    "\u0003\u01cb\u0003\u01cb\u0003\u01cb\u0005\u01cb\u283e\n\u01cb\u0005",
    "\u01cb\u2840\n\u01cb\u0003\u01cb\u0005\u01cb\u2843\n\u01cb\u0003\u01cc",
    "\u0003\u01cc\u0005\u01cc\u2847\n\u01cc\u0003\u01cd\u0003\u01cd\u0005",
    "\u01cd\u284b\n\u01cd\u0003\u01ce\u0003\u01ce\u0003\u01ce\u0003\u01ce",
    "\u0005\u01ce\u2851\n\u01ce\u0003\u01ce\u0003\u01ce\u0003\u01ce\u0003",
    "\u01ce\u0003\u01ce\u0003\u01ce\u0003\u01ce\u0005\u01ce\u285a\n\u01ce",
    "\u0003\u01ce\u0005\u01ce\u285d\n\u01ce\u0005\u01ce\u285f\n\u01ce\u0003",
    "\u01cf\u0005\u01cf\u2862\n\u01cf\u0003\u01cf\u0003\u01cf\u0003\u01cf",
    "\u0003\u01cf\u0005\u01cf\u2868\n\u01cf\u0003\u01cf\u0003\u01cf\u0005",
    "\u01cf\u286c\n\u01cf\u0003\u01cf\u0005\u01cf\u286f\n\u01cf\u0003\u01d0",
    "\u0003\u01d0\u0003\u01d0\u0003\u01d0\u0003\u01d0\u0003\u01d0\u0003\u01d0",
    "\u0005\u01d0\u2878\n\u01d0\u0003\u01d1\u0003\u01d1\u0003\u01d1\u0003",
    "\u01d1\u0003\u01d1\u0003\u01d1\u0003\u01d1\u0005\u01d1\u2881\n\u01d1",
    "\u0003\u01d2\u0003\u01d2\u0003\u01d2\u0003\u01d2\u0003\u01d2\u0003\u01d2",
    "\u0003\u01d2\u0003\u01d2\u0003\u01d2\u0003\u01d2\u0005\u01d2\u288d\n",
    "\u01d2\u0003\u01d2\u0005\u01d2\u2890\n\u01d2\u0003\u01d3\u0003\u01d3",
    "\u0005\u01d3\u2894\n\u01d3\u0003\u01d3\u0003\u01d3\u0003\u01d3\u0003",
    "\u01d3\u0005\u01d3\u289a\n\u01d3\u0003\u01d3\u0005\u01d3\u289d\n\u01d3",
    "\u0003\u01d3\u0003\u01d3\u0003\u01d3\u0003\u01d3\u0005\u01d3\u28a3\n",
    "\u01d3\u0003\u01d4\u0003\u01d4\u0003\u01d4\u0005\u01d4\u28a8\n\u01d4",
    "\u0003\u01d5\u0003\u01d5\u0003\u01d5\u0005\u01d5\u28ad\n\u01d5\u0003",
    "\u01d5\u0003\u01d5\u0005\u01d5\u28b1\n\u01d5\u0003\u01d5\u0003\u01d5",
    "\u0005\u01d5\u28b5\n\u01d5\u0003\u01d5\u0003\u01d5\u0005\u01d5\u28b9",
    "\n\u01d5\u0003\u01d6\u0003\u01d6\u0003\u01d7\u0003\u01d7\u0003\u01d7",
    "\u0005\u01d7\u28c0\n\u01d7\u0003\u01d8\u0003\u01d8\u0003\u01d9\u0003",
    "\u01d9\u0003\u01d9\u0003\u01d9\u0003\u01d9\u0003\u01d9\u0003\u01d9\u0003",
    "\u01d9\u0003\u01d9\u0003\u01d9\u0003\u01d9\u0003\u01d9\u0003\u01d9\u0003",
    "\u01d9\u0003\u01d9\u0005\u01d9\u28d3\n\u01d9\u0003\u01da\u0003\u01da",
    "\u0003\u01db\u0003\u01db\u0005\u01db\u28d9\n\u01db\u0003\u01db\u0002",
    "\u0004^\u02c2\u01dc\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014",
    "\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd",
    "fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090",
    "\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8",
    "\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0",
    "\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8",
    "\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0",
    "\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108",
    "\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120",
    "\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138",
    "\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150",
    "\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168",
    "\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180",
    "\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198",
    "\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0",
    "\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8",
    "\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0",
    "\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8",
    "\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210",
    "\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228",
    "\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240",
    "\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258",
    "\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270",
    "\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288",
    "\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0",
    "\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8",
    "\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0",
    "\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8",
    "\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300",
    "\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318",
    "\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330",
    "\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348",
    "\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c\u035e\u0360",
    "\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378",
    "\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c\u038e\u0390",
    "\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8",
    "\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u0002\u0086\u0003\u0002\u030a\u030b",
    "\u0004\u0002\u030a\u030a\u030f\u030f\u0005\u0002\u01d6\u01d6\u02e4\u02e4",
    "\u02e7\u02e7\u0004\u0002\u030a\u030b\u030f\u030f\u0004\u0002\u00ba\u00ba",
    "\u02c6\u02c6\u0005\u0002||\u012a\u012a\u016a\u016a\u0004\u0002\u00e1",
    "\u00e1\u00e4\u00e4\u0003\u0002\u030f\u0310\u0003\u0002\u0123\u0127\u0004",
    "\u0002\u01c4\u01c4\u026f\u026f\u0004\u0002\u012d\u012d\u0269\u0269\u0005",
    "\u0002TT\u012d\u012d\u0269\u0269\u0005\u0002\u00d4\u00d4\u00ff\u00ff",
    "\u02ba\u02bb\u0004\u0002\u0012\u0012\u02dc\u02dc\u0004\u0002\u0016\u0016",
    "\u0239\u0239\u0004\u0002\u0005\u0005\u0297\u0297\u0005\u0002\u0005\u0005",
    "\u0261\u0261\u0295\u0295\u0004\u0002\t\tHH\u0004\u0002\u0003\u0003g",
    "g\u0004\u0002\u01e1\u01e1\u01e9\u01e9\u0004\u0002\u030b\u030b\u030f",
    "\u030f\u0004\u0002\u0224\u0224\u024c\u024c\u0004\u0002\u0007\b\u00da",
    "\u00da\u0005\u0002\u00d4\u00d4\u00f6\u00f6\u00f8\u00f8\u0004\u0002\u014c",
    "\u014c\u014f\u014f\u0004\u0002\n\n\u00ec\u00ec\u0003\u0002\u030d\u030e",
    "\u0004\u0002\u0003\u0003\u013c\u013c\u0004\u0002\u00b5\u00b5\u017a\u017a",
    "\u0003\u0002\u0105\u0106\u0004\u0002\u030b\u030b\u030f\u0310\u0004\u0002",
    "\u00cd\u00cd\u0168\u0168\u0004\u0002\u00c8\u00c8\u0145\u0145\u0004\u0002",
    "\u010c\u010c\u01e1\u01e1\u0004\u0002\u030d\u030d\u030f\u030f\u0004\u0002",
    "]]\u0091\u0091\u0006\u0002\\\\\u00a1\u00a1\u0131\u0131\u016b\u016b\u0004",
    "\u0002\u001d\u001d\u01fe\u01fe\u0004\u0002\u00a1\u00a1\u016b\u016b\u0004",
    "\u0002\\\\\u016b\u016b\u0005\u0002\u0209\u0209\u024c\u024c\u02e0\u02e0",
    "\u0004\u0002\u02f5\u02f5\u030b\u030b\u0005\u0002AA\u013e\u013e\u01f7",
    "\u01f7\u0004\u0002YY\u030f\u030f\u0004\u0002YY\u030b\u030b\u0004\u0002",
    "\u0233\u0233\u030f\u030f\u0005\u0002\u0209\u0209\u0224\u0224\u024c\u024c",
    "\u0006\u0002\u0186\u0188\u01db\u01dc\u0290\u0292\u02ea\u02eb\u0004\u0002",
    "\u0085\u0085\u008b\u008b\u0005\u0002\u0214\u0214\u0238\u0238\u024a\u024a",
    "\u0005\u0002\f\f\u0158\u0158\u021d\u021d\u0004\u0002\u00d4\u00d4\u00f2",
    "\u00f2\u0003\u0002\u0101\u0102\u0005\u0002\\\\\u00a1\u00a1\u016b\u016b",
    "\u0004\u0002\u0085\u0085\u018a\u018a\u0004\u0002\u0272\u0273\u0293\u0293",
    "\u0004\u0002\u00f4\u00f4\u02b2\u02b2\u0005\u0002\u01ec\u01ec\u02b5\u02b5",
    "\u02fd\u02fd\u0005\u0002\u0155\u0155\u019a\u019a\u01e1\u01e1\u0005\u0002",
    "\u01cf\u01cf\u0216\u0216\u024f\u024f\u0004\u0002\u020c\u020c\u0233\u0233",
    "\u0004\u0002\u0005\u0005\u00a5\u00a6\u0005\u0002\u00aa\u00aa\u00cf\u00cf",
    "\u00dd\u00dd\u0005\u0002\u0112\u0112\u0152\u0152\u01e2\u01e2\u0004\u0002",
    "kk\u01e2\u01e2\u0005\u0002\u0005\u0005\u017e\u017e\u0279\u0279\u0004",
    "\u0002\u008c\u008c\u00e1\u00e1\u0005\u0002\u01e7\u01e7\u026a\u026a\u026d",
    "\u026d\u0004\u0002\u0295\u0295\u0297\u0297\u0005\u0002\u0255\u0255\u02ab",
    "\u02ab\u02ca\u02ca\u0005\u0002\u018d\u018d\u01e2\u01e2\u0203\u0203\u0004",
    "\u0002\u0117\u0117\u02d7\u02d7\u0004\u0002\u0203\u0203\u02c9\u02c9\u0005",
    "\u0002\u008c\u008c\u01ac\u01ac\u02c9\u02c9\u0005\u0002\u00d4\u00d4\u01b4",
    "\u01b4\u02e8\u02e8\u0004\u0002\u024f\u024f\u02bd\u02bd\u0004\u0002\u0081",
    "\u0081\u01fa\u01fa\u0005\u0002aa\u0157\u0157\u016d\u016d\u0004\u0002",
    "88\u00d9\u00d9\u0004\u0002\u009f\u009f\u00d2\u00d2\u0004\u0002\u00d6",
    "\u00d6\u0140\u0140\u0004\u0002\u00d1\u00d1\u0205\u0205\u0004\u0002\u00d8",
    "\u00d8\u01b4\u01b4\u0004\u0002BB\u0151\u0151\u0004\u0002\u00d5\u00d5",
    "\u011d\u011d\u0004\u0002\u00b8\u00b8\u00d7\u00d7\u0004\u0002\u0186\u0188",
    "\u02eb\u02eb\u0004\u0002\u0170\u0170\u0236\u0236\u0003\u0002\u0272\u0273",
    "\u0004\u0002\u0081\u0081\u0310\u0310\u0004\u0002\u01d2\u01d2\u01ec\u01ec",
    "\u0004\u0002\u01f2\u01f2\u02cf\u02cf\u0004\u0002\u0155\u0155\u0174\u0174",
    "\u0003\u0002\u015f\u0160\u0006\u0002\u01ad\u01ad\u0274\u0274\u02c1\u02c1",
    "\u030f\u030f\u0004\u0002\u01bd\u01bd\u01e5\u01e5\u0004\u0002\u0206\u0206",
    "\u02b7\u02b7\u0006\u0002\u01e6\u01e6\u01f9\u01f9\u0227\u0227\u02d0\u02d0",
    "\u0005\u0002\u0270\u0270\u0295\u0295\u02b8\u02b8\u0004\u0002\u0180\u0180",
    "\u029d\u029d\u0003\u0002\u0329\u032b\u0004\u0002\u032c\u032d\u032f\u0331",
    "\u0003\u0002\u032c\u032d\u0005\u0002\u0005\u0005\f\f\u0142\u0142\u0004",
    "\u0002\u0005\u0005bb\u0003\u0002\u0311\u0312\u0004\u0002\u02b0\u02b0",
    "\u02b2\u02b2\u0004\u0002\u01ff\u01ff\u025b\u025b\u0006\u0002\u0108\u0108",
    "\u019a\u019a\u01f3\u01f3\u027a\u027a\u0005\u0002\u01a6\u01a6\u02ae\u02ae",
    "\u02f0\u02f0\u0004\u0002\u0010\u0010^^\u0004\u0002\u00ed\u00ed\u0212",
    "\u0212\u0005\u0002\u00c8\u00c8\u01bb\u01bb\u0212\u0212\u0005\u0002\u00c8",
    "\u00c8\u0212\u0212\u0237\u0237\u0004\u0002\u00de\u00de\u030a\u030b\u0005",
    "\u0002\u008c\u008c\u00b0\u00b0\u011e\u011e\u0006\u0002\u00c8\u00c8\u0212",
    "\u0212\u0237\u0237\u02a2\u02a2\u0004\u0002\u030a\u030a\u030c\u030c\u0005",
    "\u0002\u01d9\u01d9\u028f\u028f\u02b3\u02b3\b\u0002\u01a2\u01a2\u023b",
    "\u023b\u024e\u024e\u02d3\u02d4\u02da\u02da\u02fa\u02fb\u0004\u0002\u01c0",
    "\u01c0\u01c2\u01c2\u0004\u0002\u0200\u0200\u022c\u022c\u0004\u0002\u022a",
    "\u022a\u022d\u022d\u0004\u0002\u028e\u028e\u02b2\u02b2\u0005\u0002\u008c",
    "\u008c\u00e1\u00e1\u0295\u0295\u0004\u000244\u00d3\u00d3\u0003\u0002",
    "\u010f\u0110\u0004\u0002\u023b\u023b\u030b\u030b\u0004\u0002\u030b\u030b",
    "\u0311\u0311b\u0002\'\'RRrr\u0082\u0083\u0086\u0086\u00ab\u00ab\u00bc",
    "\u00bd\u00e2\u00e2\u00f0\u00f0\u0104\u0104\u0108\u0108\u0119\u011a\u0121",
    "\u0121\u0128\u0128\u0136\u0136\u013f\u013f\u0143\u0143\u014a\u014a\u0158",
    "\u0158\u0180\u0180\u0183\u0183\u0185\u0185\u0195\u0195\u019a\u019a\u01a1",
    "\u01a2\u01ad\u01ae\u01b1\u01b1\u01b5\u01b5\u01b9\u01b9\u01bb\u01bc\u01be",
    "\u01c2\u01d6\u01d6\u01d8\u01d9\u01e1\u01e1\u01e6\u01e6\u01ec\u01ec\u01f1",
    "\u01f1\u01f8\u01f9\u01ff\u01ff\u0201\u0203\u0206\u0207\u020c\u020c\u020e",
    "\u020f\u0212\u0212\u0218\u0218\u021a\u021a\u021e\u0220\u0223\u0223\u0225",
    "\u0227\u022b\u022b\u022e\u022e\u0233\u0237\u023a\u023b\u0245\u0246\u0248",
    "\u0248\u024e\u024e\u0253\u0253\u0256\u0256\u025b\u025d\u0260\u0260\u0265",
    "\u0265\u0267\u0267\u026b\u026b\u026d\u026e\u0270\u0274\u0276\u0277\u027a",
    "\u027a\u027e\u027e\u0280\u0280\u0285\u0285\u028e\u028f\u0293\u0293\u0295",
    "\u0295\u0299\u0299\u029d\u029d\u02a2\u02a2\u02a4\u02a4\u02ad\u02ae\u02b0",
    "\u02b5\u02b7\u02b8\u02c1\u02c1\u02c4\u02c4\u02c9\u02c9\u02cb\u02cb\u02cd",
    "\u02ce\u02d0\u02d1\u02d3\u02d4\u02da\u02da\u02e1\u02e4\u02ed\u02ed\u02f0",
    "\u02f4\u02f6\u02f6\u02f9\u02fd\u02ff\u02ff\u0301\u0302\u030c\u030c\u0003",
    "\u0002\u0317\u031e\u0007\u0002\u0209\u0209\u0224\u0224\u024c\u024c\u02e0",
    "\u02e0\u032b\u032b\u0002\u2f81\u0002\u03b9\u0003\u0002\u0002\u0002\u0004",
    "\u03be\u0003\u0002\u0002\u0002\u0006\u03c9\u0003\u0002\u0002\u0002\b",
    "\u03d4\u0003\u0002\u0002\u0002\n\u03db\u0003\u0002\u0002\u0002\f\u047a",
    "\u0003\u0002\u0002\u0002\u000e\u0481\u0003\u0002\u0002\u0002\u0010\u048f",
    "\u0003\u0002\u0002\u0002\u0012\u0491\u0003\u0002\u0002\u0002\u0014\u049c",
    "\u0003\u0002\u0002\u0002\u0016\u04a0\u0003\u0002\u0002\u0002\u0018\u04ae",
    "\u0003\u0002\u0002\u0002\u001a\u04b0\u0003\u0002\u0002\u0002\u001c\u04b7",
    "\u0003\u0002\u0002\u0002\u001e\u04c1\u0003\u0002\u0002\u0002 \u04cd",
    "\u0003\u0002\u0002\u0002\"\u04cf\u0003\u0002\u0002\u0002$\u04d1\u0003",
    "\u0002\u0002\u0002&\u04d3\u0003\u0002\u0002\u0002(\u04ed\u0003\u0002",
    "\u0002\u0002*\u04fe\u0003\u0002\u0002\u0002,\u050b\u0003\u0002\u0002",
    "\u0002.\u0510\u0003\u0002\u0002\u00020\u0526\u0003\u0002\u0002\u0002",
    "2\u0534\u0003\u0002\u0002\u00024\u0536\u0003\u0002\u0002\u00026\u0553",
    "\u0003\u0002\u0002\u00028\u0568\u0003\u0002\u0002\u0002:\u0575\u0003",
    "\u0002\u0002\u0002<\u057a\u0003\u0002\u0002\u0002>\u057e\u0003\u0002",
    "\u0002\u0002@\u0582\u0003\u0002\u0002\u0002B\u058d\u0003\u0002\u0002",
    "\u0002D\u0592\u0003\u0002\u0002\u0002F\u0594\u0003\u0002\u0002\u0002",
    "H\u0599\u0003\u0002\u0002\u0002J\u059b\u0003\u0002\u0002\u0002L\u059d",
    "\u0003\u0002\u0002\u0002N\u05a0\u0003\u0002\u0002\u0002P\u05a4\u0003",
    "\u0002\u0002\u0002R\u05aa\u0003\u0002\u0002\u0002T\u05ac\u0003\u0002",
    "\u0002\u0002V\u05af\u0003\u0002\u0002\u0002X\u05b1\u0003\u0002\u0002",
    "\u0002Z\u05b4\u0003\u0002\u0002\u0002\\\u05b9\u0003\u0002\u0002\u0002",
    "^\u05c4\u0003\u0002\u0002\u0002`\u05cd\u0003\u0002\u0002\u0002b\u05d1",
    "\u0003\u0002\u0002\u0002d\u05d3\u0003\u0002\u0002\u0002f\u05d9\u0003",
    "\u0002\u0002\u0002h\u05db\u0003\u0002\u0002\u0002j\u05dd\u0003\u0002",
    "\u0002\u0002l\u05e0\u0003\u0002\u0002\u0002n\u05e8\u0003\u0002\u0002",
    "\u0002p\u05ea\u0003\u0002\u0002\u0002r\u05ec\u0003\u0002\u0002\u0002",
    "t\u0602\u0003\u0002\u0002\u0002v\u0615\u0003\u0002\u0002\u0002x\u061d",
    "\u0003\u0002\u0002\u0002z\u0621\u0003\u0002\u0002\u0002|\u0629\u0003",
    "\u0002\u0002\u0002~\u0638\u0003\u0002\u0002\u0002\u0080\u063a\u0003",
    "\u0002\u0002\u0002\u0082\u0666\u0003\u0002\u0002\u0002\u0084\u066f\u0003",
    "\u0002\u0002\u0002\u0086\u067c\u0003\u0002\u0002\u0002\u0088\u067e\u0003",
    "\u0002\u0002\u0002\u008a\u0680\u0003\u0002\u0002\u0002\u008c\u0683\u0003",
    "\u0002\u0002\u0002\u008e\u0687\u0003\u0002\u0002\u0002\u0090\u0691\u0003",
    "\u0002\u0002\u0002\u0092\u069b\u0003\u0002\u0002\u0002\u0094\u06c7\u0003",
    "\u0002\u0002\u0002\u0096\u06de\u0003\u0002\u0002\u0002\u0098\u06e0\u0003",
    "\u0002\u0002\u0002\u009a\u06e2\u0003\u0002\u0002\u0002\u009c\u06e4\u0003",
    "\u0002\u0002\u0002\u009e\u06e9\u0003\u0002\u0002\u0002\u00a0\u06ec\u0003",
    "\u0002\u0002\u0002\u00a2\u084f\u0003\u0002\u0002\u0002\u00a4\u0851\u0003",
    "\u0002\u0002\u0002\u00a6\u0887\u0003\u0002\u0002\u0002\u00a8\u088c\u0003",
    "\u0002\u0002\u0002\u00aa\u08b8\u0003\u0002\u0002\u0002\u00ac\u08cf\u0003",
    "\u0002\u0002\u0002\u00ae\u08ed\u0003\u0002\u0002\u0002\u00b0\u08f1\u0003",
    "\u0002\u0002\u0002\u00b2\u08f7\u0003\u0002\u0002\u0002\u00b4\u08fd\u0003",
    "\u0002\u0002\u0002\u00b6\u0901\u0003\u0002\u0002\u0002\u00b8\u0905\u0003",
    "\u0002\u0002\u0002\u00ba\u090a\u0003\u0002\u0002\u0002\u00bc\u0918\u0003",
    "\u0002\u0002\u0002\u00be\u091e\u0003\u0002\u0002\u0002\u00c0\u0924\u0003",
    "\u0002\u0002\u0002\u00c2\u0934\u0003\u0002\u0002\u0002\u00c4\u0938\u0003",
    "\u0002\u0002\u0002\u00c6\u093e\u0003\u0002\u0002\u0002\u00c8\u0944\u0003",
    "\u0002\u0002\u0002\u00ca\u094c\u0003\u0002\u0002\u0002\u00cc\u0952\u0003",
    "\u0002\u0002\u0002\u00ce\u0961\u0003\u0002\u0002\u0002\u00d0\u0973\u0003",
    "\u0002\u0002\u0002\u00d2\u097a\u0003\u0002\u0002\u0002\u00d4\u097f\u0003",
    "\u0002\u0002\u0002\u00d6\u098a\u0003\u0002\u0002\u0002\u00d8\u098f\u0003",
    "\u0002\u0002\u0002\u00da\u0993\u0003\u0002\u0002\u0002\u00dc\u0997\u0003",
    "\u0002\u0002\u0002\u00de\u099c\u0003\u0002\u0002\u0002\u00e0\u09a1\u0003",
    "\u0002\u0002\u0002\u00e2\u09a6\u0003\u0002\u0002\u0002\u00e4\u09b4\u0003",
    "\u0002\u0002\u0002\u00e6\u09ba\u0003\u0002\u0002\u0002\u00e8\u09bf\u0003",
    "\u0002\u0002\u0002\u00ea\u09c7\u0003\u0002\u0002\u0002\u00ec\u09cb\u0003",
    "\u0002\u0002\u0002\u00ee\u09dc\u0003\u0002\u0002\u0002\u00f0\u09e4\u0003",
    "\u0002\u0002\u0002\u00f2\u09ea\u0003\u0002\u0002\u0002\u00f4\u09f8\u0003",
    "\u0002\u0002\u0002\u00f6\u0a0e\u0003\u0002\u0002\u0002\u00f8\u0a13\u0003",
    "\u0002\u0002\u0002\u00fa\u0a19\u0003\u0002\u0002\u0002\u00fc\u0a1e\u0003",
    "\u0002\u0002\u0002\u00fe\u0a22\u0003\u0002\u0002\u0002\u0100\u0a3e\u0003",
    "\u0002\u0002\u0002\u0102\u0a49\u0003\u0002\u0002\u0002\u0104\u0a52\u0003",
    "\u0002\u0002\u0002\u0106\u0a5f\u0003\u0002\u0002\u0002\u0108\u0a67\u0003",
    "\u0002\u0002\u0002\u010a\u0a6c\u0003\u0002\u0002\u0002\u010c\u0a77\u0003",
    "\u0002\u0002\u0002\u010e\u0a95\u0003\u0002\u0002\u0002\u0110\u0ab3\u0003",
    "\u0002\u0002\u0002\u0112\u0ad5\u0003\u0002\u0002\u0002\u0114\u0ae5\u0003",
    "\u0002\u0002\u0002\u0116\u0af2\u0003\u0002\u0002\u0002\u0118\u0b05\u0003",
    "\u0002\u0002\u0002\u011a\u0b12\u0003\u0002\u0002\u0002\u011c\u0b1b\u0003",
    "\u0002\u0002\u0002\u011e\u0b39\u0003\u0002\u0002\u0002\u0120\u0c2c\u0003",
    "\u0002\u0002\u0002\u0122\u0c35\u0003\u0002\u0002\u0002\u0124\u0c6f\u0003",
    "\u0002\u0002\u0002\u0126\u0ca0\u0003\u0002\u0002\u0002\u0128\u0ca2\u0003",
    "\u0002\u0002\u0002\u012a\u0ccb\u0003\u0002\u0002\u0002\u012c\u0cfd\u0003",
    "\u0002\u0002\u0002\u012e\u0d43\u0003\u0002\u0002\u0002\u0130\u0d86\u0003",
    "\u0002\u0002\u0002\u0132\u0d96\u0003\u0002\u0002\u0002\u0134\u0db2\u0003",
    "\u0002\u0002\u0002\u0136\u0dc5\u0003\u0002\u0002\u0002\u0138\u0dda\u0003",
    "\u0002\u0002\u0002\u013a\u0e22\u0003\u0002\u0002\u0002\u013c\u0e81\u0003",
    "\u0002\u0002\u0002\u013e\u0e97\u0003\u0002\u0002\u0002\u0140\u0ea3\u0003",
    "\u0002\u0002\u0002\u0142\u0ebf\u0003\u0002\u0002\u0002\u0144\u0ed4\u0003",
    "\u0002\u0002\u0002\u0146\u0eee\u0003\u0002\u0002\u0002\u0148\u0ef7\u0003",
    "\u0002\u0002\u0002\u014a\u0f17\u0003\u0002\u0002\u0002\u014c\u0f21\u0003",
    "\u0002\u0002\u0002\u014e\u0f31\u0003\u0002\u0002\u0002\u0150\u0f3d\u0003",
    "\u0002\u0002\u0002\u0152\u0f46\u0003\u0002\u0002\u0002\u0154\u0f57\u0003",
    "\u0002\u0002\u0002\u0156\u0f6f\u0003\u0002\u0002\u0002\u0158\u0fdb\u0003",
    "\u0002\u0002\u0002\u015a\u0ff5\u0003\u0002\u0002\u0002\u015c\u1001\u0003",
    "\u0002\u0002\u0002\u015e\u1008\u0003\u0002\u0002\u0002\u0160\u1034\u0003",
    "\u0002\u0002\u0002\u0162\u103f\u0003\u0002\u0002\u0002\u0164\u1053\u0003",
    "\u0002\u0002\u0002\u0166\u107d\u0003\u0002\u0002\u0002\u0168\u1084\u0003",
    "\u0002\u0002\u0002\u016a\u1092\u0003\u0002\u0002\u0002\u016c\u10a4\u0003",
    "\u0002\u0002\u0002\u016e\u10ea\u0003\u0002\u0002\u0002\u0170\u1115\u0003",
    "\u0002\u0002\u0002\u0172\u114b\u0003\u0002\u0002\u0002\u0174\u11d4\u0003",
    "\u0002\u0002\u0002\u0176\u1263\u0003\u0002\u0002\u0002\u0178\u1280\u0003",
    "\u0002\u0002\u0002\u017a\u129d\u0003\u0002\u0002\u0002\u017c\u130c\u0003",
    "\u0002\u0002\u0002\u017e\u1319\u0003\u0002\u0002\u0002\u0180\u1321\u0003",
    "\u0002\u0002\u0002\u0182\u1329\u0003\u0002\u0002\u0002\u0184\u133f\u0003",
    "\u0002\u0002\u0002\u0186\u135d\u0003\u0002\u0002\u0002\u0188\u1378\u0003",
    "\u0002\u0002\u0002\u018a\u138c\u0003\u0002\u0002\u0002\u018c\u13bc\u0003",
    "\u0002\u0002\u0002\u018e\u13e1\u0003\u0002\u0002\u0002\u0190\u14ad\u0003",
    "\u0002\u0002\u0002\u0192\u14cb\u0003\u0002\u0002\u0002\u0194\u14cd\u0003",
    "\u0002\u0002\u0002\u0196\u14ed\u0003\u0002\u0002\u0002\u0198\u151c\u0003",
    "\u0002\u0002\u0002\u019a\u1550\u0003\u0002\u0002\u0002\u019c\u1560\u0003",
    "\u0002\u0002\u0002\u019e\u156e\u0003\u0002\u0002\u0002\u01a0\u15b7\u0003",
    "\u0002\u0002\u0002\u01a2\u15d6\u0003\u0002\u0002\u0002\u01a4\u15d8\u0003",
    "\u0002\u0002\u0002\u01a6\u15dc\u0003\u0002\u0002\u0002\u01a8\u15fa\u0003",
    "\u0002\u0002\u0002\u01aa\u15fc\u0003\u0002\u0002\u0002\u01ac\u1611\u0003",
    "\u0002\u0002\u0002\u01ae\u166a\u0003\u0002\u0002\u0002\u01b0\u166c\u0003",
    "\u0002\u0002\u0002\u01b2\u1679\u0003\u0002\u0002\u0002\u01b4\u16af\u0003",
    "\u0002\u0002\u0002\u01b6\u16b2\u0003\u0002\u0002\u0002\u01b8\u16e0\u0003",
    "\u0002\u0002\u0002\u01ba\u16e3\u0003\u0002\u0002\u0002\u01bc\u1704\u0003",
    "\u0002\u0002\u0002\u01be\u1715\u0003\u0002\u0002\u0002\u01c0\u1718\u0003",
    "\u0002\u0002\u0002\u01c2\u1753\u0003\u0002\u0002\u0002\u01c4\u176b\u0003",
    "\u0002\u0002\u0002\u01c6\u177b\u0003\u0002\u0002\u0002\u01c8\u177d\u0003",
    "\u0002\u0002\u0002\u01ca\u17ae\u0003\u0002\u0002\u0002\u01cc\u17d7\u0003",
    "\u0002\u0002\u0002\u01ce\u1803\u0003\u0002\u0002\u0002\u01d0\u180b\u0003",
    "\u0002\u0002\u0002\u01d2\u1838\u0003\u0002\u0002\u0002\u01d4\u183a\u0003",
    "\u0002\u0002\u0002\u01d6\u1842\u0003\u0002\u0002\u0002\u01d8\u1863\u0003",
    "\u0002\u0002\u0002\u01da\u186b\u0003\u0002\u0002\u0002\u01dc\u1886\u0003",
    "\u0002\u0002\u0002\u01de\u189e\u0003\u0002\u0002\u0002\u01e0\u18be\u0003",
    "\u0002\u0002\u0002\u01e2\u18dc\u0003\u0002\u0002\u0002\u01e4\u18f3\u0003",
    "\u0002\u0002\u0002\u01e6\u1901\u0003\u0002\u0002\u0002\u01e8\u1903\u0003",
    "\u0002\u0002\u0002\u01ea\u1922\u0003\u0002\u0002\u0002\u01ec\u193e\u0003",
    "\u0002\u0002\u0002\u01ee\u194a\u0003\u0002\u0002\u0002\u01f0\u1968\u0003",
    "\u0002\u0002\u0002\u01f2\u196a\u0003\u0002\u0002\u0002\u01f4\u1998\u0003",
    "\u0002\u0002\u0002\u01f6\u19c6\u0003\u0002\u0002\u0002\u01f8\u19d9\u0003",
    "\u0002\u0002\u0002\u01fa\u19db\u0003\u0002\u0002\u0002\u01fc\u19f4\u0003",
    "\u0002\u0002\u0002\u01fe\u19f6\u0003\u0002\u0002\u0002\u0200\u19fe\u0003",
    "\u0002\u0002\u0002\u0202\u1a00\u0003\u0002\u0002\u0002\u0204\u1a8c\u0003",
    "\u0002\u0002\u0002\u0206\u1a94\u0003\u0002\u0002\u0002\u0208\u1a96\u0003",
    "\u0002\u0002\u0002\u020a\u1a98\u0003\u0002\u0002\u0002\u020c\u1a9a\u0003",
    "\u0002\u0002\u0002\u020e\u1aa8\u0003\u0002\u0002\u0002\u0210\u1aae\u0003",
    "\u0002\u0002\u0002\u0212\u1ab0\u0003\u0002\u0002\u0002\u0214\u1ab2\u0003",
    "\u0002\u0002\u0002\u0216\u1ab7\u0003\u0002\u0002\u0002\u0218\u1ab9\u0003",
    "\u0002\u0002\u0002\u021a\u1abd\u0003\u0002\u0002\u0002\u021c\u1ac9\u0003",
    "\u0002\u0002\u0002\u021e\u1acb\u0003\u0002\u0002\u0002\u0220\u1ace\u0003",
    "\u0002\u0002\u0002\u0222\u1ad1\u0003\u0002\u0002\u0002\u0224\u1ad3\u0003",
    "\u0002\u0002\u0002\u0226\u1ad5\u0003\u0002\u0002\u0002\u0228\u1ad7\u0003",
    "\u0002\u0002\u0002\u022a\u1af4\u0003\u0002\u0002\u0002\u022c\u1af6\u0003",
    "\u0002\u0002\u0002\u022e\u1b01\u0003\u0002\u0002\u0002\u0230\u1b04\u0003",
    "\u0002\u0002\u0002\u0232\u1b0d\u0003\u0002\u0002\u0002\u0234\u1b15\u0003",
    "\u0002\u0002\u0002\u0236\u1b1c\u0003\u0002\u0002\u0002\u0238\u1b33\u0003",
    "\u0002\u0002\u0002\u023a\u1b35\u0003\u0002\u0002\u0002\u023c\u1b40\u0003",
    "\u0002\u0002\u0002\u023e\u1b42\u0003\u0002\u0002\u0002\u0240\u1b5d\u0003",
    "\u0002\u0002\u0002\u0242\u1b64\u0003\u0002\u0002\u0002\u0244\u1b6a\u0003",
    "\u0002\u0002\u0002\u0246\u1b7d\u0003\u0002\u0002\u0002\u0248\u1b7f\u0003",
    "\u0002\u0002\u0002\u024a\u1b90\u0003\u0002\u0002\u0002\u024c\u1ba7\u0003",
    "\u0002\u0002\u0002\u024e\u1bb8\u0003\u0002\u0002\u0002\u0250\u1bc9\u0003",
    "\u0002\u0002\u0002\u0252\u1bd3\u0003\u0002\u0002\u0002\u0254\u1be4\u0003",
    "\u0002\u0002\u0002\u0256\u1bf5\u0003\u0002\u0002\u0002\u0258\u1bff\u0003",
    "\u0002\u0002\u0002\u025a\u1c01\u0003\u0002\u0002\u0002\u025c\u1c08\u0003",
    "\u0002\u0002\u0002\u025e\u1c44\u0003\u0002\u0002\u0002\u0260\u1c60\u0003",
    "\u0002\u0002\u0002\u0262\u1c62\u0003\u0002\u0002\u0002\u0264\u1d5c\u0003",
    "\u0002\u0002\u0002\u0266\u1e4a\u0003\u0002\u0002\u0002\u0268\u1e72\u0003",
    "\u0002\u0002\u0002\u026a\u1e7f\u0003\u0002\u0002\u0002\u026c\u1eb9\u0003",
    "\u0002\u0002\u0002\u026e\u1ebd\u0003\u0002\u0002\u0002\u0270\u1eca\u0003",
    "\u0002\u0002\u0002\u0272\u1f07\u0003\u0002\u0002\u0002\u0274\u1f09\u0003",
    "\u0002\u0002\u0002\u0276\u1f2e\u0003\u0002\u0002\u0002\u0278\u1f30\u0003",
    "\u0002\u0002\u0002\u027a\u1f40\u0003\u0002\u0002\u0002\u027c\u1f4d\u0003",
    "\u0002\u0002\u0002\u027e\u1f61\u0003\u0002\u0002\u0002\u0280\u1f6e\u0003",
    "\u0002\u0002\u0002\u0282\u1f93\u0003\u0002\u0002\u0002\u0284\u1fa4\u0003",
    "\u0002\u0002\u0002\u0286\u1fa6\u0003\u0002\u0002\u0002\u0288\u1fb3\u0003",
    "\u0002\u0002\u0002\u028a\u1fcc\u0003\u0002\u0002\u0002\u028c\u1fe8\u0003",
    "\u0002\u0002\u0002\u028e\u2011\u0003\u0002\u0002\u0002\u0290\u2060\u0003",
    "\u0002\u0002\u0002\u0292\u2062\u0003\u0002\u0002\u0002\u0294\u2066\u0003",
    "\u0002\u0002\u0002\u0296\u206b\u0003\u0002\u0002\u0002\u0298\u207a\u0003",
    "\u0002\u0002\u0002\u029a\u207f\u0003\u0002\u0002\u0002\u029c\u2083\u0003",
    "\u0002\u0002\u0002\u029e\u208c\u0003\u0002\u0002\u0002\u02a0\u2091\u0003",
    "\u0002\u0002\u0002\u02a2\u2099\u0003\u0002\u0002\u0002\u02a4\u209d\u0003",
    "\u0002\u0002\u0002\u02a6\u20a9\u0003\u0002\u0002\u0002\u02a8\u20ab\u0003",
    "\u0002\u0002\u0002\u02aa\u20da\u0003\u0002\u0002\u0002\u02ac\u2105\u0003",
    "\u0002\u0002\u0002\u02ae\u2146\u0003\u0002\u0002\u0002\u02b0\u2151\u0003",
    "\u0002\u0002\u0002\u02b2\u215c\u0003\u0002\u0002\u0002\u02b4\u2168\u0003",
    "\u0002\u0002\u0002\u02b6\u216f\u0003\u0002\u0002\u0002\u02b8\u2198\u0003",
    "\u0002\u0002\u0002\u02ba\u21a3\u0003\u0002\u0002\u0002\u02bc\u21a5\u0003",
    "\u0002\u0002\u0002\u02be\u21f3\u0003\u0002\u0002\u0002\u02c0\u21f7\u0003",
    "\u0002\u0002\u0002\u02c2\u2201\u0003\u0002\u0002\u0002\u02c4\u221d\u0003",
    "\u0002\u0002\u0002\u02c6\u2238\u0003\u0002\u0002\u0002\u02c8\u223e\u0003",
    "\u0002\u0002\u0002\u02ca\u2248\u0003\u0002\u0002\u0002\u02cc\u2252\u0003",
    "\u0002\u0002\u0002\u02ce\u2254\u0003\u0002\u0002\u0002\u02d0\u2270\u0003",
    "\u0002\u0002\u0002\u02d2\u2272\u0003\u0002\u0002\u0002\u02d4\u228e\u0003",
    "\u0002\u0002\u0002\u02d6\u2290\u0003\u0002\u0002\u0002\u02d8\u2298\u0003",
    "\u0002\u0002\u0002\u02da\u22a0\u0003\u0002\u0002\u0002\u02dc\u22a9\u0003",
    "\u0002\u0002\u0002\u02de\u22e4\u0003\u0002\u0002\u0002\u02e0\u22eb\u0003",
    "\u0002\u0002\u0002\u02e2\u22f9\u0003\u0002\u0002\u0002\u02e4\u2302\u0003",
    "\u0002\u0002\u0002\u02e6\u2329\u0003\u0002\u0002\u0002\u02e8\u2339\u0003",
    "\u0002\u0002\u0002\u02ea\u2340\u0003\u0002\u0002\u0002\u02ec\u2342\u0003",
    "\u0002\u0002\u0002\u02ee\u2371\u0003\u0002\u0002\u0002\u02f0\u2373\u0003",
    "\u0002\u0002\u0002\u02f2\u2376\u0003\u0002\u0002\u0002\u02f4\u237a\u0003",
    "\u0002\u0002\u0002\u02f6\u237c\u0003\u0002\u0002\u0002\u02f8\u23b5\u0003",
    "\u0002\u0002\u0002\u02fa\u23b7\u0003\u0002\u0002\u0002\u02fc\u23c0\u0003",
    "\u0002\u0002\u0002\u02fe\u23c8\u0003\u0002\u0002\u0002\u0300\u23d8\u0003",
    "\u0002\u0002\u0002\u0302\u23dd\u0003\u0002\u0002\u0002\u0304\u23fa\u0003",
    "\u0002\u0002\u0002\u0306\u2404\u0003\u0002\u0002\u0002\u0308\u240a\u0003",
    "\u0002\u0002\u0002\u030a\u240c\u0003\u0002\u0002\u0002\u030c\u2419\u0003",
    "\u0002\u0002\u0002\u030e\u241b\u0003\u0002\u0002\u0002\u0310\u2450\u0003",
    "\u0002\u0002\u0002\u0312\u2452\u0003\u0002\u0002\u0002\u0314\u2463\u0003",
    "\u0002\u0002\u0002\u0316\u246b\u0003\u0002\u0002\u0002\u0318\u2470\u0003",
    "\u0002\u0002\u0002\u031a\u249a\u0003\u0002\u0002\u0002\u031c\u249c\u0003",
    "\u0002\u0002\u0002\u031e\u24a4\u0003\u0002\u0002\u0002\u0320\u24ae\u0003",
    "\u0002\u0002\u0002\u0322\u24b6\u0003\u0002\u0002\u0002\u0324\u24d4\u0003",
    "\u0002\u0002\u0002\u0326\u24d6\u0003\u0002\u0002\u0002\u0328\u24e4\u0003",
    "\u0002\u0002\u0002\u032a\u2561\u0003\u0002\u0002\u0002\u032c\u2568\u0003",
    "\u0002\u0002\u0002\u032e\u2595\u0003\u0002\u0002\u0002\u0330\u25ad\u0003",
    "\u0002\u0002\u0002\u0332\u25af\u0003\u0002\u0002\u0002\u0334\u25b6\u0003",
    "\u0002\u0002\u0002\u0336\u25bd\u0003\u0002\u0002\u0002\u0338\u25c4\u0003",
    "\u0002\u0002\u0002\u033a\u25c9\u0003\u0002\u0002\u0002\u033c\u25cf\u0003",
    "\u0002\u0002\u0002\u033e\u25d4\u0003\u0002\u0002\u0002\u0340\u25d8\u0003",
    "\u0002\u0002\u0002\u0342\u25dd\u0003\u0002\u0002\u0002\u0344\u25ec\u0003",
    "\u0002\u0002\u0002\u0346\u25fb\u0003\u0002\u0002\u0002\u0348\u2627\u0003",
    "\u0002\u0002\u0002\u034a\u2629\u0003\u0002\u0002\u0002\u034c\u2636\u0003",
    "\u0002\u0002\u0002\u034e\u2638\u0003\u0002\u0002\u0002\u0350\u2646\u0003",
    "\u0002\u0002\u0002\u0352\u2658\u0003\u0002\u0002\u0002\u0354\u267a\u0003",
    "\u0002\u0002\u0002\u0356\u2690\u0003\u0002\u0002\u0002\u0358\u2693\u0003",
    "\u0002\u0002\u0002\u035a\u2697\u0003\u0002\u0002\u0002\u035c\u26a6\u0003",
    "\u0002\u0002\u0002\u035e\u26af\u0003\u0002\u0002\u0002\u0360\u26b3\u0003",
    "\u0002\u0002\u0002\u0362\u26bb\u0003\u0002\u0002\u0002\u0364\u26c1\u0003",
    "\u0002\u0002\u0002\u0366\u26e5\u0003\u0002\u0002\u0002\u0368\u26e7\u0003",
    "\u0002\u0002\u0002\u036a\u26f4\u0003\u0002\u0002\u0002\u036c\u26f6\u0003",
    "\u0002\u0002\u0002\u036e\u270b\u0003\u0002\u0002\u0002\u0370\u2749\u0003",
    "\u0002\u0002\u0002\u0372\u2752\u0003\u0002\u0002\u0002\u0374\u2759\u0003",
    "\u0002\u0002\u0002\u0376\u276c\u0003\u0002\u0002\u0002\u0378\u278a\u0003",
    "\u0002\u0002\u0002\u037a\u278f\u0003\u0002\u0002\u0002\u037c\u279d\u0003",
    "\u0002\u0002\u0002\u037e\u27a3\u0003\u0002\u0002\u0002\u0380\u27d5\u0003",
    "\u0002\u0002\u0002\u0382\u27d7\u0003\u0002\u0002\u0002\u0384\u27e5\u0003",
    "\u0002\u0002\u0002\u0386\u27ef\u0003\u0002\u0002\u0002\u0388\u27f1\u0003",
    "\u0002\u0002\u0002\u038a\u27f3\u0003\u0002\u0002\u0002\u038c\u27f6\u0003",
    "\u0002\u0002\u0002\u038e\u2801\u0003\u0002\u0002\u0002\u0390\u2808\u0003",
    "\u0002\u0002\u0002\u0392\u280a\u0003\u0002\u0002\u0002\u0394\u2816\u0003",
    "\u0002\u0002\u0002\u0396\u2846\u0003\u0002\u0002\u0002\u0398\u284a\u0003",
    "\u0002\u0002\u0002\u039a\u284c\u0003\u0002\u0002\u0002\u039c\u2861\u0003",
    "\u0002\u0002\u0002\u039e\u2870\u0003\u0002\u0002\u0002\u03a0\u2880\u0003",
    "\u0002\u0002\u0002\u03a2\u2882\u0003\u0002\u0002\u0002\u03a4\u28a2\u0003",
    "\u0002\u0002\u0002\u03a6\u28a7\u0003\u0002\u0002\u0002\u03a8\u28b8\u0003",
    "\u0002\u0002\u0002\u03aa\u28ba\u0003\u0002\u0002\u0002\u03ac\u28bf\u0003",
    "\u0002\u0002\u0002\u03ae\u28c1\u0003\u0002\u0002\u0002\u03b0\u28d2\u0003",
    "\u0002\u0002\u0002\u03b2\u28d4\u0003\u0002\u0002\u0002\u03b4\u28d6\u0003",
    "\u0002\u0002\u0002\u03b6\u03b8\u0005\u0004\u0003\u0002\u03b7\u03b6\u0003",
    "\u0002\u0002\u0002\u03b8\u03bb\u0003\u0002\u0002\u0002\u03b9\u03b7\u0003",
    "\u0002\u0002\u0002\u03b9\u03ba\u0003\u0002\u0002\u0002\u03ba\u03bc\u0003",
    "\u0002\u0002\u0002\u03bb\u03b9\u0003\u0002\u0002\u0002\u03bc\u03bd\u0007",
    "\u0002\u0002\u0003\u03bd\u0003\u0003\u0002\u0002\u0002\u03be\u03c2\u0005",
    "\u0006\u0004\u0002\u03bf\u03c1\u0005\u0292\u014a\u0002\u03c0\u03bf\u0003",
    "\u0002\u0002\u0002\u03c1\u03c4\u0003\u0002\u0002\u0002\u03c2\u03c0\u0003",
    "\u0002\u0002\u0002\u03c2\u03c3\u0003\u0002\u0002\u0002\u03c3\u0005\u0003",
    "\u0002\u0002\u0002\u03c4\u03c2\u0003\u0002\u0002\u0002\u03c5\u03c7\u0005",
    "\b\u0005\u0002\u03c6\u03c8\u0007\u0327\u0002\u0002\u03c7\u03c6\u0003",
    "\u0002\u0002\u0002\u03c7\u03c8\u0003\u0002\u0002\u0002\u03c8\u03ca\u0003",
    "\u0002\u0002\u0002\u03c9\u03c5\u0003\u0002\u0002\u0002\u03ca\u03cb\u0003",
    "\u0002\u0002\u0002\u03cb\u03c9\u0003\u0002\u0002\u0002\u03cb\u03cc\u0003",
    "\u0002\u0002\u0002\u03cc\u0007\u0003\u0002\u0002\u0002\u03cd\u03d5\u0005",
    "\n\u0006\u0002\u03ce\u03d5\u0005\f\u0007\u0002\u03cf\u03d5\u0005\u0010",
    "\t\u0002\u03d0\u03d5\u0005\u0296\u014c\u0002\u03d1\u03d5\u00050\u0019",
    "\u0002\u03d2\u03d5\u00052\u001a\u0002\u03d3\u03d5\u0005\u000e\b\u0002",
    "\u03d4\u03cd\u0003\u0002\u0002\u0002\u03d4\u03ce\u0003\u0002\u0002\u0002",
    "\u03d4\u03cf\u0003\u0002\u0002\u0002\u03d4\u03d0\u0003\u0002\u0002\u0002",
    "\u03d4\u03d1\u0003\u0002\u0002\u0002\u03d4\u03d2\u0003\u0002\u0002\u0002",
    "\u03d4\u03d3\u0003\u0002\u0002\u0002\u03d5\t\u0003\u0002\u0002\u0002",
    "\u03d6\u03dc\u0005\u01ac\u00d7\u0002\u03d7\u03dc\u0005\u01b2\u00da\u0002",
    "\u03d8\u03dc\u0005\u01b6\u00dc\u0002\u03d9\u03dc\u0005\u01bc\u00df\u0002",
    "\u03da\u03dc\u0005\u01c0\u00e1\u0002\u03db\u03d6\u0003\u0002\u0002\u0002",
    "\u03db\u03d7\u0003\u0002\u0002\u0002\u03db\u03d8\u0003\u0002\u0002\u0002",
    "\u03db\u03d9\u0003\u0002\u0002\u0002\u03db\u03da\u0003\u0002\u0002\u0002",
    "\u03dc\u000b\u0003\u0002\u0002\u0002\u03dd\u047b\u00054\u001b\u0002",
    "\u03de\u047b\u0005<\u001f\u0002\u03df\u047b\u0005v<\u0002\u03e0\u047b",
    "\u0005\u0084C\u0002\u03e1\u047b\u0005\u0090I\u0002\u03e2\u047b\u0005",
    "\u0092J\u0002\u03e3\u047b\u0005\u008eH\u0002\u03e4\u047b\u0005\u009e",
    "P\u0002\u03e5\u047b\u0005\u00a8U\u0002\u03e6\u047b\u0005\u00aaV\u0002",
    "\u03e7\u047b\u0005\u0114\u008b\u0002\u03e8\u047b\u0005\u0118\u008d\u0002",
    "\u03e9\u047b\u0005\u01f4\u00fb\u0002\u03ea\u047b\u0005\u015a\u00ae\u0002",
    "\u03eb\u047b\u0005\u0202\u0102\u0002\u03ec\u047b\u0005\u011e\u0090\u0002",
    "\u03ed\u047b\u0005\u0126\u0094\u0002\u03ee\u047b\u0005\u0128\u0095\u0002",
    "\u03ef\u047b\u0005\u012c\u0097\u0002\u03f0\u047b\u0005\u0130\u0099\u0002",
    "\u03f1\u047b\u0005\u0134\u009b\u0002\u03f2\u047b\u0005\u013c\u009f\u0002",
    "\u03f3\u047b\u0005\u0140\u00a1\u0002\u03f4\u047b\u0005\u0138\u009d\u0002",
    "\u03f5\u047b\u0005\u0148\u00a5\u0002\u03f6\u047b\u0005\u0144\u00a3\u0002",
    "\u03f7\u047b\u0005\u014c\u00a7\u0002\u03f8\u047b\u0005\u014e\u00a8\u0002",
    "\u03f9\u047b\u0005\u0150\u00a9\u0002\u03fa\u047b\u0005\u0152\u00aa\u0002",
    "\u03fb\u047b\u0005\u0158\u00ad\u0002\u03fc\u047b\u0005\u0168\u00b5\u0002",
    "\u03fd\u047b\u0005\u0162\u00b2\u0002\u03fe\u047b\u0005\u016e\u00b8\u0002",
    "\u03ff\u047b\u0005\u0172\u00ba\u0002\u0400\u047b\u0005\u0176\u00bc\u0002",
    "\u0401\u047b\u0005\u017a\u00be\u0002\u0402\u047b\u0005\u017c\u00bf\u0002",
    "\u0403\u047b\u0005\u0180\u00c1\u0002\u0404\u047b\u0005\u0182\u00c2\u0002",
    "\u0405\u047b\u0005\u0186\u00c4\u0002\u0406\u047b\u0005\u0188\u00c5\u0002",
    "\u0407\u047b\u0005\u01f2\u00fa\u0002\u0408\u047b\u0005\u018e\u00c8\u0002",
    "\u0409\u047b\u0005\u0194\u00cb\u0002\u040a\u047b\u0005\u0196\u00cc\u0002",
    "\u040b\u047b\u00056\u001c\u0002\u040c\u047b\u0005r:\u0002\u040d\u047b",
    "\u0005\u0080A\u0002\u040e\u047b\u0005\u00acW\u0002\u040f\u047b\u0005",
    "\u0112\u008a\u0002\u0410\u047b\u0005\u0116\u008c\u0002\u0411\u047b\u0005",
    "\u011a\u008e\u0002\u0412\u047b\u0005\u01c8\u00e5\u0002\u0413\u047b\u0005",
    "\u015c\u00af\u0002\u0414\u047b\u0005\u011c\u008f\u0002\u0415\u047b\u0005",
    "\u012a\u0096\u0002\u0416\u047b\u0005\u012e\u0098\u0002\u0417\u047b\u0005",
    "\u0132\u009a\u0002\u0418\u047b\u0005\u0136\u009c\u0002\u0419\u047b\u0005",
    "\u01ca\u00e6\u0002\u041a\u047b\u0005\u013e\u00a0\u0002\u041b\u047b\u0005",
    "\u0142\u00a2\u0002\u041c\u047b\u0005\u013a\u009e\u0002\u041d\u047b\u0005",
    "\u014a\u00a6\u0002\u041e\u047b\u0005\u0146\u00a4\u0002\u041f\u047b\u0005",
    "\u00a4S\u0002\u0420\u047b\u0005\u01da\u00ee\u0002\u0421\u047b\u0005",
    "\u01cc\u00e7\u0002\u0422\u047b\u0005\u01ce\u00e8\u0002\u0423\u047b\u0005",
    "\u0154\u00ab\u0002\u0424\u047b\u0005\u0156\u00ac\u0002\u0425\u047b\u0005",
    "\u015e\u00b0\u0002\u0426\u047b\u0005\u0160\u00b1\u0002\u0427\u047b\u0005",
    "\u0164\u00b3\u0002\u0428\u047b\u0005\u0166\u00b4\u0002\u0429\u047b\u0005",
    "\u016a\u00b6\u0002\u042a\u047b\u0005\u016c\u00b7\u0002\u042b\u047b\u0005",
    "\u0170\u00b9\u0002\u042c\u047b\u0005\u0174\u00bb\u0002\u042d\u047b\u0005",
    "\u0178\u00bd\u0002\u042e\u047b\u0005\u017e\u00c0\u0002\u042f\u047b\u0005",
    "\u0184\u00c3\u0002\u0430\u047b\u0005\u01e8\u00f5\u0002\u0431\u047b\u0005",
    "\u018a\u00c6\u0002\u0432\u047b\u0005\u018c\u00c7\u0002\u0433\u047b\u0005",
    "\u01ea\u00f6\u0002\u0434\u047b\u0005\u0254\u012b\u0002\u0435\u047b\u0005",
    "\u0190\u00c9\u0002\u0436\u047b\u0005\u0192\u00ca\u0002\u0437\u047b\u0005",
    "\u01ee\u00f8\u0002\u0438\u047b\u0005\u0198\u00cd\u0002\u0439\u047b\u0005",
    "\u019a\u00ce\u0002\u043a\u047b\u00058\u001d\u0002\u043b\u047b\u0005",
    ":\u001e\u0002\u043c\u047b\u0005t;\u0002\u043d\u047b\u0005\u0082B\u0002",
    "\u043e\u047b\u0005\u009cO\u0002\u043f\u047b\u0005\u00a6T\u0002\u0440",
    "\u047b\u0005\u00aeX\u0002\u0441\u047b\u0005\u00b0Y\u0002\u0442\u047b",
    "\u0005\u00b2Z\u0002\u0443\u047b\u0005\u00b4[\u0002\u0444\u047b\u0005",
    "\u00b6\\\u0002\u0445\u047b\u0005\u00b8]\u0002\u0446\u047b\u0005\u00ba",
    "^\u0002\u0447\u047b\u0005\u00bc_\u0002\u0448\u047b\u0005\u00be`\u0002",
    "\u0449\u047b\u0005\u00e8u\u0002\u044a\u047b\u0005\u00c0a\u0002\u044b",
    "\u047b\u0005\u00c2b\u0002\u044c\u047b\u0005\u00ceh\u0002\u044d\u047b",
    "\u0005\u00d0i\u0002\u044e\u047b\u0005\u00c4c\u0002\u044f\u047b\u0005",
    "\u00c6d\u0002\u0450\u047b\u0005\u00c8e\u0002\u0451\u047b\u0005\u00ca",
    "f\u0002\u0452\u047b\u0005\u00ccg\u0002\u0453\u047b\u0005\u00d2j\u0002",
    "\u0454\u047b\u0005\u00d4k\u0002\u0455\u047b\u0005\u00d6l\u0002\u0456",
    "\u047b\u0005\u024c\u0127\u0002\u0457\u047b\u0005\u023e\u0120\u0002\u0458",
    "\u047b\u0005\u00d8m\u0002\u0459\u047b\u0005\u00dan\u0002\u045a\u047b",
    "\u0005\u00dco\u0002\u045b\u047b\u0005\u00dep\u0002\u045c\u047b\u0005",
    "\u00e0q\u0002\u045d\u047b\u0005\u0244\u0123\u0002\u045e\u047b\u0005",
    "\u00e2r\u0002\u045f\u047b\u0005\u00e4s\u0002\u0460\u047b\u0005\u00e6",
    "t\u0002\u0461\u047b\u0005\u00eav\u0002\u0462\u047b\u0005\u00ecw\u0002",
    "\u0463\u047b\u0005\u00eex\u0002\u0464\u047b\u0005\u00f0y\u0002\u0465",
    "\u047b\u0005\u00f2z\u0002\u0466\u047b\u0005\u00f4{\u0002\u0467\u047b",
    "\u0005\u00f6|\u0002\u0468\u047b\u0005\u00f8}\u0002\u0469\u047b\u0005",
    "\u00fa~\u0002\u046a\u047b\u0005\u00fc\u007f\u0002\u046b\u047b\u0005",
    "\u00fe\u0080\u0002\u046c\u047b\u0005\u024e\u0128\u0002\u046d\u047b\u0005",
    "\u0100\u0081\u0002\u046e\u047b\u0005\u0102\u0082\u0002\u046f\u047b\u0005",
    "\u0104\u0083\u0002\u0470\u047b\u0005\u0250\u0129\u0002\u0471\u047b\u0005",
    "\u0246\u0124\u0002\u0472\u047b\u0005\u0256\u012c\u0002\u0473\u047b\u0005",
    "\u0106\u0084\u0002\u0474\u047b\u0005\u0252\u012a\u0002\u0475\u047b\u0005",
    "\u0108\u0085\u0002\u0476\u047b\u0005\u010a\u0086\u0002\u0477\u047b\u0005",
    "\u010c\u0087\u0002\u0478\u047b\u0005\u010e\u0088\u0002\u0479\u047b\u0005",
    "\u0110\u0089\u0002\u047a\u03dd\u0003\u0002\u0002\u0002\u047a\u03de\u0003",
    "\u0002\u0002\u0002\u047a\u03df\u0003\u0002\u0002\u0002\u047a\u03e0\u0003",
    "\u0002\u0002\u0002\u047a\u03e1\u0003\u0002\u0002\u0002\u047a\u03e2\u0003",
    "\u0002\u0002\u0002\u047a\u03e3\u0003\u0002\u0002\u0002\u047a\u03e4\u0003",
    "\u0002\u0002\u0002\u047a\u03e5\u0003\u0002\u0002\u0002\u047a\u03e6\u0003",
    "\u0002\u0002\u0002\u047a\u03e7\u0003\u0002\u0002\u0002\u047a\u03e8\u0003",
    "\u0002\u0002\u0002\u047a\u03e9\u0003\u0002\u0002\u0002\u047a\u03ea\u0003",
    "\u0002\u0002\u0002\u047a\u03eb\u0003\u0002\u0002\u0002\u047a\u03ec\u0003",
    "\u0002\u0002\u0002\u047a\u03ed\u0003\u0002\u0002\u0002\u047a\u03ee\u0003",
    "\u0002\u0002\u0002\u047a\u03ef\u0003\u0002\u0002\u0002\u047a\u03f0\u0003",
    "\u0002\u0002\u0002\u047a\u03f1\u0003\u0002\u0002\u0002\u047a\u03f2\u0003",
    "\u0002\u0002\u0002\u047a\u03f3\u0003\u0002\u0002\u0002\u047a\u03f4\u0003",
    "\u0002\u0002\u0002\u047a\u03f5\u0003\u0002\u0002\u0002\u047a\u03f6\u0003",
    "\u0002\u0002\u0002\u047a\u03f7\u0003\u0002\u0002\u0002\u047a\u03f8\u0003",
    "\u0002\u0002\u0002\u047a\u03f9\u0003\u0002\u0002\u0002\u047a\u03fa\u0003",
    "\u0002\u0002\u0002\u047a\u03fb\u0003\u0002\u0002\u0002\u047a\u03fc\u0003",
    "\u0002\u0002\u0002\u047a\u03fd\u0003\u0002\u0002\u0002\u047a\u03fe\u0003",
    "\u0002\u0002\u0002\u047a\u03ff\u0003\u0002\u0002\u0002\u047a\u0400\u0003",
    "\u0002\u0002\u0002\u047a\u0401\u0003\u0002\u0002\u0002\u047a\u0402\u0003",
    "\u0002\u0002\u0002\u047a\u0403\u0003\u0002\u0002\u0002\u047a\u0404\u0003",
    "\u0002\u0002\u0002\u047a\u0405\u0003\u0002\u0002\u0002\u047a\u0406\u0003",
    "\u0002\u0002\u0002\u047a\u0407\u0003\u0002\u0002\u0002\u047a\u0408\u0003",
    "\u0002\u0002\u0002\u047a\u0409\u0003\u0002\u0002\u0002\u047a\u040a\u0003",
    "\u0002\u0002\u0002\u047a\u040b\u0003\u0002\u0002\u0002\u047a\u040c\u0003",
    "\u0002\u0002\u0002\u047a\u040d\u0003\u0002\u0002\u0002\u047a\u040e\u0003",
    "\u0002\u0002\u0002\u047a\u040f\u0003\u0002\u0002\u0002\u047a\u0410\u0003",
    "\u0002\u0002\u0002\u047a\u0411\u0003\u0002\u0002\u0002\u047a\u0412\u0003",
    "\u0002\u0002\u0002\u047a\u0413\u0003\u0002\u0002\u0002\u047a\u0414\u0003",
    "\u0002\u0002\u0002\u047a\u0415\u0003\u0002\u0002\u0002\u047a\u0416\u0003",
    "\u0002\u0002\u0002\u047a\u0417\u0003\u0002\u0002\u0002\u047a\u0418\u0003",
    "\u0002\u0002\u0002\u047a\u0419\u0003\u0002\u0002\u0002\u047a\u041a\u0003",
    "\u0002\u0002\u0002\u047a\u041b\u0003\u0002\u0002\u0002\u047a\u041c\u0003",
    "\u0002\u0002\u0002\u047a\u041d\u0003\u0002\u0002\u0002\u047a\u041e\u0003",
    "\u0002\u0002\u0002\u047a\u041f\u0003\u0002\u0002\u0002\u047a\u0420\u0003",
    "\u0002\u0002\u0002\u047a\u0421\u0003\u0002\u0002\u0002\u047a\u0422\u0003",
    "\u0002\u0002\u0002\u047a\u0423\u0003\u0002\u0002\u0002\u047a\u0424\u0003",
    "\u0002\u0002\u0002\u047a\u0425\u0003\u0002\u0002\u0002\u047a\u0426\u0003",
    "\u0002\u0002\u0002\u047a\u0427\u0003\u0002\u0002\u0002\u047a\u0428\u0003",
    "\u0002\u0002\u0002\u047a\u0429\u0003\u0002\u0002\u0002\u047a\u042a\u0003",
    "\u0002\u0002\u0002\u047a\u042b\u0003\u0002\u0002\u0002\u047a\u042c\u0003",
    "\u0002\u0002\u0002\u047a\u042d\u0003\u0002\u0002\u0002\u047a\u042e\u0003",
    "\u0002\u0002\u0002\u047a\u042f\u0003\u0002\u0002\u0002\u047a\u0430\u0003",
    "\u0002\u0002\u0002\u047a\u0431\u0003\u0002\u0002\u0002\u047a\u0432\u0003",
    "\u0002\u0002\u0002\u047a\u0433\u0003\u0002\u0002\u0002\u047a\u0434\u0003",
    "\u0002\u0002\u0002\u047a\u0435\u0003\u0002\u0002\u0002\u047a\u0436\u0003",
    "\u0002\u0002\u0002\u047a\u0437\u0003\u0002\u0002\u0002\u047a\u0438\u0003",
    "\u0002\u0002\u0002\u047a\u0439\u0003\u0002\u0002\u0002\u047a\u043a\u0003",
    "\u0002\u0002\u0002\u047a\u043b\u0003\u0002\u0002\u0002\u047a\u043c\u0003",
    "\u0002\u0002\u0002\u047a\u043d\u0003\u0002\u0002\u0002\u047a\u043e\u0003",
    "\u0002\u0002\u0002\u047a\u043f\u0003\u0002\u0002\u0002\u047a\u0440\u0003",
    "\u0002\u0002\u0002\u047a\u0441\u0003\u0002\u0002\u0002\u047a\u0442\u0003",
    "\u0002\u0002\u0002\u047a\u0443\u0003\u0002\u0002\u0002\u047a\u0444\u0003",
    "\u0002\u0002\u0002\u047a\u0445\u0003\u0002\u0002\u0002\u047a\u0446\u0003",
    "\u0002\u0002\u0002\u047a\u0447\u0003\u0002\u0002\u0002\u047a\u0448\u0003",
    "\u0002\u0002\u0002\u047a\u0449\u0003\u0002\u0002\u0002\u047a\u044a\u0003",
    "\u0002\u0002\u0002\u047a\u044b\u0003\u0002\u0002\u0002\u047a\u044c\u0003",
    "\u0002\u0002\u0002\u047a\u044d\u0003\u0002\u0002\u0002\u047a\u044e\u0003",
    "\u0002\u0002\u0002\u047a\u044f\u0003\u0002\u0002\u0002\u047a\u0450\u0003",
    "\u0002\u0002\u0002\u047a\u0451\u0003\u0002\u0002\u0002\u047a\u0452\u0003",
    "\u0002\u0002\u0002\u047a\u0453\u0003\u0002\u0002\u0002\u047a\u0454\u0003",
    "\u0002\u0002\u0002\u047a\u0455\u0003\u0002\u0002\u0002\u047a\u0456\u0003",
    "\u0002\u0002\u0002\u047a\u0457\u0003\u0002\u0002\u0002\u047a\u0458\u0003",
    "\u0002\u0002\u0002\u047a\u0459\u0003\u0002\u0002\u0002\u047a\u045a\u0003",
    "\u0002\u0002\u0002\u047a\u045b\u0003\u0002\u0002\u0002\u047a\u045c\u0003",
    "\u0002\u0002\u0002\u047a\u045d\u0003\u0002\u0002\u0002\u047a\u045e\u0003",
    "\u0002\u0002\u0002\u047a\u045f\u0003\u0002\u0002\u0002\u047a\u0460\u0003",
    "\u0002\u0002\u0002\u047a\u0461\u0003\u0002\u0002\u0002\u047a\u0462\u0003",
    "\u0002\u0002\u0002\u047a\u0463\u0003\u0002\u0002\u0002\u047a\u0464\u0003",
    "\u0002\u0002\u0002\u047a\u0465\u0003\u0002\u0002\u0002\u047a\u0466\u0003",
    "\u0002\u0002\u0002\u047a\u0467\u0003\u0002\u0002\u0002\u047a\u0468\u0003",
    "\u0002\u0002\u0002\u047a\u0469\u0003\u0002\u0002\u0002\u047a\u046a\u0003",
    "\u0002\u0002\u0002\u047a\u046b\u0003\u0002\u0002\u0002\u047a\u046c\u0003",
    "\u0002\u0002\u0002\u047a\u046d\u0003\u0002\u0002\u0002\u047a\u046e\u0003",
    "\u0002\u0002\u0002\u047a\u046f\u0003\u0002\u0002\u0002\u047a\u0470\u0003",
    "\u0002\u0002\u0002\u047a\u0471\u0003\u0002\u0002\u0002\u047a\u0472\u0003",
    "\u0002\u0002\u0002\u047a\u0473\u0003\u0002\u0002\u0002\u047a\u0474\u0003",
    "\u0002\u0002\u0002\u047a\u0475\u0003\u0002\u0002\u0002\u047a\u0476\u0003",
    "\u0002\u0002\u0002\u047a\u0477\u0003\u0002\u0002\u0002\u047a\u0478\u0003",
    "\u0002\u0002\u0002\u047a\u0479\u0003\u0002\u0002\u0002\u047b\r\u0003",
    "\u0002\u0002\u0002\u047c\u0482\u0005\u0262\u0132\u0002\u047d\u0482\u0005",
    "\u0264\u0133\u0002\u047e\u0482\u0005\u0266\u0134\u0002\u047f\u0482\u0005",
    "\u0268\u0135\u0002\u0480\u0482\u0005\u026a\u0136\u0002\u0481\u047c\u0003",
    "\u0002\u0002\u0002\u0481\u047d\u0003\u0002\u0002\u0002\u0481\u047e\u0003",
    "\u0002\u0002\u0002\u0481\u047f\u0003\u0002\u0002\u0002\u0481\u0480\u0003",
    "\u0002\u0002\u0002\u0482\u000f\u0003\u0002\u0002\u0002\u0483\u0490\u0005",
    "\u0012\n\u0002\u0484\u0490\u0005\u0014\u000b\u0002\u0485\u0490\u0005",
    "\u0016\f\u0002\u0486\u0490\u0005\u0018\r\u0002\u0487\u0490\u0005\u001c",
    "\u000f\u0002\u0488\u0490\u0005\u001a\u000e\u0002\u0489\u0490\u0005\u001e",
    "\u0010\u0002\u048a\u0490\u0005&\u0014\u0002\u048b\u0490\u0005(\u0015",
    "\u0002\u048c\u0490\u0005*\u0016\u0002\u048d\u0490\u0005,\u0017\u0002",
    "\u048e\u0490\u0005.\u0018\u0002\u048f\u0483\u0003\u0002\u0002\u0002",
    "\u048f\u0484\u0003\u0002\u0002\u0002\u048f\u0485\u0003\u0002\u0002\u0002",
    "\u048f\u0486\u0003\u0002\u0002\u0002\u048f\u0487\u0003\u0002\u0002\u0002",
    "\u048f\u0488\u0003\u0002\u0002\u0002\u048f\u0489\u0003\u0002\u0002\u0002",
    "\u048f\u048a\u0003\u0002\u0002\u0002\u048f\u048b\u0003\u0002\u0002\u0002",
    "\u048f\u048c\u0003\u0002\u0002\u0002\u048f\u048d\u0003\u0002\u0002\u0002",
    "\u048f\u048e\u0003\u0002\u0002\u0002\u0490\u0011\u0003\u0002\u0002\u0002",
    "\u0491\u0493\u0007\u001b\u0002\u0002\u0492\u0494\u0007\u0327\u0002\u0002",
    "\u0493\u0492\u0003\u0002\u0002\u0002\u0493\u0494\u0003\u0002\u0002\u0002",
    "\u0494\u0496\u0003\u0002\u0002\u0002\u0495\u0497\u0005\u0006\u0004\u0002",
    "\u0496\u0495\u0003\u0002\u0002\u0002\u0496\u0497\u0003\u0002\u0002\u0002",
    "\u0497\u0498\u0003\u0002\u0002\u0002\u0498\u049a\u0007l\u0002\u0002",
    "\u0499\u049b\u0007\u0327\u0002\u0002\u049a\u0499\u0003\u0002\u0002\u0002",
    "\u049a\u049b\u0003\u0002\u0002\u0002\u049b\u0013\u0003\u0002\u0002\u0002",
    "\u049c\u049e\u0007 \u0002\u0002\u049d\u049f\u0007\u0327\u0002\u0002",
    "\u049e\u049d\u0003\u0002\u0002\u0002\u049e\u049f\u0003\u0002\u0002\u0002",
    "\u049f\u0015\u0003\u0002\u0002\u0002\u04a0\u04a2\u0007A\u0002\u0002",
    "\u04a1\u04a3\u0007\u0327\u0002\u0002\u04a2\u04a1\u0003\u0002\u0002\u0002",
    "\u04a2\u04a3\u0003\u0002\u0002\u0002\u04a3\u0017\u0003\u0002\u0002\u0002",
    "\u04a4\u04a5\u0007\u008f\u0002\u0002\u04a5\u04a7\u0005\u03ac\u01d7\u0002",
    "\u04a6\u04a8\u0007\u0327\u0002\u0002\u04a7\u04a6\u0003\u0002\u0002\u0002",
    "\u04a7\u04a8\u0003\u0002\u0002\u0002\u04a8\u04af\u0003\u0002\u0002\u0002",
    "\u04a9\u04aa\u0005\u03ac\u01d7\u0002\u04aa\u04ac\u0007\u0328\u0002\u0002",
    "\u04ab\u04ad\u0007\u0327\u0002\u0002\u04ac\u04ab\u0003\u0002\u0002\u0002",
    "\u04ac\u04ad\u0003\u0002\u0002\u0002\u04ad\u04af\u0003\u0002\u0002\u0002",
    "\u04ae\u04a4\u0003\u0002\u0002\u0002\u04ae\u04a9\u0003\u0002\u0002\u0002",
    "\u04af\u0019\u0003\u0002\u0002\u0002\u04b0\u04b2\u0007\u0119\u0002\u0002",
    "\u04b1\u04b3\u0005\u02c2\u0162\u0002\u04b2\u04b1\u0003\u0002\u0002\u0002",
    "\u04b2\u04b3\u0003\u0002\u0002\u0002\u04b3\u04b5\u0003\u0002\u0002\u0002",
    "\u04b4\u04b6\u0007\u0327\u0002\u0002\u04b5\u04b4\u0003\u0002\u0002\u0002",
    "\u04b5\u04b6\u0003\u0002\u0002\u0002\u04b6\u001b\u0003\u0002\u0002\u0002",
    "\u04b7\u04b8\u0007\u0099\u0002\u0002\u04b8\u04b9\u0005\u02d8\u016d\u0002",
    "\u04b9\u04bc\u0005\b\u0005\u0002\u04ba\u04bb\u0007j\u0002\u0002\u04bb",
    "\u04bd\u0005\b\u0005\u0002\u04bc\u04ba\u0003\u0002\u0002\u0002\u04bc",
    "\u04bd\u0003\u0002\u0002\u0002\u04bd\u04bf\u0003\u0002\u0002\u0002\u04be",
    "\u04c0\u0007\u0327\u0002\u0002\u04bf\u04be\u0003\u0002\u0002\u0002\u04bf",
    "\u04c0\u0003\u0002\u0002\u0002\u04c0\u001d\u0003\u0002\u0002\u0002\u04c1",
    "\u04c8\u0007\u02e2\u0002\u0002\u04c2\u04c3\u0005 \u0011\u0002\u04c3",
    "\u04c4\u0007\u0326\u0002\u0002\u04c4\u04c5\u0005\"\u0012\u0002\u04c5",
    "\u04c6\u0007\u0326\u0002\u0002\u04c6\u04c7\u0005$\u0013\u0002\u04c7",
    "\u04c9\u0003\u0002\u0002\u0002\u04c8\u04c2\u0003\u0002\u0002\u0002\u04c8",
    "\u04c9\u0003\u0002\u0002\u0002\u04c9\u04cb\u0003\u0002\u0002\u0002\u04ca",
    "\u04cc\u0007\u0327\u0002\u0002\u04cb\u04ca\u0003\u0002\u0002\u0002\u04cb",
    "\u04cc\u0003\u0002\u0002\u0002\u04cc\u001f\u0003\u0002\u0002\u0002\u04cd",
    "\u04ce\t\u0002\u0002\u0002\u04ce!\u0003\u0002\u0002\u0002\u04cf\u04d0",
    "\t\u0003\u0002\u0002\u04d0#\u0003\u0002\u0002\u0002\u04d1\u04d2\t\u0002",
    "\u0002\u0002\u04d2%\u0003\u0002\u0002\u0002\u04d3\u04d4\u0007\u001b",
    "\u0002\u0002\u04d4\u04d6\u0007\u02ed\u0002\u0002\u04d5\u04d7\u0007\u0327",
    "\u0002\u0002\u04d6\u04d5\u0003\u0002\u0002\u0002\u04d6\u04d7\u0003\u0002",
    "\u0002\u0002\u04d7\u04d9\u0003\u0002\u0002\u0002\u04d8\u04da\u0005\u0006",
    "\u0004\u0002\u04d9\u04d8\u0003\u0002\u0002\u0002\u04d9\u04da\u0003\u0002",
    "\u0002\u0002\u04da\u04db\u0003\u0002\u0002\u0002\u04db\u04dc\u0007l",
    "\u0002\u0002\u04dc\u04de\u0007\u02ed\u0002\u0002\u04dd\u04df\u0007\u0327",
    "\u0002\u0002\u04de\u04dd\u0003\u0002\u0002\u0002\u04de\u04df\u0003\u0002",
    "\u0002\u0002\u04df\u04e0\u0003\u0002\u0002\u0002\u04e0\u04e1\u0007\u001b",
    "\u0002\u0002\u04e1\u04e3\u0007\u01b1\u0002\u0002\u04e2\u04e4\u0007\u0327",
    "\u0002\u0002\u04e3\u04e2\u0003\u0002\u0002\u0002\u04e3\u04e4\u0003\u0002",
    "\u0002\u0002\u04e4\u04e6\u0003\u0002\u0002\u0002\u04e5\u04e7\u0005\u0006",
    "\u0004\u0002\u04e6\u04e5\u0003\u0002\u0002\u0002\u04e6\u04e7\u0003\u0002",
    "\u0002\u0002\u04e7\u04e8\u0003\u0002\u0002\u0002\u04e8\u04e9\u0007l",
    "\u0002\u0002\u04e9\u04eb\u0007\u01b1\u0002\u0002\u04ea\u04ec\u0007\u0327",
    "\u0002\u0002\u04eb\u04ea\u0003\u0002\u0002\u0002\u04eb\u04ec\u0003\u0002",
    "\u0002\u0002\u04ec\'\u0003\u0002\u0002\u0002\u04ed\u04ef\u0007\u0176",
    "\u0002\u0002\u04ee\u04f0\u0005\u01ba\u00de\u0002\u04ef\u04ee\u0003\u0002",
    "\u0002\u0002\u04ef\u04f0\u0003\u0002\u0002\u0002\u04f0\u04f2\u0003\u0002",
    "\u0002\u0002\u04f1\u04f3\u0007\u0326\u0002\u0002\u04f2\u04f1\u0003\u0002",
    "\u0002\u0002\u04f2\u04f3\u0003\u0002\u0002\u0002\u04f3\u04f6\u0003\u0002",
    "\u0002\u0002\u04f4\u04f5\t\u0004\u0002\u0002\u04f5\u04f7\u0005\u01be",
    "\u00e0\u0002\u04f6\u04f4\u0003\u0002\u0002\u0002\u04f6\u04f7\u0003\u0002",
    "\u0002\u0002\u04f7\u04f9\u0003\u0002\u0002\u0002\u04f8\u04fa\u0005\u02c2",
    "\u0162\u0002\u04f9\u04f8\u0003\u0002\u0002\u0002\u04f9\u04fa\u0003\u0002",
    "\u0002\u0002\u04fa\u04fc\u0003\u0002\u0002\u0002\u04fb\u04fd\u0007\u0327",
    "\u0002\u0002\u04fc\u04fb\u0003\u0002\u0002\u0002\u04fc\u04fd\u0003\u0002",
    "\u0002\u0002\u04fd)\u0003\u0002\u0002\u0002\u04fe\u04ff\u0007\u0179",
    "\u0002\u0002\u04ff\u0509\u0005\u02d8\u016d\u0002\u0500\u050a\u0005\b",
    "\u0005\u0002\u0501\u0503\u0007 \u0002\u0002\u0502\u0504\u0007\u0327",
    "\u0002\u0002\u0503\u0502\u0003\u0002\u0002\u0002\u0503\u0504\u0003\u0002",
    "\u0002\u0002\u0504\u050a\u0003\u0002\u0002\u0002\u0505\u0507\u0007A",
    "\u0002\u0002\u0506\u0508\u0007\u0327\u0002\u0002\u0507\u0506\u0003\u0002",
    "\u0002\u0002\u0507\u0508\u0003\u0002\u0002\u0002\u0508\u050a\u0003\u0002",
    "\u0002\u0002\u0509\u0500\u0003\u0002\u0002\u0002\u0509\u0501\u0003\u0002",
    "\u0002\u0002\u0509\u0505\u0003\u0002\u0002\u0002\u050a+\u0003\u0002",
    "\u0002\u0002\u050b\u050c\u0007\u0100\u0002\u0002\u050c\u050e\u0005\u02c2",
    "\u0162\u0002\u050d\u050f\u0007\u0327\u0002\u0002\u050e\u050d\u0003\u0002",
    "\u0002\u0002\u050e\u050f\u0003\u0002\u0002\u0002\u050f-\u0003\u0002",
    "\u0002\u0002\u0510\u0511\u0007\u0107\u0002\u0002\u0511\u0512\u0007\u0324",
    "\u0002\u0002\u0512\u0513\t\u0005\u0002\u0002\u0513\u0514\u0007\u0326",
    "\u0002\u0002\u0514\u0515\u0005\u02c0\u0161\u0002\u0515\u0516\u0007\u0326",
    "\u0002\u0002\u0516\u051b\u0005\u02c0\u0161\u0002\u0517\u0518\u0007\u0326",
    "\u0002\u0002\u0518\u051a\u0005\u02c0\u0161\u0002\u0519\u0517\u0003\u0002",
    "\u0002\u0002\u051a\u051d\u0003\u0002\u0002\u0002\u051b\u0519\u0003\u0002",
    "\u0002\u0002\u051b\u051c\u0003\u0002\u0002\u0002\u051c\u051e\u0003\u0002",
    "\u0002\u0002\u051d\u051b\u0003\u0002\u0002\u0002\u051e\u0521\u0007\u0325",
    "\u0002\u0002\u051f\u0520\u0007\u017b\u0002\u0002\u0520\u0522\t\u0006",
    "\u0002\u0002\u0521\u051f\u0003\u0002\u0002\u0002\u0521\u0522\u0003\u0002",
    "\u0002\u0002\u0522\u0524\u0003\u0002\u0002\u0002\u0523\u0525\u0007\u0327",
    "\u0002\u0002\u0524\u0523\u0003\u0002\u0002\u0002\u0524\u0525\u0003\u0002",
    "\u0002\u0002\u0525/\u0003\u0002\u0002\u0002\u0526\u0527\u0007\u0327",
    "\u0002\u0002\u05271\u0003\u0002\u0002\u0002\u0528\u0535\u0005\u025e",
    "\u0130\u0002\u0529\u0535\u0005\u0260\u0131\u0002\u052a\u0535\u0005\u01a8",
    "\u00d5\u0002\u052b\u0535\u0005\u01a6\u00d4\u0002\u052c\u0535\u0005\u019c",
    "\u00cf\u0002\u052d\u0535\u0005\u01a0\u00d1\u0002\u052e\u0535\u0005\u026c",
    "\u0137\u0002\u052f\u0535\u0005\u01aa\u00d6\u0002\u0530\u0535\u0005\u0272",
    "\u013a\u0002\u0531\u0535\u0005\u028e\u0148\u0002\u0532\u0535\u0005\u0290",
    "\u0149\u0002\u0533\u0535\u0005\u0294\u014b\u0002\u0534\u0528\u0003\u0002",
    "\u0002\u0002\u0534\u0529\u0003\u0002\u0002\u0002\u0534\u052a\u0003\u0002",
    "\u0002\u0002\u0534\u052b\u0003\u0002\u0002\u0002\u0534\u052c\u0003\u0002",
    "\u0002\u0002\u0534\u052d\u0003\u0002\u0002\u0002\u0534\u052e\u0003\u0002",
    "\u0002\u0002\u0534\u052f\u0003\u0002\u0002\u0002\u0534\u0530\u0003\u0002",
    "\u0002\u0002\u0534\u0531\u0003\u0002\u0002\u0002\u0534\u0532\u0003\u0002",
    "\u0002\u0002\u0534\u0533\u0003\u0002\u0002\u0002\u05353\u0003\u0002",
    "\u0002\u0002\u0536\u0537\u0007\t\u0002\u0002\u0537\u0538\u0007\u000e",
    "\u0002\u0002\u0538\u0539\u0007\u0120\u0002\u0002\u0539\u053a\u0005\u03ac",
    "\u01d7\u0002\u053a\u0541\u0007\u017b\u0002\u0002\u053b\u053d\u0007\u0326",
    "\u0002\u0002\u053c\u053b\u0003\u0002\u0002\u0002\u053c\u053d\u0003\u0002",
    "\u0002\u0002\u053d\u053e\u0003\u0002\u0002\u0002\u053e\u053f\u0007\u0256",
    "\u0002\u0002\u053f\u0540\u0007\u0313\u0002\u0002\u0540\u0542\u0005\u03ac",
    "\u01d7\u0002\u0541\u053c\u0003\u0002\u0002\u0002\u0541\u0542\u0003\u0002",
    "\u0002\u0002\u0542\u0549\u0003\u0002\u0002\u0002\u0543\u0545\u0007\u0326",
    "\u0002\u0002\u0544\u0543\u0003\u0002\u0002\u0002\u0544\u0545\u0003\u0002",
    "\u0002\u0002\u0545\u0546\u0003\u0002\u0002\u0002\u0546\u0547\u0007\u00f3",
    "\u0002\u0002\u0547\u0548\u0007\u0313\u0002\u0002\u0548\u054a\u0007\u030f",
    "\u0002\u0002\u0549\u0544\u0003\u0002\u0002\u0002\u0549\u054a\u0003\u0002",
    "\u0002\u0002\u054a\u0551\u0003\u0002\u0002\u0002\u054b\u054d\u0007\u0326",
    "\u0002\u0002\u054c\u054b\u0003\u0002\u0002\u0002\u054c\u054d\u0003\u0002",
    "\u0002\u0002\u054d\u054e\u0003\u0002\u0002\u0002\u054e\u054f\u0007[",
    "\u0002\u0002\u054f\u0550\u0007\u0313\u0002\u0002\u0550\u0552\u0005\u03ac",
    "\u01d7\u0002\u0551\u054c\u0003\u0002\u0002\u0002\u0551\u0552\u0003\u0002",
    "\u0002\u0002\u05525\u0003\u0002\u0002\u0002\u0553\u0554\u0007H\u0002",
    "\u0002\u0554\u0555\u0007\u000e\u0002\u0002\u0555\u0556\u0007\u0120\u0002",
    "\u0002\u0556\u0557\u0005\u03ac\u01d7\u0002\u0557\u055e\u0007\u017b\u0002",
    "\u0002\u0558\u055a\u0007\u0326\u0002\u0002\u0559\u0558\u0003\u0002\u0002",
    "\u0002\u0559\u055a\u0003\u0002\u0002\u0002\u055a\u055b\u0003\u0002\u0002",
    "\u0002\u055b\u055c\u0007\u00f3\u0002\u0002\u055c\u055d\u0007\u0313\u0002",
    "\u0002\u055d\u055f\u0007\u030f\u0002\u0002\u055e\u0559\u0003\u0002\u0002",
    "\u0002\u055e\u055f\u0003\u0002\u0002\u0002\u055f\u0566\u0003\u0002\u0002",
    "\u0002\u0560\u0562\u0007\u0326\u0002\u0002\u0561\u0560\u0003\u0002\u0002",
    "\u0002\u0561\u0562\u0003\u0002\u0002\u0002\u0562\u0563\u0003\u0002\u0002",
    "\u0002\u0563\u0564\u0007[\u0002\u0002\u0564\u0565\u0007\u0313\u0002",
    "\u0002\u0565\u0567\u0005\u03ac\u01d7\u0002\u0566\u0561\u0003\u0002\u0002",
    "\u0002\u0566\u0567\u0003\u0002\u0002\u0002\u05677\u0003\u0002\u0002",
    "\u0002\u0568\u0569\u0007g\u0002\u0002\u0569\u056c\u0007\u018b\u0002",
    "\u0002\u056a\u056b\u0007\u0099\u0002\u0002\u056b\u056d\u0007w\u0002",
    "\u0002\u056c\u056a\u0003\u0002\u0002\u0002\u056c\u056d\u0003\u0002\u0002",
    "\u0002\u056d\u0571\u0003\u0002\u0002\u0002\u056e\u056f\u0005\u03ac\u01d7",
    "\u0002\u056f\u0570\u0007\u031f\u0002\u0002\u0570\u0572\u0003\u0002\u0002",
    "\u0002\u0571\u056e\u0003\u0002\u0002\u0002\u0571\u0572\u0003\u0002\u0002",
    "\u0002\u0572\u0573\u0003\u0002\u0002\u0002\u0573\u0574\u0005\u03ac\u01d7",
    "\u0002\u05749\u0003\u0002\u0002\u0002\u0575\u0576\u0007g\u0002\u0002",
    "\u0576\u0577\u0007\u000e\u0002\u0002\u0577\u0578\u0007\u0120\u0002\u0002",
    "\u0578\u0579\u0005\u03ac\u01d7\u0002\u0579;\u0003\u0002\u0002\u0002",
    "\u057a\u057b\u0005> \u0002\u057b\u057c\u0005\u03ac\u01d7\u0002\u057c",
    "\u057d\u0005@!\u0002\u057d=\u0003\u0002\u0002\u0002\u057e\u057f\u0007",
    "\t\u0002\u0002\u057f\u0580\u0007\u0197\u0002\u0002\u0580?\u0003\u0002",
    "\u0002\u0002\u0581\u0583\u0005B\"\u0002\u0582\u0581\u0003\u0002\u0002",
    "\u0002\u0582\u0583\u0003\u0002\u0002\u0002\u0583\u0585\u0003\u0002\u0002",
    "\u0002\u0584\u0586\u0005X-\u0002\u0585\u0584\u0003\u0002\u0002\u0002",
    "\u0585\u0586\u0003\u0002\u0002\u0002\u0586\u0588\u0003\u0002\u0002\u0002",
    "\u0587\u0589\u0005F$\u0002\u0588\u0587\u0003\u0002\u0002\u0002\u0588",
    "\u0589\u0003\u0002\u0002\u0002\u0589\u058b\u0003\u0002\u0002\u0002\u058a",
    "\u058c\u0005L\'\u0002\u058b\u058a\u0003\u0002\u0002\u0002\u058b\u058c",
    "\u0003\u0002\u0002\u0002\u058cA\u0003\u0002\u0002\u0002\u058d\u0590",
    "\u0005D#\u0002\u058e\u0591\u0005\\/\u0002\u058f\u0591\u0005T+\u0002",
    "\u0590\u058e\u0003\u0002\u0002\u0002\u0590\u058f\u0003\u0002\u0002\u0002",
    "\u0591C\u0003\u0002\u0002\u0002\u0592\u0593\u0007\u008b\u0002\u0002",
    "\u0593E\u0003\u0002\u0002\u0002\u0594\u0595\u0005J&\u0002\u0595\u0596",
    "\u0005H%\u0002\u0596G\u0003\u0002\u0002\u0002\u0597\u059a\u0007\u0005",
    "\u0002\u0002\u0598\u059a\u0005n8\u0002\u0599\u0597\u0003\u0002\u0002",
    "\u0002\u0599\u0598\u0003\u0002\u0002\u0002\u059aI\u0003\u0002\u0002",
    "\u0002\u059b\u059c\u0007g\u0002\u0002\u059cK\u0003\u0002\u0002\u0002",
    "\u059d\u059e\u0005N(\u0002\u059e\u059f\u0005P)\u0002\u059fM\u0003\u0002",
    "\u0002\u0002\u05a0\u05a1\u0007\u0003\u0002\u0002\u05a1\u05a2\u0007\u0081",
    "\u0002\u0002\u05a2\u05a3\u0007\u008b\u0002\u0002\u05a3O\u0003\u0002",
    "\u0002\u0002\u05a4\u05a8\u0005R*\u0002\u05a5\u05a6\u0005V,\u0002\u05a6",
    "\u05a7\u0005\u03ac\u01d7\u0002\u05a7\u05a9\u0003\u0002\u0002\u0002\u05a8",
    "\u05a5\u0003\u0002\u0002\u0002\u05a8\u05a9\u0003\u0002\u0002\u0002\u05a9",
    "Q\u0003\u0002\u0002\u0002\u05aa\u05ab\u0007\u030f\u0002\u0002\u05ab",
    "S\u0003\u0002\u0002\u0002\u05ac\u05ad\u0005V,\u0002\u05ad\u05ae\u0005",
    "\u03ac\u01d7\u0002\u05aeU\u0003\u0002\u0002\u0002\u05af\u05b0\u0007",
    "\u000f\u0002\u0002\u05b0W\u0003\u0002\u0002\u0002\u05b1\u05b2\u0005",
    "Z.\u0002\u05b2\u05b3\u0005^0\u0002\u05b3Y\u0003\u0002\u0002\u0002\u05b4",
    "\u05b5\u0007\u017b\u0002\u0002\u05b5[\u0003\u0002\u0002\u0002\u05b6",
    "\u05ba\u0005`1\u0002\u05b7\u05ba\u0005j6\u0002\u05b8\u05ba\u0007\u030f",
    "\u0002\u0002\u05b9\u05b6\u0003\u0002\u0002\u0002\u05b9\u05b7\u0003\u0002",
    "\u0002\u0002\u05b9\u05b8\u0003\u0002\u0002\u0002\u05ba]\u0003\u0002",
    "\u0002\u0002\u05bb\u05bc\b0\u0001\u0002\u05bc\u05bd\u0007\u00f5\u0002",
    "\u0002\u05bd\u05be\u0007\u0313\u0002\u0002\u05be\u05c5\t\u0007\u0002",
    "\u0002\u05bf\u05c0\u0007\u0175\u0002\u0002\u05c0\u05c1\u0007\u0313\u0002",
    "\u0002\u05c1\u05c5\t\b\u0002\u0002\u05c2\u05c3\u0007\u0165\u0002\u0002",
    "\u05c3\u05c5\u0007Q\u0002\u0002\u05c4\u05bb\u0003\u0002\u0002\u0002",
    "\u05c4\u05bf\u0003\u0002\u0002\u0002\u05c4\u05c2\u0003\u0002\u0002\u0002",
    "\u05c5\u05ca\u0003\u0002\u0002\u0002\u05c6\u05c7\f\u0003\u0002\u0002",
    "\u05c7\u05c9\u0007\u0326\u0002\u0002\u05c8\u05c6\u0003\u0002\u0002\u0002",
    "\u05c9\u05cc\u0003\u0002\u0002\u0002\u05ca\u05c8\u0003\u0002\u0002\u0002",
    "\u05ca\u05cb\u0003\u0002\u0002\u0002\u05cb_\u0003\u0002\u0002\u0002",
    "\u05cc\u05ca\u0003\u0002\u0002\u0002\u05cd\u05ce\u0005d3\u0002\u05ce",
    "\u05cf\u0005b2\u0002\u05cf\u05d0\u0005f4\u0002\u05d0a\u0003\u0002\u0002",
    "\u0002\u05d1\u05d2\u0005\u03ac\u01d7\u0002\u05d2c\u0003\u0002\u0002",
    "\u0002\u05d3\u05d4\u0007e\u0002\u0002\u05d4e\u0003\u0002\u0002\u0002",
    "\u05d5\u05d6\u0005h5\u0002\u05d6\u05d7\u0005f4\u0002\u05d7\u05da\u0003",
    "\u0002\u0002\u0002\u05d8\u05da\u0005\u03ac\u01d7\u0002\u05d9\u05d5\u0003",
    "\u0002\u0002\u0002\u05d9\u05d8\u0003\u0002\u0002\u0002\u05dag\u0003",
    "\u0002\u0002\u0002\u05db\u05dc\u0007\u0018\u0002\u0002\u05dci\u0003",
    "\u0002\u0002\u0002\u05dd\u05de\u0005l7\u0002\u05de\u05df\u0005f4\u0002",
    "\u05dfk\u0003\u0002\u0002\u0002\u05e0\u05e1\u0007\u01e4\u0002\u0002",
    "\u05e1m\u0003\u0002\u0002\u0002\u05e2\u05e3\u0005p9\u0002\u05e3\u05e4",
    "\u0005j6\u0002\u05e4\u05e5\u0007\u0308\u0002\u0002\u05e5\u05e6\u0007",
    "\u0326\u0002\u0002\u05e6\u05e9\u0003\u0002\u0002\u0002\u05e7\u05e9\u0005",
    "j6\u0002\u05e8\u05e2\u0003\u0002\u0002\u0002\u05e8\u05e7\u0003\u0002",
    "\u0002\u0002\u05e9o\u0003\u0002\u0002\u0002\u05ea\u05eb\u0007\u0308",
    "\u0002\u0002\u05ebq\u0003\u0002\u0002\u0002\u05ec\u05ed\u0007H\u0002",
    "\u0002\u05ed\u05ee\u0007\u0197\u0002\u0002\u05ee\u05f1\u0005\u03ac\u01d7",
    "\u0002\u05ef\u05f0\u0007\u0013\u0002\u0002\u05f0\u05f2\u0005\u03ac\u01d7",
    "\u0002\u05f1\u05ef\u0003\u0002\u0002\u0002\u05f1\u05f2\u0003\u0002\u0002",
    "\u0002\u05f2\u05f3\u0003\u0002\u0002\u0002\u05f3\u05f8\u0007\u008b\u0002",
    "\u0002\u05f4\u05f6\u0007\u0326\u0002\u0002\u05f5\u05f4\u0003\u0002\u0002",
    "\u0002\u05f5\u05f6\u0003\u0002\u0002\u0002\u05f6\u05f7\u0003\u0002\u0002",
    "\u0002\u05f7\u05f9\t\t\u0002\u0002\u05f8\u05f5\u0003\u0002\u0002\u0002",
    "\u05f9\u05fa\u0003\u0002\u0002\u0002\u05fa\u05f8\u0003\u0002\u0002\u0002",
    "\u05fa\u05fb\u0003\u0002\u0002\u0002\u05fb\u0600\u0003\u0002\u0002\u0002",
    "\u05fc\u05fd\u0007\u017b\u0002\u0002\u05fd\u05fe\u0007\u00f5\u0002\u0002",
    "\u05fe\u05ff\u0007\u0313\u0002\u0002\u05ff\u0601\t\u0007\u0002\u0002",
    "\u0600\u05fc\u0003\u0002\u0002\u0002\u0600\u0601\u0003\u0002\u0002\u0002",
    "\u0601s\u0003\u0002\u0002\u0002\u0602\u0603\u0007g\u0002\u0002\u0603",
    "\u0606\u0007\u0197\u0002\u0002\u0604\u0605\u0007\u0099\u0002\u0002\u0605",
    "\u0607\u0007w\u0002\u0002\u0606\u0604\u0003\u0002\u0002\u0002\u0606",
    "\u0607\u0003\u0002\u0002\u0002\u0607\u060c\u0003\u0002\u0002\u0002\u0608",
    "\u060a\u0007\u0326\u0002\u0002\u0609\u0608\u0003\u0002\u0002\u0002\u0609",
    "\u060a\u0003\u0002\u0002\u0002\u060a\u060b\u0003\u0002\u0002\u0002\u060b",
    "\u060d\u0005\u03ac\u01d7\u0002\u060c\u0609\u0003\u0002\u0002\u0002\u060d",
    "\u060e\u0003\u0002\u0002\u0002\u060e\u060c\u0003\u0002\u0002\u0002\u060e",
    "\u060f\u0003\u0002\u0002\u0002\u060f\u0613\u0003\u0002\u0002\u0002\u0610",
    "\u0611\u0007\u017b\u0002\u0002\u0611\u0612\u0007\u0261\u0002\u0002\u0612",
    "\u0614\u0007\u01da\u0002\u0002\u0613\u0610\u0003\u0002\u0002\u0002\u0613",
    "\u0614\u0003\u0002\u0002\u0002\u0614u\u0003\u0002\u0002\u0002\u0615",
    "\u0616\u0005x=\u0002\u0616\u061b\u0005\u03ac\u01d7\u0002\u0617\u061c",
    "\u0005z>\u0002\u0618\u0619\u0007\u029e\u0002\u0002\u0619\u061a\u0007",
    "\u0283\u0002\u0002\u061a\u061c\u0007\u00ab\u0002\u0002\u061b\u0617\u0003",
    "\u0002\u0002\u0002\u061b\u0618\u0003\u0002\u0002\u0002\u061cw\u0003",
    "\u0002\u0002\u0002\u061d\u061e\u0007\t\u0002\u0002\u061e\u061f\u0007",
    "\u0011\u0002\u0002\u061f\u0620\u0007\u00ab\u0002\u0002\u0620y\u0003",
    "\u0002\u0002\u0002\u0621\u0622\u0005|?\u0002\u0622\u0625\u0005~@\u0002",
    "\u0623\u0624\u0007\u0326\u0002\u0002\u0624\u0626\u0005~@\u0002\u0625",
    "\u0623\u0003\u0002\u0002\u0002\u0625\u0626\u0003\u0002\u0002\u0002\u0626",
    "\u0627\u0003\u0002\u0002\u0002\u0627\u0628\u0007\u0325\u0002\u0002\u0628",
    "{\u0003\u0002\u0002\u0002\u0629\u062a\u0007\u017b\u0002\u0002\u062a",
    "\u062b\u0007\u0283\u0002\u0002\u062b\u062c\u0007\u00ab\u0002\u0002\u062c",
    "\u062d\u0007\u0324\u0002\u0002\u062d}\u0003\u0002\u0002\u0002\u062e",
    "\u062f\u0007\u01d2\u0002\u0002\u062f\u0630\u0007%\u0002\u0002\u0630",
    "\u0631\u0007\u00f3\u0002\u0002\u0631\u0632\u0007\u0313\u0002\u0002\u0632",
    "\u0639\u0007\u030f\u0002\u0002\u0633\u0634\u0007\u01ec\u0002\u0002\u0634",
    "\u0635\u0007%\u0002\u0002\u0635\u0636\u0007\u00f3\u0002\u0002\u0636",
    "\u0637\u0007\u0313\u0002\u0002\u0637\u0639\u0007\u030f\u0002\u0002\u0638",
    "\u062e\u0003\u0002\u0002\u0002\u0638\u0633\u0003\u0002\u0002\u0002\u0639",
    "\u007f\u0003\u0002\u0002\u0002\u063a\u063b\u0007H\u0002\u0002\u063b",
    "\u063c\u0007\u0011\u0002\u0002\u063c\u063d\u0007\u00ab\u0002\u0002\u063d",
    "\u0640\u0005\u03ac\u01d7\u0002\u063e\u063f\u0007\u0013\u0002\u0002\u063f",
    "\u0641\u0005\u03ac\u01d7\u0002\u0640\u063e\u0003\u0002\u0002\u0002\u0640",
    "\u0641\u0003\u0002\u0002\u0002\u0641\u064f\u0003\u0002\u0002\u0002\u0642",
    "\u064d\u0007\u008b\u0002\u0002\u0643\u0644\u0007\u0081\u0002\u0002\u0644",
    "\u0645\u0007\u0313\u0002\u0002\u0645\u064e\u0007\u030f\u0002\u0002\u0646",
    "\u0647\u0007u\u0002\u0002\u0647\u0648\u0007\u0313\u0002\u0002\u0648",
    "\u064e\u0007\u030f\u0002\u0002\u0649\u064a\u0007\u0197\u0002\u0002\u064a",
    "\u064e\u0005\u03ac\u01d7\u0002\u064b\u064c\u0007\u0288\u0002\u0002\u064c",
    "\u064e\u0005\u03ac\u01d7\u0002\u064d\u0643\u0003\u0002\u0002\u0002\u064d",
    "\u0646\u0003\u0002\u0002\u0002\u064d\u0649\u0003\u0002\u0002\u0002\u064d",
    "\u064b\u0003\u0002\u0002\u0002\u064e\u0650\u0003\u0002\u0002\u0002\u064f",
    "\u0642\u0003\u0002\u0002\u0002\u064f\u0650\u0003\u0002\u0002\u0002\u0650",
    "\u065d\u0003\u0002\u0002\u0002\u0651\u065b\u0007\u017b\u0002\u0002\u0652",
    "\u0653\u0007\u018c\u0002\u0002\u0653\u0654\u0007\u0313\u0002\u0002\u0654",
    "\u065c\t\n\u0002\u0002\u0655\u0656\u0007\u0289\u0002\u0002\u0656\u0657",
    "\u0007\u0313\u0002\u0002\u0657\u065c\u0007\u030f\u0002\u0002\u0658\u0659",
    "\u0007\u01c5\u0002\u0002\u0659\u065a\u0007\u0313\u0002\u0002\u065a\u065c",
    "\t\u000b\u0002\u0002\u065b\u0652\u0003\u0002\u0002\u0002\u065b\u0655",
    "\u0003\u0002\u0002\u0002\u065b\u0658\u0003\u0002\u0002\u0002\u065c\u065e",
    "\u0003\u0002\u0002\u0002\u065d\u0651\u0003\u0002\u0002\u0002\u065d\u065e",
    "\u0003\u0002\u0002\u0002\u065e\u0664\u0003\u0002\u0002\u0002\u065f\u0660",
    "\u0007\u01ec\u0002\u0002\u0660\u0661\u0007%\u0002\u0002\u0661\u0662",
    "\u0007\u00f3\u0002\u0002\u0662\u0663\u0007\u0313\u0002\u0002\u0663\u0665",
    "\u0007\u030f\u0002\u0002\u0664\u065f\u0003\u0002\u0002\u0002\u0664\u0665",
    "\u0003\u0002\u0002\u0002\u0665\u0081\u0003\u0002\u0002\u0002\u0666\u0667",
    "\u0007g\u0002\u0002\u0667\u0668\u0007\u0011\u0002\u0002\u0668\u0669",
    "\u0007\u00ab\u0002\u0002\u0669\u066d\u0005\u03ac\u01d7\u0002\u066a\u066b",
    "\u0007\u029e\u0002\u0002\u066b\u066c\u0007\u0288\u0002\u0002\u066c\u066e",
    "\u0007\u00ab\u0002\u0002\u066d\u066a\u0003\u0002\u0002\u0002\u066d\u066e",
    "\u0003\u0002\u0002\u0002\u066e\u0083\u0003\u0002\u0002\u0002\u066f\u0673",
    "\u0005\u008cG\u0002\u0670\u0671\u0005\u0094K\u0002\u0671\u0672\u0005",
    "\u008aF\u0002\u0672\u0674\u0003\u0002\u0002\u0002\u0673\u0670\u0003",
    "\u0002\u0002\u0002\u0673\u0674\u0003\u0002\u0002\u0002\u0674\u0675\u0003",
    "\u0002\u0002\u0002\u0675\u0676\u0005\u0370\u01b9\u0002\u0676\u0677\u0005",
    "\u0088E\u0002\u0677\u0678\u0005\u0086D\u0002\u0678\u0085\u0003\u0002",
    "\u0002\u0002\u0679\u067d\u0005\u03ac\u01d7\u0002\u067a\u067b\u0007\u012d",
    "\u0002\u0002\u067b\u067d\u0007\u0274\u0002\u0002\u067c\u0679\u0003\u0002",
    "\u0002\u0002\u067c\u067a\u0003\u0002\u0002\u0002\u067d\u0087\u0003\u0002",
    "\u0002\u0002\u067e\u067f\u0007\u015c\u0002\u0002\u067f\u0089\u0003\u0002",
    "\u0002\u0002\u0680\u0681\u0007\u0328\u0002\u0002\u0681\u0682\u0007\u0328",
    "\u0002\u0002\u0682\u008b\u0003\u0002\u0002\u0002\u0683\u0684\u0007\t",
    "\u0002\u0002\u0684\u0685\u0007\u0013\u0002\u0002\u0685\u0686\u0007\u00e4",
    "\u0002\u0002\u0686\u008d\u0003\u0002\u0002\u0002\u0687\u068b\u0005\u008c",
    "G\u0002\u0688\u0689\u0005\u0096L\u0002\u0689\u068a\u0005\u008aF\u0002",
    "\u068a\u068c\u0003\u0002\u0002\u0002\u068b\u0688\u0003\u0002\u0002\u0002",
    "\u068b\u068c\u0003\u0002\u0002\u0002\u068c\u068d\u0003\u0002\u0002\u0002",
    "\u068d\u068e\u0005\u0370\u01b9\u0002\u068e\u068f\u0005\u0088E\u0002",
    "\u068f\u0690\u0005\u0086D\u0002\u0690\u008f\u0003\u0002\u0002\u0002",
    "\u0691\u0695\u0005\u008cG\u0002\u0692\u0693\u0005\u0098M\u0002\u0693",
    "\u0694\u0005\u008aF\u0002\u0694\u0696\u0003\u0002\u0002\u0002\u0695",
    "\u0692\u0003\u0002\u0002\u0002\u0695\u0696\u0003\u0002\u0002\u0002\u0696",
    "\u0697\u0003\u0002\u0002\u0002\u0697\u0698\u0005\u0372\u01ba\u0002\u0698",
    "\u0699\u0005\u0088E\u0002\u0699\u069a\u0005\u0086D\u0002\u069a\u0091",
    "\u0003\u0002\u0002\u0002\u069b\u069f\u0005\u008cG\u0002\u069c\u069d",
    "\u0005\u009aN\u0002\u069d\u069e\u0005\u008aF\u0002\u069e\u06a0\u0003",
    "\u0002\u0002\u0002\u069f\u069c\u0003\u0002\u0002\u0002\u069f\u06a0\u0003",
    "\u0002\u0002\u0002\u06a0\u06a1\u0003\u0002\u0002\u0002\u06a1\u06a2\u0005",
    "\u0374\u01bb\u0002\u06a2\u06a3\u0005\u0088E\u0002\u06a3\u06a4\u0005",
    "\u0086D\u0002\u06a4\u0093\u0003\u0002\u0002\u0002\u06a5\u06c8\u0007",
    "\u0269\u0002\u0002\u06a6\u06c8\u0007\u0197\u0002\u0002\u06a7\u06a8\u0007",
    "\u0011\u0002\u0002\u06a8\u06c8\u0007\u00ab\u0002\u0002\u06a9\u06aa\u0007",
    "\u01a1\u0002\u0002\u06aa\u06c8\u0007\u0092\u0002\u0002\u06ab\u06c8\u0007",
    "*\u0002\u0002\u06ac\u06c8\u0007C\u0002\u0002\u06ad\u06c8\u0007\u02f0",
    "\u0002\u0002\u06ae\u06c8\u0007T\u0002\u0002\u06af\u06c8\u0007m\u0002",
    "\u0002\u06b0\u06b1\u0007\u0208\u0002\u0002\u06b1\u06c8\u0007\u01b0\u0002",
    "\u0002\u06b2\u06b3\u0007\u0208\u0002\u0002\u06b3\u06c8\u0007\u02d5\u0002",
    "\u0002\u06b4\u06b5\u0007\u024b\u0002\u0002\u06b5\u06c8\u0007\u02f0\u0002",
    "\u0002\u06b6\u06b7\u0007\u02a2\u0002\u0002\u06b7\u06b8\u0007\u0137\u0002",
    "\u0002\u06b8\u06c8\u0007\u01a8\u0002\u0002\u06b9\u06c8\u0007\u0120\u0002",
    "\u0002\u06ba\u06c8\u0007\u02af\u0002\u0002\u06bb\u06c8\u0007\u012d\u0002",
    "\u0002\u06bc\u06bd\u0007\u02b9\u0002\u0002\u06bd\u06be\u0007\u0287\u0002",
    "\u0002\u06be\u06c8\u0007\u022f\u0002\u0002\u06bf\u06c0\u0007\u0136\u0002",
    "\u0002\u06c0\u06c8\u0007\u0120\u0002\u0002\u06c1\u06c8\u0007\u0137\u0002",
    "\u0002\u06c2\u06c3\u0007\u02db\u0002\u0002\u06c3\u06c8\u0007\u00ab\u0002",
    "\u0002\u06c4\u06c5\u0007\u0301\u0002\u0002\u06c5\u06c6\u0007\u012d\u0002",
    "\u0002\u06c6\u06c8\u0007\u01b7\u0002\u0002\u06c7\u06a5\u0003\u0002\u0002",
    "\u0002\u06c7\u06a6\u0003\u0002\u0002\u0002\u06c7\u06a7\u0003\u0002\u0002",
    "\u0002\u06c7\u06a9\u0003\u0002\u0002\u0002\u06c7\u06ab\u0003\u0002\u0002",
    "\u0002\u06c7\u06ac\u0003\u0002\u0002\u0002\u06c7\u06ad\u0003\u0002\u0002",
    "\u0002\u06c7\u06ae\u0003\u0002\u0002\u0002\u06c7\u06af\u0003\u0002\u0002",
    "\u0002\u06c7\u06b0\u0003\u0002\u0002\u0002\u06c7\u06b2\u0003\u0002\u0002",
    "\u0002\u06c7\u06b4\u0003\u0002\u0002\u0002\u06c7\u06b6\u0003\u0002\u0002",
    "\u0002\u06c7\u06b9\u0003\u0002\u0002\u0002\u06c7\u06ba\u0003\u0002\u0002",
    "\u0002\u06c7\u06bb\u0003\u0002\u0002\u0002\u06c7\u06bc\u0003\u0002\u0002",
    "\u0002\u06c7\u06bf\u0003\u0002\u0002\u0002\u06c7\u06c1\u0003\u0002\u0002",
    "\u0002\u06c7\u06c2\u0003\u0002\u0002\u0002\u06c7\u06c4\u0003\u0002\u0002",
    "\u0002\u06c8\u0095\u0003\u0002\u0002\u0002\u06c9\u06df\u0007\u0269\u0002",
    "\u0002\u06ca\u06df\u0007\u0197\u0002\u0002\u06cb\u06cc\u0007\u0011\u0002",
    "\u0002\u06cc\u06df\u0007\u00ab\u0002\u0002\u06cd\u06df\u0007*\u0002",
    "\u0002\u06ce\u06df\u0007\u02f0\u0002\u0002\u06cf\u06df\u0007T\u0002",
    "\u0002\u06d0\u06d1\u0007\u0208\u0002\u0002\u06d1\u06df\u0007\u01b0\u0002",
    "\u0002\u06d2\u06d3\u0007\u0208\u0002\u0002\u06d3\u06df\u0007\u02d5\u0002",
    "\u0002\u06d4\u06df\u0007\u0120\u0002\u0002\u06d5\u06df\u0007\u012d\u0002",
    "\u0002\u06d6\u06d7\u0007\u02b9\u0002\u0002\u06d7\u06d8\u0007\u0287\u0002",
    "\u0002\u06d8\u06df\u0007\u022f\u0002\u0002\u06d9\u06da\u0007\u02db\u0002",
    "\u0002\u06da\u06df\u0007\u00ab\u0002\u0002\u06db\u06dc\u0007\u0301\u0002",
    "\u0002\u06dc\u06dd\u0007\u012d\u0002\u0002\u06dd\u06df\u0007\u01b7\u0002",
    "\u0002\u06de\u06c9\u0003\u0002\u0002\u0002\u06de\u06ca\u0003\u0002\u0002",
    "\u0002\u06de\u06cb\u0003\u0002\u0002\u0002\u06de\u06cd\u0003\u0002\u0002",
    "\u0002\u06de\u06ce\u0003\u0002\u0002\u0002\u06de\u06cf\u0003\u0002\u0002",
    "\u0002\u06de\u06d0\u0003\u0002\u0002\u0002\u06de\u06d2\u0003\u0002\u0002",
    "\u0002\u06de\u06d4\u0003\u0002\u0002\u0002\u06de\u06d5\u0003\u0002\u0002",
    "\u0002\u06de\u06d6\u0003\u0002\u0002\u0002\u06de\u06d9\u0003\u0002\u0002",
    "\u0002\u06de\u06db\u0003\u0002\u0002\u0002\u06df\u0097\u0003\u0002\u0002",
    "\u0002\u06e0\u06e1\t\f\u0002\u0002\u06e1\u0099\u0003\u0002\u0002\u0002",
    "\u06e2\u06e3\t\r\u0002\u0002\u06e3\u009b\u0003\u0002\u0002\u0002\u06e4",
    "\u06e5\u0007g\u0002\u0002\u06e5\u06e6\u0007\u01a1\u0002\u0002\u06e6",
    "\u06e7\u0007\u0092\u0002\u0002\u06e7\u06e8\u0005\u03ac\u01d7\u0002\u06e8",
    "\u009d\u0003\u0002\u0002\u0002\u06e9\u06ea\u0005\u00a0Q\u0002\u06ea",
    "\u06eb\u0005\u00a2R\u0002\u06eb\u009f\u0003\u0002\u0002\u0002\u06ec",
    "\u06ed\u0007\t\u0002\u0002\u06ed\u06ee\u0007\u01a1\u0002\u0002\u06ee",
    "\u06ef\u0007\u0092\u0002\u0002\u06ef\u06f0\u0005\u03ac\u01d7\u0002\u06f0",
    "\u00a1\u0003\u0002\u0002\u0002\u06f1\u06f2\u0007\u013c\u0002\u0002\u06f2",
    "\u0702\u0007\u0324\u0002\u0002\u06f3\u06f4\u0007\u0015\u0002\u0002\u06f4",
    "\u06f5\u0007\u0313\u0002\u0002\u06f5\u0703\t\u000e\u0002\u0002\u06f6",
    "\u06f7\u0007\u01f6\u0002\u0002\u06f7\u06f8\u0007\u0313\u0002\u0002\u06f8",
    "\u0703\u0007\u030b\u0002\u0002\u06f9\u06fa\u0007\u0213\u0002\u0002\u06fa",
    "\u06fb\u0007\u0313\u0002\u0002\u06fb\u0703\u0007\u030b\u0002\u0002\u06fc",
    "\u06fd\u0007\u01d1\u0002\u0002\u06fd\u06fe\u0007\u0313\u0002\u0002\u06fe",
    "\u0703\t\b\u0002\u0002\u06ff\u0700\u0007\u02a1\u0002\u0002\u0700\u0701",
    "\u0007\u0313\u0002\u0002\u0701\u0703\u0007\u030b\u0002\u0002\u0702\u06f3",
    "\u0003\u0002\u0002\u0002\u0702\u06f6\u0003\u0002\u0002\u0002\u0702\u06f9",
    "\u0003\u0002\u0002\u0002\u0702\u06fc\u0003\u0002\u0002\u0002\u0702\u06ff",
    "\u0003\u0002\u0002\u0002\u0703\u0704\u0003\u0002\u0002\u0002\u0704\u0850",
    "\u0007\u0325\u0002\u0002\u0705\u0706\u0007\u0003\u0002\u0002\u0706\u0707",
    "\u0007T\u0002\u0002\u0707\u0850\u0005\u03ac\u01d7\u0002\u0708\u0709",
    "\u0007\u029e\u0002\u0002\u0709\u070a\u0007T\u0002\u0002\u070a\u0850",
    "\u0005\u03ac\u01d7\u0002\u070b\u070c\u0007\u0003\u0002\u0002\u070c\u070d",
    "\u0007\u02a0\u0002\u0002\u070d\u070e\u0007\u00e4\u0002\u0002\u070e\u070f",
    "\u0007\u030f\u0002\u0002\u070f\u0710\u0007\u017b\u0002\u0002\u0710\u0714",
    "\u0007\u0324\u0002\u0002\u0711\u0712\u0007\u01ed\u0002\u0002\u0712\u0713",
    "\u0007\u0313\u0002\u0002\u0713\u0715\u0007\u030f\u0002\u0002\u0714\u0711",
    "\u0003\u0002\u0002\u0002\u0714\u0715\u0003\u0002\u0002\u0002\u0715\u071c",
    "\u0003\u0002\u0002\u0002\u0716\u0718\u0007\u0326\u0002\u0002\u0717\u0716",
    "\u0003\u0002\u0002\u0002\u0717\u0718\u0003\u0002\u0002\u0002\u0718\u0719",
    "\u0003\u0002\u0002\u0002\u0719\u071a\u0007\u0017\u0002\u0002\u071a\u071b",
    "\u0007\u0313\u0002\u0002\u071b\u071d\t\u000f\u0002\u0002\u071c\u0717",
    "\u0003\u0002\u0002\u0002\u071c\u071d\u0003\u0002\u0002\u0002\u071d\u0724",
    "\u0003\u0002\u0002\u0002\u071e\u0720\u0007\u0326\u0002\u0002\u071f\u071e",
    "\u0003\u0002\u0002\u0002\u071f\u0720\u0003\u0002\u0002\u0002\u0720\u0721",
    "\u0003\u0002\u0002\u0002\u0721\u0722\u0007\u01f4\u0002\u0002\u0722\u0723",
    "\u0007\u0313\u0002\u0002\u0723\u0725\t\u0010\u0002\u0002\u0724\u071f",
    "\u0003\u0002\u0002\u0002\u0724\u0725\u0003\u0002\u0002\u0002\u0725\u072c",
    "\u0003\u0002\u0002\u0002\u0726\u0728\u0007\u0326\u0002\u0002\u0727\u0726",
    "\u0003\u0002\u0002\u0002\u0727\u0728\u0003\u0002\u0002\u0002\u0728\u0729",
    "\u0003\u0002\u0002\u0002\u0729\u072a\u0007\u02c0\u0002\u0002\u072a\u072b",
    "\u0007\u0313\u0002\u0002\u072b\u072d\t\u0010\u0002\u0002\u072c\u0727",
    "\u0003\u0002\u0002\u0002\u072c\u072d\u0003\u0002\u0002\u0002\u072d\u0734",
    "\u0003\u0002\u0002\u0002\u072e\u0730\u0007\u0326\u0002\u0002\u072f\u072e",
    "\u0003\u0002\u0002\u0002\u072f\u0730\u0003\u0002\u0002\u0002\u0730\u0731",
    "\u0003\u0002\u0002\u0002\u0731\u0732\u0007\u01a3\u0002\u0002\u0732\u0733",
    "\u0007\u0313\u0002\u0002\u0733\u0735\u0007\u030b\u0002\u0002\u0734\u072f",
    "\u0003\u0002\u0002\u0002\u0734\u0735\u0003\u0002\u0002\u0002\u0735\u073f",
    "\u0003\u0002\u0002\u0002\u0736\u0738\u0007\u0326\u0002\u0002\u0737\u0736",
    "\u0003\u0002\u0002\u0002\u0737\u0738\u0003\u0002\u0002\u0002\u0738\u0739",
    "\u0003\u0002\u0002\u0002\u0739\u073a\u0007\u027f\u0002\u0002\u073a\u073b",
    "\u0007\u0324\u0002\u0002\u073b\u073c\u0007\u0006\u0002\u0002\u073c\u073d",
    "\u0007\u0313\u0002\u0002\u073d\u073e\t\u0011\u0002\u0002\u073e\u0740",
    "\u0007\u0325\u0002\u0002\u073f\u0737\u0003\u0002\u0002\u0002\u073f\u0740",
    "\u0003\u0002\u0002\u0002\u0740\u074a\u0003\u0002\u0002\u0002\u0741\u0743",
    "\u0007\u0326\u0002\u0002\u0742\u0741\u0003\u0002\u0002\u0002\u0742\u0743",
    "\u0003\u0002\u0002\u0002\u0743\u0744\u0003\u0002\u0002\u0002\u0744\u0745",
    "\u0007\u02bc\u0002\u0002\u0745\u0746\u0007\u0324\u0002\u0002\u0746\u0747",
    "\u0007\u0006\u0002\u0002\u0747\u0748\u0007\u0313\u0002\u0002\u0748\u0749",
    "\u0007\u0295\u0002\u0002\u0749\u074b\u0007\u0325\u0002\u0002\u074a\u0742",
    "\u0003\u0002\u0002\u0002\u074a\u074b\u0003\u0002\u0002\u0002\u074b\u074c",
    "\u0003\u0002\u0002\u0002\u074c\u0850\u0007\u0325\u0002\u0002\u074d\u074e",
    "\u0007\u02bc\u0002\u0002\u074e\u0757\u0007\u0324\u0002\u0002\u074f\u0750",
    "\u0007\u0006\u0002\u0002\u0750\u0751\u0007\u0313\u0002\u0002\u0751\u0758",
    "\t\u0012\u0002\u0002\u0752\u0753\u0007\u0296\u0002\u0002\u0753\u0754",
    "\u0007\u0313\u0002\u0002\u0754\u0755\u0007\u0324\u0002\u0002\u0755\u0756",
    "\u0007\u030f\u0002\u0002\u0756\u0758\u0007\u0325\u0002\u0002\u0757\u074f",
    "\u0003\u0002\u0002\u0002\u0757\u0752\u0003\u0002\u0002\u0002\u0758\u0850",
    "\u0003\u0002\u0002\u0002\u0759\u075a\u0007\u027f\u0002\u0002\u075a\u0771",
    "\u0007\u0324\u0002\u0002\u075b\u075c\u0007\u0006\u0002\u0002\u075c\u075d",
    "\u0007\u0313\u0002\u0002\u075d\u0772\t\u0012\u0002\u0002\u075e\u075f",
    "\u0007\u0296\u0002\u0002\u075f\u0760\u0007\u0313\u0002\u0002\u0760\u076b",
    "\u0007\u0324\u0002\u0002\u0761\u0763\u0007\u0326\u0002\u0002\u0762\u0761",
    "\u0003\u0002\u0002\u0002\u0762\u0763\u0003\u0002\u0002\u0002\u0763\u0764",
    "\u0003\u0002\u0002\u0002\u0764\u0766\u0007\u030f\u0002\u0002\u0765\u0762",
    "\u0003\u0002\u0002\u0002\u0766\u0769\u0003\u0002\u0002\u0002\u0767\u0765",
    "\u0003\u0002\u0002\u0002\u0767\u0768\u0003\u0002\u0002\u0002\u0768\u076c",
    "\u0003\u0002\u0002\u0002\u0769\u0767\u0003\u0002\u0002\u0002\u076a\u076c",
    "\u0007\u00d4\u0002\u0002\u076b\u0767\u0003\u0002\u0002\u0002\u076b\u076a",
    "\u0003\u0002\u0002\u0002\u076c\u076d\u0003\u0002\u0002\u0002\u076d\u0772",
    "\u0007\u0325\u0002\u0002\u076e\u076f\u0007\u02c5\u0002\u0002\u076f\u0770",
    "\u0007\u0313\u0002\u0002\u0770\u0772\u0007\u030b\u0002\u0002\u0771\u075b",
    "\u0003\u0002\u0002\u0002\u0771\u075e\u0003\u0002\u0002\u0002\u0771\u076e",
    "\u0003\u0002\u0002\u0002\u0772\u0850\u0003\u0002\u0002\u0002\u0773\u0774",
    "\u0007\u0253\u0002\u0002\u0774\u0775\u0007\u02a0\u0002\u0002\u0775\u0776",
    "\u0007\u00e4\u0002\u0002\u0776\u07b0\u0007\u030f\u0002\u0002\u0777\u0778",
    "\u0007\u017b\u0002\u0002\u0778\u0788\u0007\u0324\u0002\u0002\u0779\u077a",
    "\u0007\u01ed\u0002\u0002\u077a\u077b\u0007\u0313\u0002\u0002\u077b\u0789",
    "\u0007\u030f\u0002\u0002\u077c\u077d\u0007\u0017\u0002\u0002\u077d\u077e",
    "\u0007\u0313\u0002\u0002\u077e\u0789\t\u000f\u0002\u0002\u077f\u0780",
    "\u0007\u01f4\u0002\u0002\u0780\u0781\u0007\u0313\u0002\u0002\u0781\u0789",
    "\t\u0010\u0002\u0002\u0782\u0783\u0007\u02c0\u0002\u0002\u0783\u0784",
    "\u0007\u0313\u0002\u0002\u0784\u0789\t\u0010\u0002\u0002\u0785\u0786",
    "\u0007\u01a3\u0002\u0002\u0786\u0787\u0007\u0313\u0002\u0002\u0787\u0789",
    "\u0007\u030b\u0002\u0002\u0788\u0779\u0003\u0002\u0002\u0002\u0788\u077c",
    "\u0003\u0002\u0002\u0002\u0788\u077f\u0003\u0002\u0002\u0002\u0788\u0782",
    "\u0003\u0002\u0002\u0002\u0788\u0785\u0003\u0002\u0002\u0002\u0789\u07b1",
    "\u0003\u0002\u0002\u0002\u078a\u078b\u0007\u02bc\u0002\u0002\u078b\u0794",
    "\u0007\u0324\u0002\u0002\u078c\u078d\u0007\u0006\u0002\u0002\u078d\u078e",
    "\u0007\u0313\u0002\u0002\u078e\u0795\t\u0012\u0002\u0002\u078f\u0790",
    "\u0007\u0296\u0002\u0002\u0790\u0791\u0007\u0313\u0002\u0002\u0791\u0792",
    "\u0007\u0324\u0002\u0002\u0792\u0793\u0007\u030f\u0002\u0002\u0793\u0795",
    "\u0007\u0325\u0002\u0002\u0794\u078c\u0003\u0002\u0002\u0002\u0794\u078f",
    "\u0003\u0002\u0002\u0002\u0795\u07b1\u0003\u0002\u0002\u0002\u0796\u0797",
    "\u0007\u027f\u0002\u0002\u0797\u07ae\u0007\u0324\u0002\u0002\u0798\u0799",
    "\u0007\u0006\u0002\u0002\u0799\u079a\u0007\u0313\u0002\u0002\u079a\u07af",
    "\t\u0012\u0002\u0002\u079b\u079c\u0007\u0296\u0002\u0002\u079c\u079d",
    "\u0007\u0313\u0002\u0002\u079d\u07a8\u0007\u0324\u0002\u0002\u079e\u07a0",
    "\u0007\u0326\u0002\u0002\u079f\u079e\u0003\u0002\u0002\u0002\u079f\u07a0",
    "\u0003\u0002\u0002\u0002\u07a0\u07a1\u0003\u0002\u0002\u0002\u07a1\u07a3",
    "\u0007\u030f\u0002\u0002\u07a2\u079f\u0003\u0002\u0002\u0002\u07a3\u07a6",
    "\u0003\u0002\u0002\u0002\u07a4\u07a2\u0003\u0002\u0002\u0002\u07a4\u07a5",
    "\u0003\u0002\u0002\u0002\u07a5\u07a9\u0003\u0002\u0002\u0002\u07a6\u07a4",
    "\u0003\u0002\u0002\u0002\u07a7\u07a9\u0007\u00d4\u0002\u0002\u07a8\u07a4",
    "\u0003\u0002\u0002\u0002\u07a8\u07a7\u0003\u0002\u0002\u0002\u07a9\u07aa",
    "\u0003\u0002\u0002\u0002\u07aa\u07af\u0007\u0325\u0002\u0002\u07ab\u07ac",
    "\u0007\u02c5\u0002\u0002\u07ac\u07ad\u0007\u0313\u0002\u0002\u07ad\u07af",
    "\u0007\u030b\u0002\u0002\u07ae\u0798\u0003\u0002\u0002\u0002\u07ae\u079b",
    "\u0003\u0002\u0002\u0002\u07ae\u07ab\u0003\u0002\u0002\u0002\u07af\u07b1",
    "\u0003\u0002\u0002\u0002\u07b0\u0777\u0003\u0002\u0002\u0002\u07b0\u078a",
    "\u0003\u0002\u0002\u0002\u07b0\u0796\u0003\u0002\u0002\u0002\u07b1\u07b2",
    "\u0003\u0002\u0002\u0002\u07b2\u0850\u0007\u0325\u0002\u0002\u07b3\u07b4",
    "\u0007\u029e\u0002\u0002\u07b4\u07b5\u0007\u02a0\u0002\u0002\u07b5\u07b6",
    "\u0007\u00e4\u0002\u0002\u07b6\u0850\u0007\u030f\u0002\u0002\u07b7\u0850",
    "\u0007\u00a9\u0002\u0002\u07b8\u07b9\u0007\u00a9\u0002\u0002\u07b9\u07ba",
    "\u0007\u01a1\u0002\u0002\u07ba\u07bb\u0007\u0092\u0002\u0002\u07bb\u07d2",
    "\u0007\u00e4\u0002\u0002\u07bc\u07be\u0007\u0326\u0002\u0002\u07bd\u07bc",
    "\u0003\u0002\u0002\u0002\u07bd\u07be\u0003\u0002\u0002\u0002\u07be\u07bf",
    "\u0003\u0002\u0002\u0002\u07bf\u07c0\u0007\u030f\u0002\u0002\u07c0\u07c1",
    "\u0007\u017b\u0002\u0002\u07c1\u07c2\u0007\u0324\u0002\u0002\u07c2\u07c3",
    "\u0007\u0231\u0002\u0002\u07c3\u07c4\u0007\u0313\u0002\u0002\u07c4\u07c5",
    "\u0007\u030f\u0002\u0002\u07c5\u07c6\u0007\u0326\u0002\u0002\u07c6\u07c7",
    "\u0007\u0017\u0002\u0002\u07c7\u07c8\u0007\u0313\u0002\u0002\u07c8\u07c9",
    "\t\u000f\u0002\u0002\u07c9\u07ca\u0007\u0326\u0002\u0002\u07ca\u07cb",
    "\u0007\u01f4\u0002\u0002\u07cb\u07cc\u0007\u0313\u0002\u0002\u07cc\u07cd",
    "\u0007\u0239\u0002\u0002\u07cd\u07ce\u0007\u0326\u0002\u0002\u07ce\u07cf",
    "\u0007\u02c0\u0002\u0002\u07cf\u07d0\u0007\u0313\u0002\u0002\u07d0\u07d1",
    "\t\u0010\u0002\u0002\u07d1\u07d3\u0007\u0325\u0002\u0002\u07d2\u07bd",
    "\u0003\u0002\u0002\u0002\u07d3\u07d4\u0003\u0002\u0002\u0002\u07d4\u07d2",
    "\u0003\u0002\u0002\u0002\u07d4\u07d5\u0003\u0002\u0002\u0002\u07d5\u0850",
    "\u0003\u0002\u0002\u0002\u07d6\u07d7\u0007\u0253\u0002\u0002\u07d7\u07d8",
    "\u0007\u01a1\u0002\u0002\u07d8\u07d9\u0007\u0092\u0002\u0002\u07d9\u07fc",
    "\u0007\u00e4\u0002\u0002\u07da\u07dc\u0007\u0326\u0002\u0002\u07db\u07da",
    "\u0003\u0002\u0002\u0002\u07db\u07dc\u0003\u0002\u0002\u0002\u07dc\u07dd",
    "\u0003\u0002\u0002\u0002\u07dd\u07de\u0007\u030f\u0002\u0002\u07de\u07df",
    "\u0007\u017b\u0002\u0002\u07df\u07e0\u0007\u0324\u0002\u0002\u07e0\u07e1",
    "\u0007\u0231\u0002\u0002\u07e1\u07e2\u0007\u0313\u0002\u0002\u07e2\u07e9",
    "\u0007\u030f\u0002\u0002\u07e3\u07e5\u0007\u0326\u0002\u0002\u07e4\u07e3",
    "\u0003\u0002\u0002\u0002\u07e4\u07e5\u0003\u0002\u0002\u0002\u07e5\u07e6",
    "\u0003\u0002\u0002\u0002\u07e6\u07e7\u0007\u0017\u0002\u0002\u07e7\u07e8",
    "\u0007\u0313\u0002\u0002\u07e8\u07ea\t\u000f\u0002\u0002\u07e9\u07e4",
    "\u0003\u0002\u0002\u0002\u07e9\u07ea\u0003\u0002\u0002\u0002\u07ea\u07f1",
    "\u0003\u0002\u0002\u0002\u07eb\u07ed\u0007\u0326\u0002\u0002\u07ec\u07eb",
    "\u0003\u0002\u0002\u0002\u07ec\u07ed\u0003\u0002\u0002\u0002\u07ed\u07ee",
    "\u0003\u0002\u0002\u0002\u07ee\u07ef\u0007\u01f4\u0002\u0002\u07ef\u07f0",
    "\u0007\u0313\u0002\u0002\u07f0\u07f2\u0007\u0239\u0002\u0002\u07f1\u07ec",
    "\u0003\u0002\u0002\u0002\u07f1\u07f2\u0003\u0002\u0002\u0002\u07f2\u07f9",
    "\u0003\u0002\u0002\u0002\u07f3\u07f5\u0007\u0326\u0002\u0002\u07f4\u07f3",
    "\u0003\u0002\u0002\u0002\u07f4\u07f5\u0003\u0002\u0002\u0002\u07f5\u07f6",
    "\u0003\u0002\u0002\u0002\u07f6\u07f7\u0007\u02c0\u0002\u0002\u07f7\u07f8",
    "\u0007\u0313\u0002\u0002\u07f8\u07fa\t\u0010\u0002\u0002\u07f9\u07f4",
    "\u0003\u0002\u0002\u0002\u07f9\u07fa\u0003\u0002\u0002\u0002\u07fa\u07fb",
    "\u0003\u0002\u0002\u0002\u07fb\u07fd\u0007\u0325\u0002\u0002\u07fc\u07db",
    "\u0003\u0002\u0002\u0002\u07fd\u07fe\u0003\u0002\u0002\u0002\u07fe\u07fc",
    "\u0003\u0002\u0002\u0002\u07fe\u07ff\u0003\u0002\u0002\u0002\u07ff\u0850",
    "\u0003\u0002\u0002\u0002\u0800\u0801\u0007\u0091\u0002\u0002\u0801\u0802",
    "\u0007H\u0002\u0002\u0802\u0803\u0007\f\u0002\u0002\u0803\u0850\u0007",
    "T\u0002\u0002\u0804\u0805\u0007]\u0002\u0002\u0805\u0806\u0007H\u0002",
    "\u0002\u0806\u0807\u0007\f\u0002\u0002\u0807\u0850\u0007T\u0002\u0002",
    "\u0808\u0850\u0007}\u0002\u0002\u0809\u0850\u0007\u0204\u0002\u0002",
    "\u080a\u080b\u0007\u0003\u0002\u0002\u080b\u080c\u0007\u0230\u0002\u0002",
    "\u080c\u080d\u0007\u030f\u0002\u0002\u080d\u082f\u0007\u0324\u0002\u0002",
    "\u080e\u080f\u0007\u017b\u0002\u0002\u080f\u0810\u0007\u01de\u0002\u0002",
    "\u0810\u0811\u0007\u00e4\u0002\u0002\u0811\u0812\u0007\u0324\u0002\u0002",
    "\u0812\u0813\u0007\u00a5\u0002\u0002\u0813\u0814\u0007\u00a5\u0002\u0002",
    "\u0814\u0815\u0003\u0002\u0002\u0002\u0815\u0830\u0007\u0325\u0002\u0002",
    "\u0816\u0817\u0007\u017b\u0002\u0002\u0817\u0818\u0007\u0222\u0002\u0002",
    "\u0818\u0824\u0007\u0324\u0002\u0002\u0819\u081b\u0007\u0326\u0002\u0002",
    "\u081a\u0819\u0003\u0002\u0002\u0002\u081a\u081b\u0003\u0002\u0002\u0002",
    "\u081b\u081c\u0003\u0002\u0002\u0002\u081c\u0821\u0007\u0324\u0002\u0002",
    "\u081d\u081e\u0007\u00a5\u0002\u0002\u081e\u081f\u0007\u0326\u0002\u0002",
    "\u081f\u0822\u0007\u00a5\u0002\u0002\u0820\u0822\u0007\u00a6\u0002\u0002",
    "\u0821\u081d\u0003\u0002\u0002\u0002\u0821\u0820\u0003\u0002\u0002\u0002",
    "\u0822\u0823\u0003\u0002\u0002\u0002\u0823\u0825\u0007\u0325\u0002\u0002",
    "\u0824\u081a\u0003\u0002\u0002\u0002\u0825\u0826\u0003\u0002\u0002\u0002",
    "\u0826\u0824\u0003\u0002\u0002\u0002\u0826\u0827\u0003\u0002\u0002\u0002",
    "\u0827\u0828\u0003\u0002\u0002\u0002\u0828\u082d\u0007\u0325\u0002\u0002",
    "\u0829\u082a\u0007\u0326\u0002\u0002\u082a\u082b\u0007\u027d\u0002\u0002",
    "\u082b\u082c\u0007\u0313\u0002\u0002\u082c\u082e\u0007\u030b\u0002\u0002",
    "\u082d\u0829\u0003\u0002\u0002\u0002\u082d\u082e\u0003\u0002\u0002\u0002",
    "\u082e\u0830\u0003\u0002\u0002\u0002\u082f\u080e\u0003\u0002\u0002\u0002",
    "\u082f\u0816\u0003\u0002\u0002\u0002\u0830\u0831\u0003\u0002\u0002\u0002",
    "\u0831\u0850\u0007\u0325\u0002\u0002\u0832\u0833\u0007\u0253\u0002\u0002",
    "\u0833\u0840\u0007\u0230\u0002\u0002\u0834\u0835\u0007\u0003\u0002\u0002",
    "\u0835\u0836\u0007\u0222\u0002\u0002\u0836\u083a\u0007\u0324\u0002\u0002",
    "\u0837\u0838\u0007\u00a5\u0002\u0002\u0838\u083b\u0007\u00a5\u0002\u0002",
    "\u0839\u083b\u0007\u00a6\u0002\u0002\u083a\u0837\u0003\u0002\u0002\u0002",
    "\u083a\u0839\u0003\u0002\u0002\u0002\u083b\u083c\u0003\u0002\u0002\u0002",
    "\u083c\u0841\u0007\u0325\u0002\u0002\u083d\u083e\u0007\u027d\u0002\u0002",
    "\u083e\u083f\u0007\u0313\u0002\u0002\u083f\u0841\u0007\u030b\u0002\u0002",
    "\u0840\u0834\u0003\u0002\u0002\u0002\u0840\u083d\u0003\u0002\u0002\u0002",
    "\u0841\u0850\u0003\u0002\u0002\u0002\u0842\u0843\u0007\u0114\u0002\u0002",
    "\u0843\u0844\u0007\u0230\u0002\u0002\u0844\u0850\u0007\u030f\u0002\u0002",
    "\u0845\u0846\u0007\u029e\u0002\u0002\u0846\u0847\u0007\u0230\u0002\u0002",
    "\u0847\u0850\u0007\u030f\u0002\u0002\u0848\u0850\u0007\u026a\u0002\u0002",
    "\u0849\u084a\u0007\u017b\u0002\u0002\u084a\u084b\u0007\u0324\u0002\u0002",
    "\u084b\u084c\u0007h\u0002\u0002\u084c\u084d\u0007\u0313\u0002\u0002",
    "\u084d\u084e\u0007\u00f7\u0002\u0002\u084e\u0850\u0007\u0325\u0002\u0002",
    "\u084f\u06f1\u0003\u0002\u0002\u0002\u084f\u0705\u0003\u0002\u0002\u0002",
    "\u084f\u0708\u0003\u0002\u0002\u0002\u084f\u070b\u0003\u0002\u0002\u0002",
    "\u084f\u074d\u0003\u0002\u0002\u0002\u084f\u0759\u0003\u0002\u0002\u0002",
    "\u084f\u0773\u0003\u0002\u0002\u0002\u084f\u07b3\u0003\u0002\u0002\u0002",
    "\u084f\u07b7\u0003\u0002\u0002\u0002\u084f\u07b8\u0003\u0002\u0002\u0002",
    "\u084f\u07d6\u0003\u0002\u0002\u0002\u084f\u0800\u0003\u0002\u0002\u0002",
    "\u084f\u0804\u0003\u0002\u0002\u0002\u084f\u0808\u0003\u0002\u0002\u0002",
    "\u084f\u0809\u0003\u0002\u0002\u0002\u084f\u080a\u0003\u0002\u0002\u0002",
    "\u084f\u0832\u0003\u0002\u0002\u0002\u084f\u0842\u0003\u0002\u0002\u0002",
    "\u084f\u0845\u0003\u0002\u0002\u0002\u084f\u0848\u0003\u0002\u0002\u0002",
    "\u084f\u0849\u0003\u0002\u0002\u0002\u0850\u00a3\u0003\u0002\u0002\u0002",
    "\u0851\u0852\t\u0013\u0002\u0002\u0852\u0853\u0007\u01aa\u0002\u0002",
    "\u0853\u0854\u0007\u0281\u0002\u0002\u0854\u0855\u0005\u03ac\u01d7\u0002",
    "\u0855\u0856\u0007\u0085\u0002\u0002\u0856\u0857\u0007E\u0002\u0002",
    "\u0857\u0858\u0007\u013c\u0002\u0002\u0858\u0862\u0007\u0324\u0002\u0002",
    "\u0859\u085a\u0007D\u0002\u0002\u085a\u085d\u0007\u0313\u0002\u0002",
    "\u085b\u085e\u0005\u03ac\u01d7\u0002\u085c\u085e\u0007\f\u0002\u0002",
    "\u085d\u085b\u0003\u0002\u0002\u0002\u085d\u085c\u0003\u0002\u0002\u0002",
    "\u085e\u0860\u0003\u0002\u0002\u0002\u085f\u0861\u0007\u0326\u0002\u0002",
    "\u0860\u085f\u0003\u0002\u0002\u0002\u0860\u0861\u0003\u0002\u0002\u0002",
    "\u0861\u0863\u0003\u0002\u0002\u0002\u0862\u0859\u0003\u0002\u0002\u0002",
    "\u0862\u0863\u0003\u0002\u0002\u0002\u0863\u0870\u0003\u0002\u0002\u0002",
    "\u0864\u0865\u0007\u00b9\u0002\u0002\u0865\u086b\u0007\u0313\u0002\u0002",
    "\u0866\u0868\u0007f\u0002\u0002\u0867\u0866\u0003\u0002\u0002\u0002",
    "\u0867\u0868\u0003\u0002\u0002\u0002\u0868\u0869\u0003\u0002\u0002\u0002",
    "\u0869\u086c\u0005\u03ac\u01d7\u0002\u086a\u086c\u0007\f\u0002\u0002",
    "\u086b\u0867\u0003\u0002\u0002\u0002\u086b\u086a\u0003\u0002\u0002\u0002",
    "\u086c\u086e\u0003\u0002\u0002\u0002\u086d\u086f\u0007\u0326\u0002\u0002",
    "\u086e\u086d\u0003\u0002\u0002\u0002\u086e\u086f\u0003\u0002\u0002\u0002",
    "\u086f\u0871\u0003\u0002\u0002\u0002\u0870\u0864\u0003\u0002\u0002\u0002",
    "\u0870\u0871\u0003\u0002\u0002\u0002\u0871\u087b\u0003\u0002\u0002\u0002",
    "\u0872\u0873\u0007\u02a3\u0002\u0002\u0873\u0876\u0007\u0313\u0002\u0002",
    "\u0874\u0877\u0007\u030f\u0002\u0002\u0875\u0877\u0007\f\u0002\u0002",
    "\u0876\u0874\u0003\u0002\u0002\u0002\u0876\u0875\u0003\u0002\u0002\u0002",
    "\u0877\u0879\u0003\u0002\u0002\u0002\u0878\u087a\u0007\u0326\u0002\u0002",
    "\u0879\u0878\u0003\u0002\u0002\u0002\u0879\u087a\u0003\u0002\u0002\u0002",
    "\u087a\u087c\u0003\u0002\u0002\u0002\u087b\u0872\u0003\u0002\u0002\u0002",
    "\u087b\u087c\u0003\u0002\u0002\u0002\u087c\u0883\u0003\u0002\u0002\u0002",
    "\u087d\u087e\u0007\u0282\u0002\u0002\u087e\u0881\u0007\u0313\u0002\u0002",
    "\u087f\u0882\u0007\u030b\u0002\u0002\u0880\u0882\u0007Y\u0002\u0002",
    "\u0881\u087f\u0003\u0002\u0002\u0002\u0881\u0880\u0003\u0002\u0002\u0002",
    "\u0882\u0884\u0003\u0002\u0002\u0002\u0883\u087d\u0003\u0002\u0002\u0002",
    "\u0883\u0884\u0003\u0002\u0002\u0002\u0884\u0885\u0003\u0002\u0002\u0002",
    "\u0885\u0886\u0007\u0325\u0002\u0002\u0886\u00a5\u0003\u0002\u0002\u0002",
    "\u0887\u0888\u0007g\u0002\u0002\u0888\u0889\u0007\u01aa\u0002\u0002",
    "\u0889\u088a\u0007\u0281\u0002\u0002\u088a\u088b\u0005\u03ac\u01d7\u0002",
    "\u088b\u00a7\u0003\u0002\u0002\u0002\u088c\u088d\u0007\t\u0002\u0002",
    "\u088d\u088e\u0007*\u0002\u0002\u088e\u08b6\u0005\u03ac\u01d7\u0002",
    "\u088f\u0890\u0007\u029e\u0002\u0002\u0890\u08b7\u0007\u0284\u0002\u0002",
    "\u0891\u0892\u0007\u017b\u0002\u0002\u0892\u0893\u0007\u0283\u0002\u0002",
    "\u0893\u0894\u0007\u00ab\u0002\u0002\u0894\u08ab\u0007\u0324\u0002\u0002",
    "\u0895\u0896\u0007\u0081\u0002\u0002\u0896\u0897\u0007\u0313\u0002\u0002",
    "\u0897\u0899\u0007\u030f\u0002\u0002\u0898\u089a\u0007\u0326\u0002\u0002",
    "\u0899\u0898\u0003\u0002\u0002\u0002\u0899\u089a\u0003\u0002\u0002\u0002",
    "\u089a\u08ac\u0003\u0002\u0002\u0002\u089b\u089c\u0007\u01d2\u0002\u0002",
    "\u089c\u089d\u0007%\u0002\u0002\u089d\u089e\u0007\u00f3\u0002\u0002",
    "\u089e\u089f\u0007\u0313\u0002\u0002\u089f\u08a1\u0007\u030f\u0002\u0002",
    "\u08a0\u08a2\u0007\u0326\u0002\u0002\u08a1\u08a0\u0003\u0002\u0002\u0002",
    "\u08a1\u08a2\u0003\u0002\u0002\u0002\u08a2\u08ac\u0003\u0002\u0002\u0002",
    "\u08a3\u08a4\u0007\u01ec\u0002\u0002\u08a4\u08a5\u0007%\u0002\u0002",
    "\u08a5\u08a6\u0007\u00f3\u0002\u0002\u08a6\u08a7\u0007\u0313\u0002\u0002",
    "\u08a7\u08a9\u0007\u030f\u0002\u0002\u08a8\u08aa\u0007\u0326\u0002\u0002",
    "\u08a9\u08a8\u0003\u0002\u0002\u0002\u08a9\u08aa\u0003\u0002\u0002\u0002",
    "\u08aa\u08ac\u0003\u0002\u0002\u0002\u08ab\u0895\u0003\u0002\u0002\u0002",
    "\u08ab\u089b\u0003\u0002\u0002\u0002\u08ab\u08a3\u0003\u0002\u0002\u0002",
    "\u08ac\u08ad\u0003\u0002\u0002\u0002\u08ad\u08ab\u0003\u0002\u0002\u0002",
    "\u08ad\u08ae\u0003\u0002\u0002\u0002\u08ae\u08af\u0003\u0002\u0002\u0002",
    "\u08af\u08b7\u0007\u0325\u0002\u0002\u08b0\u08b1\u0007\u017b\u0002\u0002",
    "\u08b1\u08b2\u0007\u0183\u0002\u0002\u08b2\u08b3\u0007\u0085\u0002\u0002",
    "\u08b3\u08b4\u0007\u01a4\u0002\u0002\u08b4\u08b5\u0007\u0313\u0002\u0002",
    "\u08b5\u08b7\t\b\u0002\u0002\u08b6\u088f\u0003\u0002\u0002\u0002\u08b6",
    "\u0891\u0003\u0002\u0002\u0002\u08b6\u08b0\u0003\u0002\u0002\u0002\u08b7",
    "\u00a9\u0003\u0002\u0002\u0002\u08b8\u08b9\u0007\t\u0002\u0002\u08b9",
    "\u08ba\u00077\u0002\u0002\u08ba\u08bb\u0007\u01ec\u0002\u0002\u08bb",
    "\u08bc\u0007\u00ab\u0002\u0002\u08bc\u08bd\u0005\u03ac\u01d7\u0002\u08bd",
    "\u08be\t\u0014\u0002\u0002\u08be\u08bf\u0007\u02f9\u0002\u0002\u08bf",
    "\u08c0\u0007\u0324\u0002\u0002\u08c0\u08c1\u0007\u01b8\u0002\u0002\u08c1",
    "\u08c2\u0007\u0313\u0002\u0002\u08c2\u08cb\u0005\u03ac\u01d7\u0002\u08c3",
    "\u08c4\u0007\u0326\u0002\u0002\u08c4\u08c5\u0007\u018c\u0002\u0002\u08c5",
    "\u08c6\u0007\u0313\u0002\u0002\u08c6\u08c7\u0007\u030f\u0002\u0002\u08c7",
    "\u08c8\u0007\u0326\u0002\u0002\u08c8\u08c9\u0007\u01eb\u0002\u0002\u08c9",
    "\u08ca\u0007\u0313\u0002\u0002\u08ca\u08cc\u0007\u0310\u0002\u0002\u08cb",
    "\u08c3\u0003\u0002\u0002\u0002\u08cb\u08cc\u0003\u0002\u0002\u0002\u08cc",
    "\u08cd\u0003\u0002\u0002\u0002\u08cd\u08ce\u0007\u0325\u0002\u0002\u08ce",
    "\u00ab\u0003\u0002\u0002\u0002\u08cf\u08d0\u0007H\u0002\u0002\u08d0",
    "\u08d1\u00077\u0002\u0002\u08d1\u08d2\u0007\u01ec\u0002\u0002\u08d2",
    "\u08d3\u0007\u00ab\u0002\u0002\u08d3\u08d4\u0005\u03ac\u01d7\u0002\u08d4",
    "\u08d5\u0007\u017b\u0002\u0002\u08d5\u08e9\u0007\u0171\u0002\u0002\u08d6",
    "\u08d8\u0007\u0324\u0002\u0002\u08d7\u08d9\u0007\u0326\u0002\u0002\u08d8",
    "\u08d7\u0003\u0002\u0002\u0002\u08d8\u08d9\u0003\u0002\u0002\u0002\u08d9",
    "\u08da\u0003\u0002\u0002\u0002\u08da\u08db\u0007\u01b8\u0002\u0002\u08db",
    "\u08dc\u0007\u0313\u0002\u0002\u08dc\u08dd\u0005\u03ac\u01d7\u0002\u08dd",
    "\u08de\u0007\u0326\u0002\u0002\u08de\u08df\u0007\u018c\u0002\u0002\u08df",
    "\u08e0\u0007\u0313\u0002\u0002\u08e0\u08e1\u0007\u030f\u0002\u0002\u08e1",
    "\u08e2\u0007\u0326\u0002\u0002\u08e2\u08e3\u0007\u01eb\u0002\u0002\u08e3",
    "\u08e4\u0007\u0313\u0002\u0002\u08e4\u08e5\u0007\u0310\u0002\u0002\u08e5",
    "\u08e7\u0007\u0325\u0002\u0002\u08e6\u08e8\u0007\u0326\u0002\u0002\u08e7",
    "\u08e6\u0003\u0002\u0002\u0002\u08e7\u08e8\u0003\u0002\u0002\u0002\u08e8",
    "\u08ea\u0003\u0002\u0002\u0002\u08e9\u08d6\u0003\u0002\u0002\u0002\u08ea",
    "\u08eb\u0003\u0002\u0002\u0002\u08eb\u08e9\u0003\u0002\u0002\u0002\u08eb",
    "\u08ec\u0003\u0002\u0002\u0002\u08ec\u00ad\u0003\u0002\u0002\u0002\u08ed",
    "\u08ee\u0007g\u0002\u0002\u08ee\u08ef\u0007*\u0002\u0002\u08ef\u08f0",
    "\u0005\u03ac\u01d7\u0002\u08f0\u00af\u0003\u0002\u0002\u0002\u08f1\u08f2",
    "\u0007g\u0002\u0002\u08f2\u08f3\u00077\u0002\u0002\u08f3\u08f4\u0007",
    "\u01ec\u0002\u0002\u08f4\u08f5\u0007\u00ab\u0002\u0002\u08f5\u08f6\u0005",
    "\u03ac\u01d7\u0002\u08f6\u00b1\u0003\u0002\u0002\u0002\u08f7\u08f8\u0007",
    "g\u0002\u0002\u08f8\u08f9\u00077\u0002\u0002\u08f9\u08fa\u0007\u00bc",
    "\u0002\u0002\u08fa\u08fb\u0007\u00ab\u0002\u0002\u08fb\u08fc\u0005\u03ac",
    "\u01d7\u0002\u08fc\u00b3\u0003\u0002\u0002\u0002\u08fd\u08fe\u0007g",
    "\u0002\u0002\u08fe\u08ff\u0007C\u0002\u0002\u08ff\u0900\u0005\u03ac",
    "\u01d7\u0002\u0900\u00b5\u0003\u0002\u0002\u0002\u0901\u0902\u0007g",
    "\u0002\u0002\u0902\u0903\u0007\u01c6\u0002\u0002\u0903\u0904\u0005\u03ac",
    "\u01d7\u0002\u0904\u00b7\u0003\u0002\u0002\u0002\u0905\u0906\u0007g",
    "\u0002\u0002\u0906\u0907\u0007\u01c7\u0002\u0002\u0907\u0908\u0007\u0288",
    "\u0002\u0002\u0908\u0909\u0005\u03ac\u01d7\u0002\u0909\u00b9\u0003\u0002",
    "\u0002\u0002\u090a\u090b\u0007g\u0002\u0002\u090b\u090e\u0007T\u0002",
    "\u0002\u090c\u090d\u0007\u0099\u0002\u0002\u090d\u090f\u0007w\u0002",
    "\u0002\u090e\u090c\u0003\u0002\u0002\u0002\u090e\u090f\u0003\u0002\u0002",
    "\u0002\u090f\u0914\u0003\u0002\u0002\u0002\u0910\u0912\u0007\u0326\u0002",
    "\u0002\u0911\u0910\u0003\u0002\u0002\u0002\u0911\u0912\u0003\u0002\u0002",
    "\u0002\u0912\u0913\u0003\u0002\u0002\u0002\u0913\u0915\u0005\u03ac\u01d7",
    "\u0002\u0914\u0911\u0003\u0002\u0002\u0002\u0915\u0916\u0003\u0002\u0002",
    "\u0002\u0916\u0914\u0003\u0002\u0002\u0002\u0916\u0917\u0003\u0002\u0002",
    "\u0002\u0917\u00bb\u0003\u0002\u0002\u0002\u0918\u0919\u0007g\u0002",
    "\u0002\u0919\u091a\u0007T\u0002\u0002\u091a\u091b\u0007\u0198\u0002",
    "\u0002\u091b\u091c\u0007\u0144\u0002\u0002\u091c\u091d\u0005\u03ac\u01d7",
    "\u0002\u091d\u00bd\u0003\u0002\u0002\u0002\u091e\u091f\u0007g\u0002",
    "\u0002\u091f\u0920\u0007T\u0002\u0002\u0920\u0921\u0007\u02b6\u0002",
    "\u0002\u0921\u0922\u0007\u01c6\u0002\u0002\u0922\u0923\u0005\u03ac\u01d7",
    "\u0002\u0923\u00bf\u0003\u0002\u0002\u0002\u0924\u0925\u0007g\u0002",
    "\u0002\u0925\u0928\u0007Y\u0002\u0002\u0926\u0927\u0007\u0099\u0002",
    "\u0002\u0927\u0929\u0007w\u0002\u0002\u0928\u0926\u0003\u0002\u0002",
    "\u0002\u0928\u0929\u0003\u0002\u0002\u0002\u0929\u092b\u0003\u0002\u0002",
    "\u0002\u092a\u092c\u0007\u0326\u0002\u0002\u092b\u092a\u0003\u0002\u0002",
    "\u0002\u092b\u092c\u0003\u0002\u0002\u0002\u092c\u0930\u0003\u0002\u0002",
    "\u0002\u092d\u092e\u0005\u03ac\u01d7\u0002\u092e\u092f\u0007\u031f\u0002",
    "\u0002\u092f\u0931\u0003\u0002\u0002\u0002\u0930\u092d\u0003\u0002\u0002",
    "\u0002\u0930\u0931\u0003\u0002\u0002\u0002\u0931\u0932\u0003\u0002\u0002",
    "\u0002\u0932\u0933\u0005\u03ac\u01d7\u0002\u0933\u00c1\u0003\u0002\u0002",
    "\u0002\u0934\u0935\u0007g\u0002\u0002\u0935\u0936\u0007m\u0002\u0002",
    "\u0936\u0937\u0005\u03ac\u01d7\u0002\u0937\u00c3\u0003\u0002\u0002\u0002",
    "\u0938\u0939\u0007g\u0002\u0002\u0939\u093a\u0007{\u0002\u0002\u093a",
    "\u093b\u0007Q\u0002\u0002\u093b\u093c\u0007\u0143\u0002\u0002\u093c",
    "\u093d\u0005\u03ac\u01d7\u0002\u093d\u00c5\u0003\u0002\u0002\u0002\u093e",
    "\u093f\u0007g\u0002\u0002\u093f\u0940\u0007{\u0002\u0002\u0940\u0941",
    "\u0007\u0081\u0002\u0002\u0941\u0942\u0007\u0205\u0002\u0002\u0942\u0943",
    "\u0005\u03ac\u01d7\u0002\u0943\u00c7\u0003\u0002\u0002\u0002\u0944\u0945",
    "\u0007g\u0002\u0002\u0945\u0946\u0007{\u0002\u0002\u0946\u0947\u0007",
    "\u00b1\u0002\u0002\u0947\u094a\u0005\u03ac\u01d7\u0002\u0948\u0949\u0007",
    "\u0013\u0002\u0002\u0949\u094b\u0005\u03ac\u01d7\u0002\u094a\u0948\u0003",
    "\u0002\u0002\u0002\u094a\u094b\u0003\u0002\u0002\u0002\u094b\u00c9\u0003",
    "\u0002\u0002\u0002\u094c\u094d\u0007g\u0002\u0002\u094d\u094e\u0007",
    "{\u0002\u0002\u094e\u094f\u0007\u02a9\u0002\u0002\u094f\u0950\u0007",
    "\u027b\u0002\u0002\u0950\u0951\u0005\u03ac\u01d7\u0002\u0951\u00cb\u0003",
    "\u0002\u0002\u0002\u0952\u0953\u0007g\u0002\u0002\u0953\u0954\u0007",
    "{\u0002\u0002\u0954\u0958\u0007\u0155\u0002\u0002\u0955\u0956\u0005",
    "\u03ac\u01d7\u0002\u0956\u0957\u0007\u031f\u0002\u0002\u0957\u0959\u0003",
    "\u0002\u0002\u0002\u0958\u0955\u0003\u0002\u0002\u0002\u0958\u0959\u0003",
    "\u0002\u0002\u0002\u0959\u095d\u0003\u0002\u0002\u0002\u095a\u095b\u0005",
    "\u03ac\u01d7\u0002\u095b\u095c\u0007\u031f\u0002\u0002\u095c\u095e\u0003",
    "\u0002\u0002\u0002\u095d\u095a\u0003\u0002\u0002\u0002\u095d\u095e\u0003",
    "\u0002\u0002\u0002\u095e\u095f\u0003\u0002\u0002\u0002\u095f\u0960\u0005",
    "\u03ac\u01d7\u0002\u0960\u00cd\u0003\u0002\u0002\u0002\u0961\u0962\u0007",
    "g\u0002\u0002\u0962\u0963\u0007q\u0002\u0002\u0963\u0968\u0007\u00dc",
    "\u0002\u0002\u0964\u0966\u0007\u0326\u0002\u0002\u0965\u0964\u0003\u0002",
    "\u0002\u0002\u0965\u0966\u0003\u0002\u0002\u0002\u0966\u0967\u0003\u0002",
    "\u0002\u0002\u0967\u0969\u0005\u03ac\u01d7\u0002\u0968\u0965\u0003\u0002",
    "\u0002\u0002\u0969\u096a\u0003\u0002\u0002\u0002\u096a\u0968\u0003\u0002",
    "\u0002\u0002\u096a\u096b\u0003\u0002\u0002\u0002\u096b\u096c\u0003\u0002",
    "\u0002\u0002\u096c\u0971\u0007\u00e4\u0002\u0002\u096d\u0972\u0007\u0136",
    "\u0002\u0002\u096e\u0972\u0007T\u0002\u0002\u096f\u0970\u0007\u028a",
    "\u0002\u0002\u0970\u0972\u0005\u03ac\u01d7\u0002\u0971\u096d\u0003\u0002",
    "\u0002\u0002\u0971\u096e\u0003\u0002\u0002\u0002\u0971\u096f\u0003\u0002",
    "\u0002\u0002\u0972\u00cf\u0003\u0002\u0002\u0002\u0973\u0974\u0007g",
    "\u0002\u0002\u0974\u0975\u0007q\u0002\u0002\u0975\u0976\u0007\u013a",
    "\u0002\u0002\u0976\u0977\u0005\u03ac\u01d7\u0002\u0977\u0978\u0007\u00e4",
    "\u0002\u0002\u0978\u0979\u0007\u0136\u0002\u0002\u0979\u00d1\u0003\u0002",
    "\u0002\u0002\u097a\u097b\u0007g\u0002\u0002\u097b\u097c\u0007\u0208",
    "\u0002\u0002\u097c\u097d\u0007\u01b0\u0002\u0002\u097d\u097e\u0005\u03ac",
    "\u01d7\u0002\u097e\u00d3\u0003\u0002\u0002\u0002\u097f\u0980\u0007g",
    "\u0002\u0002\u0980\u0981\u0007\u0208\u0002\u0002\u0981\u0982\u0007\u009d",
    "\u0002\u0002\u0982\u0986\u0007\u00e4\u0002\u0002\u0983\u0984\u0005\u03ac",
    "\u01d7\u0002\u0984\u0985\u0007\u031f\u0002\u0002\u0985\u0987\u0003\u0002",
    "\u0002\u0002\u0986\u0983\u0003\u0002\u0002\u0002\u0986\u0987\u0003\u0002",
    "\u0002\u0002\u0987\u0988\u0003\u0002\u0002\u0002\u0988\u0989\u0005\u03ac",
    "\u01d7\u0002\u0989\u00d5\u0003\u0002\u0002\u0002\u098a\u098b\u0007g",
    "\u0002\u0002\u098b\u098c\u0007\u0208\u0002\u0002\u098c\u098d\u0007\u02d5",
    "\u0002\u0002\u098d\u098e\u0005\u03ac\u01d7\u0002\u098e\u00d7\u0003\u0002",
    "\u0002\u0002\u098f\u0990\u0007g\u0002\u0002\u0990\u0991\u0007\u0236",
    "\u0002\u0002\u0991\u0992\u0005\u03ac\u01d7\u0002\u0992\u00d9\u0003\u0002",
    "\u0002\u0002\u0993\u0994\u0007g\u0002\u0002\u0994\u0995\u0007\u00bc",
    "\u0002\u0002\u0995\u0996\u0007\u00ab\u0002\u0002\u0996\u00db\u0003\u0002",
    "\u0002\u0002\u0997\u0998\u0007g\u0002\u0002\u0998\u0999\u0007\u024b",
    "\u0002\u0002\u0999\u099a\u0007\u02f0\u0002\u0002\u099a\u099b\u0005\u03ac",
    "\u01d7\u0002\u099b\u00dd\u0003\u0002\u0002\u0002\u099c\u099d\u0007g",
    "\u0002\u0002\u099d\u099e\u0007\u0277\u0002\u0002\u099e\u099f\u0007\u008d",
    "\u0002\u0002\u099f\u09a0\u0005\u03ac\u01d7\u0002\u09a0\u00df\u0003\u0002",
    "\u0002\u0002\u09a1\u09a2\u0007g\u0002\u0002\u09a2\u09a3\u0007\u0277",
    "\u0002\u0002\u09a3\u09a4\u0007\u012e\u0002\u0002\u09a4\u09a5\u0005\u03ac",
    "\u01d7\u0002\u09a5\u00e1\u0003\u0002\u0002\u0002\u09a6\u09a7\u0007g",
    "\u0002\u0002\u09a7\u09ab\u0007\u028a\u0002\u0002\u09a8\u09a9\u0005\u03ac",
    "\u01d7\u0002\u09a9\u09aa\u0007\u031f\u0002\u0002\u09aa\u09ac\u0003\u0002",
    "\u0002\u0002\u09ab\u09a8\u0003\u0002\u0002\u0002\u09ab\u09ac\u0003\u0002",
    "\u0002\u0002\u09ac\u09b0\u0003\u0002\u0002\u0002\u09ad\u09ae\u0005\u03ac",
    "\u01d7\u0002\u09ae\u09af\u0007\u031f\u0002\u0002\u09af\u09b1\u0003\u0002",
    "\u0002\u0002\u09b0\u09ad\u0003\u0002\u0002\u0002\u09b0\u09b1\u0003\u0002",
    "\u0002\u0002\u09b1\u09b2\u0003\u0002\u0002\u0002\u09b2\u09b3\u0005\u03ac",
    "\u01d7\u0002\u09b3\u00e3\u0003\u0002\u0002\u0002\u09b4\u09b5\u0007g",
    "\u0002\u0002\u09b5\u09b6\u0007\u02a2\u0002\u0002\u09b6\u09b7\u0007\u0137",
    "\u0002\u0002\u09b7\u09b8\u0007\u01a8\u0002\u0002\u09b8\u09b9\u0005\u03ac",
    "\u01d7\u0002\u09b9\u00e5\u0003\u0002\u0002\u0002\u09ba\u09bb\u0007g",
    "\u0002\u0002\u09bb\u09bc\u0007\u02a9\u0002\u0002\u09bc\u09bd\u0007\u027b",
    "\u0002\u0002\u09bd\u09be\u0005\u03ac\u01d7\u0002\u09be\u00e7\u0003\u0002",
    "\u0002\u0002\u09bf\u09c0\u0007g\u0002\u0002\u09c0\u09c3\u0007\u0120",
    "\u0002\u0002\u09c1\u09c2\u0007\u0099\u0002\u0002\u09c2\u09c4\u0007w",
    "\u0002\u0002\u09c3\u09c1\u0003\u0002\u0002\u0002\u09c3\u09c4\u0003\u0002",
    "\u0002\u0002\u09c4\u09c5\u0003\u0002\u0002\u0002\u09c5\u09c6\u0005\u03ac",
    "\u01d7\u0002\u09c6\u00e9\u0003\u0002\u0002\u0002\u09c7\u09c8\u0007g",
    "\u0002\u0002\u09c8\u09c9\u0007\u02af\u0002\u0002\u09c9\u09ca\u0005\u03ac",
    "\u01d7\u0002\u09ca\u00eb\u0003\u0002\u0002\u0002\u09cb\u09cc\u0007g",
    "\u0002\u0002\u09cc\u09cf\u0007\u0129\u0002\u0002\u09cd\u09ce\u0007\u0099",
    "\u0002\u0002\u09ce\u09d0\u0007w\u0002\u0002\u09cf\u09cd\u0003\u0002",
    "\u0002\u0002\u09cf\u09d0\u0003\u0002\u0002\u0002\u09d0\u09da\u0003\u0002",
    "\u0002\u0002\u09d1\u09d3\u0007\u0326\u0002\u0002\u09d2\u09d1\u0003\u0002",
    "\u0002\u0002\u09d2\u09d3\u0003\u0002\u0002\u0002\u09d3\u09d7\u0003\u0002",
    "\u0002\u0002\u09d4\u09d5\u0005\u03ac\u01d7\u0002\u09d5\u09d6\u0007\u031f",
    "\u0002\u0002\u09d6\u09d8\u0003\u0002\u0002\u0002\u09d7\u09d4\u0003\u0002",
    "\u0002\u0002\u09d7\u09d8\u0003\u0002\u0002\u0002\u09d8\u09d9\u0003\u0002",
    "\u0002\u0002\u09d9\u09db\u0005\u03ac\u01d7\u0002\u09da\u09d2\u0003\u0002",
    "\u0002\u0002\u09da\u09db\u0003\u0002\u0002\u0002\u09db\u00ed\u0003\u0002",
    "\u0002\u0002\u09dc\u09dd\u0007g\u0002\u0002\u09dd\u09e0\u0007\u012d",
    "\u0002\u0002\u09de\u09df\u0007\u0099\u0002\u0002\u09df\u09e1\u0007w",
    "\u0002\u0002\u09e0\u09de\u0003\u0002\u0002\u0002\u09e0\u09e1\u0003\u0002",
    "\u0002\u0002\u09e1\u09e2\u0003\u0002\u0002\u0002\u09e2\u09e3\u0005\u03ac",
    "\u01d7\u0002\u09e3\u00ef\u0003\u0002\u0002\u0002\u09e4\u09e5\u0007g",
    "\u0002\u0002\u09e5\u09e6\u0007\u02b9\u0002\u0002\u09e6\u09e7\u0007\u0287",
    "\u0002\u0002\u09e7\u09e8\u0007\u022f\u0002\u0002\u09e8\u09e9\u0005\u03ac",
    "\u01d7\u0002\u09e9\u00f1\u0003\u0002\u0002\u0002\u09ea\u09eb\u0007g",
    "\u0002\u0002\u09eb\u09ec\u0007\u012f\u0002\u0002\u09ec\u09ef\u0007\u00fc",
    "\u0002\u0002\u09ed\u09ee\u0007\u0099\u0002\u0002\u09ee\u09f0\u0007w",
    "\u0002\u0002\u09ef\u09ed\u0003\u0002\u0002\u0002\u09ef\u09f0\u0003\u0002",
    "\u0002\u0002\u09f0\u09f4\u0003\u0002\u0002\u0002\u09f1\u09f2\u0005\u03ac",
    "\u01d7\u0002\u09f2\u09f3\u0007\u031f\u0002\u0002\u09f3\u09f5\u0003\u0002",
    "\u0002\u0002\u09f4\u09f1\u0003\u0002\u0002\u0002\u09f4\u09f5\u0003\u0002",
    "\u0002\u0002\u09f5\u09f6\u0003\u0002\u0002\u0002\u09f6\u09f7\u0005\u03ac",
    "\u01d7\u0002\u09f7\u00f3\u0003\u0002\u0002\u0002\u09f8\u09f9\u0007g",
    "\u0002\u0002\u09f9\u09fc\u0007\u0135\u0002\u0002\u09fa\u09fb\u0007\u0099",
    "\u0002\u0002\u09fb\u09fd\u0007w\u0002\u0002\u09fc\u09fa\u0003\u0002",
    "\u0002\u0002\u09fc\u09fd\u0003\u0002\u0002\u0002\u09fd\u0a0c\u0003\u0002",
    "\u0002\u0002\u09fe\u0a00\u0007\u0326\u0002\u0002\u09ff\u09fe\u0003\u0002",
    "\u0002\u0002\u09ff\u0a00\u0003\u0002\u0002\u0002\u0a00\u0a04\u0003\u0002",
    "\u0002\u0002\u0a01\u0a02\u0005\u03ac\u01d7\u0002\u0a02\u0a03\u0007\u031f",
    "\u0002\u0002\u0a03\u0a05\u0003\u0002\u0002\u0002\u0a04\u0a01\u0003\u0002",
    "\u0002\u0002\u0a04\u0a05\u0003\u0002\u0002\u0002\u0a05\u0a09\u0003\u0002",
    "\u0002\u0002\u0a06\u0a07\u0005\u03ac\u01d7\u0002\u0a07\u0a08\u0007\u031f",
    "\u0002\u0002\u0a08\u0a0a\u0003\u0002\u0002\u0002\u0a09\u0a06\u0003\u0002",
    "\u0002\u0002\u0a09\u0a0a\u0003\u0002\u0002\u0002\u0a0a\u0a0b\u0003\u0002",
    "\u0002\u0002\u0a0b\u0a0d\u0005\u03ac\u01d7\u0002\u0a0c\u09ff\u0003\u0002",
    "\u0002\u0002\u0a0c\u0a0d\u0003\u0002\u0002\u0002\u0a0d\u00f5\u0003\u0002",
    "\u0002\u0002\u0a0e\u0a0f\u0007g\u0002\u0002\u0a0f\u0a10\u0007\u0136",
    "\u0002\u0002\u0a10\u0a11\u0007\u0198\u0002\u0002\u0a11\u0a12\u0005\u03ac",
    "\u01d7\u0002\u0a12\u00f7\u0003\u0002\u0002\u0002\u0a13\u0a14\u0007g",
    "\u0002\u0002\u0a14\u0a15\u0007\u0136\u0002\u0002\u0a15\u0a16\u0007\u0198",
    "\u0002\u0002\u0a16\u0a17\u0007\u0144\u0002\u0002\u0a17\u0a18\u0005\u03ac",
    "\u01d7\u0002\u0a18\u00f9\u0003\u0002\u0002\u0002\u0a19\u0a1a\u0007g",
    "\u0002\u0002\u0a1a\u0a1b\u0007\u0136\u0002\u0002\u0a1b\u0a1c\u0007\u0120",
    "\u0002\u0002\u0a1c\u0a1d\u0005\u03ac\u01d7\u0002\u0a1d\u00fb\u0003\u0002",
    "\u0002\u0002\u0a1e\u0a1f\u0007g\u0002\u0002\u0a1f\u0a20\u0007\u0137",
    "\u0002\u0002\u0a20\u0a21\u0005\u03ac\u01d7\u0002\u0a21\u00fd\u0003\u0002",
    "\u0002\u0002\u0a22\u0a24\u0007g\u0002\u0002\u0a23\u0a25\u0007\u01c1",
    "\u0002\u0002\u0a24\u0a23\u0003\u0002\u0002\u0002\u0a24\u0a25\u0003\u0002",
    "\u0002\u0002\u0a25\u0a26\u0003\u0002\u0002\u0002\u0a26\u0a27\u0007\u02c8",
    "\u0002\u0002\u0a27\u0a2b\u0007\u008b\u0002\u0002\u0a28\u0a29\u0005\u03ac",
    "\u01d7\u0002\u0a29\u0a2a\u0007\u031f\u0002\u0002\u0a2a\u0a2c\u0003\u0002",
    "\u0002\u0002\u0a2b\u0a28\u0003\u0002\u0002\u0002\u0a2b\u0a2c\u0003\u0002",
    "\u0002\u0002\u0a2c\u0a2d\u0003\u0002\u0002\u0002\u0a2d\u0a2e\u0005\u03ac",
    "\u01d7\u0002\u0a2e\u0a3a\u0007%\u0002\u0002\u0a2f\u0a31\u0007\u0326",
    "\u0002\u0002\u0a30\u0a2f\u0003\u0002\u0002\u0002\u0a30\u0a31\u0003\u0002",
    "\u0002\u0002\u0a31\u0a32\u0003\u0002\u0002\u0002\u0a32\u0a33\u0007*",
    "\u0002\u0002\u0a33\u0a3b\u0005\u03ac\u01d7\u0002\u0a34\u0a36\u0007\u0326",
    "\u0002\u0002\u0a35\u0a34\u0003\u0002\u0002\u0002\u0a35\u0a36\u0003\u0002",
    "\u0002\u0002\u0a36\u0a37\u0003\u0002\u0002\u0002\u0a37\u0a38\u0007\u0011",
    "\u0002\u0002\u0a38\u0a39\u0007\u00ab\u0002\u0002\u0a39\u0a3b\u0005\u03ac",
    "\u01d7\u0002\u0a3a\u0a30\u0003\u0002\u0002\u0002\u0a3a\u0a35\u0003\u0002",
    "\u0002\u0002\u0a3b\u0a3c\u0003\u0002\u0002\u0002\u0a3c\u0a3a\u0003\u0002",
    "\u0002\u0002\u0a3c\u0a3d\u0003\u0002\u0002\u0002\u0a3d\u00ff\u0003\u0002",
    "\u0002\u0002\u0a3e\u0a3f\u0007g\u0002\u0002\u0a3f\u0a43\u0007\u0149",
    "\u0002\u0002\u0a40\u0a41\u0005\u03ac\u01d7\u0002\u0a41\u0a42\u0007\u031f",
    "\u0002\u0002\u0a42\u0a44\u0003\u0002\u0002\u0002\u0a43\u0a40\u0003\u0002",
    "\u0002\u0002\u0a43\u0a44\u0003\u0002\u0002\u0002\u0a44\u0a45\u0003\u0002",
    "\u0002\u0002\u0a45\u0a46\u0005\u03ac\u01d7\u0002\u0a46\u0a47\u0007\u031f",
    "\u0002\u0002\u0a47\u0a48\u0005\u03ac\u01d7\u0002\u0a48\u0101\u0003\u0002",
    "\u0002\u0002\u0a49\u0a4a\u0007g\u0002\u0002\u0a4a\u0a4b\u0007\u02db",
    "\u0002\u0002\u0a4b\u0a4c\u0007\u00ab\u0002\u0002\u0a4c\u0a50\u0005\u03ac",
    "\u01d7\u0002\u0a4d\u0a4e\u0007\u029e\u0002\u0002\u0a4e\u0a4f\u0007\u0288",
    "\u0002\u0002\u0a4f\u0a51\u0007\u00ab\u0002\u0002\u0a50\u0a4d\u0003\u0002",
    "\u0002\u0002\u0a50\u0a51\u0003\u0002\u0002\u0002\u0a51\u0103\u0003\u0002",
    "\u0002\u0002\u0a52\u0a53\u0007g\u0002\u0002\u0a53\u0a56\u0007\u02dd",
    "\u0002\u0002\u0a54\u0a55\u0007\u0099\u0002\u0002\u0a55\u0a57\u0007w",
    "\u0002\u0002\u0a56\u0a54\u0003\u0002\u0002\u0002\u0a56\u0a57\u0003\u0002",
    "\u0002\u0002\u0a57\u0a5b\u0003\u0002\u0002\u0002\u0a58\u0a59\u0005\u03ac",
    "\u01d7\u0002\u0a59\u0a5a\u0007\u031f\u0002\u0002\u0a5a\u0a5c\u0003\u0002",
    "\u0002\u0002\u0a5b\u0a58\u0003\u0002\u0002\u0002\u0a5b\u0a5c\u0003\u0002",
    "\u0002\u0002\u0a5c\u0a5d\u0003\u0002\u0002\u0002\u0a5d\u0a5e\u0005\u03ac",
    "\u01d7\u0002\u0a5e\u0105\u0003\u0002\u0002\u0002\u0a5f\u0a60\u0007g",
    "\u0002\u0002\u0a60\u0a63\u0007\u0170\u0002\u0002\u0a61\u0a62\u0007\u0099",
    "\u0002\u0002\u0a62\u0a64\u0007w\u0002\u0002\u0a63\u0a61\u0003\u0002",
    "\u0002\u0002\u0a63\u0a64\u0003\u0002\u0002\u0002\u0a64\u0a65\u0003\u0002",
    "\u0002\u0002\u0a65\u0a66\u0005\u03ac\u01d7\u0002\u0a66\u0107\u0003\u0002",
    "\u0002\u0002\u0a67\u0a68\u0007g\u0002\u0002\u0a68\u0a69\u0007\u0300",
    "\u0002\u0002\u0a69\u0a6a\u0007\u0092\u0002\u0002\u0a6a\u0a6b\u0005\u03ac",
    "\u01d7\u0002\u0a6b\u0109\u0003\u0002\u0002\u0002\u0a6c\u0a6d\u0007g",
    "\u0002\u0002\u0a6d\u0a6e\u0007\u0301\u0002\u0002\u0a6e\u0a6f\u0007\u012d",
    "\u0002\u0002\u0a6f\u0a73\u0007\u01b7\u0002\u0002\u0a70\u0a71\u0005\u03ac",
    "\u01d7\u0002\u0a71\u0a72\u0007\u031f\u0002\u0002\u0a72\u0a74\u0003\u0002",
    "\u0002\u0002\u0a73\u0a70\u0003\u0002\u0002\u0002\u0a73\u0a74\u0003\u0002",
    "\u0002\u0002\u0a74\u0a75\u0003\u0002\u0002\u0002\u0a75\u0a76\u0005\u03ac",
    "\u01d7\u0002\u0a76\u010b\u0003\u0002\u0002\u0002\u0a77\u0a78\u0007\u01e1",
    "\u0002\u0002\u0a78\u0a87\u0007\u0162\u0002\u0002\u0a79\u0a7b\u0007\u0326",
    "\u0002\u0002\u0a7a\u0a79\u0003\u0002\u0002\u0002\u0a7a\u0a7b\u0003\u0002",
    "\u0002\u0002\u0a7b\u0a7f\u0003\u0002\u0002\u0002\u0a7c\u0a7d\u0005\u03ac",
    "\u01d7\u0002\u0a7d\u0a7e\u0007\u031f\u0002\u0002\u0a7e\u0a80\u0003\u0002",
    "\u0002\u0002\u0a7f\u0a7c\u0003\u0002\u0002\u0002\u0a7f\u0a80\u0003\u0002",
    "\u0002\u0002\u0a80\u0a81\u0003\u0002\u0002\u0002\u0a81\u0a83\u0005\u03ac",
    "\u01d7\u0002\u0a82\u0a7a\u0003\u0002\u0002\u0002\u0a83\u0a84\u0003\u0002",
    "\u0002\u0002\u0a84\u0a82\u0003\u0002\u0002\u0002\u0a84\u0a85\u0003\u0002",
    "\u0002\u0002\u0a85\u0a88\u0003\u0002\u0002\u0002\u0a86\u0a88\u0007\u0005",
    "\u0002\u0002\u0a87\u0a82\u0003\u0002\u0002\u0002\u0a87\u0a86\u0003\u0002",
    "\u0002\u0002\u0a88\u0a89\u0003\u0002\u0002\u0002\u0a89\u0a93\u0007\u00e4",
    "\u0002\u0002\u0a8a\u0a8b\u0005\u03ac\u01d7\u0002\u0a8b\u0a8c\u0007\u031f",
    "\u0002\u0002\u0a8c\u0a8e\u0003\u0002\u0002\u0002\u0a8d\u0a8a\u0003\u0002",
    "\u0002\u0002\u0a8d\u0a8e\u0003\u0002\u0002\u0002\u0a8e\u0a8f\u0003\u0002",
    "\u0002\u0002\u0a8f\u0a94\u0005\u03ac\u01d7\u0002\u0a90\u0a94\u0007T",
    "\u0002\u0002\u0a91\u0a92\u0007\u0005\u0002\u0002\u0a92\u0a94\u0007\u0136",
    "\u0002\u0002\u0a93\u0a8d\u0003\u0002\u0002\u0002\u0a93\u0a90\u0003\u0002",
    "\u0002\u0002\u0a93\u0a91\u0003\u0002\u0002\u0002\u0a94\u010d\u0003\u0002",
    "\u0002\u0002\u0a95\u0a96\u0007\u01e9\u0002\u0002\u0a96\u0aa5\u0007\u0162",
    "\u0002\u0002\u0a97\u0a99\u0007\u0326\u0002\u0002\u0a98\u0a97\u0003\u0002",
    "\u0002\u0002\u0a98\u0a99\u0003\u0002\u0002\u0002\u0a99\u0a9d\u0003\u0002",
    "\u0002\u0002\u0a9a\u0a9b\u0005\u03ac\u01d7\u0002\u0a9b\u0a9c\u0007\u031f",
    "\u0002\u0002\u0a9c\u0a9e\u0003\u0002\u0002\u0002\u0a9d\u0a9a\u0003\u0002",
    "\u0002\u0002\u0a9d\u0a9e\u0003\u0002\u0002\u0002\u0a9e\u0a9f\u0003\u0002",
    "\u0002\u0002\u0a9f\u0aa1\u0005\u03ac\u01d7\u0002\u0aa0\u0a98\u0003\u0002",
    "\u0002\u0002\u0aa1\u0aa2\u0003\u0002\u0002\u0002\u0aa2\u0aa0\u0003\u0002",
    "\u0002\u0002\u0aa2\u0aa3\u0003\u0002\u0002\u0002\u0aa3\u0aa6\u0003\u0002",
    "\u0002\u0002\u0aa4\u0aa6\u0007\u0005\u0002\u0002\u0aa5\u0aa0\u0003\u0002",
    "\u0002\u0002\u0aa5\u0aa4\u0003\u0002\u0002\u0002\u0aa6\u0aa7\u0003\u0002",
    "\u0002\u0002\u0aa7\u0ab1\u0007\u00e4\u0002\u0002\u0aa8\u0aa9\u0005\u03ac",
    "\u01d7\u0002\u0aa9\u0aaa\u0007\u031f\u0002\u0002\u0aaa\u0aac\u0003\u0002",
    "\u0002\u0002\u0aab\u0aa8\u0003\u0002\u0002\u0002\u0aab\u0aac\u0003\u0002",
    "\u0002\u0002\u0aac\u0aad\u0003\u0002\u0002\u0002\u0aad\u0ab2\u0005\u03ac",
    "\u01d7\u0002\u0aae\u0ab2\u0007T\u0002\u0002\u0aaf\u0ab0\u0007\u0005",
    "\u0002\u0002\u0ab0\u0ab2\u0007\u0136\u0002\u0002\u0ab1\u0aab\u0003\u0002",
    "\u0002\u0002\u0ab1\u0aae\u0003\u0002\u0002\u0002\u0ab1\u0aaf\u0003\u0002",
    "\u0002\u0002\u0ab2\u010f\u0003\u0002\u0002\u0002\u0ab3\u0ab4\u0007\u0163",
    "\u0002\u0002\u0ab4\u0ab8\u0007\u0155\u0002\u0002\u0ab5\u0ab6\u0005\u03ac",
    "\u01d7\u0002\u0ab6\u0ab7\u0007\u031f\u0002\u0002\u0ab7\u0ab9\u0003\u0002",
    "\u0002\u0002\u0ab8\u0ab5\u0003\u0002\u0002\u0002\u0ab8\u0ab9\u0003\u0002",
    "\u0002\u0002\u0ab9\u0abd\u0003\u0002\u0002\u0002\u0aba\u0abb\u0005\u03ac",
    "\u01d7\u0002\u0abb\u0abc\u0007\u031f\u0002\u0002\u0abc\u0abe\u0003\u0002",
    "\u0002\u0002\u0abd\u0aba\u0003\u0002\u0002\u0002\u0abd\u0abe\u0003\u0002",
    "\u0002\u0002\u0abe\u0abf\u0003\u0002\u0002\u0002\u0abf\u0ad3\u0005\u03ac",
    "\u01d7\u0002\u0ac0\u0ac1\u0007\u017b\u0002\u0002\u0ac1\u0ac2\u0007\u0324",
    "\u0002\u0002\u0ac2\u0ac3\u0007\u0278\u0002\u0002\u0ac3\u0acd\u0007\u0324",
    "\u0002\u0002\u0ac4\u0ac6\u0007\u0326\u0002\u0002\u0ac5\u0ac4\u0003\u0002",
    "\u0002\u0002\u0ac5\u0ac6\u0003\u0002\u0002\u0002\u0ac6\u0acb\u0003\u0002",
    "\u0002\u0002\u0ac7\u0acc\u0007\u030b\u0002\u0002\u0ac8\u0ac9\u0007\u030b",
    "\u0002\u0002\u0ac9\u0aca\u0007\u015c\u0002\u0002\u0aca\u0acc\u0007\u030b",
    "\u0002\u0002\u0acb\u0ac7\u0003\u0002\u0002\u0002\u0acb\u0ac8\u0003\u0002",
    "\u0002\u0002\u0acc\u0ace\u0003\u0002\u0002\u0002\u0acd\u0ac5\u0003\u0002",
    "\u0002\u0002\u0ace\u0acf\u0003\u0002\u0002\u0002\u0acf\u0acd\u0003\u0002",
    "\u0002\u0002\u0acf\u0ad0\u0003\u0002\u0002\u0002\u0ad0\u0ad1\u0003\u0002",
    "\u0002\u0002\u0ad1\u0ad2\u0007\u0325\u0002\u0002\u0ad2\u0ad4\u0007\u0325",
    "\u0002\u0002\u0ad3\u0ac0\u0003\u0002\u0002\u0002\u0ad3\u0ad4\u0003\u0002",
    "\u0002\u0002\u0ad4\u0111\u0003\u0002\u0002\u0002\u0ad5\u0ad6\u0007H",
    "\u0002\u0002\u0ad6\u0ad7\u00077\u0002\u0002\u0ad7\u0ad8\u0007\u00bc",
    "\u0002\u0002\u0ad8\u0ad9\u0007\u00ab\u0002\u0002\u0ad9\u0ada\u0005\u03ac",
    "\u01d7\u0002\u0ada\u0adb\u0007\u017b\u0002\u0002\u0adb\u0adc\u0007\u0324",
    "\u0002\u0002\u0adc\u0add\u0007\u00ad\u0002\u0002\u0add\u0ade\u0007\u0313",
    "\u0002\u0002\u0ade\u0adf\u0007\u030f\u0002\u0002\u0adf\u0ae0\u0007\u0326",
    "\u0002\u0002\u0ae0\u0ae1\u0007\u00ac\u0002\u0002\u0ae1\u0ae2\u0007\u0313",
    "\u0002\u0002\u0ae2\u0ae3\u0007\u030f\u0002\u0002\u0ae3\u0ae4\u0007\u0325",
    "\u0002\u0002\u0ae4\u0113\u0003\u0002\u0002\u0002\u0ae5\u0ae6\u0007\t",
    "\u0002\u0002\u0ae6\u0ae7\u0007\u01c6\u0002\u0002\u0ae7\u0ae8\u0005\u03ac",
    "\u01d7\u0002\u0ae8\u0ae9\u0007\u017b\u0002\u0002\u0ae9\u0aea\u0007\u0096",
    "\u0002\u0002\u0aea\u0aeb\u0007\u0313\u0002\u0002\u0aeb\u0af0\u0007\u030f",
    "\u0002\u0002\u0aec\u0aed\u0007\u0326\u0002\u0002\u0aed\u0aee\u0007\u02be",
    "\u0002\u0002\u0aee\u0aef\u0007\u0313\u0002\u0002\u0aef\u0af1\u0007\u030f",
    "\u0002\u0002\u0af0\u0aec\u0003\u0002\u0002\u0002\u0af0\u0af1\u0003\u0002",
    "\u0002\u0002\u0af1\u0115\u0003\u0002\u0002\u0002\u0af2\u0af3\u0007H",
    "\u0002\u0002\u0af3\u0af4\u0007\u01c6\u0002\u0002\u0af4\u0af5\u0005\u03ac",
    "\u01d7\u0002\u0af5\u0af6\u0007\u017b\u0002\u0002\u0af6\u0af7\u0007\u0096",
    "\u0002\u0002\u0af7\u0af8\u0007\u0313\u0002\u0002\u0af8\u0afd\u0007\u030f",
    "\u0002\u0002\u0af9\u0afa\u0007\u0326\u0002\u0002\u0afa\u0afb\u0007\u02be",
    "\u0002\u0002\u0afb\u0afc\u0007\u0313\u0002\u0002\u0afc\u0afe\u0007\u030f",
    "\u0002\u0002\u0afd\u0af9\u0003\u0002\u0002\u0002\u0afd\u0afe\u0003\u0002",
    "\u0002\u0002\u0afe\u0b03\u0003\u0002\u0002\u0002\u0aff\u0b00\u0007\u0085",
    "\u0002\u0002\u0b00\u0b01\u0007\u01c7\u0002\u0002\u0b01\u0b02\u0007\u0288",
    "\u0002\u0002\u0b02\u0b04\u0005\u03ac\u01d7\u0002\u0b03\u0aff\u0003\u0002",
    "\u0002\u0002\u0b03\u0b04\u0003\u0002\u0002\u0002\u0b04\u0117\u0003\u0002",
    "\u0002\u0002\u0b05\u0b06\u0007\t\u0002\u0002\u0b06\u0b07\u0007\u01c7",
    "\u0002\u0002\u0b07\u0b08\u0007\u0288\u0002\u0002\u0b08\u0b0d\u0005\u03ac",
    "\u01d7\u0002\u0b09\u0b0a\u0007\u008b\u0002\u0002\u0b0a\u0b0b\u0007\u0081",
    "\u0002\u0002\u0b0b\u0b0c\u0007\u0313\u0002\u0002\u0b0c\u0b0e\u0007\u030f",
    "\u0002\u0002\u0b0d\u0b09\u0003\u0002\u0002\u0002\u0b0d\u0b0e\u0003\u0002",
    "\u0002\u0002\u0b0e\u0b10\u0003\u0002\u0002\u0002\u0b0f\u0b11\t\u0015",
    "\u0002\u0002\u0b10\u0b0f\u0003\u0002\u0002\u0002\u0b10\u0b11\u0003\u0002",
    "\u0002\u0002\u0b11\u0119\u0003\u0002\u0002\u0002\u0b12\u0b13\u0007H",
    "\u0002\u0002\u0b13\u0b14\u0007\u01c7\u0002\u0002\u0b14\u0b15\u0007\u0288",
    "\u0002\u0002\u0b15\u0b16\u0005\u03ac\u01d7\u0002\u0b16\u0b17\u0007\u008b",
    "\u0002\u0002\u0b17\u0b18\u0007\u0081\u0002\u0002\u0b18\u0b19\u0007\u0313",
    "\u0002\u0002\u0b19\u0b1a\u0007\u030f\u0002\u0002\u0b1a\u011b\u0003\u0002",
    "\u0002\u0002\u0b1b\u0b1c\u0007H\u0002\u0002\u0b1c\u0b1d\u0007q\u0002",
    "\u0002\u0b1d\u0b1e\u0007\u00dc\u0002\u0002\u0b1e\u0b1f\u0005\u03ac\u01d7",
    "\u0002\u0b1f\u0b24\u0007\u00e4\u0002\u0002\u0b20\u0b25\u0007\u0136\u0002",
    "\u0002\u0b21\u0b25\u0007T\u0002\u0002\u0b22\u0b23\u0007\u028a\u0002",
    "\u0002\u0b23\u0b25\u0005\u03ac\u01d7\u0002\u0b24\u0b20\u0003\u0002\u0002",
    "\u0002\u0b24\u0b21\u0003\u0002\u0002\u0002\u0b24\u0b22\u0003\u0002\u0002",
    "\u0002\u0b25\u0b28\u0003\u0002\u0002\u0002\u0b26\u0b27\u0007\u017b\u0002",
    "\u0002\u0b27\u0b29\u0007\u007f\u0002\u0002\u0b28\u0b26\u0003\u0002\u0002",
    "\u0002\u0b28\u0b29\u0003\u0002\u0002\u0002\u0b29\u0b2a\u0003\u0002\u0002",
    "\u0002\u0b2a\u0b2f\u0007\u0085\u0002\u0002\u0b2b\u0b2d\u0007\u0326\u0002",
    "\u0002\u0b2c\u0b2b\u0003\u0002\u0002\u0002\u0b2c\u0b2d\u0003\u0002\u0002",
    "\u0002\u0b2d\u0b2e\u0003\u0002\u0002\u0002\u0b2e\u0b30\u0005\u03ac\u01d7",
    "\u0002\u0b2f\u0b2c\u0003\u0002\u0002\u0002\u0b30\u0b31\u0003\u0002\u0002",
    "\u0002\u0b31\u0b2f\u0003\u0002\u0002\u0002\u0b31\u0b32\u0003\u0002\u0002",
    "\u0002\u0b32\u0b33\u0003\u0002\u0002\u0002\u0b33\u0b34\u0007\u015c\u0002",
    "\u0002\u0b34\u0b35\u0007\u0137\u0002\u0002\u0b35\u0b36\u0007\u030f\u0002",
    "\u0002\u0b36\u0b37\u0007\u0326\u0002\u0002\u0b37\u0b38\u0007\u030f\u0002",
    "\u0002\u0b38\u011d\u0003\u0002\u0002\u0002\u0b39\u0b3a\t\u0013\u0002",
    "\u0002\u0b3a\u0b3b\u0007q\u0002\u0002\u0b3b\u0b3c\u0007\u013a\u0002",
    "\u0002\u0b3c\u0b3d\u0005\u03ac\u01d7\u0002\u0b3d\u0b3e\u0007\u00e4\u0002",
    "\u0002\u0b3e\u0b82\u0007\u0136\u0002\u0002\u0b3f\u0b41\u0007\u0326\u0002",
    "\u0002\u0b40\u0b3f\u0003\u0002\u0002\u0002\u0b40\u0b41\u0003\u0002\u0002",
    "\u0002\u0b41\u0b42\u0003\u0002\u0002\u0002\u0b42\u0b43\u0007\u0003\u0002",
    "\u0002\u0b43\u0b47\u0007q\u0002\u0002\u0b44\u0b45\u0005\u03ac\u01d7",
    "\u0002\u0b45\u0b46\u0007\u031f\u0002\u0002\u0b46\u0b48\u0003\u0002\u0002",
    "\u0002\u0b47\u0b44\u0003\u0002\u0002\u0002\u0b47\u0b48\u0003\u0002\u0002",
    "\u0002\u0b48\u0b49\u0003\u0002\u0002\u0002\u0b49\u0b4a\u0005\u03ac\u01d7",
    "\u0002\u0b4a\u0b4b\u0007\u031f\u0002\u0002\u0b4b\u0b4c\u0005\u03ac\u01d7",
    "\u0002\u0b4c\u0b7d\u0003\u0002\u0002\u0002\u0b4d\u0b5b\u0007\u0324\u0002",
    "\u0002\u0b4e\u0b58\u0007\u013c\u0002\u0002\u0b4f\u0b51\u0007\u0326\u0002",
    "\u0002\u0b50\u0b4f\u0003\u0002\u0002\u0002\u0b50\u0b51\u0003\u0002\u0002",
    "\u0002\u0b51\u0b52\u0003\u0002\u0002\u0002\u0b52\u0b53\u0005\u03ac\u01d7",
    "\u0002\u0b53\u0b54\u0007\u0313\u0002\u0002\u0b54\u0b55\t\u0016\u0002",
    "\u0002\u0b55\u0b57\u0003\u0002\u0002\u0002\u0b56\u0b50\u0003\u0002\u0002",
    "\u0002\u0b57\u0b5a\u0003\u0002\u0002\u0002\u0b58\u0b56\u0003\u0002\u0002",
    "\u0002\u0b58\u0b59\u0003\u0002\u0002\u0002\u0b59\u0b5c\u0003\u0002\u0002",
    "\u0002\u0b5a\u0b58\u0003\u0002\u0002\u0002\u0b5b\u0b4e\u0003\u0002\u0002",
    "\u0002\u0b5b\u0b5c\u0003\u0002\u0002\u0002\u0b5c\u0b71\u0003\u0002\u0002",
    "\u0002\u0b5d\u0b5e\u0007\u0182\u0002\u0002\u0b5e\u0b6b\u0007\u0324\u0002",
    "\u0002\u0b5f\u0b61\u0007\u0326\u0002\u0002\u0b60\u0b5f\u0003\u0002\u0002",
    "\u0002\u0b60\u0b61\u0003\u0002\u0002\u0002\u0b61\u0b65\u0003\u0002\u0002",
    "\u0002\u0b62\u0b63\u0005\u03ac\u01d7\u0002\u0b63\u0b64\u0007\u031f\u0002",
    "\u0002\u0b64\u0b66\u0003\u0002\u0002\u0002\u0b65\u0b62\u0003\u0002\u0002",
    "\u0002\u0b65\u0b66\u0003\u0002\u0002\u0002\u0b66\u0b67\u0003\u0002\u0002",
    "\u0002\u0b67\u0b68\u0005\u03ac\u01d7\u0002\u0b68\u0b69\u0007\u031f\u0002",
    "\u0002\u0b69\u0b6a\u0005\u03ac\u01d7\u0002\u0b6a\u0b6c\u0003\u0002\u0002",
    "\u0002\u0b6b\u0b60\u0003\u0002\u0002\u0002\u0b6c\u0b6d\u0003\u0002\u0002",
    "\u0002\u0b6d\u0b6b\u0003\u0002\u0002\u0002\u0b6d\u0b6e\u0003\u0002\u0002",
    "\u0002\u0b6e\u0b6f\u0003\u0002\u0002\u0002\u0b6f\u0b70\u0007\u0325\u0002",
    "\u0002\u0b70\u0b72\u0003\u0002\u0002\u0002\u0b71\u0b5d\u0003\u0002\u0002",
    "\u0002\u0b72\u0b73\u0003\u0002\u0002\u0002\u0b73\u0b71\u0003\u0002\u0002",
    "\u0002\u0b73\u0b74\u0003\u0002\u0002\u0002\u0b74\u0b77\u0003\u0002\u0002",
    "\u0002\u0b75\u0b76\u0007\u0178\u0002\u0002\u0b76\u0b78\u0005\u0120\u0091",
    "\u0002\u0b77\u0b75\u0003\u0002\u0002\u0002\u0b77\u0b78\u0003\u0002\u0002",
    "\u0002\u0b78\u0b79\u0003\u0002\u0002\u0002\u0b79\u0b7a\u0007\u0325\u0002",
    "\u0002\u0b7a\u0b7c\u0003\u0002\u0002\u0002\u0b7b\u0b4d\u0003\u0002\u0002",
    "\u0002\u0b7c\u0b7f\u0003\u0002\u0002\u0002\u0b7d\u0b7b\u0003\u0002\u0002",
    "\u0002\u0b7d\u0b7e\u0003\u0002\u0002\u0002\u0b7e\u0b81\u0003\u0002\u0002",
    "\u0002\u0b7f\u0b7d\u0003\u0002\u0002\u0002\u0b80\u0b40\u0003\u0002\u0002",
    "\u0002\u0b81\u0b84\u0003\u0002\u0002\u0002\u0b82\u0b80\u0003\u0002\u0002",
    "\u0002\u0b82\u0b83\u0003\u0002\u0002\u0002\u0b83\u0b95\u0003\u0002\u0002",
    "\u0002\u0b84\u0b82\u0003\u0002\u0002\u0002\u0b85\u0b87\u0007\u0326\u0002",
    "\u0002\u0b86\u0b85\u0003\u0002\u0002\u0002\u0b86\u0b87\u0003\u0002\u0002",
    "\u0002\u0b87\u0b88\u0003\u0002\u0002\u0002\u0b88\u0b89\u0007g\u0002",
    "\u0002\u0b89\u0b8d\u0007q\u0002\u0002\u0b8a\u0b8b\u0005\u03ac\u01d7",
    "\u0002\u0b8b\u0b8c\u0007\u031f\u0002\u0002\u0b8c\u0b8e\u0003\u0002\u0002",
    "\u0002\u0b8d\u0b8a\u0003\u0002\u0002\u0002\u0b8d\u0b8e\u0003\u0002\u0002",
    "\u0002\u0b8e\u0b8f\u0003\u0002\u0002\u0002\u0b8f\u0b90\u0005\u03ac\u01d7",
    "\u0002\u0b90\u0b91\u0007\u031f\u0002\u0002\u0b91\u0b92\u0005\u03ac\u01d7",
    "\u0002\u0b92\u0b94\u0003\u0002\u0002\u0002\u0b93\u0b86\u0003\u0002\u0002",
    "\u0002\u0b94\u0b97\u0003\u0002\u0002\u0002\u0b95\u0b93\u0003\u0002\u0002",
    "\u0002\u0b95\u0b96\u0003\u0002\u0002\u0002\u0b96\u0bc1\u0003\u0002\u0002",
    "\u0002\u0b97\u0b95\u0003\u0002\u0002\u0002\u0b98\u0b99\u0007\u0003\u0002",
    "\u0002\u0b99\u0b9d\u0007\u0158\u0002\u0002\u0b9a\u0b9b\u0005\u03ac\u01d7",
    "\u0002\u0b9b\u0b9c\u0007\u031f\u0002\u0002\u0b9c\u0b9e\u0003\u0002\u0002",
    "\u0002\u0b9d\u0b9a\u0003\u0002\u0002\u0002\u0b9d\u0b9e\u0003\u0002\u0002",
    "\u0002\u0b9e\u0b9f\u0003\u0002\u0002\u0002\u0b9f\u0ba0\u0005\u03ac\u01d7",
    "\u0002\u0ba0\u0ba1\u0007\u031f\u0002\u0002\u0ba1\u0ba2\u0005\u03ac\u01d7",
    "\u0002\u0ba2\u0bbc\u0003\u0002\u0002\u0002\u0ba3\u0ba4\u0007\u0324\u0002",
    "\u0002\u0ba4\u0bb4\u0007\u013c\u0002\u0002\u0ba5\u0ba7\u0007\u0326\u0002",
    "\u0002\u0ba6\u0ba5\u0003\u0002\u0002\u0002\u0ba6\u0ba7\u0003\u0002\u0002",
    "\u0002\u0ba7\u0ba8\u0003\u0002\u0002\u0002\u0ba8\u0ba9\u0005\u03ac\u01d7",
    "\u0002\u0ba9\u0bb2\u0007\u0313\u0002\u0002\u0baa\u0bac\u0007\u0324\u0002",
    "\u0002\u0bab\u0baa\u0003\u0002\u0002\u0002\u0bab\u0bac\u0003\u0002\u0002",
    "\u0002\u0bac\u0bad\u0003\u0002\u0002\u0002\u0bad\u0baf\u0007\u030b\u0002",
    "\u0002\u0bae\u0bb0\u0007\u0325\u0002\u0002\u0baf\u0bae\u0003\u0002\u0002",
    "\u0002\u0baf\u0bb0\u0003\u0002\u0002\u0002\u0bb0\u0bb3\u0003\u0002\u0002",
    "\u0002\u0bb1\u0bb3\u0007\u030f\u0002\u0002\u0bb2\u0bab\u0003\u0002\u0002",
    "\u0002\u0bb2\u0bb1\u0003\u0002\u0002\u0002\u0bb3\u0bb5\u0003\u0002\u0002",
    "\u0002\u0bb4\u0ba6\u0003\u0002\u0002\u0002\u0bb5\u0bb6\u0003\u0002\u0002",
    "\u0002\u0bb6\u0bb4\u0003\u0002\u0002\u0002\u0bb6\u0bb7\u0003\u0002\u0002",
    "\u0002\u0bb7\u0bb8\u0003\u0002\u0002\u0002\u0bb8\u0bb9\u0007\u0325\u0002",
    "\u0002\u0bb9\u0bbb\u0003\u0002\u0002\u0002\u0bba\u0ba3\u0003\u0002\u0002",
    "\u0002\u0bbb\u0bbe\u0003\u0002\u0002\u0002\u0bbc\u0bba\u0003\u0002\u0002",
    "\u0002\u0bbc\u0bbd\u0003\u0002\u0002\u0002\u0bbd\u0bc0\u0003\u0002\u0002",
    "\u0002\u0bbe\u0bbc\u0003\u0002\u0002\u0002\u0bbf\u0b98\u0003\u0002\u0002",
    "\u0002\u0bc0\u0bc3\u0003\u0002\u0002\u0002\u0bc1\u0bbf\u0003\u0002\u0002",
    "\u0002\u0bc1\u0bc2\u0003\u0002\u0002\u0002\u0bc2\u0bd1\u0003\u0002\u0002",
    "\u0002\u0bc3\u0bc1\u0003\u0002\u0002\u0002\u0bc4\u0bc5\u0007g\u0002",
    "\u0002\u0bc5\u0bc9\u0007\u0158\u0002\u0002\u0bc6\u0bc7\u0005\u03ac\u01d7",
    "\u0002\u0bc7\u0bc8\u0007\u031f\u0002\u0002\u0bc8\u0bca\u0003\u0002\u0002",
    "\u0002\u0bc9\u0bc6\u0003\u0002\u0002\u0002\u0bc9\u0bca\u0003\u0002\u0002",
    "\u0002\u0bca\u0bcb\u0003\u0002\u0002\u0002\u0bcb\u0bcc\u0005\u03ac\u01d7",
    "\u0002\u0bcc\u0bcd\u0007\u031f\u0002\u0002\u0bcd\u0bce\u0005\u03ac\u01d7",
    "\u0002\u0bce\u0bd0\u0003\u0002\u0002\u0002\u0bcf\u0bc4\u0003\u0002\u0002",
    "\u0002\u0bd0\u0bd3\u0003\u0002\u0002\u0002\u0bd1\u0bcf\u0003\u0002\u0002",
    "\u0002\u0bd1\u0bd2\u0003\u0002\u0002\u0002\u0bd2\u0c15\u0003\u0002\u0002",
    "\u0002\u0bd3\u0bd1\u0003\u0002\u0002\u0002\u0bd4\u0bd5\u0007\u017b\u0002",
    "\u0002\u0bd5\u0bdd\u0007\u0324\u0002\u0002\u0bd6\u0bd8\u0007\u0326\u0002",
    "\u0002\u0bd7\u0bd6\u0003\u0002\u0002\u0002\u0bd7\u0bd8\u0003\u0002\u0002",
    "\u0002\u0bd8\u0bd9\u0003\u0002\u0002\u0002\u0bd9\u0bda\u0007\u00bd\u0002",
    "\u0002\u0bda\u0bdb\u0007\u0313\u0002\u0002\u0bdb\u0bdc\u0007\u030b\u0002",
    "\u0002\u0bdc\u0bde\t\u0017\u0002\u0002\u0bdd\u0bd7\u0003\u0002\u0002",
    "\u0002\u0bdd\u0bde\u0003\u0002\u0002\u0002\u0bde\u0be5\u0003\u0002\u0002",
    "\u0002\u0bdf\u0be1\u0007\u0326\u0002\u0002\u0be0\u0bdf\u0003\u0002\u0002",
    "\u0002\u0be0\u0be1\u0003\u0002\u0002\u0002\u0be1\u0be2\u0003\u0002\u0002",
    "\u0002\u0be2\u0be3\u0007s\u0002\u0002\u0be3\u0be4\u0007\u0313\u0002",
    "\u0002\u0be4\u0be6\t\u0018\u0002\u0002\u0be5\u0be0\u0003\u0002\u0002",
    "\u0002\u0be5\u0be6\u0003\u0002\u0002\u0002\u0be6\u0bf1\u0003\u0002\u0002",
    "\u0002\u0be7\u0be9\u0007\u0326\u0002\u0002\u0be8\u0be7\u0003\u0002\u0002",
    "\u0002\u0be8\u0be9\u0003\u0002\u0002\u0002\u0be9\u0bea\u0003\u0002\u0002",
    "\u0002\u0bea\u0beb\u0007\u00c0\u0002\u0002\u0beb\u0bef\u0007\u0313\u0002",
    "\u0002\u0bec\u0bed\u0007\u030b\u0002\u0002\u0bed\u0bf0\u0007\u02bd\u0002",
    "\u0002\u0bee\u0bf0\u0007\u009e\u0002\u0002\u0bef\u0bec\u0003\u0002\u0002",
    "\u0002\u0bef\u0bee\u0003\u0002\u0002\u0002\u0bf0\u0bf2\u0003\u0002\u0002",
    "\u0002\u0bf1\u0be8\u0003\u0002\u0002\u0002\u0bf1\u0bf2\u0003\u0002\u0002",
    "\u0002\u0bf2\u0bfa\u0003\u0002\u0002\u0002\u0bf3\u0bf5\u0007\u0326\u0002",
    "\u0002\u0bf4\u0bf3\u0003\u0002\u0002\u0002\u0bf4\u0bf5\u0003\u0002\u0002",
    "\u0002\u0bf5\u0bf6\u0003\u0002\u0002\u0002\u0bf6\u0bf7\u0007\u00c1\u0002",
    "\u0002\u0bf7\u0bf8\u0007\u0313\u0002\u0002\u0bf8\u0bf9\u0007\u030b\u0002",
    "\u0002\u0bf9\u0bfb\t\u0017\u0002\u0002\u0bfa\u0bf4\u0003\u0002\u0002",
    "\u0002\u0bfa\u0bfb\u0003\u0002\u0002\u0002\u0bfb\u0c02\u0003\u0002\u0002",
    "\u0002\u0bfc\u0bfe\u0007\u0326\u0002\u0002\u0bfd\u0bfc\u0003\u0002\u0002",
    "\u0002\u0bfd\u0bfe\u0003\u0002\u0002\u0002\u0bfe\u0bff\u0003\u0002\u0002",
    "\u0002\u0bff\u0c00\u0007\u00c7\u0002\u0002\u0c00\u0c01\u0007\u0313\u0002",
    "\u0002\u0c01\u0c03\t\u0019\u0002\u0002\u0c02\u0bfd\u0003\u0002\u0002",
    "\u0002\u0c02\u0c03\u0003\u0002\u0002\u0002\u0c03\u0c0a\u0003\u0002\u0002",
    "\u0002\u0c04\u0c06\u0007\u0326\u0002\u0002\u0c05\u0c04\u0003\u0002\u0002",
    "\u0002\u0c05\u0c06\u0003\u0002\u0002\u0002\u0c06\u0c07\u0003\u0002\u0002",
    "\u0002\u0c07\u0c08\u0007\u015e\u0002\u0002\u0c08\u0c09\u0007\u0313\u0002",
    "\u0002\u0c09\u0c0b\t\b\u0002\u0002\u0c0a\u0c05\u0003\u0002\u0002\u0002",
    "\u0c0a\u0c0b\u0003\u0002\u0002\u0002\u0c0b\u0c12\u0003\u0002\u0002\u0002",
    "\u0c0c\u0c0e\u0007\u0326\u0002\u0002\u0c0d\u0c0c\u0003\u0002\u0002\u0002",
    "\u0c0d\u0c0e\u0003\u0002\u0002\u0002\u0c0e\u0c0f\u0003\u0002\u0002\u0002",
    "\u0c0f\u0c10\u0007\u014e\u0002\u0002\u0c10\u0c11\u0007\u0313\u0002\u0002",
    "\u0c11\u0c13\t\b\u0002\u0002\u0c12\u0c0d\u0003\u0002\u0002\u0002\u0c12",
    "\u0c13\u0003\u0002\u0002\u0002\u0c13\u0c14\u0003\u0002\u0002\u0002\u0c14",
    "\u0c16\u0007\u0325\u0002\u0002\u0c15\u0bd4\u0003\u0002\u0002\u0002\u0c15",
    "\u0c16\u0003\u0002\u0002\u0002\u0c16\u0c1a\u0003\u0002\u0002\u0002\u0c17",
    "\u0c18\u0007\u014a\u0002\u0002\u0c18\u0c19\u0007\u0313\u0002\u0002\u0c19",
    "\u0c1b\t\u001a\u0002\u0002\u0c1a\u0c17\u0003\u0002\u0002\u0002\u0c1a",
    "\u0c1b\u0003\u0002\u0002\u0002\u0c1b\u011f\u0003\u0002\u0002\u0002\u0c1c",
    "\u0c1e\u0007\u0326\u0002\u0002\u0c1d\u0c1c\u0003\u0002\u0002\u0002\u0c1d",
    "\u0c1e\u0003\u0002\u0002\u0002\u0c1e\u0c20\u0003\u0002\u0002\u0002\u0c1f",
    "\u0c21\t\u001b\u0002\u0002\u0c20\u0c1f\u0003\u0002\u0002\u0002\u0c20",
    "\u0c21\u0003\u0002\u0002\u0002\u0c21\u0c23\u0003\u0002\u0002\u0002\u0c22",
    "\u0c24\u0007\u00db\u0002\u0002\u0c23\u0c22\u0003\u0002\u0002\u0002\u0c23",
    "\u0c24\u0003\u0002\u0002\u0002\u0c24\u0c2a\u0003\u0002\u0002\u0002\u0c25",
    "\u0c2b\u0005\u0122\u0092\u0002\u0c26\u0c27\u0007\u0324\u0002\u0002\u0c27",
    "\u0c28\u0005\u0120\u0091\u0002\u0c28\u0c29\u0007\u0325\u0002\u0002\u0c29",
    "\u0c2b\u0003\u0002\u0002\u0002\u0c2a\u0c25\u0003\u0002\u0002\u0002\u0c2a",
    "\u0c26\u0003\u0002\u0002\u0002\u0c2b\u0c2d\u0003\u0002\u0002\u0002\u0c2c",
    "\u0c1d\u0003\u0002\u0002\u0002\u0c2d\u0c2e\u0003\u0002\u0002\u0002\u0c2e",
    "\u0c2c\u0003\u0002\u0002\u0002\u0c2e\u0c2f\u0003\u0002\u0002\u0002\u0c2f",
    "\u0121\u0003\u0002\u0002\u0002\u0c30\u0c36\u0005\u0124\u0093\u0002\u0c31",
    "\u0c32\u0007\u0324\u0002\u0002\u0c32\u0c33\u0005\u0120\u0091\u0002\u0c33",
    "\u0c34\u0007\u0325\u0002\u0002\u0c34\u0c36\u0003\u0002\u0002\u0002\u0c35",
    "\u0c30\u0003\u0002\u0002\u0002\u0c35\u0c31\u0003\u0002\u0002\u0002\u0c36",
    "\u0123\u0003\u0002\u0002\u0002\u0c37\u0c54\u0005\u03ac\u01d7\u0002\u0c38",
    "\u0c43\u0005\u03ac\u01d7\u0002\u0c39\u0c3a\u0005\u03ac\u01d7\u0002\u0c3a",
    "\u0c3b\u0007\u031f\u0002\u0002\u0c3b\u0c3d\u0003\u0002\u0002\u0002\u0c3c",
    "\u0c39\u0003\u0002\u0002\u0002\u0c3c\u0c3d\u0003\u0002\u0002\u0002\u0c3d",
    "\u0c3e\u0003\u0002\u0002\u0002\u0c3e\u0c3f\u0005\u03ac\u01d7\u0002\u0c3f",
    "\u0c40\u0007\u031f\u0002\u0002\u0c40\u0c41\u0005\u03ac\u01d7\u0002\u0c41",
    "\u0c43\u0003\u0002\u0002\u0002\u0c42\u0c38\u0003\u0002\u0002\u0002\u0c42",
    "\u0c3c\u0003\u0002\u0002\u0002\u0c43\u0c4f\u0003\u0002\u0002\u0002\u0c44",
    "\u0c50\u0007\u0313\u0002\u0002\u0c45\u0c46\u0007\u0315\u0002\u0002\u0c46",
    "\u0c50\u0007\u0314\u0002\u0002\u0c47\u0c48\u0007\u0316\u0002\u0002\u0c48",
    "\u0c50\u0007\u0313\u0002\u0002\u0c49\u0c50\u0007\u0314\u0002\u0002\u0c4a",
    "\u0c4b\u0007\u0314\u0002\u0002\u0c4b\u0c50\u0007\u0313\u0002\u0002\u0c4c",
    "\u0c50\u0007\u0315\u0002\u0002\u0c4d\u0c4e\u0007\u0315\u0002\u0002\u0c4e",
    "\u0c50\u0007\u0313\u0002\u0002\u0c4f\u0c44\u0003\u0002\u0002\u0002\u0c4f",
    "\u0c45\u0003\u0002\u0002\u0002\u0c4f\u0c47\u0003\u0002\u0002\u0002\u0c4f",
    "\u0c49\u0003\u0002\u0002\u0002\u0c4f\u0c4a\u0003\u0002\u0002\u0002\u0c4f",
    "\u0c4c\u0003\u0002\u0002\u0002\u0c4f\u0c4d\u0003\u0002\u0002\u0002\u0c50",
    "\u0c51\u0003\u0002\u0002\u0002\u0c51\u0c52\t\u0016\u0002\u0002\u0c52",
    "\u0c54\u0003\u0002\u0002\u0002\u0c53\u0c37\u0003\u0002\u0002\u0002\u0c53",
    "\u0c42\u0003\u0002\u0002\u0002\u0c54\u0c70\u0003\u0002\u0002\u0002\u0c55",
    "\u0c56\u0005\u03ac\u01d7\u0002\u0c56\u0c57\u0007\u031f\u0002\u0002\u0c57",
    "\u0c59\u0003\u0002\u0002\u0002\u0c58\u0c55\u0003\u0002\u0002\u0002\u0c58",
    "\u0c59\u0003\u0002\u0002\u0002\u0c59\u0c5a\u0003\u0002\u0002\u0002\u0c5a",
    "\u0c5b\u0005\u03ac\u01d7\u0002\u0c5b\u0c5c\u0007\u031f\u0002\u0002\u0c5c",
    "\u0c5d\u0005\u03ac\u01d7\u0002\u0c5d\u0c6b\u0007\u0324\u0002\u0002\u0c5e",
    "\u0c6c\u0005\u03ac\u01d7\u0002\u0c5f\u0c60\u0005\u03ac\u01d7\u0002\u0c60",
    "\u0c61\u0007\u031f\u0002\u0002\u0c61\u0c63\u0003\u0002\u0002\u0002\u0c62",
    "\u0c5f\u0003\u0002\u0002\u0002\u0c62\u0c63\u0003\u0002\u0002\u0002\u0c63",
    "\u0c64\u0003\u0002\u0002\u0002\u0c64\u0c65\u0005\u03ac\u01d7\u0002\u0c65",
    "\u0c66\u0007\u031f\u0002\u0002\u0c66\u0c67\u0005\u03ac\u01d7\u0002\u0c67",
    "\u0c68\u0003\u0002\u0002\u0002\u0c68\u0c69\u0007\u0326\u0002\u0002\u0c69",
    "\u0c6a\t\u0016\u0002\u0002\u0c6a\u0c6c\u0003\u0002\u0002\u0002\u0c6b",
    "\u0c5e\u0003\u0002\u0002\u0002\u0c6b\u0c62\u0003\u0002\u0002\u0002\u0c6c",
    "\u0c6d\u0003\u0002\u0002\u0002\u0c6d\u0c6e\u0007\u0325\u0002\u0002\u0c6e",
    "\u0c70\u0003\u0002\u0002\u0002\u0c6f\u0c53\u0003\u0002\u0002\u0002\u0c6f",
    "\u0c58\u0003\u0002\u0002\u0002\u0c70\u0125\u0003\u0002\u0002\u0002\u0c71",
    "\u0c72\u0007\t\u0002\u0002\u0c72\u0c73\u0007{\u0002\u0002\u0c73\u0c74",
    "\u0007Q\u0002\u0002\u0c74\u0c75\u0007\u0143\u0002\u0002\u0c75\u0c76",
    "\u0005\u03ac\u01d7\u0002\u0c76\u0c86\u0007\u013c\u0002\u0002\u0c77\u0c78",
    "\u0007\u0234\u0002\u0002\u0c78\u0c79\u0007\u0313\u0002\u0002\u0c79\u0c7b",
    "\t\u001c\u0002\u0002\u0c7a\u0c7c\u0007\u0326\u0002\u0002\u0c7b\u0c7a",
    "\u0003\u0002\u0002\u0002\u0c7b\u0c7c\u0003\u0002\u0002\u0002\u0c7c\u0c87",
    "\u0003\u0002\u0002\u0002\u0c7d\u0c7e\u0007\u02aa\u0002\u0002\u0c7e\u0c7f",
    "\u0007\u0313\u0002\u0002\u0c7f\u0c81\t\u001c\u0002\u0002\u0c80\u0c82",
    "\u0007\u0326\u0002\u0002\u0c81\u0c80\u0003\u0002\u0002\u0002\u0c81\u0c82",
    "\u0003\u0002\u0002\u0002\u0c82\u0c87\u0003\u0002\u0002\u0002\u0c83\u0c84",
    "\u0007\u01c6\u0002\u0002\u0c84\u0c85\u0007\u0313\u0002\u0002\u0c85\u0c87",
    "\u0005\u03ac\u01d7\u0002\u0c86\u0c77\u0003\u0002\u0002\u0002\u0c86\u0c7d",
    "\u0003\u0002\u0002\u0002\u0c86\u0c83\u0003\u0002\u0002\u0002\u0c87\u0c88",
    "\u0003\u0002\u0002\u0002\u0c88\u0c86\u0003\u0002\u0002\u0002\u0c88\u0c89",
    "\u0003\u0002\u0002\u0002\u0c89\u0ca1\u0003\u0002\u0002\u0002\u0c8a\u0c8b",
    "\u0007\t\u0002\u0002\u0c8b\u0c8c\u0007{\u0002\u0002\u0c8c\u0c8d\u0007",
    "Q\u0002\u0002\u0c8d\u0c8e\u0007\u0143\u0002\u0002\u0c8e\u0c8f\u0005",
    "\u03ac\u01d7\u0002\u0c8f\u0c90\u0007\u017b\u0002\u0002\u0c90\u0c91\u0007",
    "\u0324\u0002\u0002\u0c91\u0c92\u0007\u02f0\u0002\u0002\u0c92\u0c93\u0007",
    "\u0313\u0002\u0002\u0c93\u0c94\u0007\u01a9\u0002\u0002\u0c94\u0c95\u0007",
    "\u0326\u0002\u0002\u0c95\u0c96\u0007\u0234\u0002\u0002\u0c96\u0c97\u0007",
    "\u0313\u0002\u0002\u0c97\u0c9c\u0007\u030f\u0002\u0002\u0c98\u0c99\u0007",
    "\u0326\u0002\u0002\u0c99\u0c9a\u0007\u01c6\u0002\u0002\u0c9a\u0c9b\u0007",
    "\u0313\u0002\u0002\u0c9b\u0c9d\u0005\u03ac\u01d7\u0002\u0c9c\u0c98\u0003",
    "\u0002\u0002\u0002\u0c9c\u0c9d\u0003\u0002\u0002\u0002\u0c9d\u0c9e\u0003",
    "\u0002\u0002\u0002\u0c9e\u0c9f\u0007\u0325\u0002\u0002\u0c9f\u0ca1\u0003",
    "\u0002\u0002\u0002\u0ca0\u0c71\u0003\u0002\u0002\u0002\u0ca0\u0c8a\u0003",
    "\u0002\u0002\u0002\u0ca1\u0127\u0003\u0002\u0002\u0002\u0ca2\u0ca3\u0007",
    "\t\u0002\u0002\u0ca3\u0ca4\u0007{\u0002\u0002\u0ca4\u0ca5\u0007\u00b1",
    "\u0002\u0002\u0ca5\u0ca8\u0005\u03ac\u01d7\u0002\u0ca6\u0ca7\u0007\u0013",
    "\u0002\u0002\u0ca7\u0ca9\u0005\u03ac\u01d7\u0002\u0ca8\u0ca6\u0003\u0002",
    "\u0002\u0002\u0ca8\u0ca9\u0003\u0002\u0002\u0002\u0ca9\u0caa\u0003\u0002",
    "\u0002\u0002\u0caa\u0cab\t\u001d\u0002\u0002\u0cab\u0cac\u0007\u0324",
    "\u0002\u0002\u0cac\u0cad\u0007\u01bd\u0002\u0002\u0cad\u0cb1\u0007\u0313",
    "\u0002\u0002\u0cae\u0cb2\u0007\u030f\u0002\u0002\u0caf\u0cb2\u0007\u0310",
    "\u0002\u0002\u0cb0\u0cb2\u0007\u00d4\u0002\u0002\u0cb1\u0cae\u0003\u0002",
    "\u0002\u0002\u0cb1\u0caf\u0003\u0002\u0002\u0002\u0cb1\u0cb0\u0003\u0002",
    "\u0002\u0002\u0cb2\u0cb3\u0003\u0002\u0002\u0002\u0cb3\u0cb4\u0007\u0326",
    "\u0002\u0002\u0cb4\u0cb5\u0007\u00fb\u0002\u0002\u0cb5\u0cb7\u0007\u0313",
    "\u0002\u0002\u0cb6\u0cb8\t\u001e\u0002\u0002\u0cb7\u0cb6\u0003\u0002",
    "\u0002\u0002\u0cb7\u0cb8\u0003\u0002\u0002\u0002\u0cb8\u0cb9\u0003\u0002",
    "\u0002\u0002\u0cb9\u0cba\u0007\u0325\u0002\u0002\u0cba\u0cbb\u0003\u0002",
    "\u0002\u0002\u0cbb\u0cc5\u0007\u017b\u0002\u0002\u0cbc\u0cbe\u0007\u0326",
    "\u0002\u0002\u0cbd\u0cbc\u0003\u0002\u0002\u0002\u0cbd\u0cbe\u0003\u0002",
    "\u0002\u0002\u0cbe\u0cbf\u0003\u0002\u0002\u0002\u0cbf\u0cc0\u0007\u00af",
    "\u0002\u0002\u0cc0\u0cc1\u0007\u0313\u0002\u0002\u0cc1\u0cc6\t\u001f",
    "\u0002\u0002\u0cc2\u0cc3\u0007S\u0002\u0002\u0cc3\u0cc4\u0007\u0313",
    "\u0002\u0002\u0cc4\u0cc6\u0005\u03ac\u01d7\u0002\u0cc5\u0cbd\u0003\u0002",
    "\u0002\u0002\u0cc5\u0cc2\u0003\u0002\u0002\u0002\u0cc6\u0cc7\u0003\u0002",
    "\u0002\u0002\u0cc7\u0cc5\u0003\u0002\u0002\u0002\u0cc7\u0cc8\u0003\u0002",
    "\u0002\u0002\u0cc8\u0cc9\u0003\u0002\u0002\u0002\u0cc9\u0cca\u0007\u0325",
    "\u0002\u0002\u0cca\u0129\u0003\u0002\u0002\u0002\u0ccb\u0ccc\u0007H",
    "\u0002\u0002\u0ccc\u0ccd\u0007{\u0002\u0002\u0ccd\u0cce\u0007\u00b1",
    "\u0002\u0002\u0cce\u0cd1\u0005\u03ac\u01d7\u0002\u0ccf\u0cd0\u0007\u0013",
    "\u0002\u0002\u0cd0\u0cd2\u0005\u03ac\u01d7\u0002\u0cd1\u0ccf\u0003\u0002",
    "\u0002\u0002\u0cd1\u0cd2\u0003\u0002\u0002\u0002\u0cd2\u0cd3\u0003\u0002",
    "\u0002\u0002\u0cd3\u0cd5\u0007\u008b\u0002\u0002\u0cd4\u0cd6\u0007\u0326",
    "\u0002\u0002\u0cd5\u0cd4\u0003\u0002\u0002\u0002\u0cd5\u0cd6\u0003\u0002",
    "\u0002\u0002\u0cd6\u0cd8\u0003\u0002\u0002\u0002\u0cd7\u0cd9\u0007\u0324",
    "\u0002\u0002\u0cd8\u0cd7\u0003\u0002\u0002\u0002\u0cd8\u0cd9\u0003\u0002",
    "\u0002\u0002\u0cd9\u0cdc\u0003\u0002\u0002\u0002\u0cda\u0cdb\u0007\u01bd",
    "\u0002\u0002\u0cdb\u0cdd\u0007\u0313\u0002\u0002\u0cdc\u0cda\u0003\u0002",
    "\u0002\u0002\u0cdc\u0cdd\u0003\u0002\u0002\u0002\u0cdd\u0ce1\u0003\u0002",
    "\u0002\u0002\u0cde\u0ce2\u0007\u030f\u0002\u0002\u0cdf\u0ce2\u0007\u0310",
    "\u0002\u0002\u0ce0\u0ce2\u0007\u00d4\u0002\u0002\u0ce1\u0cde\u0003\u0002",
    "\u0002\u0002\u0ce1\u0cdf\u0003\u0002\u0002\u0002\u0ce1\u0ce0\u0003\u0002",
    "\u0002\u0002\u0ce2\u0cea\u0003\u0002\u0002\u0002\u0ce3\u0ce4\u0007\u0326",
    "\u0002\u0002\u0ce4\u0ce5\u0007\u00fb\u0002\u0002\u0ce5\u0ce7\u0007\u0313",
    "\u0002\u0002\u0ce6\u0ce8\t\u001e\u0002\u0002\u0ce7\u0ce6\u0003\u0002",
    "\u0002\u0002\u0ce7\u0ce8\u0003\u0002\u0002\u0002\u0ce8\u0ce9\u0003\u0002",
    "\u0002\u0002\u0ce9\u0ceb\u0007\u0325\u0002\u0002\u0cea\u0ce3\u0003\u0002",
    "\u0002\u0002\u0cea\u0ceb\u0003\u0002\u0002\u0002\u0ceb\u0cfb\u0003\u0002",
    "\u0002\u0002\u0cec\u0cf6\u0007\u017b\u0002\u0002\u0ced\u0cef\u0007\u0326",
    "\u0002\u0002\u0cee\u0ced\u0003\u0002\u0002\u0002\u0cee\u0cef\u0003\u0002",
    "\u0002\u0002\u0cef\u0cf0\u0003\u0002\u0002\u0002\u0cf0\u0cf1\u0007\u00af",
    "\u0002\u0002\u0cf1\u0cf2\u0007\u0313\u0002\u0002\u0cf2\u0cf7\t\u001f",
    "\u0002\u0002\u0cf3\u0cf4\u0007S\u0002\u0002\u0cf4\u0cf5\u0007\u0313",
    "\u0002\u0002\u0cf5\u0cf7\u0005\u03ac\u01d7\u0002\u0cf6\u0cee\u0003\u0002",
    "\u0002\u0002\u0cf6\u0cf3\u0003\u0002\u0002\u0002\u0cf7\u0cf8\u0003\u0002",
    "\u0002\u0002\u0cf8\u0cf6\u0003\u0002\u0002\u0002\u0cf8\u0cf9\u0003\u0002",
    "\u0002\u0002\u0cf9\u0cfa\u0003\u0002\u0002\u0002\u0cfa\u0cfc\u0007\u0325",
    "\u0002\u0002\u0cfb\u0cec\u0003\u0002\u0002\u0002\u0cfb\u0cfc\u0003\u0002",
    "\u0002\u0002\u0cfc\u012b\u0003\u0002\u0002\u0002\u0cfd\u0cfe\u0007\t",
    "\u0002\u0002\u0cfe\u0cff\u0007{\u0002\u0002\u0cff\u0d00\u0007\u02a9",
    "\u0002\u0002\u0d00\u0d03\u0007\u027b\u0002\u0002\u0d01\u0d04\u0005\u03ac",
    "\u01d7\u0002\u0d02\u0d04\u0007\u01d3\u0002\u0002\u0d03\u0d01\u0003\u0002",
    "\u0002\u0002\u0d03\u0d02\u0003\u0002\u0002\u0002\u0d04\u0d05\u0003\u0002",
    "\u0002\u0002\u0d05\u0d06\u0007\u017b\u0002\u0002\u0d06\u0d07\u0007\u0324",
    "\u0002\u0002\u0d07\u0d08\u0007\u023c\u0002\u0002\u0d08\u0d09\u0007\u0313",
    "\u0002\u0002\u0d09\u0d2f\u0007\u030b\u0002\u0002\u0d0a\u0d0c\u0007\u0326",
    "\u0002\u0002\u0d0b\u0d0a\u0003\u0002\u0002\u0002\u0d0b\u0d0c\u0003\u0002",
    "\u0002\u0002\u0d0c\u0d0d\u0003\u0002\u0002\u0002\u0d0d\u0d0e\u0007\u0189",
    "\u0002\u0002\u0d0e\u0d0f\u0007\u01c3\u0002\u0002\u0d0f\u0d1d\u0007\u0313",
    "\u0002\u0002\u0d10\u0d1e\u0007\u019a\u0002\u0002\u0d11\u0d13\u0007\u0326",
    "\u0002\u0002\u0d12\u0d11\u0003\u0002\u0002\u0002\u0d12\u0d13\u0003\u0002",
    "\u0002\u0002\u0d13\u0d14\u0003\u0002\u0002\u0002\u0d14\u0d15\u0007\u030b",
    "\u0002\u0002\u0d15\u0d16\u0007\u015c\u0002\u0002\u0d16\u0d1a\u0007\u030b",
    "\u0002\u0002\u0d17\u0d18\u0007\u0326\u0002\u0002\u0d18\u0d1a\u0007\u030b",
    "\u0002\u0002\u0d19\u0d12\u0003\u0002\u0002\u0002\u0d19\u0d17\u0003\u0002",
    "\u0002\u0002\u0d1a\u0d1b\u0003\u0002\u0002\u0002\u0d1b\u0d19\u0003\u0002",
    "\u0002\u0002\u0d1b\u0d1c\u0003\u0002\u0002\u0002\u0d1c\u0d1e\u0003\u0002",
    "\u0002\u0002\u0d1d\u0d10\u0003\u0002\u0002\u0002\u0d1d\u0d19\u0003\u0002",
    "\u0002\u0002\u0d1e\u0d30\u0003\u0002\u0002\u0002\u0d1f\u0d20\u0007\u0266",
    "\u0002\u0002\u0d20\u0d2b\u0007\u0313\u0002\u0002\u0d21\u0d23\u0007\u0326",
    "\u0002\u0002\u0d22\u0d21\u0003\u0002\u0002\u0002\u0d22\u0d23\u0003\u0002",
    "\u0002\u0002\u0d23\u0d24\u0003\u0002\u0002\u0002\u0d24\u0d25\u0007\u030b",
    "\u0002\u0002\u0d25\u0d26\u0007\u015c\u0002\u0002\u0d26\u0d2c\u0007\u030b",
    "\u0002\u0002\u0d27\u0d29\u0007\u0326\u0002\u0002\u0d28\u0d27\u0003\u0002",
    "\u0002\u0002\u0d28\u0d29\u0003\u0002\u0002\u0002\u0d29\u0d2a\u0003\u0002",
    "\u0002\u0002\u0d2a\u0d2c\u0007\u030b\u0002\u0002\u0d2b\u0d22\u0003\u0002",
    "\u0002\u0002\u0d2b\u0d28\u0003\u0002\u0002\u0002\u0d2c\u0d2d\u0003\u0002",
    "\u0002\u0002\u0d2d\u0d2b\u0003\u0002\u0002\u0002\u0d2d\u0d2e\u0003\u0002",
    "\u0002\u0002\u0d2e\u0d30\u0003\u0002\u0002\u0002\u0d2f\u0d0b\u0003\u0002",
    "\u0002\u0002\u0d2f\u0d1f\u0003\u0002\u0002\u0002\u0d30\u0d37\u0003\u0002",
    "\u0002\u0002\u0d31\u0d33\u0007\u0326\u0002\u0002\u0d32\u0d31\u0003\u0002",
    "\u0002\u0002\u0d32\u0d33\u0003\u0002\u0002\u0002\u0d33\u0d34\u0003\u0002",
    "\u0002\u0002\u0d34\u0d35\u0007\u0241\u0002\u0002\u0d35\u0d36\u0007\u0313",
    "\u0002\u0002\u0d36\u0d38\u0007\u030b\u0002\u0002\u0d37\u0d32\u0003\u0002",
    "\u0002\u0002\u0d37\u0d38\u0003\u0002\u0002\u0002\u0d38\u0d3f\u0003\u0002",
    "\u0002\u0002\u0d39\u0d3b\u0007\u0326\u0002\u0002\u0d3a\u0d39\u0003\u0002",
    "\u0002\u0002\u0d3a\u0d3b\u0003\u0002\u0002\u0002\u0d3b\u0d3c\u0003\u0002",
    "\u0002\u0002\u0d3c\u0d3d\u0007\u0243\u0002\u0002\u0d3d\u0d3e\u0007\u0313",
    "\u0002\u0002\u0d3e\u0d40\u0007\u030b\u0002\u0002\u0d3f\u0d3a\u0003\u0002",
    "\u0002\u0002\u0d3f\u0d40\u0003\u0002\u0002\u0002\u0d40\u0d41\u0003\u0002",
    "\u0002\u0002\u0d41\u0d42\u0007\u0325\u0002\u0002\u0d42\u012d\u0003\u0002",
    "\u0002\u0002\u0d43\u0d44\u0007H\u0002\u0002\u0d44\u0d45\u0007{\u0002",
    "\u0002\u0d45\u0d46\u0007\u02a9\u0002\u0002\u0d46\u0d47\u0007\u027b\u0002",
    "\u0002\u0d47\u0d48\u0005\u03ac\u01d7\u0002\u0d48\u0d49\u0007\u017b\u0002",
    "\u0002\u0d49\u0d4a\u0007\u0324\u0002\u0002\u0d4a\u0d4b\u0007\u023c\u0002",
    "\u0002\u0d4b\u0d4c\u0007\u0313\u0002\u0002\u0d4c\u0d72\u0007\u030b\u0002",
    "\u0002\u0d4d\u0d4f\u0007\u0326\u0002\u0002\u0d4e\u0d4d\u0003\u0002\u0002",
    "\u0002\u0d4e\u0d4f\u0003\u0002\u0002\u0002\u0d4f\u0d50\u0003\u0002\u0002",
    "\u0002\u0d50\u0d51\u0007\u0189\u0002\u0002\u0d51\u0d52\u0007\u01c3\u0002",
    "\u0002\u0d52\u0d60\u0007\u0313\u0002\u0002\u0d53\u0d61\u0007\u019a\u0002",
    "\u0002\u0d54\u0d56\u0007\u0326\u0002\u0002\u0d55\u0d54\u0003\u0002\u0002",
    "\u0002\u0d55\u0d56\u0003\u0002\u0002\u0002\u0d56\u0d57\u0003\u0002\u0002",
    "\u0002\u0d57\u0d58\u0007\u030b\u0002\u0002\u0d58\u0d59\u0007\u015c\u0002",
    "\u0002\u0d59\u0d5d\u0007\u030b\u0002\u0002\u0d5a\u0d5b\u0007\u0326\u0002",
    "\u0002\u0d5b\u0d5d\u0007\u030b\u0002\u0002\u0d5c\u0d55\u0003\u0002\u0002",
    "\u0002\u0d5c\u0d5a\u0003\u0002\u0002\u0002\u0d5d\u0d5e\u0003\u0002\u0002",
    "\u0002\u0d5e\u0d5c\u0003\u0002\u0002\u0002\u0d5e\u0d5f\u0003\u0002\u0002",
    "\u0002\u0d5f\u0d61\u0003\u0002\u0002\u0002\u0d60\u0d53\u0003\u0002\u0002",
    "\u0002\u0d60\u0d5c\u0003\u0002\u0002\u0002\u0d61\u0d73\u0003\u0002\u0002",
    "\u0002\u0d62\u0d63\u0007\u0266\u0002\u0002\u0d63\u0d6e\u0007\u0313\u0002",
    "\u0002\u0d64\u0d66\u0007\u0326\u0002\u0002\u0d65\u0d64\u0003\u0002\u0002",
    "\u0002\u0d65\u0d66\u0003\u0002\u0002\u0002\u0d66\u0d67\u0003\u0002\u0002",
    "\u0002\u0d67\u0d68\u0007\u030b\u0002\u0002\u0d68\u0d69\u0007\u015c\u0002",
    "\u0002\u0d69\u0d6f\u0007\u030b\u0002\u0002\u0d6a\u0d6c\u0007\u0326\u0002",
    "\u0002\u0d6b\u0d6a\u0003\u0002\u0002\u0002\u0d6b\u0d6c\u0003\u0002\u0002",
    "\u0002\u0d6c\u0d6d\u0003\u0002\u0002\u0002\u0d6d\u0d6f\u0007\u030b\u0002",
    "\u0002\u0d6e\u0d65\u0003\u0002\u0002\u0002\u0d6e\u0d6b\u0003\u0002\u0002",
    "\u0002\u0d6f\u0d70\u0003\u0002\u0002\u0002\u0d70\u0d6e\u0003\u0002\u0002",
    "\u0002\u0d70\u0d71\u0003\u0002\u0002\u0002\u0d71\u0d73\u0003\u0002\u0002",
    "\u0002\u0d72\u0d4e\u0003\u0002\u0002\u0002\u0d72\u0d62\u0003\u0002\u0002",
    "\u0002\u0d73\u0d7a\u0003\u0002\u0002\u0002\u0d74\u0d76\u0007\u0326\u0002",
    "\u0002\u0d75\u0d74\u0003\u0002\u0002\u0002\u0d75\u0d76\u0003\u0002\u0002",
    "\u0002\u0d76\u0d77\u0003\u0002\u0002\u0002\u0d77\u0d78\u0007\u0241\u0002",
    "\u0002\u0d78\u0d79\u0007\u0313\u0002\u0002\u0d79\u0d7b\u0007\u030b\u0002",
    "\u0002\u0d7a\u0d75\u0003\u0002\u0002\u0002\u0d7a\u0d7b\u0003\u0002\u0002",
    "\u0002\u0d7b\u0d82\u0003\u0002\u0002\u0002\u0d7c\u0d7e\u0007\u0326\u0002",
    "\u0002\u0d7d\u0d7c\u0003\u0002\u0002\u0002\u0d7d\u0d7e\u0003\u0002\u0002",
    "\u0002\u0d7e\u0d7f\u0003\u0002\u0002\u0002\u0d7f\u0d80\u0007\u0243\u0002",
    "\u0002\u0d80\u0d81\u0007\u0313\u0002\u0002\u0d81\u0d83\u0007\u030b\u0002",
    "\u0002\u0d82\u0d7d\u0003\u0002\u0002\u0002\u0d82\u0d83\u0003\u0002\u0002",
    "\u0002\u0d83\u0d84\u0003\u0002\u0002\u0002\u0d84\u0d85\u0007\u0325\u0002",
    "\u0002\u0d85\u012f\u0003\u0002\u0002\u0002\u0d86\u0d87\u0007\t\u0002",
    "\u0002\u0d87\u0d88\u0007\u0208\u0002\u0002\u0d88\u0d89\u0007\u01b0\u0002",
    "\u0002\u0d89\u0d94\u0005\u03ac\u01d7\u0002\u0d8a\u0d8f\u0007\u0298\u0002",
    "\u0002\u0d8b\u0d8c\u0007\u017b\u0002\u0002\u0d8c\u0d8d\u0007\u0181\u0002",
    "\u0002\u0d8d\u0d8e\u0007\u0313\u0002\u0002\u0d8e\u0d90\t\b\u0002\u0002",
    "\u0d8f\u0d8b\u0003\u0002\u0002\u0002\u0d8f\u0d90\u0003\u0002\u0002\u0002",
    "\u0d90\u0d95\u0003\u0002\u0002\u0002\u0d91\u0d95\u0007\u029f\u0002\u0002",
    "\u0d92\u0d93\u0007\u000f\u0002\u0002\u0d93\u0d95\u0007Y\u0002\u0002",
    "\u0d94\u0d8a\u0003\u0002\u0002\u0002\u0d94\u0d91\u0003\u0002\u0002\u0002",
    "\u0d94\u0d92\u0003\u0002\u0002\u0002\u0d95\u0131\u0003\u0002\u0002\u0002",
    "\u0d96\u0d97\u0007H\u0002\u0002\u0d97\u0d98\u0007\u0208\u0002\u0002",
    "\u0d98\u0d99\u0007\u01b0\u0002\u0002\u0d99\u0d9d\u0005\u03ac\u01d7\u0002",
    "\u0d9a\u0d9b\u0007\u00e4\u0002\u0002\u0d9b\u0d9c\u0007\u01fa\u0002\u0002",
    "\u0d9c\u0d9e\u0005\u03ac\u01d7\u0002\u0d9d\u0d9a\u0003\u0002\u0002\u0002",
    "\u0d9d\u0d9e\u0003\u0002\u0002\u0002\u0d9e\u0da2\u0003\u0002\u0002\u0002",
    "\u0d9f\u0da0\u0007\u009a\u0002\u0002\u0da0\u0da1\u0007\u027a\u0002\u0002",
    "\u0da1\u0da3\u0007\u030f\u0002\u0002\u0da2\u0d9f\u0003\u0002\u0002\u0002",
    "\u0da2\u0da3\u0003\u0002\u0002\u0002\u0da3\u0da8\u0003\u0002\u0002\u0002",
    "\u0da4\u0da5\u0007\u017b\u0002\u0002\u0da5\u0da6\u0007\u0181\u0002\u0002",
    "\u0da6\u0da7\u0007\u0313\u0002\u0002\u0da7\u0da9\t\b\u0002\u0002\u0da8",
    "\u0da4\u0003\u0002\u0002\u0002\u0da8\u0da9\u0003\u0002\u0002\u0002\u0da9",
    "\u0dac\u0003\u0002\u0002\u0002\u0daa\u0dab\u0007\u000f\u0002\u0002\u0dab",
    "\u0dad\u0007Y\u0002\u0002\u0dac\u0daa\u0003\u0002\u0002\u0002\u0dac",
    "\u0dad\u0003\u0002\u0002\u0002\u0dad\u0db0\u0003\u0002\u0002\u0002\u0dae",
    "\u0daf\u0007\u0013\u0002\u0002\u0daf\u0db1\u0005\u03ac\u01d7\u0002\u0db0",
    "\u0dae\u0003\u0002\u0002\u0002\u0db0\u0db1\u0003\u0002\u0002\u0002\u0db1",
    "\u0133\u0003\u0002\u0002\u0002\u0db2\u0db3\u0007\t\u0002\u0002\u0db3",
    "\u0db4\u0007\u0208\u0002\u0002\u0db4\u0db5\u0007\u02d5\u0002\u0002\u0db5",
    "\u0dc3\u0005\u03ac\u01d7\u0002\u0db6\u0db7\u0007\u0003\u0002\u0002\u0db7",
    "\u0db8\u0007\u030f\u0002\u0002\u0db8\u0db9\u0007\u00af\u0002\u0002\u0db9",
    "\u0dc4\t \u0002\u0002\u0dba\u0dc1\u0007g\u0002\u0002\u0dbb\u0dbc\u0007",
    "\u030f\u0002\u0002\u0dbc\u0dbd\u0007\u00af\u0002\u0002\u0dbd\u0dc2\t",
    " \u0002\u0002\u0dbe\u0dbf\u0007\u0005\u0002\u0002\u0dbf\u0dc2\t \u0002",
    "\u0002\u0dc0\u0dc2\u0007\u0005\u0002\u0002\u0dc1\u0dbb\u0003\u0002\u0002",
    "\u0002\u0dc1\u0dbe\u0003\u0002\u0002\u0002\u0dc1\u0dc0\u0003\u0002\u0002",
    "\u0002\u0dc2\u0dc4\u0003\u0002\u0002\u0002\u0dc3\u0db6\u0003\u0002\u0002",
    "\u0002\u0dc3\u0dba\u0003\u0002\u0002\u0002\u0dc4\u0135\u0003\u0002\u0002",
    "\u0002\u0dc5\u0dc6\u0007H\u0002\u0002\u0dc6\u0dc7\u0007\u0208\u0002",
    "\u0002\u0dc7\u0dc8\u0007\u02d5\u0002\u0002\u0dc8\u0dd4\u0005\u03ac\u01d7",
    "\u0002\u0dc9\u0dd2\u0007\u008b\u0002\u0002\u0dca\u0dcb\u0005\u03ac\u01d7",
    "\u0002\u0dcb\u0dcc\u0007\u031f\u0002\u0002\u0dcc\u0dce\u0003\u0002\u0002",
    "\u0002\u0dcd\u0dca\u0003\u0002\u0002\u0002\u0dcd\u0dce\u0003\u0002\u0002",
    "\u0002\u0dce\u0dcf\u0003\u0002\u0002\u0002\u0dcf\u0dd3\u0005\u03ac\u01d7",
    "\u0002\u0dd0\u0dd1\u0007\u0153\u0002\u0002\u0dd1\u0dd3\u0007\u02d5\u0002",
    "\u0002\u0dd2\u0dcd\u0003\u0002\u0002\u0002\u0dd2\u0dd0\u0003\u0002\u0002",
    "\u0002\u0dd3\u0dd5\u0003\u0002\u0002\u0002\u0dd4\u0dc9\u0003\u0002\u0002",
    "\u0002\u0dd4\u0dd5\u0003\u0002\u0002\u0002\u0dd5\u0dd8\u0003\u0002\u0002",
    "\u0002\u0dd6\u0dd7\u0007\u0013\u0002\u0002\u0dd7\u0dd9\u0005\u03ac\u01d7",
    "\u0002\u0dd8\u0dd6\u0003\u0002\u0002\u0002\u0dd8\u0dd9\u0003\u0002\u0002",
    "\u0002\u0dd9\u0137\u0003\u0002\u0002\u0002\u0dda\u0ddb\u0007\t\u0002",
    "\u0002\u0ddb\u0ddc\u0007\u0236\u0002\u0002\u0ddc\u0e20\u0005\u03ac\u01d7",
    "\u0002\u0ddd\u0ddf\t\u0015\u0002\u0002\u0dde\u0ddd\u0003\u0002\u0002",
    "\u0002\u0dde\u0ddf\u0003\u0002\u0002\u0002\u0ddf\u0e21\u0003\u0002\u0002",
    "\u0002\u0de0\u0dee\u0007\u017b\u0002\u0002\u0de1\u0de2\u0007\u00f3\u0002",
    "\u0002\u0de2\u0de6\u0007\u0313\u0002\u0002\u0de3\u0de7\u0007\u030f\u0002",
    "\u0002\u0de4\u0de5\u0007\u0310\u0002\u0002\u0de5\u0de7\u0007\u0094\u0002",
    "\u0002\u0de6\u0de3\u0003\u0002\u0002\u0002\u0de6\u0de4\u0003\u0002\u0002",
    "\u0002\u0de7\u0deb\u0003\u0002\u0002\u0002\u0de8\u0dea\t!\u0002\u0002",
    "\u0de9\u0de8\u0003\u0002\u0002\u0002\u0dea\u0ded\u0003\u0002\u0002\u0002",
    "\u0deb\u0de9\u0003\u0002\u0002\u0002\u0deb\u0dec\u0003\u0002\u0002\u0002",
    "\u0dec\u0def\u0003\u0002\u0002\u0002\u0ded\u0deb\u0003\u0002\u0002\u0002",
    "\u0dee\u0de1\u0003\u0002\u0002\u0002\u0dee\u0def\u0003\u0002\u0002\u0002",
    "\u0def\u0df9\u0003\u0002\u0002\u0002\u0df0\u0df1\u0007\u00e3\u0002\u0002",
    "\u0df1\u0df2\u0007\u0313\u0002\u0002\u0df2\u0df6\u0007\u030f\u0002\u0002",
    "\u0df3\u0df5\t!\u0002\u0002\u0df4\u0df3\u0003\u0002\u0002\u0002\u0df5",
    "\u0df8\u0003\u0002\u0002\u0002\u0df6\u0df4\u0003\u0002\u0002\u0002\u0df6",
    "\u0df7\u0003\u0002\u0002\u0002\u0df7\u0dfa\u0003\u0002\u0002\u0002\u0df8",
    "\u0df6\u0003\u0002\u0002\u0002\u0df9\u0df0\u0003\u0002\u0002\u0002\u0df9",
    "\u0dfa\u0003\u0002\u0002\u0002\u0dfa\u0dfe\u0003\u0002\u0002\u0002\u0dfb",
    "\u0dfc\u0007Z\u0002\u0002\u0dfc\u0dfd\u0007\u0313\u0002\u0002\u0dfd",
    "\u0dff\u0005\u03ac\u01d7\u0002\u0dfe\u0dfb\u0003\u0002\u0002\u0002\u0dfe",
    "\u0dff\u0003\u0002\u0002\u0002\u0dff\u0e03\u0003\u0002\u0002\u0002\u0e00",
    "\u0e01\u0007\u01d5\u0002\u0002\u0e01\u0e02\u0007\u0313\u0002\u0002\u0e02",
    "\u0e04\u0005\u03ac\u01d7\u0002\u0e03\u0e00\u0003\u0002\u0002\u0002\u0e03",
    "\u0e04\u0003\u0002\u0002\u0002\u0e04\u0e08\u0003\u0002\u0002\u0002\u0e05",
    "\u0e06\u0007\u0256\u0002\u0002\u0e06\u0e07\u0007\u0313\u0002\u0002\u0e07",
    "\u0e09\u0005\u03ac\u01d7\u0002\u0e08\u0e05\u0003\u0002\u0002\u0002\u0e08",
    "\u0e09\u0003\u0002\u0002\u0002\u0e09\u0e0d\u0003\u0002\u0002\u0002\u0e0a",
    "\u0e0b\u0007/\u0002\u0002\u0e0b\u0e0c\u0007\u0313\u0002\u0002\u0e0c",
    "\u0e0e\t\b\u0002\u0002\u0e0d\u0e0a\u0003\u0002\u0002\u0002\u0e0d\u0e0e",
    "\u0003\u0002\u0002\u0002\u0e0e\u0e12\u0003\u0002\u0002\u0002\u0e0f\u0e10",
    "\u00070\u0002\u0002\u0e10\u0e11\u0007\u0313\u0002\u0002\u0e11\u0e13",
    "\t\b\u0002\u0002\u0e12\u0e0f\u0003\u0002\u0002\u0002\u0e12\u0e13\u0003",
    "\u0002\u0002\u0002\u0e13\u0e17\u0003\u0002\u0002\u0002\u0e14\u0e15\u0007",
    "\u01c6\u0002\u0002\u0e15\u0e16\u0007\u0313\u0002\u0002\u0e16\u0e18\u0005",
    "\u03ac\u01d7\u0002\u0e17\u0e14\u0003\u0002\u0002\u0002\u0e17\u0e18\u0003",
    "\u0002\u0002\u0002\u0e18\u0e1b\u0003\u0002\u0002\u0002\u0e19\u0e1a\u0007",
    "\u0261\u0002\u0002\u0e1a\u0e1c\u0007\u01c6\u0002\u0002\u0e1b\u0e19\u0003",
    "\u0002\u0002\u0002\u0e1b\u0e1c\u0003\u0002\u0002\u0002\u0e1c\u0e21\u0003",
    "\u0002\u0002\u0002\u0e1d\u0e1e\t\u0014\u0002\u0002\u0e1e\u0e1f\u0007",
    "\u01c6\u0002\u0002\u0e1f\u0e21\u0005\u03ac\u01d7\u0002\u0e20\u0dde\u0003",
    "\u0002\u0002\u0002\u0e20\u0de0\u0003\u0002\u0002\u0002\u0e20\u0e1d\u0003",
    "\u0002\u0002\u0002\u0e21\u0139\u0003\u0002\u0002\u0002\u0e22\u0e23\u0007",
    "H\u0002\u0002\u0e23\u0e24\u0007\u0236\u0002\u0002\u0e24\u0e7f\u0005",
    "\u03ac\u01d7\u0002\u0e25\u0e33\u0007\u017b\u0002\u0002\u0e26\u0e27\u0007",
    "\u00f3\u0002\u0002\u0e27\u0e2b\u0007\u0313\u0002\u0002\u0e28\u0e2c\u0007",
    "\u030f\u0002\u0002\u0e29\u0e2a\u0007\u0310\u0002\u0002\u0e2a\u0e2c\u0007",
    "\u0094\u0002\u0002\u0e2b\u0e28\u0003\u0002\u0002\u0002\u0e2b\u0e29\u0003",
    "\u0002\u0002\u0002\u0e2c\u0e30\u0003\u0002\u0002\u0002\u0e2d\u0e2f\t",
    "!\u0002\u0002\u0e2e\u0e2d\u0003\u0002\u0002\u0002\u0e2f\u0e32\u0003",
    "\u0002\u0002\u0002\u0e30\u0e2e\u0003\u0002\u0002\u0002\u0e30\u0e31\u0003",
    "\u0002\u0002\u0002\u0e31\u0e34\u0003\u0002\u0002\u0002\u0e32\u0e30\u0003",
    "\u0002\u0002\u0002\u0e33\u0e26\u0003\u0002\u0002\u0002\u0e33\u0e34\u0003",
    "\u0002\u0002\u0002\u0e34\u0e3b\u0003\u0002\u0002\u0002\u0e35\u0e37\u0007",
    "\u0326\u0002\u0002\u0e36\u0e35\u0003\u0002\u0002\u0002\u0e36\u0e37\u0003",
    "\u0002\u0002\u0002\u0e37\u0e38\u0003\u0002\u0002\u0002\u0e38\u0e39\u0007",
    "\u013f\u0002\u0002\u0e39\u0e3a\u0007\u0313\u0002\u0002\u0e3a\u0e3c\u0007",
    "\u0310\u0002\u0002\u0e3b\u0e36\u0003\u0002\u0002\u0002\u0e3b\u0e3c\u0003",
    "\u0002\u0002\u0002\u0e3c\u0e43\u0003\u0002\u0002\u0002\u0e3d\u0e3f\u0007",
    "\u0326\u0002\u0002\u0e3e\u0e3d\u0003\u0002\u0002\u0002\u0e3e\u0e3f\u0003",
    "\u0002\u0002\u0002\u0e3f\u0e40\u0003\u0002\u0002\u0002\u0e40\u0e41\u0007",
    "Z\u0002\u0002\u0e41\u0e42\u0007\u0313\u0002\u0002\u0e42\u0e44\u0005",
    "\u03ac\u01d7\u0002\u0e43\u0e3e\u0003\u0002\u0002\u0002\u0e43\u0e44\u0003",
    "\u0002\u0002\u0002\u0e44\u0e4b\u0003\u0002\u0002\u0002\u0e45\u0e47\u0007",
    "\u0326\u0002\u0002\u0e46\u0e45\u0003\u0002\u0002\u0002\u0e46\u0e47\u0003",
    "\u0002\u0002\u0002\u0e47\u0e48\u0003\u0002\u0002\u0002\u0e48\u0e49\u0007",
    "\u01d5\u0002\u0002\u0e49\u0e4a\u0007\u0313\u0002\u0002\u0e4a\u0e4c\u0005",
    "\u03ac\u01d7\u0002\u0e4b\u0e46\u0003\u0002\u0002\u0002\u0e4b\u0e4c\u0003",
    "\u0002\u0002\u0002\u0e4c\u0e53\u0003\u0002\u0002\u0002\u0e4d\u0e4f\u0007",
    "\u0326\u0002\u0002\u0e4e\u0e4d\u0003\u0002\u0002\u0002\u0e4e\u0e4f\u0003",
    "\u0002\u0002\u0002\u0e4f\u0e50\u0003\u0002\u0002\u0002\u0e50\u0e51\u0007",
    "0\u0002\u0002\u0e51\u0e52\u0007\u0313\u0002\u0002\u0e52\u0e54\t\b\u0002",
    "\u0002\u0e53\u0e4e\u0003\u0002\u0002\u0002\u0e53\u0e54\u0003\u0002\u0002",
    "\u0002\u0e54\u0e5b\u0003\u0002\u0002\u0002\u0e55\u0e57\u0007\u0326\u0002",
    "\u0002\u0e56\u0e55\u0003\u0002\u0002\u0002\u0e56\u0e57\u0003\u0002\u0002",
    "\u0002\u0e57\u0e58\u0003\u0002\u0002\u0002\u0e58\u0e59\u0007/\u0002",
    "\u0002\u0e59\u0e5a\u0007\u0313\u0002\u0002\u0e5a\u0e5c\t\b\u0002\u0002",
    "\u0e5b\u0e56\u0003\u0002\u0002\u0002\u0e5b\u0e5c\u0003\u0002\u0002\u0002",
    "\u0e5c\u0e63\u0003\u0002\u0002\u0002\u0e5d\u0e5f\u0007\u0326\u0002\u0002",
    "\u0e5e\u0e5d\u0003\u0002\u0002\u0002\u0e5e\u0e5f\u0003\u0002\u0002\u0002",
    "\u0e5f\u0e60\u0003\u0002\u0002\u0002\u0e60\u0e61\u0007\u01c6\u0002\u0002",
    "\u0e61\u0e62\u0007\u0313\u0002\u0002\u0e62\u0e64\u0005\u03ac\u01d7\u0002",
    "\u0e63\u0e5e\u0003\u0002\u0002\u0002\u0e63\u0e64\u0003\u0002\u0002\u0002",
    "\u0e64\u0e80\u0003\u0002\u0002\u0002\u0e65\u0e7d\u0007\u008b\u0002\u0002",
    "\u0e66\u0e67\u0007\u017a\u0002\u0002\u0e67\u0e6e\u0007\u017b\u0002\u0002",
    "\u0e68\u0e6a\u0007\u0326\u0002\u0002\u0e69\u0e68\u0003\u0002\u0002\u0002",
    "\u0e69\u0e6a\u0003\u0002\u0002\u0002\u0e6a\u0e6b\u0003\u0002\u0002\u0002",
    "\u0e6b\u0e6c\u0007Z\u0002\u0002\u0e6c\u0e6d\u0007\u0313\u0002\u0002",
    "\u0e6d\u0e6f\u0005\u03ac\u01d7\u0002\u0e6e\u0e69\u0003\u0002\u0002\u0002",
    "\u0e6e\u0e6f\u0003\u0002\u0002\u0002\u0e6f\u0e76\u0003\u0002\u0002\u0002",
    "\u0e70\u0e72\u0007\u0326\u0002\u0002\u0e71\u0e70\u0003\u0002\u0002\u0002",
    "\u0e71\u0e72\u0003\u0002\u0002\u0002\u0e72\u0e73\u0003\u0002\u0002\u0002",
    "\u0e73\u0e74\u0007\u01d5\u0002\u0002\u0e74\u0e75\u0007\u0313\u0002\u0002",
    "\u0e75\u0e77\u0007\u030f\u0002\u0002\u0e76\u0e71\u0003\u0002\u0002\u0002",
    "\u0e76\u0e77\u0003\u0002\u0002\u0002\u0e77\u0e7e\u0003\u0002\u0002\u0002",
    "\u0e78\u0e79\u0007*\u0002\u0002\u0e79\u0e7e\u0005\u03ac\u01d7\u0002",
    "\u0e7a\u0e7b\u0007\u0011\u0002\u0002\u0e7b\u0e7c\u0007\u00ab\u0002\u0002",
    "\u0e7c\u0e7e\u0005\u03ac\u01d7\u0002\u0e7d\u0e66\u0003\u0002\u0002\u0002",
    "\u0e7d\u0e78\u0003\u0002\u0002\u0002\u0e7d\u0e7a\u0003\u0002\u0002\u0002",
    "\u0e7e\u0e80\u0003\u0002\u0002\u0002\u0e7f\u0e25\u0003\u0002\u0002\u0002",
    "\u0e7f\u0e65\u0003\u0002\u0002\u0002\u0e80\u013b\u0003\u0002\u0002\u0002",
    "\u0e81\u0e82\u0007\t\u0002\u0002\u0e82\u0e83\u0007\u0236\u0002\u0002",
    "\u0e83\u0e95\u0005\u03ac\u01d7\u0002\u0e84\u0e86\t\u0015\u0002\u0002",
    "\u0e85\u0e84\u0003\u0002\u0002\u0002\u0e85\u0e86\u0003\u0002\u0002\u0002",
    "\u0e86\u0e96\u0003\u0002\u0002\u0002\u0e87\u0e93\u0007\u017b\u0002\u0002",
    "\u0e88\u0e89\u0007\u00f3\u0002\u0002\u0e89\u0e8a\u0007\u0313\u0002\u0002",
    "\u0e8a\u0e8e\u0007\u030f\u0002\u0002\u0e8b\u0e8c\u0007\u00e3\u0002\u0002",
    "\u0e8c\u0e8d\u0007\u0313\u0002\u0002\u0e8d\u0e8f\u0007\u030f\u0002\u0002",
    "\u0e8e\u0e8b\u0003\u0002\u0002\u0002\u0e8e\u0e8f\u0003\u0002\u0002\u0002",
    "\u0e8f\u0e94\u0003\u0002\u0002\u0002\u0e90\u0e91\u0007\u0256\u0002\u0002",
    "\u0e91\u0e92\u0007\u0313\u0002\u0002\u0e92\u0e94\u0005\u03ac\u01d7\u0002",
    "\u0e93\u0e88\u0003\u0002\u0002\u0002\u0e93\u0e90\u0003\u0002\u0002\u0002",
    "\u0e94\u0e96\u0003\u0002\u0002\u0002\u0e95\u0e85\u0003\u0002\u0002\u0002",
    "\u0e95\u0e87\u0003\u0002\u0002\u0002\u0e96\u013d\u0003\u0002\u0002\u0002",
    "\u0e97\u0e98\u0007H\u0002\u0002\u0e98\u0e99\u0007\u0236\u0002\u0002",
    "\u0e99\u0e9a\u0005\u03ac\u01d7\u0002\u0e9a\u0e9b\u0007\u017b\u0002\u0002",
    "\u0e9b\u0e9c\u0007\u00f3\u0002\u0002\u0e9c\u0e9d\u0007\u0313\u0002\u0002",
    "\u0e9d\u0ea1\u0007\u030f\u0002\u0002\u0e9e\u0e9f\u0007\u013f\u0002\u0002",
    "\u0e9f\u0ea0\u0007\u0313\u0002\u0002\u0ea0\u0ea2\u0007\u0310\u0002\u0002",
    "\u0ea1\u0e9e\u0003\u0002\u0002\u0002\u0ea1\u0ea2\u0003\u0002\u0002\u0002",
    "\u0ea2\u013f\u0003\u0002\u0002\u0002\u0ea3\u0ea4\u0007\t\u0002\u0002",
    "\u0ea4\u0ea5\u0007\u0236\u0002\u0002\u0ea5\u0ebd\u0005\u03ac\u01d7\u0002",
    "\u0ea6\u0ea8\t\u0015\u0002\u0002\u0ea7\u0ea6\u0003\u0002\u0002\u0002",
    "\u0ea7\u0ea8\u0003\u0002\u0002\u0002\u0ea8\u0ebe\u0003\u0002\u0002\u0002",
    "\u0ea9\u0ebb\u0007\u017b\u0002\u0002\u0eaa\u0eab\u0007\u00f3\u0002\u0002",
    "\u0eab\u0eac\u0007\u0313\u0002\u0002\u0eac\u0eb6\u0007\u030f\u0002\u0002",
    "\u0ead\u0eae\u0007\u00e3\u0002\u0002\u0eae\u0eaf\u0007\u0313\u0002\u0002",
    "\u0eaf\u0eb3\u0007\u030f\u0002\u0002\u0eb0\u0eb2\t!\u0002\u0002\u0eb1",
    "\u0eb0\u0003\u0002\u0002\u0002\u0eb2\u0eb5\u0003\u0002\u0002\u0002\u0eb3",
    "\u0eb1\u0003\u0002\u0002\u0002\u0eb3\u0eb4\u0003\u0002\u0002\u0002\u0eb4",
    "\u0eb7\u0003\u0002\u0002\u0002\u0eb5\u0eb3\u0003\u0002\u0002\u0002\u0eb6",
    "\u0ead\u0003\u0002\u0002\u0002\u0eb6\u0eb7\u0003\u0002\u0002\u0002\u0eb7",
    "\u0ebc\u0003\u0002\u0002\u0002\u0eb8\u0eb9\u0007\u0256\u0002\u0002\u0eb9",
    "\u0eba\u0007\u0313\u0002\u0002\u0eba\u0ebc\u0005\u03ac\u01d7\u0002\u0ebb",
    "\u0eaa\u0003\u0002\u0002\u0002\u0ebb\u0eb8\u0003\u0002\u0002\u0002\u0ebc",
    "\u0ebe\u0003\u0002\u0002\u0002\u0ebd\u0ea7\u0003\u0002\u0002\u0002\u0ebd",
    "\u0ea9\u0003\u0002\u0002\u0002\u0ebe\u0141\u0003\u0002\u0002\u0002\u0ebf",
    "\u0ec0\u0007H\u0002\u0002\u0ec0\u0ec1\u0007\u0236\u0002\u0002\u0ec1",
    "\u0ed2\u0005\u03ac\u01d7\u0002\u0ec2\u0ec3\u0007\u017b\u0002\u0002\u0ec3",
    "\u0ec4\u0007\u00f3\u0002\u0002\u0ec4\u0ec5\u0007\u0313\u0002\u0002\u0ec5",
    "\u0ec7\u0007\u030f\u0002\u0002\u0ec6\u0ec8\u0007\u00cd\u0002\u0002\u0ec7",
    "\u0ec6\u0003\u0002\u0002\u0002\u0ec7\u0ec8\u0003\u0002\u0002\u0002\u0ec8",
    "\u0ece\u0003\u0002\u0002\u0002\u0ec9\u0eca\u0007/\u0002\u0002\u0eca",
    "\u0ecc\u0007\u0313\u0002\u0002\u0ecb\u0ecd\t\b\u0002\u0002\u0ecc\u0ecb",
    "\u0003\u0002\u0002\u0002\u0ecc\u0ecd\u0003\u0002\u0002\u0002\u0ecd\u0ecf",
    "\u0003\u0002\u0002\u0002\u0ece\u0ec9\u0003\u0002\u0002\u0002\u0ece\u0ecf",
    "\u0003\u0002\u0002\u0002\u0ecf\u0ed3\u0003\u0002\u0002\u0002\u0ed0\u0ed1",
    "\u0007\u008b\u0002\u0002\u0ed1\u0ed3\u0007\u017a\u0002\u0002\u0ed2\u0ec2",
    "\u0003\u0002\u0002\u0002\u0ed2\u0ed0\u0003\u0002\u0002\u0002\u0ed3\u0143",
    "\u0003\u0002\u0002\u0002\u0ed4\u0ed5\u0007\t\u0002\u0002\u0ed5\u0ed6",
    "\u0007\u00bc\u0002\u0002\u0ed6\u0eec\u0007\u00ab\u0002\u0002\u0ed7\u0ed9",
    "\u0007\u0202\u0002\u0002\u0ed8\u0ed7\u0003\u0002\u0002\u0002\u0ed8\u0ed9",
    "\u0003\u0002\u0002\u0002\u0ed9\u0eda\u0003\u0002\u0002\u0002\u0eda\u0edb",
    "\u0007\u010e\u0002\u0002\u0edb\u0edc\u0007\u017b\u0002\u0002\u0edc\u0edd",
    "\u0007\u01ec\u0002\u0002\u0edd\u0ede\u0007%\u0002\u0002\u0ede\u0edf",
    "\u0007\u00f3\u0002\u0002\u0edf\u0ee0\u0007\u0313\u0002\u0002\u0ee0\u0eed",
    "\u0007\u030f\u0002\u0002\u0ee1\u0ee2\t\u0014\u0002\u0002\u0ee2\u0ee3",
    "\u0007\u01ec\u0002\u0002\u0ee3\u0eea\u0007%\u0002\u0002\u0ee4\u0ee5",
    "\u0007\u0137\u0002\u0002\u0ee5\u0ee6\u0007\u00bc\u0002\u0002\u0ee6\u0eeb",
    "\u0007\u00ab\u0002\u0002\u0ee7\u0ee8\u0007\u00f3\u0002\u0002\u0ee8\u0ee9",
    "\u0007\u0313\u0002\u0002\u0ee9\u0eeb\u0007\u030f\u0002\u0002\u0eea\u0ee4",
    "\u0003\u0002\u0002\u0002\u0eea\u0ee7\u0003\u0002\u0002\u0002\u0eeb\u0eed",
    "\u0003\u0002\u0002\u0002\u0eec\u0ed8\u0003\u0002\u0002\u0002\u0eec\u0ee1",
    "\u0003\u0002\u0002\u0002\u0eed\u0145\u0003\u0002\u0002\u0002\u0eee\u0eef",
    "\u0007H\u0002\u0002\u0eef\u0ef0\u0007\u00bc\u0002\u0002\u0ef0\u0ef1",
    "\u0007\u00ab\u0002\u0002\u0ef1\u0ef2\u0007\u01ec\u0002\u0002\u0ef2\u0ef3",
    "\u0007%\u0002\u0002\u0ef3\u0ef4\u0007\u00f3\u0002\u0002\u0ef4\u0ef5",
    "\u0007\u0313\u0002\u0002\u0ef5\u0ef6\u0007\u030f\u0002\u0002\u0ef6\u0147",
    "\u0003\u0002\u0002\u0002\u0ef7\u0ef8\u0007\t\u0002\u0002\u0ef8\u0ef9",
    "\u0007\u00bc\u0002\u0002\u0ef9\u0f15\u0007\u00ab\u0002\u0002\u0efa\u0efc",
    "\u0007\u0202\u0002\u0002\u0efb\u0efa\u0003\u0002\u0002\u0002\u0efb\u0efc",
    "\u0003\u0002\u0002\u0002\u0efc\u0efd\u0003\u0002\u0002\u0002\u0efd\u0efe",
    "\u0007\u010e\u0002\u0002\u0efe\u0eff\u0007\u017b\u0002\u0002\u0eff\u0f00",
    "\u0007\u01ec\u0002\u0002\u0f00\u0f01\u0007%\u0002\u0002\u0f01\u0f02",
    "\u0007\u00f3\u0002\u0002\u0f02\u0f03\u0007\u0313\u0002\u0002\u0f03\u0f16",
    "\u0007\u030f\u0002\u0002\u0f04\u0f05\u0007\u0003\u0002\u0002\u0f05\u0f06",
    "\u0007\u01ec\u0002\u0002\u0f06\u0f0d\u0007%\u0002\u0002\u0f07\u0f08",
    "\u0007\u0137\u0002\u0002\u0f08\u0f09\u0007\u00bc\u0002\u0002\u0f09\u0f0e",
    "\u0007\u00ab\u0002\u0002\u0f0a\u0f0b\u0007\u00f3\u0002\u0002\u0f0b\u0f0c",
    "\u0007\u0313\u0002\u0002\u0f0c\u0f0e\u0007\u030f\u0002\u0002\u0f0d\u0f07",
    "\u0003\u0002\u0002\u0002\u0f0d\u0f0a\u0003\u0002\u0002\u0002\u0f0e\u0f16",
    "\u0003\u0002\u0002\u0002\u0f0f\u0f10\u0007g\u0002\u0002\u0f10\u0f11",
    "\u0007\u01ec\u0002\u0002\u0f11\u0f12\u0007%\u0002\u0002\u0f12\u0f13",
    "\u0007\u00f3\u0002\u0002\u0f13\u0f14\u0007\u0313\u0002\u0002\u0f14\u0f16",
    "\u0007\u030f\u0002\u0002\u0f15\u0efb\u0003\u0002\u0002\u0002\u0f15\u0f04",
    "\u0003\u0002\u0002\u0002\u0f15\u0f0f\u0003\u0002\u0002\u0002\u0f16\u0149",
    "\u0003\u0002\u0002\u0002\u0f17\u0f18\u0007H\u0002\u0002\u0f18\u0f19",
    "\u0007\u00bc\u0002\u0002\u0f19\u0f1f\u0007\u00ab\u0002\u0002\u0f1a\u0f1b",
    "\u0007\u01ec\u0002\u0002\u0f1b\u0f1c\u0007%\u0002\u0002\u0f1c\u0f1d",
    "\u0007\u00f3\u0002\u0002\u0f1d\u0f1e\u0007\u0313\u0002\u0002\u0f1e\u0f20",
    "\u0007\u030f\u0002\u0002\u0f1f\u0f1a\u0003\u0002\u0002\u0002\u0f1f\u0f20",
    "\u0003\u0002\u0002\u0002\u0f20\u014b\u0003\u0002\u0002\u0002\u0f21\u0f22",
    "\u0007\t\u0002\u0002\u0f22\u0f23\u0007\u024b\u0002\u0002\u0f23\u0f24",
    "\u0007\u02f0\u0002\u0002\u0f24\u0f25\u0005\u03ac\u01d7\u0002\u0f25\u0f26",
    "\u0007\u02f7\u0002\u0002\u0f26\u0f2f\u0007\u0313\u0002\u0002\u0f27\u0f30",
    "\u0007\u00d4\u0002\u0002\u0f28\u0f30\u0007\u01e8\u0002\u0002\u0f29\u0f30",
    "\u0007\u02fe\u0002\u0002\u0f2a\u0f2b\u0007\u02f8\u0002\u0002\u0f2b\u0f2c",
    "\u0007\u017b\u0002\u0002\u0f2c\u0f2d\u0007\u012d\u0002\u0002\u0f2d\u0f2e",
    "\u0007\u01b7\u0002\u0002\u0f2e\u0f30\u0005\u03ac\u01d7\u0002\u0f2f\u0f27",
    "\u0003\u0002\u0002\u0002\u0f2f\u0f28\u0003\u0002\u0002\u0002\u0f2f\u0f29",
    "\u0003\u0002\u0002\u0002\u0f2f\u0f2a\u0003\u0002\u0002\u0002\u0f30\u014d",
    "\u0003\u0002\u0002\u0002\u0f31\u0f32\u0007\t\u0002\u0002\u0f32\u0f33",
    "\u0007\u0277\u0002\u0002\u0f33\u0f34\u0007\u008d\u0002\u0002\u0f34\u0f35",
    "\u0005\u03ac\u01d7\u0002\u0f35\u0f36\u0007\u0324\u0002\u0002\u0f36\u0f37",
    "\u0007\u0325\u0002\u0002\u0f37\u0f38\t\"\u0002\u0002\u0f38\u0f39\u0007",
    "\u028e\u0002\u0002\u0f39\u0f3a\u0007\u0324\u0002\u0002\u0f3a\u0f3b\u0007",
    "\u030b\u0002\u0002\u0f3b\u0f3c\u0007\u0325\u0002\u0002\u0f3c\u014f\u0003",
    "\u0002\u0002\u0002\u0f3d\u0f3e\u0007\t\u0002\u0002\u0f3e\u0f3f\u0007",
    "\u0277\u0002\u0002\u0f3f\u0f40\u0007\u012e\u0002\u0002\u0f40\u0f41\u0005",
    "\u03ac\u01d7\u0002\u0f41\u0f42\u0007\u025b\u0002\u0002\u0f42\u0f44\u0007",
    "\u016f\u0002\u0002\u0f43\u0f45\u0005\u03ac\u01d7\u0002\u0f44\u0f43\u0003",
    "\u0002\u0002\u0002\u0f44\u0f45\u0003\u0002\u0002\u0002\u0f45\u0151\u0003",
    "\u0002\u0002\u0002\u0f46\u0f47\u0007\t\u0002\u0002\u0f47\u0f48\u0007",
    "\u02a2\u0002\u0002\u0f48\u0f49\u0007\u0137\u0002\u0002\u0f49\u0f4a\u0007",
    "\u01a8\u0002\u0002\u0f4a\u0f4b\u0005\u03ac\u01d7\u0002\u0f4b\u0f4f\u0007",
    "\u017b\u0002\u0002\u0f4c\u0f4d\u0007\u0170\u0002\u0002\u0f4d\u0f4e\u0007",
    "\u0313\u0002\u0002\u0f4e\u0f50\u0005\u03ac\u01d7\u0002\u0f4f\u0f4c\u0003",
    "\u0002\u0002\u0002\u0f4f\u0f50\u0003\u0002\u0002\u0002\u0f50\u0f55\u0003",
    "\u0002\u0002\u0002\u0f51\u0f52\u0007\u0326\u0002\u0002\u0f52\u0f53\u0007",
    "\u000b\u0002\u0002\u0f53\u0f54\u0007\u0313\u0002\u0002\u0f54\u0f56\t",
    "\b\u0002\u0002\u0f55\u0f51\u0003\u0002\u0002\u0002\u0f55\u0f56\u0003",
    "\u0002\u0002\u0002\u0f56\u0153\u0003\u0002\u0002\u0002\u0f57\u0f58\u0007",
    "H\u0002\u0002\u0f58\u0f59\u0007\u02a2\u0002\u0002\u0f59\u0f5a\u0007",
    "\u0137\u0002\u0002\u0f5a\u0f5b\u0007\u01a8\u0002\u0002\u0f5b\u0f5e\u0005",
    "\u03ac\u01d7\u0002\u0f5c\u0f5d\u0007\u0013\u0002\u0002\u0f5d\u0f5f\u0005",
    "\u03ac\u01d7\u0002\u0f5e\u0f5c\u0003\u0002\u0002\u0002\u0f5e\u0f5f\u0003",
    "\u0002\u0002\u0002\u0f5f\u0f60\u0003\u0002\u0002\u0002\u0f60\u0f61\u0007",
    "\u015c\u0002\u0002\u0f61\u0f62\u0007\u0137\u0002\u0002\u0f62\u0f63\u0007",
    "\u030f\u0002\u0002\u0f63\u0f67\u0007\u017b\u0002\u0002\u0f64\u0f65\u0007",
    "\u0170\u0002\u0002\u0f65\u0f66\u0007\u0313\u0002\u0002\u0f66\u0f68\u0005",
    "\u03ac\u01d7\u0002\u0f67\u0f64\u0003\u0002\u0002\u0002\u0f67\u0f68\u0003",
    "\u0002\u0002\u0002\u0f68\u0f6d\u0003\u0002\u0002\u0002\u0f69\u0f6a\u0007",
    "\u0326\u0002\u0002\u0f6a\u0f6b\u0007\u000b\u0002\u0002\u0f6b\u0f6c\u0007",
    "\u0313\u0002\u0002\u0f6c\u0f6e\t\b\u0002\u0002\u0f6d\u0f69\u0003\u0002",
    "\u0002\u0002\u0f6d\u0f6e\u0003\u0002\u0002\u0002\u0f6e\u0155\u0003\u0002",
    "\u0002\u0002\u0f6f\u0f70\u0007H\u0002\u0002\u0f70\u0f71\u0007\u02a9",
    "\u0002\u0002\u0f71\u0f72\u0007\u027b\u0002\u0002\u0f72\u0fd9\u0005\u03ac",
    "\u01d7\u0002\u0f73\u0f74\u0007\u017b\u0002\u0002\u0f74\u0f7b\u0007\u0324",
    "\u0002\u0002\u0f75\u0f77\u0007\u0326\u0002\u0002\u0f76\u0f75\u0003\u0002",
    "\u0002\u0002\u0f76\u0f77\u0003\u0002\u0002\u0002\u0f77\u0f78\u0003\u0002",
    "\u0002\u0002\u0f78\u0f79\u0007\u023d\u0002\u0002\u0f79\u0f7a\u0007\u0313",
    "\u0002\u0002\u0f7a\u0f7c\u0007\u030b\u0002\u0002\u0f7b\u0f76\u0003\u0002",
    "\u0002\u0002\u0f7b\u0f7c\u0003\u0002\u0002\u0002\u0f7c\u0f83\u0003\u0002",
    "\u0002\u0002\u0f7d\u0f7f\u0007\u0326\u0002\u0002\u0f7e\u0f7d\u0003\u0002",
    "\u0002\u0002\u0f7e\u0f7f\u0003\u0002\u0002\u0002\u0f7f\u0f80\u0003\u0002",
    "\u0002\u0002\u0f80\u0f81\u0007\u023c\u0002\u0002\u0f81\u0f82\u0007\u0313",
    "\u0002\u0002\u0f82\u0f84\u0007\u030b\u0002\u0002\u0f83\u0f7e\u0003\u0002",
    "\u0002\u0002\u0f83\u0f84\u0003\u0002\u0002\u0002\u0f84\u0f8b\u0003\u0002",
    "\u0002\u0002\u0f85\u0f87\u0007\u0326\u0002\u0002\u0f86\u0f85\u0003\u0002",
    "\u0002\u0002\u0f86\u0f87\u0003\u0002\u0002\u0002\u0f87\u0f88\u0003\u0002",
    "\u0002\u0002\u0f88\u0f89\u0007\u01af\u0002\u0002\u0f89\u0f8a\u0007\u0313",
    "\u0002\u0002\u0f8a\u0f8c\u0007\u030b\u0002\u0002\u0f8b\u0f86\u0003\u0002",
    "\u0002\u0002\u0f8b\u0f8c\u0003\u0002\u0002\u0002\u0f8c\u0fb6\u0003\u0002",
    "\u0002\u0002\u0f8d\u0f8f\u0007\u0326\u0002\u0002\u0f8e\u0f8d\u0003\u0002",
    "\u0002\u0002\u0f8e\u0f8f\u0003\u0002\u0002\u0002\u0f8f\u0f90\u0003\u0002",
    "\u0002\u0002\u0f90\u0f91\u0007\u0189\u0002\u0002\u0f91\u0f92\u0007\u012c",
    "\u0002\u0002\u0f92\u0fb4\u0007\u0313\u0002\u0002\u0f93\u0fb5\u0007\u019a",
    "\u0002\u0002\u0f94\u0f9e\u0007\u0324\u0002\u0002\u0f95\u0f97\u0007\u0326",
    "\u0002\u0002\u0f96\u0f95\u0003\u0002\u0002\u0002\u0f96\u0f97\u0003\u0002",
    "\u0002\u0002\u0f97\u0f9c\u0003\u0002\u0002\u0002\u0f98\u0f9d\u0007\u030b",
    "\u0002\u0002\u0f99\u0f9a\u0007\u030b\u0002\u0002\u0f9a\u0f9b\u0007\u015c",
    "\u0002\u0002\u0f9b\u0f9d\u0007\u030b\u0002\u0002\u0f9c\u0f98\u0003\u0002",
    "\u0002\u0002\u0f9c\u0f99\u0003\u0002\u0002\u0002\u0f9d\u0f9f\u0003\u0002",
    "\u0002\u0002\u0f9e\u0f96\u0003\u0002\u0002\u0002\u0f9f\u0fa0\u0003\u0002",
    "\u0002\u0002\u0fa0\u0f9e\u0003\u0002\u0002\u0002\u0fa0\u0fa1\u0003\u0002",
    "\u0002\u0002\u0fa1\u0fa2\u0003\u0002\u0002\u0002\u0fa2\u0fb5\u0007\u0325",
    "\u0002\u0002\u0fa3\u0fa4\u0007\u0266\u0002\u0002\u0fa4\u0fa5\u0007\u0313",
    "\u0002\u0002\u0fa5\u0faf\u0007\u0324\u0002\u0002\u0fa6\u0fa8\u0007\u0326",
    "\u0002\u0002\u0fa7\u0fa6\u0003\u0002\u0002\u0002\u0fa7\u0fa8\u0003\u0002",
    "\u0002\u0002\u0fa8\u0fad\u0003\u0002\u0002\u0002\u0fa9\u0fae\u0007\u030b",
    "\u0002\u0002\u0faa\u0fab\u0007\u030b\u0002\u0002\u0fab\u0fac\u0007\u015c",
    "\u0002\u0002\u0fac\u0fae\u0007\u030b\u0002\u0002\u0fad\u0fa9\u0003\u0002",
    "\u0002\u0002\u0fad\u0faa\u0003\u0002\u0002\u0002\u0fae\u0fb0\u0003\u0002",
    "\u0002\u0002\u0faf\u0fa7\u0003\u0002\u0002\u0002\u0fb0\u0fb1\u0003\u0002",
    "\u0002\u0002\u0fb1\u0faf\u0003\u0002\u0002\u0002\u0fb1\u0fb2\u0003\u0002",
    "\u0002\u0002\u0fb2\u0fb3\u0003\u0002\u0002\u0002\u0fb3\u0fb5\u0007\u0325",
    "\u0002\u0002\u0fb4\u0f93\u0003\u0002\u0002\u0002\u0fb4\u0f94\u0003\u0002",
    "\u0002\u0002\u0fb4\u0fa3\u0003\u0002\u0002\u0002\u0fb5\u0fb7\u0003\u0002",
    "\u0002\u0002\u0fb6\u0f8e\u0003\u0002\u0002\u0002\u0fb6\u0fb7\u0003\u0002",
    "\u0002\u0002\u0fb7\u0fbe\u0003\u0002\u0002\u0002\u0fb8\u0fba\u0007\u0326",
    "\u0002\u0002\u0fb9\u0fb8\u0003\u0002\u0002\u0002\u0fb9\u0fba\u0003\u0002",
    "\u0002\u0002\u0fba\u0fbb\u0003\u0002\u0002\u0002\u0fbb\u0fbc\u0007\u0242",
    "\u0002\u0002\u0fbc\u0fbd\u0007\u0313\u0002\u0002\u0fbd\u0fbf\u0007\u030b",
    "\u0002\u0002\u0fbe\u0fb9\u0003\u0002\u0002\u0002\u0fbe\u0fbf\u0003\u0002",
    "\u0002\u0002\u0fbf\u0fc6\u0003\u0002\u0002\u0002\u0fc0\u0fc2\u0007\u0326",
    "\u0002\u0002\u0fc1\u0fc0\u0003\u0002\u0002\u0002\u0fc1\u0fc2\u0003\u0002",
    "\u0002\u0002\u0fc2\u0fc3\u0003\u0002\u0002\u0002\u0fc3\u0fc4\u0007\u0241",
    "\u0002\u0002\u0fc4\u0fc5\u0007\u0313\u0002\u0002\u0fc5\u0fc7\u0007\u030b",
    "\u0002\u0002\u0fc6\u0fc1\u0003\u0002\u0002\u0002\u0fc6\u0fc7\u0003\u0002",
    "\u0002\u0002\u0fc7\u0fce\u0003\u0002\u0002\u0002\u0fc8\u0fca\u0007\u0326",
    "\u0002\u0002\u0fc9\u0fc8\u0003\u0002\u0002\u0002\u0fc9\u0fca\u0003\u0002",
    "\u0002\u0002\u0fca\u0fcb\u0003\u0002\u0002\u0002\u0fcb\u0fcc\u0007\u0240",
    "\u0002\u0002\u0fcc\u0fcd\u0007\u0313\u0002\u0002\u0fcd\u0fcf\u0007\u030b",
    "\u0002\u0002\u0fce\u0fc9\u0003\u0002\u0002\u0002\u0fce\u0fcf\u0003\u0002",
    "\u0002\u0002\u0fcf\u0fd6\u0003\u0002\u0002\u0002\u0fd0\u0fd2\u0007\u0326",
    "\u0002\u0002\u0fd1\u0fd0\u0003\u0002\u0002\u0002\u0fd1\u0fd2\u0003\u0002",
    "\u0002\u0002\u0fd2\u0fd3\u0003\u0002\u0002\u0002\u0fd3\u0fd4\u0007\u023f",
    "\u0002\u0002\u0fd4\u0fd5\u0007\u0313\u0002\u0002\u0fd5\u0fd7\u0007\u030b",
    "\u0002\u0002\u0fd6\u0fd1\u0003\u0002\u0002\u0002\u0fd6\u0fd7\u0003\u0002",
    "\u0002\u0002\u0fd7\u0fd8\u0003\u0002\u0002\u0002\u0fd8\u0fda\u0007\u0325",
    "\u0002\u0002\u0fd9\u0f73\u0003\u0002\u0002\u0002\u0fd9\u0fda\u0003\u0002",
    "\u0002\u0002\u0fda\u0157\u0003\u0002\u0002\u0002\u0fdb\u0fdc\u0007\t",
    "\u0002\u0002\u0fdc\u0fdd\u0007\u02a9\u0002\u0002\u0fdd\u0ff3\u0007\u0090",
    "\u0002\u0002\u0fde\u0ff4\t#\u0002\u0002\u0fdf\u0fe0\u0007\u017b\u0002",
    "\u0002\u0fe0\u0fe1\u0007\u0324\u0002\u0002\u0fe1\u0fe2\u00071\u0002",
    "\u0002\u0fe2\u0fe8\u0007\u0313\u0002\u0002\u0fe3\u0fe4\u0005\u03ac\u01d7",
    "\u0002\u0fe4\u0fe5\u0007\u031f\u0002\u0002\u0fe5\u0fe6\u0005\u03ac\u01d7",
    "\u0002\u0fe6\u0fe9\u0003\u0002\u0002\u0002\u0fe7\u0fe9\u0007\u00de\u0002",
    "\u0002\u0fe8\u0fe3\u0003\u0002\u0002\u0002\u0fe8\u0fe7\u0003\u0002\u0002",
    "\u0002\u0fe9\u0fea\u0003\u0002\u0002\u0002\u0fea\u0ff4\u0007\u0325\u0002",
    "\u0002\u0feb\u0fec\u0007\u0113\u0002\u0002\u0fec\u0ff4\u0007\u0149\u0002",
    "\u0002\u0fed\u0fee\u0007\u017b\u0002\u0002\u0fee\u0fef\u0007\u0324\u0002",
    "\u0002\u0fef\u0ff0\u0007\u00c3\u0002\u0002\u0ff0\u0ff1\u0007\u0313\u0002",
    "\u0002\u0ff1\u0ff2\u0007\u030b\u0002\u0002\u0ff2\u0ff4\u0007\u0325\u0002",
    "\u0002\u0ff3\u0fde\u0003\u0002\u0002\u0002\u0ff3\u0fdf\u0003\u0002\u0002",
    "\u0002\u0ff3\u0feb\u0003\u0002\u0002\u0002\u0ff3\u0fed\u0003\u0002\u0002",
    "\u0002\u0ff4\u0159\u0003\u0002\u0002\u0002\u0ff5\u0ff6\u0007\t\u0002",
    "\u0002\u0ff6\u0ff7\u0007\u0120\u0002\u0002\u0ff7\u0fff\u0005\u03ac\u01d7",
    "\u0002\u0ff8\u0ff9\t\u0014\u0002\u0002\u0ff9\u0ffa\u0007\u00c6\u0002",
    "\u0002\u0ffa\u1000\u0005\u03ac\u01d7\u0002\u0ffb\u0ffc\u0007\u017b\u0002",
    "\u0002\u0ffc\u0ffd\u0007\u0256\u0002\u0002\u0ffd\u0ffe\u0007\u0313\u0002",
    "\u0002\u0ffe\u1000\u0005\u03ac\u01d7\u0002\u0fff\u0ff8\u0003\u0002\u0002",
    "\u0002\u0fff\u0ffb\u0003\u0002\u0002\u0002\u1000\u015b\u0003\u0002\u0002",
    "\u0002\u1001\u1002\u0007H\u0002\u0002\u1002\u1003\u0007\u0120\u0002",
    "\u0002\u1003\u1006\u0005\u03ac\u01d7\u0002\u1004\u1005\u0007\u0013\u0002",
    "\u0002\u1005\u1007\u0005\u03ac\u01d7\u0002\u1006\u1004\u0003\u0002\u0002",
    "\u0002\u1006\u1007\u0003\u0002\u0002\u0002\u1007\u015d\u0003\u0002\u0002",
    "\u0002\u1008\u1009\u0007H\u0002\u0002\u1009\u100a\u0007\u02af\u0002",
    "\u0002\u100a\u100d\u0005\u03ac\u01d7\u0002\u100b\u100c\u0007\u0013\u0002",
    "\u0002\u100c\u100e\u0005\u03ac\u01d7\u0002\u100d\u100b\u0003\u0002\u0002",
    "\u0002\u100d\u100e\u0003\u0002\u0002\u0002\u100e\u100f\u0003\u0002\u0002",
    "\u0002\u100f\u1016\u0007\u017b\u0002\u0002\u1010\u1012\u0007\u0326\u0002",
    "\u0002\u1011\u1010\u0003\u0002\u0002\u0002\u1011\u1012\u0003\u0002\u0002",
    "\u0002\u1012\u1013\u0003\u0002\u0002\u0002\u1013\u1014\u0007\u0139\u0002",
    "\u0002\u1014\u1015\u0007\u0313\u0002\u0002\u1015\u1017\u0007\u030f\u0002",
    "\u0002\u1016\u1011\u0003\u0002\u0002\u0002\u1016\u1017\u0003\u0002\u0002",
    "\u0002\u1017\u101e\u0003\u0002\u0002\u0002\u1018\u101a\u0007\u0326\u0002",
    "\u0002\u1019\u1018\u0003\u0002\u0002\u0002\u1019\u101a\u0003\u0002\u0002",
    "\u0002\u101a\u101b\u0003\u0002\u0002\u0002\u101b\u101c\u0007\u01ab\u0002",
    "\u0002\u101c\u101d\u0007\u0313\u0002\u0002\u101d\u101f\u0007\u030f\u0002",
    "\u0002\u101e\u1019\u0003\u0002\u0002\u0002\u101e\u101f\u0003\u0002\u0002",
    "\u0002\u101f\u1026\u0003\u0002\u0002\u0002\u1020\u1022\u0007\u0326\u0002",
    "\u0002\u1021\u1020\u0003\u0002\u0002\u0002\u1021\u1022\u0003\u0002\u0002",
    "\u0002\u1022\u1023\u0003\u0002\u0002\u0002\u1023\u1024\u0007\u00b2\u0002",
    "\u0002\u1024\u1025\u0007\u0313\u0002\u0002\u1025\u1027\u0007\u030b\u0002",
    "\u0002\u1026\u1021\u0003\u0002\u0002\u0002\u1026\u1027\u0003\u0002\u0002",
    "\u0002\u1027\u1029\u0003\u0002\u0002\u0002\u1028\u102a\u0007\u0326\u0002",
    "\u0002\u1029\u1028\u0003\u0002\u0002\u0002\u1029\u102a\u0003\u0002\u0002",
    "\u0002\u102a\u102b\u0003\u0002\u0002\u0002\u102b\u102c\u0007\u0185\u0002",
    "\u0002\u102c\u102d\u0007\u0313\u0002\u0002\u102d\u1032\t$\u0002\u0002",
    "\u102e\u102f\u0007\u0326\u0002\u0002\u102f\u1030\u0007\u0250\u0002\u0002",
    "\u1030\u1031\u0007\u0313\u0002\u0002\u1031\u1033\t$\u0002\u0002\u1032",
    "\u102e\u0003\u0002\u0002\u0002\u1032\u1033\u0003\u0002\u0002\u0002\u1033",
    "\u015f\u0003\u0002\u0002\u0002\u1034\u1035\u0007H\u0002\u0002\u1035",
    "\u1039\u0007\u0129\u0002\u0002\u1036\u1037\u0005\u03ac\u01d7\u0002\u1037",
    "\u1038\u0007\u031f\u0002\u0002\u1038\u103a\u0003\u0002\u0002\u0002\u1039",
    "\u1036\u0003\u0002\u0002\u0002\u1039\u103a\u0003\u0002\u0002\u0002\u103a",
    "\u103b\u0003\u0002\u0002\u0002\u103b\u103c\u0005\u03ac\u01d7\u0002\u103c",
    "\u103d\u0007\u000f\u0002\u0002\u103d\u103e\u0005\u02d8\u016d\u0002\u103e",
    "\u0161\u0003\u0002\u0002\u0002\u103f\u1040\u0007\t\u0002\u0002\u1040",
    "\u1041\u0007\u012d\u0002\u0002\u1041\u1042\u0005\u03ac\u01d7\u0002\u1042",
    "\u104c\u0007\u0161\u0002\u0002\u1043\u1049\u0007\u0269\u0002\u0002\u1044",
    "\u1049\u0007\u02f0\u0002\u0002\u1045\u1046\u0007\u0301\u0002\u0002\u1046",
    "\u1047\u0007\u012d\u0002\u0002\u1047\u1049\u0007\u01b7\u0002\u0002\u1048",
    "\u1043\u0003\u0002\u0002\u0002\u1048\u1044\u0003\u0002\u0002\u0002\u1048",
    "\u1045\u0003\u0002\u0002\u0002\u1049\u104a\u0003\u0002\u0002\u0002\u104a",
    "\u104b\u0007\u0328\u0002\u0002\u104b\u104d\u0007\u0328\u0002\u0002\u104c",
    "\u1048\u0003\u0002\u0002\u0002\u104c\u104d\u0003\u0002\u0002\u0002\u104d",
    "\u104e\u0003\u0002\u0002\u0002\u104e\u1051\u0005\u03ac\u01d7\u0002\u104f",
    "\u1050\u0007\u031f\u0002\u0002\u1050\u1052\u0005\u03ac\u01d7\u0002\u1051",
    "\u104f\u0003\u0002\u0002\u0002\u1051\u1052\u0003\u0002\u0002\u0002\u1052",
    "\u0163\u0003\u0002\u0002\u0002\u1053\u1054\u0007H\u0002\u0002\u1054",
    "\u105c\u0007\u012d\u0002\u0002\u1055\u105d\u0005\u03ac\u01d7\u0002\u1056",
    "\u1057\u0007\u0013\u0002\u0002\u1057\u105d\u0005\u03ac\u01d7\u0002\u1058",
    "\u1059\u0005\u03ac\u01d7\u0002\u1059\u105a\u0007\u0013\u0002\u0002\u105a",
    "\u105b\u0005\u03ac\u01d7\u0002\u105b\u105d\u0003\u0002\u0002\u0002\u105c",
    "\u1055\u0003\u0002\u0002\u0002\u105c\u1056\u0003\u0002\u0002\u0002\u105c",
    "\u1058\u0003\u0002\u0002\u0002\u105d\u107a\u0003\u0002\u0002\u0002\u105e",
    "\u1079\u0005\u01ea\u00f6\u0002\u105f\u1079\u0005\u01ee\u00f8\u0002\u1060",
    "\u1061\t%\u0002\u0002\u1061\u1062\t&\u0002\u0002\u1062\u1066\u0007\u00e4",
    "\u0002\u0002\u1063\u1064\u0007\u012d\u0002\u0002\u1064\u1065\u0007\u0328",
    "\u0002\u0002\u1065\u1067\u0007\u0328\u0002\u0002\u1066\u1063\u0003\u0002",
    "\u0002\u0002\u1066\u1067\u0003\u0002\u0002\u0002\u1067\u1068\u0003\u0002",
    "\u0002\u0002\u1068\u1069\u0005\u03ac\u01d7\u0002\u1069\u106a\u0007\u015c",
    "\u0002\u0002\u106a\u106b\u0005\u03ac\u01d7\u0002\u106b\u1079\u0003\u0002",
    "\u0002\u0002\u106c\u106d\u0007\u011c\u0002\u0002\u106d\u106e\t&\u0002",
    "\u0002\u106e\u1072\u0007\u00e4\u0002\u0002\u106f\u1070\u0007\u012d\u0002",
    "\u0002\u1070\u1071\u0007\u0328\u0002\u0002\u1071\u1073\u0007\u0328\u0002",
    "\u0002\u1072\u106f\u0003\u0002\u0002\u0002\u1072\u1073\u0003\u0002\u0002",
    "\u0002\u1073\u1074\u0003\u0002\u0002\u0002\u1074\u1075\u0005\u03ac\u01d7",
    "\u0002\u1075\u1076\u0007\u008b\u0002\u0002\u1076\u1077\u0005\u03ac\u01d7",
    "\u0002\u1077\u1079\u0003\u0002\u0002\u0002\u1078\u105e\u0003\u0002\u0002",
    "\u0002\u1078\u105f\u0003\u0002\u0002\u0002\u1078\u1060\u0003\u0002\u0002",
    "\u0002\u1078\u106c\u0003\u0002\u0002\u0002\u1079\u107c\u0003\u0002\u0002",
    "\u0002\u107a\u1078\u0003\u0002\u0002\u0002\u107a\u107b\u0003\u0002\u0002",
    "\u0002\u107b\u0165\u0003\u0002\u0002\u0002\u107c\u107a\u0003\u0002\u0002",
    "\u0002\u107d\u107e\u0007H\u0002\u0002\u107e\u107f\u0007\u012d\u0002",
    "\u0002\u107f\u1082\u0005\u03ac\u01d7\u0002\u1080\u1081\u0007\u0013\u0002",
    "\u0002\u1081\u1083\u0005\u03ac\u01d7\u0002\u1082\u1080\u0003\u0002\u0002",
    "\u0002\u1082\u1083\u0003\u0002\u0002\u0002\u1083\u0167\u0003\u0002\u0002",
    "\u0002\u1084\u1085\u0007\t\u0002\u0002\u1085\u1086\u0007\u012d\u0002",
    "\u0002\u1086\u1087\u0005\u03ac\u01d7\u0002\u1087\u108b\u0007\u0161\u0002",
    "\u0002\u1088\u1089\u0007\u0269\u0002\u0002\u1089\u108a\u0007\u0328\u0002",
    "\u0002\u108a\u108c\u0007\u0328\u0002\u0002\u108b\u1088\u0003\u0002\u0002",
    "\u0002\u108b\u108c\u0003\u0002\u0002\u0002\u108c\u108d\u0003\u0002\u0002",
    "\u0002\u108d\u1090\u0005\u03ac\u01d7\u0002\u108e\u108f\u0007\u031f\u0002",
    "\u0002\u108f\u1091\u0007\u030c\u0002\u0002\u1090\u108e\u0003\u0002\u0002",
    "\u0002\u1090\u1091\u0003\u0002\u0002\u0002\u1091\u0169\u0003\u0002\u0002",
    "\u0002\u1092\u1093\u0007H\u0002\u0002\u1093\u1094\u0007\u02b9\u0002",
    "\u0002\u1094\u1095\u0007\u0287\u0002\u0002\u1095\u1096\u0007\u022f\u0002",
    "\u0002\u1096\u109e\u0005\u03ac\u01d7\u0002\u1097\u109b\u0007\u008b\u0002",
    "\u0002\u1098\u1099\u0005\u03ac\u01d7\u0002\u1099\u109a\u0007\u031f\u0002",
    "\u0002\u109a\u109c\u0003\u0002\u0002\u0002\u109b\u1098\u0003\u0002\u0002",
    "\u0002\u109b\u109c\u0003\u0002\u0002\u0002\u109c\u109d\u0003\u0002\u0002",
    "\u0002\u109d\u109f\u0005\u03ac\u01d7\u0002\u109e\u1097\u0003\u0002\u0002",
    "\u0002\u109e\u109f\u0003\u0002\u0002\u0002\u109f\u10a2\u0003\u0002\u0002",
    "\u0002\u10a0\u10a1\u0007\u0013\u0002\u0002\u10a1\u10a3\u0005\u03ac\u01d7",
    "\u0002\u10a2\u10a0\u0003\u0002\u0002\u0002\u10a2\u10a3\u0003\u0002\u0002",
    "\u0002\u10a3\u016b\u0003\u0002\u0002\u0002\u10a4\u10a5\u0007H\u0002",
    "\u0002\u10a5\u10a6\u0007\u012f\u0002\u0002\u10a6\u10aa\u0007\u00fc\u0002",
    "\u0002\u10a7\u10a8\u0005\u03ac\u01d7\u0002\u10a8\u10a9\u0007\u031f\u0002",
    "\u0002\u10a9\u10ab\u0003\u0002\u0002\u0002\u10aa\u10a7\u0003\u0002\u0002",
    "\u0002\u10aa\u10ab\u0003\u0002\u0002\u0002\u10ab\u10ac\u0003\u0002\u0002",
    "\u0002\u10ac\u10d5\u0005\u03ac\u01d7\u0002\u10ad\u10af\u0007\u0326\u0002",
    "\u0002\u10ae\u10ad\u0003\u0002\u0002\u0002\u10ae\u10af\u0003\u0002\u0002",
    "\u0002\u10af\u10b0\u0003\u0002\u0002\u0002\u10b0\u10b2\u0007\u0003\u0002",
    "\u0002\u10b1\u10b3\t\'\u0002\u0002\u10b2\u10b1\u0003\u0002\u0002\u0002",
    "\u10b2\u10b3\u0003\u0002\u0002\u0002\u10b3\u10b4\u0003\u0002\u0002\u0002",
    "\u10b4\u10b5\u0007\u00fe\u0002\u0002\u10b5\u10b6\u0005\u03ac\u01d7\u0002",
    "\u10b6\u10b7\u0007\u031f\u0002\u0002\u10b7\u10b8\u0005\u03ac\u01d7\u0002",
    "\u10b8\u10bd\u0007\u0324\u0002\u0002\u10b9\u10bb\u0007\u0326\u0002\u0002",
    "\u10ba\u10b9\u0003\u0002\u0002\u0002\u10ba\u10bb\u0003\u0002\u0002\u0002",
    "\u10bb\u10bc\u0003\u0002\u0002\u0002\u10bc\u10be\u0005\u03ac\u01d7\u0002",
    "\u10bd\u10ba\u0003\u0002\u0002\u0002\u10be\u10bf\u0003\u0002\u0002\u0002",
    "\u10bf\u10bd\u0003\u0002\u0002\u0002\u10bf\u10c0\u0003\u0002\u0002\u0002",
    "\u10c0\u10c1\u0003\u0002\u0002\u0002\u10c1\u10c2\u0007\u0325\u0002\u0002",
    "\u10c2\u10c3\u0007\u00e4\u0002\u0002\u10c3\u10c4\u0005\u03ac\u01d7\u0002",
    "\u10c4\u10c5\u0007\u031f\u0002\u0002\u10c5\u10d2\u0005\u03ac\u01d7\u0002",
    "\u10c6\u10c8\u0007\u0326\u0002\u0002\u10c7\u10c6\u0003\u0002\u0002\u0002",
    "\u10c7\u10c8\u0003\u0002\u0002\u0002\u10c8\u10c9\u0003\u0002\u0002\u0002",
    "\u10c9\u10ca\u0007\u018a\u0002\u0002\u10ca\u10d1\t(\u0002\u0002\u10cb",
    "\u10cd\u0007\u0326\u0002\u0002\u10cc\u10cb\u0003\u0002\u0002\u0002\u10cc",
    "\u10cd\u0003\u0002\u0002\u0002\u10cd\u10ce\u0003\u0002\u0002\u0002\u10ce",
    "\u10cf\u0007\u001a\u0002\u0002\u10cf\u10d1\t)\u0002\u0002\u10d0\u10c7",
    "\u0003\u0002\u0002\u0002\u10d0\u10cc\u0003\u0002\u0002\u0002\u10d1\u10d4",
    "\u0003\u0002\u0002\u0002\u10d2\u10d0\u0003\u0002\u0002\u0002\u10d2\u10d3",
    "\u0003\u0002\u0002\u0002\u10d3\u10d6\u0003\u0002\u0002\u0002\u10d4\u10d2",
    "\u0003\u0002\u0002\u0002\u10d5\u10ae\u0003\u0002\u0002\u0002\u10d6\u10d7",
    "\u0003\u0002\u0002\u0002\u10d7\u10d5\u0003\u0002\u0002\u0002\u10d7\u10d8",
    "\u0003\u0002\u0002\u0002\u10d8\u10e3\u0003\u0002\u0002\u0002\u10d9\u10da",
    "\u0007\u017b\u0002\u0002\u10da\u10db\u0007\u0324\u0002\u0002\u10db\u10dc",
    "\u0007\u014a\u0002\u0002\u10dc\u10dd\u0007\u0313\u0002\u0002\u10dd\u10e0",
    "\t\b\u0002\u0002\u10de\u10df\u0007\u02b5\u0002\u0002\u10df\u10e1\t\b",
    "\u0002\u0002\u10e0\u10de\u0003\u0002\u0002\u0002\u10e0\u10e1\u0003\u0002",
    "\u0002\u0002\u10e1\u10e2\u0003\u0002\u0002\u0002\u10e2\u10e4\u0007\u0325",
    "\u0002\u0002\u10e3\u10d9\u0003\u0002\u0002\u0002\u10e3\u10e4\u0003\u0002",
    "\u0002\u0002\u10e4\u10e8\u0003\u0002\u0002\u0002\u10e5\u10e6\u0007\u00db",
    "\u0002\u0002\u10e6\u10e7\u0007\u0085\u0002\u0002\u10e7\u10e9\u0007\u0111",
    "\u0002\u0002\u10e8\u10e5\u0003\u0002\u0002\u0002\u10e8\u10e9\u0003\u0002",
    "\u0002\u0002\u10e9\u016d\u0003\u0002\u0002\u0002\u10ea\u10eb\u0007\t",
    "\u0002\u0002\u10eb\u10ef\u0007\u0135\u0002\u0002\u10ec\u10ed\u0005\u03ac",
    "\u01d7\u0002\u10ed\u10ee\u0007\u031f\u0002\u0002\u10ee\u10f0\u0003\u0002",
    "\u0002\u0002\u10ef\u10ec\u0003\u0002\u0002\u0002\u10ef\u10f0\u0003\u0002",
    "\u0002\u0002\u10f0\u10f1\u0003\u0002\u0002\u0002\u10f1\u10f7\u0005\u03ac",
    "\u01d7\u0002\u10f2\u10f5\u0007\u0114\u0002\u0002\u10f3\u10f4\u0007\u017b",
    "\u0002\u0002\u10f4\u10f6\u0007\u030b\u0002\u0002\u10f5\u10f3\u0003\u0002",
    "\u0002\u0002\u10f5\u10f6\u0003\u0002\u0002\u0002\u10f6\u10f8\u0003\u0002",
    "\u0002\u0002\u10f7\u10f2\u0003\u0002\u0002\u0002\u10f7\u10f8\u0003\u0002",
    "\u0002\u0002\u10f8\u10fc\u0003\u0002\u0002\u0002\u10f9\u10fa\u0007\u009c",
    "\u0002\u0002\u10fa\u10fb\u0007%\u0002\u0002\u10fb\u10fd\u0007\u030b",
    "\u0002\u0002\u10fc\u10f9\u0003\u0002\u0002\u0002\u10fc\u10fd\u0003\u0002",
    "\u0002\u0002\u10fd\u1102\u0003\u0002\u0002\u0002\u10fe\u10ff\u0007\u00cb",
    "\u0002\u0002\u10ff\u1103\u0007\u030b\u0002\u0002\u1100\u1101\u0007\u0261",
    "\u0002\u0002\u1101\u1103\u0007\u00cb\u0002\u0002\u1102\u10fe\u0003\u0002",
    "\u0002\u0002\u1102\u1100\u0003\u0002\u0002\u0002\u1102\u1103\u0003\u0002",
    "\u0002\u0002\u1103\u1108\u0003\u0002\u0002\u0002\u1104\u1105\u0007\u00bf",
    "\u0002\u0002\u1105\u1109\u0007\u030b\u0002\u0002\u1106\u1107\u0007\u0261",
    "\u0002\u0002\u1107\u1109\u0007\u00bf\u0002\u0002\u1108\u1104\u0003\u0002",
    "\u0002\u0002\u1108\u1106\u0003\u0002\u0002\u0002\u1108\u1109\u0003\u0002",
    "\u0002\u0002\u1109\u110d\u0003\u0002\u0002\u0002\u110a\u110e\u0007P",
    "\u0002\u0002\u110b\u110c\u0007\u0261\u0002\u0002\u110c\u110e\u0007P",
    "\u0002\u0002\u110d\u110a\u0003\u0002\u0002\u0002\u110d\u110b\u0003\u0002",
    "\u0002\u0002\u110d\u110e\u0003\u0002\u0002\u0002\u110e\u1113\u0003\u0002",
    "\u0002\u0002\u110f\u1110\u0007&\u0002\u0002\u1110\u1114\u0007\u030b",
    "\u0002\u0002\u1111\u1112\u0007\u0261\u0002\u0002\u1112\u1114\u0007&",
    "\u0002\u0002\u1113\u110f\u0003\u0002\u0002\u0002\u1113\u1111\u0003\u0002",
    "\u0002\u0002\u1113\u1114\u0003\u0002\u0002\u0002\u1114\u016f\u0003\u0002",
    "\u0002\u0002\u1115\u1116\u0007H\u0002\u0002\u1116\u111a\u0007\u0135",
    "\u0002\u0002\u1117\u1118\u0005\u03ac\u01d7\u0002\u1118\u1119\u0007\u031f",
    "\u0002\u0002\u1119\u111b\u0003\u0002\u0002\u0002\u111a\u1117\u0003\u0002",
    "\u0002\u0002\u111a\u111b\u0003\u0002\u0002\u0002\u111b\u111c\u0003\u0002",
    "\u0002\u0002\u111c\u111f\u0005\u03ac\u01d7\u0002\u111d\u111e\u0007\u000f",
    "\u0002\u0002\u111e\u1120\u0005\u03a4\u01d3\u0002\u111f\u111d\u0003\u0002",
    "\u0002\u0002\u111f\u1120\u0003\u0002\u0002\u0002\u1120\u1124\u0003\u0002",
    "\u0002\u0002\u1121\u1122\u0007\u014c\u0002\u0002\u1122\u1123\u0007\u017b",
    "\u0002\u0002\u1123\u1125\u0007\u030b\u0002\u0002\u1124\u1121\u0003\u0002",
    "\u0002\u0002\u1124\u1125\u0003\u0002\u0002\u0002\u1125\u112c\u0003\u0002",
    "\u0002\u0002\u1126\u1127\u0007\u009c\u0002\u0002\u1127\u1129\u0007%",
    "\u0002\u0002\u1128\u112a\u0007\u032d\u0002\u0002\u1129\u1128\u0003\u0002",
    "\u0002\u0002\u1129\u112a\u0003\u0002\u0002\u0002\u112a\u112b\u0003\u0002",
    "\u0002\u0002\u112b\u112d\u0007\u030b\u0002\u0002\u112c\u1126\u0003\u0002",
    "\u0002\u0002\u112c\u112d\u0003\u0002\u0002\u0002\u112d\u1134\u0003\u0002",
    "\u0002\u0002\u112e\u1130\u0007\u00cb\u0002\u0002\u112f\u1131\u0007\u030b",
    "\u0002\u0002\u1130\u112f\u0003\u0002\u0002\u0002\u1130\u1131\u0003\u0002",
    "\u0002\u0002\u1131\u1135\u0003\u0002\u0002\u0002\u1132\u1133\u0007\u0261",
    "\u0002\u0002\u1133\u1135\u0007\u00cb\u0002\u0002\u1134\u112e\u0003\u0002",
    "\u0002\u0002\u1134\u1132\u0003\u0002\u0002\u0002\u1134\u1135\u0003\u0002",
    "\u0002\u0002\u1135\u113c\u0003\u0002\u0002\u0002\u1136\u1138\u0007\u00bf",
    "\u0002\u0002\u1137\u1139\u0007\u030b\u0002\u0002\u1138\u1137\u0003\u0002",
    "\u0002\u0002\u1138\u1139\u0003\u0002\u0002\u0002\u1139\u113d\u0003\u0002",
    "\u0002\u0002\u113a\u113b\u0007\u0261\u0002\u0002\u113b\u113d\u0007\u00bf",
    "\u0002\u0002\u113c\u1136\u0003\u0002\u0002\u0002\u113c\u113a\u0003\u0002",
    "\u0002\u0002\u113c\u113d\u0003\u0002\u0002\u0002\u113d\u1141\u0003\u0002",
    "\u0002\u0002\u113e\u1142\u0007P\u0002\u0002\u113f\u1140\u0007\u0261",
    "\u0002\u0002\u1140\u1142\u0007P\u0002\u0002\u1141\u113e\u0003\u0002",
    "\u0002\u0002\u1141\u113f\u0003\u0002\u0002\u0002\u1141\u1142\u0003\u0002",
    "\u0002\u0002\u1142\u1149\u0003\u0002\u0002\u0002\u1143\u1145\u0007&",
    "\u0002\u0002\u1144\u1146\u0007\u030b\u0002\u0002\u1145\u1144\u0003\u0002",
    "\u0002\u0002\u1145\u1146\u0003\u0002\u0002\u0002\u1146\u114a\u0003\u0002",
    "\u0002\u0002\u1147\u1148\u0007\u0261\u0002\u0002\u1148\u114a\u0007&",
    "\u0002\u0002\u1149\u1143\u0003\u0002\u0002\u0002\u1149\u1147\u0003\u0002",
    "\u0002\u0002\u1149\u114a\u0003\u0002\u0002\u0002\u114a\u0171\u0003\u0002",
    "\u0002\u0002\u114b\u114c\u0007\t\u0002\u0002\u114c\u114d\u0007\u0136",
    "\u0002\u0002\u114d\u114e\u0007\u0198\u0002\u0002\u114e\u11d2\u0005\u03ac",
    "\u01d7\u0002\u114f\u117c\u0007\u015c\u0002\u0002\u1150\u1151\u0007\u0081",
    "\u0002\u0002\u1151\u1176\u0007\u0324\u0002\u0002\u1152\u1154\u0007\u0326",
    "\u0002\u0002\u1153\u1152\u0003\u0002\u0002\u0002\u1153\u1154\u0003\u0002",
    "\u0002\u0002\u1154\u1155\u0003\u0002\u0002\u0002\u1155\u1156\u0007\u01fc",
    "\u0002\u0002\u1156\u1157\u0007\u0313\u0002\u0002\u1157\u1175\u0007\u030f",
    "\u0002\u0002\u1158\u115a\u0007\u0326\u0002\u0002\u1159\u1158\u0003\u0002",
    "\u0002\u0002\u1159\u115a\u0003\u0002\u0002\u0002\u115a\u115b\u0003\u0002",
    "\u0002\u0002\u115b\u115c\u0007\u0249\u0002\u0002\u115c\u1160\u0007\u0313",
    "\u0002\u0002\u115d\u115e\u0007\u030b\u0002\u0002\u115e\u1161\t*\u0002",
    "\u0002\u115f\u1161\u0007\u02f5\u0002\u0002\u1160\u115d\u0003\u0002\u0002",
    "\u0002\u1160\u115f\u0003\u0002\u0002\u0002\u1161\u1175\u0003\u0002\u0002",
    "\u0002\u1162\u1164\u0007\u0326\u0002\u0002\u1163\u1162\u0003\u0002\u0002",
    "\u0002\u1163\u1164\u0003\u0002\u0002\u0002\u1164\u1165\u0003\u0002\u0002",
    "\u0002\u1165\u1166\u0007\u0245\u0002\u0002\u1166\u1167\u0007\u0313\u0002",
    "\u0002\u1167\u1175\t+\u0002\u0002\u1168\u116a\u0007\u0326\u0002\u0002",
    "\u1169\u1168\u0003\u0002\u0002\u0002\u1169\u116a\u0003\u0002\u0002\u0002",
    "\u116a\u116b\u0003\u0002\u0002\u0002\u116b\u116c\u0007\u023e\u0002\u0002",
    "\u116c\u116d\u0007\u0313\u0002\u0002\u116d\u1175\u0007\u030b\u0002\u0002",
    "\u116e\u1170\u0007\u0326\u0002\u0002\u116f\u116e\u0003\u0002\u0002\u0002",
    "\u116f\u1170\u0003\u0002\u0002\u0002\u1170\u1171\u0003\u0002\u0002\u0002",
    "\u1171\u1172\u0007\u02a8\u0002\u0002\u1172\u1173\u0007\u0313\u0002\u0002",
    "\u1173\u1175\t\b\u0002\u0002\u1174\u1153\u0003\u0002\u0002\u0002\u1174",
    "\u1159\u0003\u0002\u0002\u0002\u1174\u1163\u0003\u0002\u0002\u0002\u1174",
    "\u1169\u0003\u0002\u0002\u0002\u1174\u116f\u0003\u0002\u0002\u0002\u1175",
    "\u1178\u0003\u0002\u0002\u0002\u1176\u1174\u0003\u0002\u0002\u0002\u1176",
    "\u1177\u0003\u0002\u0002\u0002\u1177\u1179\u0003\u0002\u0002\u0002\u1178",
    "\u1176\u0003\u0002\u0002\u0002\u1179\u117d\u0007\u0325\u0002\u0002\u117a",
    "\u117d\u0007\u0194\u0002\u0002\u117b\u117d\u0007\u02bf\u0002\u0002\u117c",
    "\u1150\u0003\u0002\u0002\u0002\u117c\u117a\u0003\u0002\u0002\u0002\u117c",
    "\u117b\u0003\u0002\u0002\u0002\u117d\u117f\u0003\u0002\u0002\u0002\u117e",
    "\u114f\u0003\u0002\u0002\u0002\u117e\u117f\u0003\u0002\u0002\u0002\u117f",
    "\u119a\u0003\u0002\u0002\u0002\u1180\u1181\u0007\u017b\u0002\u0002\u1181",
    "\u1196\u0007\u0324\u0002\u0002\u1182\u1184\u0007\u0326\u0002\u0002\u1183",
    "\u1182\u0003\u0002\u0002\u0002\u1183\u1184\u0003\u0002\u0002\u0002\u1184",
    "\u1185\u0003\u0002\u0002\u0002\u1185\u1186\u0007\u028b\u0002\u0002\u1186",
    "\u1187\u0007\u0313\u0002\u0002\u1187\u1195\u0007\u030b\u0002\u0002\u1188",
    "\u118a\u0007\u0326\u0002\u0002\u1189\u1188\u0003\u0002\u0002\u0002\u1189",
    "\u118a\u0003\u0002\u0002\u0002\u118a\u118b\u0003\u0002\u0002\u0002\u118b",
    "\u118c\u0007\u00e5\u0002\u0002\u118c\u118d\u0007\u0313\u0002\u0002\u118d",
    "\u1195\t,\u0002\u0002\u118e\u1190\u0007\u0326\u0002\u0002\u118f\u118e",
    "\u0003\u0002\u0002\u0002\u118f\u1190\u0003\u0002\u0002\u0002\u1190\u1191",
    "\u0003\u0002\u0002\u0002\u1191\u1192\u0007\u014a\u0002\u0002\u1192\u1193",
    "\u0007\u0313\u0002\u0002\u1193\u1195\t\b\u0002\u0002\u1194\u1183\u0003",
    "\u0002\u0002\u0002\u1194\u1189\u0003\u0002\u0002\u0002\u1194\u118f\u0003",
    "\u0002\u0002\u0002\u1195\u1198\u0003\u0002\u0002\u0002\u1196\u1194\u0003",
    "\u0002\u0002\u0002\u1196\u1197\u0003\u0002\u0002\u0002\u1197\u1199\u0003",
    "\u0002\u0002\u0002\u1198\u1196\u0003\u0002\u0002\u0002\u1199\u119b\u0007",
    "\u0325\u0002\u0002\u119a\u1180\u0003\u0002\u0002\u0002\u119a\u119b\u0003",
    "\u0002\u0002\u0002\u119b\u11ca\u0003\u0002\u0002\u0002\u119c\u11c8\u0007",
    "\u0178\u0002\u0002\u119d\u119f\u0007\u0326\u0002\u0002\u119e\u119d\u0003",
    "\u0002\u0002\u0002\u119e\u119f\u0003\u0002\u0002\u0002\u119f\u11a1\u0003",
    "\u0002\u0002\u0002\u11a0\u11a2\u0007\u00db\u0002\u0002\u11a1\u11a0\u0003",
    "\u0002\u0002\u0002\u11a1\u11a2\u0003\u0002\u0002\u0002\u11a2\u11a3\u0003",
    "\u0002\u0002\u0002\u11a3\u11af\u0005\u03ac\u01d7\u0002\u11a4\u11b0\u0007",
    "\u0313\u0002\u0002\u11a5\u11a6\u0007\u0315\u0002\u0002\u11a6\u11b0\u0007",
    "\u0314\u0002\u0002\u11a7\u11a8\u0007\u0316\u0002\u0002\u11a8\u11b0\u0007",
    "\u0313\u0002\u0002\u11a9\u11b0\u0007\u0314\u0002\u0002\u11aa\u11ab\u0007",
    "\u0314\u0002\u0002\u11ab\u11b0\u0007\u0313\u0002\u0002\u11ac\u11b0\u0007",
    "\u0315\u0002\u0002\u11ad\u11ae\u0007\u0315\u0002\u0002\u11ae\u11b0\u0007",
    "\u0313\u0002\u0002\u11af\u11a4\u0003\u0002\u0002\u0002\u11af\u11a5\u0003",
    "\u0002\u0002\u0002\u11af\u11a7\u0003\u0002\u0002\u0002\u11af\u11a9\u0003",
    "\u0002\u0002\u0002\u11af\u11aa\u0003\u0002\u0002\u0002\u11af\u11ac\u0003",
    "\u0002\u0002\u0002\u11af\u11ad\u0003\u0002\u0002\u0002\u11b0\u11b1\u0003",
    "\u0002\u0002\u0002\u11b1\u11b2\t\u0016\u0002\u0002\u11b2\u11c9\u0003",
    "\u0002\u0002\u0002\u11b3\u11b5\u0007\u0326\u0002\u0002\u11b4\u11b3\u0003",
    "\u0002\u0002\u0002\u11b4\u11b5\u0003\u0002\u0002\u0002\u11b5\u11b6\u0003",
    "\u0002\u0002\u0002\u11b6\u11b8\t\u001b\u0002\u0002\u11b7\u11b9\u0007",
    "\u00db\u0002\u0002\u11b8\u11b7\u0003\u0002\u0002\u0002\u11b8\u11b9\u0003",
    "\u0002\u0002\u0002\u11b9\u11c5\u0003\u0002\u0002\u0002\u11ba\u11c6\u0007",
    "\u0313\u0002\u0002\u11bb\u11bc\u0007\u0315\u0002\u0002\u11bc\u11c6\u0007",
    "\u0314\u0002\u0002\u11bd\u11be\u0007\u0316\u0002\u0002\u11be\u11c6\u0007",
    "\u0313\u0002\u0002\u11bf\u11c6\u0007\u0314\u0002\u0002\u11c0\u11c1\u0007",
    "\u0314\u0002\u0002\u11c1\u11c6\u0007\u0313\u0002\u0002\u11c2\u11c6\u0007",
    "\u0315\u0002\u0002\u11c3\u11c4\u0007\u0315\u0002\u0002\u11c4\u11c6\u0007",
    "\u0313\u0002\u0002\u11c5\u11ba\u0003\u0002\u0002\u0002\u11c5\u11bb\u0003",
    "\u0002\u0002\u0002\u11c5\u11bd\u0003\u0002\u0002\u0002\u11c5\u11bf\u0003",
    "\u0002\u0002\u0002\u11c5\u11c0\u0003\u0002\u0002\u0002\u11c5\u11c2\u0003",
    "\u0002\u0002\u0002\u11c5\u11c3\u0003\u0002\u0002\u0002\u11c6\u11c7\u0003",
    "\u0002\u0002\u0002\u11c7\u11c9\t\u0016\u0002\u0002\u11c8\u119e\u0003",
    "\u0002\u0002\u0002\u11c8\u11b4\u0003\u0002\u0002\u0002\u11c9\u11cb\u0003",
    "\u0002\u0002\u0002\u11ca\u119c\u0003\u0002\u0002\u0002\u11ca\u11cb\u0003",
    "\u0002\u0002\u0002\u11cb\u11d3\u0003\u0002\u0002\u0002\u11cc\u11cd\u0007",
    "\u029e\u0002\u0002\u11cd\u11d3\u0007\u0178\u0002\u0002\u11ce\u11cf\u0007",
    "\u0253\u0002\u0002\u11cf\u11d0\u0007\u0256\u0002\u0002\u11d0\u11d1\u0007",
    "\u0313\u0002\u0002\u11d1\u11d3\u0005\u03ac\u01d7\u0002\u11d2\u117e\u0003",
    "\u0002\u0002\u0002\u11d2\u11cc\u0003\u0002\u0002\u0002\u11d2\u11ce\u0003",
    "\u0002\u0002\u0002\u11d3\u0173\u0003\u0002\u0002\u0002\u11d4\u11d5\u0007",
    "H\u0002\u0002\u11d5\u11d6\u0007\u0136\u0002\u0002\u11d6\u11d7\u0007",
    "\u0198\u0002\u0002\u11d7\u1261\u0005\u03ac\u01d7\u0002\u11d8\u1205\u0007",
    "\u015c\u0002\u0002\u11d9\u11da\u0007\u0081\u0002\u0002\u11da\u11ff\u0007",
    "\u0324\u0002\u0002\u11db\u11dd\u0007\u0326\u0002\u0002\u11dc\u11db\u0003",
    "\u0002\u0002\u0002\u11dc\u11dd\u0003\u0002\u0002\u0002\u11dd\u11de\u0003",
    "\u0002\u0002\u0002\u11de\u11df\u0007\u01fc\u0002\u0002\u11df\u11e0\u0007",
    "\u0313\u0002\u0002\u11e0\u11fe\u0007\u030f\u0002\u0002\u11e1\u11e3\u0007",
    "\u0326\u0002\u0002\u11e2\u11e1\u0003\u0002\u0002\u0002\u11e2\u11e3\u0003",
    "\u0002\u0002\u0002\u11e3\u11e4\u0003\u0002\u0002\u0002\u11e4\u11e5\u0007",
    "\u0249\u0002\u0002\u11e5\u11e9\u0007\u0313\u0002\u0002\u11e6\u11e7\u0007",
    "\u030b\u0002\u0002\u11e7\u11ea\t*\u0002\u0002\u11e8\u11ea\u0007\u02f5",
    "\u0002\u0002\u11e9\u11e6\u0003\u0002\u0002\u0002\u11e9\u11e8\u0003\u0002",
    "\u0002\u0002\u11ea\u11fe\u0003\u0002\u0002\u0002\u11eb\u11ed\u0007\u0326",
    "\u0002\u0002\u11ec\u11eb\u0003\u0002\u0002\u0002\u11ec\u11ed\u0003\u0002",
    "\u0002\u0002\u11ed\u11ee\u0003\u0002\u0002\u0002\u11ee\u11ef\u0007\u0245",
    "\u0002\u0002\u11ef\u11f0\u0007\u0313\u0002\u0002\u11f0\u11fe\t+\u0002",
    "\u0002\u11f1\u11f3\u0007\u0326\u0002\u0002\u11f2\u11f1\u0003\u0002\u0002",
    "\u0002\u11f2\u11f3\u0003\u0002\u0002\u0002\u11f3\u11f4\u0003\u0002\u0002",
    "\u0002\u11f4\u11f5\u0007\u023e\u0002\u0002\u11f5\u11f6\u0007\u0313\u0002",
    "\u0002\u11f6\u11fe\u0007\u030b\u0002\u0002\u11f7\u11f9\u0007\u0326\u0002",
    "\u0002\u11f8\u11f7\u0003\u0002\u0002\u0002\u11f8\u11f9\u0003\u0002\u0002",
    "\u0002\u11f9\u11fa\u0003\u0002\u0002\u0002\u11fa\u11fb\u0007\u02a8\u0002",
    "\u0002\u11fb\u11fc\u0007\u0313\u0002\u0002\u11fc\u11fe\t\b\u0002\u0002",
    "\u11fd\u11dc\u0003\u0002\u0002\u0002\u11fd\u11e2\u0003\u0002\u0002\u0002",
    "\u11fd\u11ec\u0003\u0002\u0002\u0002\u11fd\u11f2\u0003\u0002\u0002\u0002",
    "\u11fd\u11f8\u0003\u0002\u0002\u0002\u11fe\u1201\u0003\u0002\u0002\u0002",
    "\u11ff\u11fd\u0003\u0002\u0002\u0002\u11ff\u1200\u0003\u0002\u0002\u0002",
    "\u1200\u1202\u0003\u0002\u0002\u0002\u1201\u11ff\u0003\u0002\u0002\u0002",
    "\u1202\u1206\u0007\u0325\u0002\u0002\u1203\u1206\u0007\u0194\u0002\u0002",
    "\u1204\u1206\u0007\u02bf\u0002\u0002\u1205\u11d9\u0003\u0002\u0002\u0002",
    "\u1205\u1203\u0003\u0002\u0002\u0002\u1205\u1204\u0003\u0002\u0002\u0002",
    "\u1206\u1208\u0003\u0002\u0002\u0002\u1207\u11d8\u0003\u0002\u0002\u0002",
    "\u1207\u1208\u0003\u0002\u0002\u0002\u1208\u1229\u0003\u0002\u0002\u0002",
    "\u1209\u120a\u0007\u017b\u0002\u0002\u120a\u1225\u0007\u0324\u0002\u0002",
    "\u120b\u120d\u0007\u0326\u0002\u0002\u120c\u120b\u0003\u0002\u0002\u0002",
    "\u120c\u120d\u0003\u0002\u0002\u0002\u120d\u120e\u0003\u0002\u0002\u0002",
    "\u120e\u120f\u0007\u028b\u0002\u0002\u120f\u1210\u0007\u0313\u0002\u0002",
    "\u1210\u1224\u0007\u030b\u0002\u0002\u1211\u1213\u0007\u0326\u0002\u0002",
    "\u1212\u1211\u0003\u0002\u0002\u0002\u1212\u1213\u0003\u0002\u0002\u0002",
    "\u1213\u1214\u0003\u0002\u0002\u0002\u1214\u1215\u0007\u00e5\u0002\u0002",
    "\u1215\u1216\u0007\u0313\u0002\u0002\u1216\u1224\t,\u0002\u0002\u1217",
    "\u1219\u0007\u0326\u0002\u0002\u1218\u1217\u0003\u0002\u0002\u0002\u1218",
    "\u1219\u0003\u0002\u0002\u0002\u1219\u121a\u0003\u0002\u0002\u0002\u121a",
    "\u121b\u0007\u014a\u0002\u0002\u121b\u121c\u0007\u0313\u0002\u0002\u121c",
    "\u1224\t\b\u0002\u0002\u121d\u121f\u0007\u0326\u0002\u0002\u121e\u121d",
    "\u0003\u0002\u0002\u0002\u121e\u121f\u0003\u0002\u0002\u0002\u121f\u1220",
    "\u0003\u0002\u0002\u0002\u1220\u1221\u0007\u0199\u0002\u0002\u1221\u1222",
    "\u0007\u0313\u0002\u0002\u1222\u1224\u0005\u03ac\u01d7\u0002\u1223\u120c",
    "\u0003\u0002\u0002\u0002\u1223\u1212\u0003\u0002\u0002\u0002\u1223\u1218",
    "\u0003\u0002\u0002\u0002\u1223\u121e\u0003\u0002\u0002\u0002\u1224\u1227",
    "\u0003\u0002\u0002\u0002\u1225\u1223\u0003\u0002\u0002\u0002\u1225\u1226",
    "\u0003\u0002\u0002\u0002\u1226\u1228\u0003\u0002\u0002\u0002\u1227\u1225",
    "\u0003\u0002\u0002\u0002\u1228\u122a\u0007\u0325\u0002\u0002\u1229\u1209",
    "\u0003\u0002\u0002\u0002\u1229\u122a\u0003\u0002\u0002\u0002\u122a\u1259",
    "\u0003\u0002\u0002\u0002\u122b\u1257\u0007\u0178\u0002\u0002\u122c\u122e",
    "\u0007\u0326\u0002\u0002\u122d\u122c\u0003\u0002\u0002\u0002\u122d\u122e",
    "\u0003\u0002\u0002\u0002\u122e\u1230\u0003\u0002\u0002\u0002\u122f\u1231",
    "\u0007\u00db\u0002\u0002\u1230\u122f\u0003\u0002\u0002\u0002\u1230\u1231",
    "\u0003\u0002\u0002\u0002\u1231\u1232\u0003\u0002\u0002\u0002\u1232\u123e",
    "\u0005\u03ac\u01d7\u0002\u1233\u123f\u0007\u0313\u0002\u0002\u1234\u1235",
    "\u0007\u0315\u0002\u0002\u1235\u123f\u0007\u0314\u0002\u0002\u1236\u1237",
    "\u0007\u0316\u0002\u0002\u1237\u123f\u0007\u0313\u0002\u0002\u1238\u123f",
    "\u0007\u0314\u0002\u0002\u1239\u123a\u0007\u0314\u0002\u0002\u123a\u123f",
    "\u0007\u0313\u0002\u0002\u123b\u123f\u0007\u0315\u0002\u0002\u123c\u123d",
    "\u0007\u0315\u0002\u0002\u123d\u123f\u0007\u0313\u0002\u0002\u123e\u1233",
    "\u0003\u0002\u0002\u0002\u123e\u1234\u0003\u0002\u0002\u0002\u123e\u1236",
    "\u0003\u0002\u0002\u0002\u123e\u1238\u0003\u0002\u0002\u0002\u123e\u1239",
    "\u0003\u0002\u0002\u0002\u123e\u123b\u0003\u0002\u0002\u0002\u123e\u123c",
    "\u0003\u0002\u0002\u0002\u123f\u1240\u0003\u0002\u0002\u0002\u1240\u1241",
    "\t\u0016\u0002\u0002\u1241\u1258\u0003\u0002\u0002\u0002\u1242\u1244",
    "\u0007\u0326\u0002\u0002\u1243\u1242\u0003\u0002\u0002\u0002\u1243\u1244",
    "\u0003\u0002\u0002\u0002\u1244\u1245\u0003\u0002\u0002\u0002\u1245\u1247",
    "\t\u001b\u0002\u0002\u1246\u1248\u0007\u00db\u0002\u0002\u1247\u1246",
    "\u0003\u0002\u0002\u0002\u1247\u1248\u0003\u0002\u0002\u0002\u1248\u1254",
    "\u0003\u0002\u0002\u0002\u1249\u1255\u0007\u0313\u0002\u0002\u124a\u124b",
    "\u0007\u0315\u0002\u0002\u124b\u1255\u0007\u0314\u0002\u0002\u124c\u124d",
    "\u0007\u0316\u0002\u0002\u124d\u1255\u0007\u0313\u0002\u0002\u124e\u1255",
    "\u0007\u0314\u0002\u0002\u124f\u1250\u0007\u0314\u0002\u0002\u1250\u1255",
    "\u0007\u0313\u0002\u0002\u1251\u1255\u0007\u0315\u0002\u0002\u1252\u1253",
    "\u0007\u0315\u0002\u0002\u1253\u1255\u0007\u0313\u0002\u0002\u1254\u1249",
    "\u0003\u0002\u0002\u0002\u1254\u124a\u0003\u0002\u0002\u0002\u1254\u124c",
    "\u0003\u0002\u0002\u0002\u1254\u124e\u0003\u0002\u0002\u0002\u1254\u124f",
    "\u0003\u0002\u0002\u0002\u1254\u1251\u0003\u0002\u0002\u0002\u1254\u1252",
    "\u0003\u0002\u0002\u0002\u1255\u1256\u0003\u0002\u0002\u0002\u1256\u1258",
    "\t\u0016\u0002\u0002\u1257\u122d\u0003\u0002\u0002\u0002\u1257\u1243",
    "\u0003\u0002\u0002\u0002\u1258\u125a\u0003\u0002\u0002\u0002\u1259\u122b",
    "\u0003\u0002\u0002\u0002\u1259\u125a\u0003\u0002\u0002\u0002\u125a\u1262",
    "\u0003\u0002\u0002\u0002\u125b\u125c\u0007\u029e\u0002\u0002\u125c\u1262",
    "\u0007\u0178\u0002\u0002\u125d\u125e\u0007\u0253\u0002\u0002\u125e\u125f",
    "\u0007\u0256\u0002\u0002\u125f\u1260\u0007\u0313\u0002\u0002\u1260\u1262",
    "\u0005\u03ac\u01d7\u0002\u1261\u1207\u0003\u0002\u0002\u0002\u1261\u125b",
    "\u0003\u0002\u0002\u0002\u1261\u125d\u0003\u0002\u0002\u0002\u1262\u0175",
    "\u0003\u0002\u0002\u0002\u1263\u1264\u0007\t\u0002\u0002\u1264\u1265",
    "\u0007\u0136\u0002\u0002\u1265\u1266\u0007\u0198\u0002\u0002\u1266\u1267",
    "\u0007\u0144\u0002\u0002\u1267\u126c\u0005\u03ac\u01d7\u0002\u1268\u1269",
    "\u0007\u0085\u0002\u0002\u1269\u126a\u0007\u0136\u0002\u0002\u126a\u126b",
    "\u0007\u0198\u0002\u0002\u126b\u126d\u0005\u03ac\u01d7\u0002\u126c\u1268",
    "\u0003\u0002\u0002\u0002\u126c\u126d\u0003\u0002\u0002\u0002\u126d\u1275",
    "\u0003\u0002\u0002\u0002\u126e\u126f\t\u0014\u0002\u0002\u126f\u1270",
    "\u0007\u0324\u0002\u0002\u1270\u1271\u0005\u03ac\u01d7\u0002\u1271\u1272",
    "\u0007\u0325\u0002\u0002\u1272\u1274\u0003\u0002\u0002\u0002\u1273\u126e",
    "\u0003\u0002\u0002\u0002\u1274\u1277\u0003\u0002\u0002\u0002\u1275\u1273",
    "\u0003\u0002\u0002\u0002\u1275\u1276\u0003\u0002\u0002\u0002\u1276\u127e",
    "\u0003\u0002\u0002\u0002\u1277\u1275\u0003\u0002\u0002\u0002\u1278\u1279",
    "\u0007\u017b\u0002\u0002\u1279\u127a\u0007\u0324\u0002\u0002\u127a\u127b",
    "\u0007\u014a\u0002\u0002\u127b\u127c\u0007\u0313\u0002\u0002\u127c\u127d",
    "\t\b\u0002\u0002\u127d\u127f\u0007\u0325\u0002\u0002\u127e\u1278\u0003",
    "\u0002\u0002\u0002\u127e\u127f\u0003\u0002\u0002\u0002\u127f\u0177\u0003",
    "\u0002\u0002\u0002\u1280\u1281\u0007H\u0002\u0002\u1281\u1282\u0007",
    "\u0136\u0002\u0002\u1282\u1283\u0007\u0198\u0002\u0002\u1283\u1284\u0007",
    "\u0144\u0002\u0002\u1284\u1289\u0005\u03ac\u01d7\u0002\u1285\u1286\u0007",
    "\u0085\u0002\u0002\u1286\u1287\u0007\u0136\u0002\u0002\u1287\u1288\u0007",
    "\u0198\u0002\u0002\u1288\u128a\u0005\u03ac\u01d7\u0002\u1289\u1285\u0003",
    "\u0002\u0002\u0002\u1289\u128a\u0003\u0002\u0002\u0002\u128a\u1292\u0003",
    "\u0002\u0002\u0002\u128b\u128c\u0007\u0003\u0002\u0002\u128c\u128d\u0007",
    "\u0324\u0002\u0002\u128d\u128e\u0005\u03ac\u01d7\u0002\u128e\u128f\u0007",
    "\u0325\u0002\u0002\u128f\u1291\u0003\u0002\u0002\u0002\u1290\u128b\u0003",
    "\u0002\u0002\u0002\u1291\u1294\u0003\u0002\u0002\u0002\u1292\u1290\u0003",
    "\u0002\u0002\u0002\u1292\u1293\u0003\u0002\u0002\u0002\u1293\u129b\u0003",
    "\u0002\u0002\u0002\u1294\u1292\u0003\u0002\u0002\u0002\u1295\u1296\u0007",
    "\u017b\u0002\u0002\u1296\u1297\u0007\u0324\u0002\u0002\u1297\u1298\u0007",
    "\u014a\u0002\u0002\u1298\u1299\u0007\u0313\u0002\u0002\u1299\u129a\t",
    "\b\u0002\u0002\u129a\u129c\u0007\u0325\u0002\u0002\u129b\u1295\u0003",
    "\u0002\u0002\u0002\u129b\u129c\u0003\u0002\u0002\u0002\u129c\u0179\u0003",
    "\u0002\u0002\u0002\u129d\u129e\u0007\t\u0002\u0002\u129e\u129f\u0007",
    "\u0136\u0002\u0002\u129f\u12a0\u0007;\u0002\u0002\u12a0\u130a\u0007",
    "\u013c\u0002\u0002\u12a1\u12a2\u0007\u0103\u0002\u0002\u12a2\u12c6\u0007",
    "\u0189\u0002\u0002\u12a3\u12a4\u0007\u01c3\u0002\u0002\u12a4\u12b4\u0007",
    "\u0313\u0002\u0002\u12a5\u12b5\u0007\u019a\u0002\u0002\u12a6\u12a8\u0007",
    "\u0326\u0002\u0002\u12a7\u12a6\u0003\u0002\u0002\u0002\u12a7\u12a8\u0003",
    "\u0002\u0002\u0002\u12a8\u12a9\u0003\u0002\u0002\u0002\u12a9\u12b1\u0007",
    "\u030b\u0002\u0002\u12aa\u12ac\u0007\u0326\u0002\u0002\u12ab\u12aa\u0003",
    "\u0002\u0002\u0002\u12ab\u12ac\u0003\u0002\u0002\u0002\u12ac\u12ad\u0003",
    "\u0002\u0002\u0002\u12ad\u12ae\u0007\u030b\u0002\u0002\u12ae\u12af\u0007",
    "\u015c\u0002\u0002\u12af\u12b1\u0007\u030b\u0002\u0002\u12b0\u12a7\u0003",
    "\u0002\u0002\u0002\u12b0\u12ab\u0003\u0002\u0002\u0002\u12b1\u12b2\u0003",
    "\u0002\u0002\u0002\u12b2\u12b0\u0003\u0002\u0002\u0002\u12b2\u12b3\u0003",
    "\u0002\u0002\u0002\u12b3\u12b5\u0003\u0002\u0002\u0002\u12b4\u12a5\u0003",
    "\u0002\u0002\u0002\u12b4\u12b0\u0003\u0002\u0002\u0002\u12b5\u12c7\u0003",
    "\u0002\u0002\u0002\u12b6\u12b7\u0007\u0266\u0002\u0002\u12b7\u12c2\u0007",
    "\u0313\u0002\u0002\u12b8\u12ba\u0007\u0326\u0002\u0002\u12b9\u12b8\u0003",
    "\u0002\u0002\u0002\u12b9\u12ba\u0003\u0002\u0002\u0002\u12ba\u12bb\u0003",
    "\u0002\u0002\u0002\u12bb\u12c3\u0007\u030b\u0002\u0002\u12bc\u12be\u0007",
    "\u0326\u0002\u0002\u12bd\u12bc\u0003\u0002\u0002\u0002\u12bd\u12be\u0003",
    "\u0002\u0002\u0002\u12be\u12bf\u0003\u0002\u0002\u0002\u12bf\u12c0\u0007",
    "\u030b\u0002\u0002\u12c0\u12c1\u0007\u015c\u0002\u0002\u12c1\u12c3\u0007",
    "\u030b\u0002\u0002\u12c2\u12b9\u0003\u0002\u0002\u0002\u12c2\u12bd\u0003",
    "\u0002\u0002\u0002\u12c3\u12c4\u0003\u0002\u0002\u0002\u12c4\u12c2\u0003",
    "\u0002\u0002\u0002\u12c4\u12c5\u0003\u0002\u0002\u0002\u12c5\u12c7\u0003",
    "\u0002\u0002\u0002\u12c6\u12a3\u0003\u0002\u0002\u0002\u12c6\u12b6\u0003",
    "\u0002\u0002\u0002\u12c7\u130b\u0003\u0002\u0002\u0002\u12c8\u12c9\u0007",
    "_\u0002\u0002\u12c9\u12d9\u0007\u00ba\u0002\u0002\u12ca\u12da\u0007",
    "\u00e4\u0002\u0002\u12cb\u12da\u0007\u00e1\u0002\u0002\u12cc\u12cd\u0007",
    "\u027a\u0002\u0002\u12cd\u12ce\u0007\u0313\u0002\u0002\u12ce\u12da\t",
    "-\u0002\u0002\u12cf\u12d0\u0007\u00c2\u0002\u0002\u12d0\u12d4\u0007",
    "\u0313\u0002\u0002\u12d1\u12d2\u0007\u030b\u0002\u0002\u12d2\u12d5\u0007",
    "\u024c\u0002\u0002\u12d3\u12d5\u0007Y\u0002\u0002\u12d4\u12d1\u0003",
    "\u0002\u0002\u0002\u12d4\u12d3\u0003\u0002\u0002\u0002\u12d5\u12da\u0003",
    "\u0002\u0002\u0002\u12d6\u12d7\u0007\u023e\u0002\u0002\u12d7\u12d8\u0007",
    "\u0313\u0002\u0002\u12d8\u12da\t.\u0002\u0002\u12d9\u12ca\u0003\u0002",
    "\u0002\u0002\u12d9\u12cb\u0003\u0002\u0002\u0002\u12d9\u12cc\u0003\u0002",
    "\u0002\u0002\u12d9\u12cf\u0003\u0002\u0002\u0002\u12d9\u12d6\u0003\u0002",
    "\u0002\u0002\u12da\u130b\u0003\u0002\u0002\u0002\u12db\u12dc\u0007}",
    "\u0002\u0002\u12dc\u12dd\u00073\u0002\u0002\u12dd\u12ef\u0007\u0287",
    "\u0002\u0002\u12de\u12df\u0007\u0173\u0002\u0002\u12df\u12e0\u0007\u0313",
    "\u0002\u0002\u12e0\u12f0\t-\u0002\u0002\u12e1\u12e2\u0007\u0146\u0002",
    "\u0002\u12e2\u12e3\u0007\u0313\u0002\u0002\u12e3\u12f0\t-\u0002\u0002",
    "\u12e4\u12e5\u0007\u0147\u0002\u0002\u12e5\u12e6\u0007\u0313\u0002\u0002",
    "\u12e6\u12f0\t-\u0002\u0002\u12e7\u12e8\u0007\u0148\u0002\u0002\u12e8",
    "\u12f0\t-\u0002\u0002\u12e9\u12ea\u0007~\u0002\u0002\u12ea\u12eb\u0007",
    "\u0313\u0002\u0002\u12eb\u12f0\t-\u0002\u0002\u12ec\u12ed\u0007\u0095",
    "\u0002\u0002\u12ed\u12ee\u0007\u0313\u0002\u0002\u12ee\u12f0\t.\u0002",
    "\u0002\u12ef\u12de\u0003\u0002\u0002\u0002\u12ef\u12e1\u0003\u0002\u0002",
    "\u0002\u12ef\u12e4\u0003\u0002\u0002\u0002\u12ef\u12e7\u0003\u0002\u0002",
    "\u0002\u12ef\u12e9\u0003\u0002\u0002\u0002\u12ef\u12ec\u0003\u0002\u0002",
    "\u0002\u12f0\u130b\u0003\u0002\u0002\u0002\u12f1\u12f2\u0007\u0211\u0002",
    "\u0002\u12f2\u12f3\u00073\u0002\u0002\u12f3\u12f4\u0007@\u0002\u0002",
    "\u12f4\u12f5\u0007\u0313\u0002\u0002\u12f5\u130b\t/\u0002\u0002\u12f6",
    "\u12f7\u0007\"\u0002\u0002\u12f7\u12f8\u0007\u027b\u0002\u0002\u12f8",
    "\u1305\u0007z\u0002\u0002\u12f9\u12fa\u0007\u00e4\u0002\u0002\u12fa",
    "\u12fb\u0007\u0324\u0002\u0002\u12fb\u12fc\u0007\u0082\u0002\u0002\u12fc",
    "\u12fd\u0007\u0313\u0002\u0002\u12fd\u12fe\u0007\u030f\u0002\u0002\u12fe",
    "\u12ff\u0007\u0326\u0002\u0002\u12ff\u1300\u0007\u02cb\u0002\u0002\u1300",
    "\u1301\u0007\u0313\u0002\u0002\u1301\u1302\u0007\u030b\u0002\u0002\u1302",
    "\u1303\t0\u0002\u0002\u1303\u1306\u0007\u0325\u0002\u0002\u1304\u1306",
    "\u0007\u00e1\u0002\u0002\u1305\u12f9\u0003\u0002\u0002\u0002\u1305\u1304",
    "\u0003\u0002\u0002\u0002\u1306\u130b\u0003\u0002\u0002\u0002\u1307\u1308",
    "\u0007\u013c\u0002\u0002\u1308\u1309\u0007\u0141\u0002\u0002\u1309\u130b",
    "\t\b\u0002\u0002\u130a\u12a1\u0003\u0002\u0002\u0002\u130a\u12c8\u0003",
    "\u0002\u0002\u0002\u130a\u12db\u0003\u0002\u0002\u0002\u130a\u12f1\u0003",
    "\u0002\u0002\u0002\u130a\u12f6\u0003\u0002\u0002\u0002\u130a\u1307\u0003",
    "\u0002\u0002\u0002\u130b\u017b\u0003\u0002\u0002\u0002\u130c\u130d\u0007",
    "\t\u0002\u0002\u130d\u130e\u0007\u0136\u0002\u0002\u130e\u130f\u0007",
    "\u0120\u0002\u0002\u130f\u1317\u0005\u03ac\u01d7\u0002\u1310\u1311\t",
    "\u0014\u0002\u0002\u1311\u1312\u0007\u00c6\u0002\u0002\u1312\u1318\u0005",
    "\u03ac\u01d7\u0002\u1313\u1314\u0007\u017b\u0002\u0002\u1314\u1315\u0007",
    "\u0256\u0002\u0002\u1315\u1316\u0007\u0313\u0002\u0002\u1316\u1318\u0005",
    "\u03ac\u01d7\u0002\u1317\u1310\u0003\u0002\u0002\u0002\u1317\u1313\u0003",
    "\u0002\u0002\u0002\u1318\u017d\u0003\u0002\u0002\u0002\u1319\u131a\u0007",
    "H\u0002\u0002\u131a\u131b\u0007\u0136\u0002\u0002\u131b\u131c\u0007",
    "\u0120\u0002\u0002\u131c\u131f\u0005\u03ac\u01d7\u0002\u131d\u131e\u0007",
    "\u0013\u0002\u0002\u131e\u1320\u0005\u03ac\u01d7\u0002\u131f\u131d\u0003",
    "\u0002\u0002\u0002\u131f\u1320\u0003\u0002\u0002\u0002\u1320\u017f\u0003",
    "\u0002\u0002\u0002\u1321\u1322\u0007\t\u0002\u0002\u1322\u1323\u0007",
    "\u0136\u0002\u0002\u1323\u1324\u0007\u0120\u0002\u0002\u1324\u1325\u0005",
    "\u03ac\u01d7\u0002\u1325\u1326\t\u0014\u0002\u0002\u1326\u1327\u0007",
    "\u00c6\u0002\u0002\u1327\u1328\u0005\u03ac\u01d7\u0002\u1328\u0181\u0003",
    "\u0002\u0002\u0002\u1329\u132a\u0007\t\u0002\u0002\u132a\u132b\u0007",
    "\u0137\u0002\u0002\u132b\u1333\u0005\u03ac\u01d7\u0002\u132c\u132d\u0007",
    "\u00e4\u0002\u0002\u132d\u132e\u0007\u028a\u0002\u0002\u132e\u132f\u0005",
    "\u03ac\u01d7\u0002\u132f\u1330\u0007\u031f\u0002\u0002\u1330\u1331\u0003",
    "\u0002\u0002\u0002\u1331\u1332\u0005\u03ac\u01d7\u0002\u1332\u1334\u0003",
    "\u0002\u0002\u0002\u1333\u132c\u0003\u0002\u0002\u0002\u1333\u1334\u0003",
    "\u0002\u0002\u0002\u1334\u133c\u0003\u0002\u0002\u0002\u1335\u1337\u0007",
    "\u0326\u0002\u0002\u1336\u1335\u0003\u0002\u0002\u0002\u1336\u1337\u0003",
    "\u0002\u0002\u0002\u1337\u1338\u0003\u0002\u0002\u0002\u1338\u1339\t",
    "\u0014\u0002\u0002\u1339\u133b\u0005\u03ac\u01d7\u0002\u133a\u1336\u0003",
    "\u0002\u0002\u0002\u133b\u133e\u0003\u0002\u0002\u0002\u133c\u133a\u0003",
    "\u0002\u0002\u0002\u133c\u133d\u0003\u0002\u0002\u0002\u133d\u0183\u0003",
    "\u0002\u0002\u0002\u133e\u133c\u0003\u0002\u0002\u0002\u133f\u1340\u0007",
    "H\u0002\u0002\u1340\u1341\u0007\u0137\u0002\u0002\u1341\u1344\u0005",
    "\u03ac\u01d7\u0002\u1342\u1343\u0007\u0013\u0002\u0002\u1343\u1345\u0005",
    "\u03ac\u01d7\u0002\u1344\u1342\u0003\u0002\u0002\u0002\u1344\u1345\u0003",
    "\u0002\u0002\u0002\u1345\u1346\u0003\u0002\u0002\u0002\u1346\u1347\u0007",
    "\u00e4\u0002\u0002\u1347\u134b\u0007\u028a\u0002\u0002\u1348\u1349\u0005",
    "\u03ac\u01d7\u0002\u1349\u134a\u0007\u031f\u0002\u0002\u134a\u134c\u0003",
    "\u0002\u0002\u0002\u134b\u1348\u0003\u0002\u0002\u0002\u134b\u134c\u0003",
    "\u0002\u0002\u0002\u134c\u134d\u0003\u0002\u0002\u0002\u134d\u135b\u0005",
    "\u03ac\u01d7\u0002\u134e\u1356\u0007\u0324\u0002\u0002\u134f\u1351\u0007",
    "\u0326\u0002\u0002\u1350\u134f\u0003\u0002\u0002\u0002\u1350\u1351\u0003",
    "\u0002\u0002\u0002\u1351\u1354\u0003\u0002\u0002\u0002\u1352\u1355\u0005",
    "\u03ac\u01d7\u0002\u1353\u1355\u0007Y\u0002\u0002\u1354\u1352\u0003",
    "\u0002\u0002\u0002\u1354\u1353\u0003\u0002\u0002\u0002\u1355\u1357\u0003",
    "\u0002\u0002\u0002\u1356\u1350\u0003\u0002\u0002\u0002\u1357\u1358\u0003",
    "\u0002\u0002\u0002\u1358\u1356\u0003\u0002\u0002\u0002\u1358\u1359\u0003",
    "\u0002\u0002\u0002\u1359\u135a\u0003\u0002\u0002\u0002\u135a\u135c\u0007",
    "\u0325\u0002\u0002\u135b\u134e\u0003\u0002\u0002\u0002\u135b\u135c\u0003",
    "\u0002\u0002\u0002\u135c\u0185\u0003\u0002\u0002\u0002\u135d\u135e\u0007",
    "\t\u0002\u0002\u135e\u135f\u0007\u0137\u0002\u0002\u135f\u1360\u0007",
    "\u00bc\u0002\u0002\u1360\u1376\u0007\u00ab\u0002\u0002\u1361\u1363\u0007",
    "\u0202\u0002\u0002\u1362\u1361\u0003\u0002\u0002\u0002\u1362\u1363\u0003",
    "\u0002\u0002\u0002\u1363\u1364\u0003\u0002\u0002\u0002\u1364\u1377\u0007",
    "\u010e\u0002\u0002\u1365\u1374\u0007\u017b\u0002\u0002\u1366\u1367\u0007",
    "\u026c\u0002\u0002\u1367\u1368\u0007\u0313\u0002\u0002\u1368\u1369\u0007",
    "\u030f\u0002\u0002\u1369\u136a\u0007\u0326\u0002\u0002\u136a\u136b\u0007",
    "\u00e3\u0002\u0002\u136b\u136c\u0007\u0313\u0002\u0002\u136c\u1375\u0007",
    "\u030f\u0002\u0002\u136d\u136e\u0007\u0258\u0002\u0002\u136e\u136f\u0007",
    "\u0313\u0002\u0002\u136f\u1370\u0007\u030f\u0002\u0002\u1370\u1371\u0007",
    "\u0326\u0002\u0002\u1371\u1372\u0007\u025a\u0002\u0002\u1372\u1373\u0007",
    "\u0313\u0002\u0002\u1373\u1375\u0007\u030f\u0002\u0002\u1374\u1366\u0003",
    "\u0002\u0002\u0002\u1374\u136d\u0003\u0002\u0002\u0002\u1374\u1375\u0003",
    "\u0002\u0002\u0002\u1375\u1377\u0003\u0002\u0002\u0002\u1376\u1362\u0003",
    "\u0002\u0002\u0002\u1376\u1365\u0003\u0002\u0002\u0002\u1377\u0187\u0003",
    "\u0002\u0002\u0002\u1378\u1379\u0007\t\u0002\u0002\u1379\u137a\u0007",
    "\u02db\u0002\u0002\u137a\u137b\u0007\u00ab\u0002\u0002\u137b\u137c\u0005",
    "\u03ac\u01d7\u0002\u137c\u137d\t\u0014\u0002\u0002\u137d\u137e\u0007",
    "\u01ec\u0002\u0002\u137e\u138a\u0007%\u0002\u0002\u137f\u1380\u0007",
    "*\u0002\u0002\u1380\u138b\u0005\u03ac\u01d7\u0002\u1381\u1382\u0007",
    "\u00f3\u0002\u0002\u1382\u1383\u0007\u0313\u0002\u0002\u1383\u138b\u0007",
    "\u030f\u0002\u0002\u1384\u1385\u0007\u02db\u0002\u0002\u1385\u1386\u0007",
    "\u00ab\u0002\u0002\u1386\u138b\u0005\u03ac\u01d7\u0002\u1387\u1388\u0007",
    "\u0011\u0002\u0002\u1388\u1389\u0007\u00ab\u0002\u0002\u1389\u138b\u0005",
    "\u03ac\u01d7\u0002\u138a\u137f\u0003\u0002\u0002\u0002\u138a\u1381\u0003",
    "\u0002\u0002\u0002\u138a\u1384\u0003\u0002\u0002\u0002\u138a\u1387\u0003",
    "\u0002\u0002\u0002\u138b\u0189\u0003\u0002\u0002\u0002\u138c\u138d\u0007",
    "\t\u0002\u0002\u138d\u138e\u0007\u02db\u0002\u0002\u138e\u138f\u0007",
    "\u00ab\u0002\u0002\u138f\u1392\u0005\u03ac\u01d7\u0002\u1390\u1391\u0007",
    "\u0013\u0002\u0002\u1391\u1393\u0005\u03ac\u01d7\u0002\u1392\u1390\u0003",
    "\u0002\u0002\u0002\u1392\u1393\u0003\u0002\u0002\u0002\u1393\u1397\u0003",
    "\u0002\u0002\u0002\u1394\u1395\u0007\u008b\u0002\u0002\u1395\u1396\u0007",
    "\u0288\u0002\u0002\u1396\u1398\u0005\u03ac\u01d7\u0002\u1397\u1394\u0003",
    "\u0002\u0002\u0002\u1397\u1398\u0003\u0002\u0002\u0002\u1398\u1399\u0003",
    "\u0002\u0002\u0002\u1399\u13ba\u0007\u017b\u0002\u0002\u139a\u139b\u0007",
    "\u0229\u0002\u0002\u139b\u139c\u0007\u0313\u0002\u0002\u139c\u13aa\u0007",
    "\u030f\u0002\u0002\u139d\u139e\u0007\u018c\u0002\u0002\u139e\u139f\u0007",
    "\u0313\u0002\u0002\u139f\u13aa\t1\u0002\u0002\u13a0\u13a1\u0007\u0217",
    "\u0002\u0002\u13a1\u13a2\u0007\u0313\u0002\u0002\u13a2\u13aa\u0007\u030f",
    "\u0002\u0002\u13a3\u13a4\u0007\u0289\u0002\u0002\u13a4\u13a5\u0007\u0313",
    "\u0002\u0002\u13a5\u13aa\u0007\u030f\u0002\u0002\u13a6\u13a7\u0007\u01c5",
    "\u0002\u0002\u13a7\u13a8\u0007\u0313\u0002\u0002\u13a8\u13aa\t\u000b",
    "\u0002\u0002\u13a9\u139a\u0003\u0002\u0002\u0002\u13a9\u139d\u0003\u0002",
    "\u0002\u0002\u13a9\u13a0\u0003\u0002\u0002\u0002\u13a9\u13a3\u0003\u0002",
    "\u0002\u0002\u13a9\u13a6\u0003\u0002\u0002\u0002\u13aa\u13bb\u0003\u0002",
    "\u0002\u0002\u13ab\u13ac\u0007\u01ec\u0002\u0002\u13ac\u13b8\u0007%",
    "\u0002\u0002\u13ad\u13ae\u0007*\u0002\u0002\u13ae\u13b9\u0005\u03ac",
    "\u01d7\u0002\u13af\u13b0\u0007\u00f3\u0002\u0002\u13b0\u13b1\u0007\u0313",
    "\u0002\u0002\u13b1\u13b9\u0007\u030f\u0002\u0002\u13b2\u13b3\u0007\u02db",
    "\u0002\u0002\u13b3\u13b4\u0007\u00ab\u0002\u0002\u13b4\u13b9\u0005\u03ac",
    "\u01d7\u0002\u13b5\u13b6\u0007\u0011\u0002\u0002\u13b6\u13b7\u0007\u00ab",
    "\u0002\u0002\u13b7\u13b9\u0005\u03ac\u01d7\u0002\u13b8\u13ad\u0003\u0002",
    "\u0002\u0002\u13b8\u13af\u0003\u0002\u0002\u0002\u13b8\u13b2\u0003\u0002",
    "\u0002\u0002\u13b8\u13b5\u0003\u0002\u0002\u0002\u13b9\u13bb\u0003\u0002",
    "\u0002\u0002\u13ba\u13a9\u0003\u0002\u0002\u0002\u13ba\u13ab\u0003\u0002",
    "\u0002\u0002\u13bb\u018b\u0003\u0002\u0002\u0002\u13bc\u13bd\u0007H",
    "\u0002\u0002\u13bd\u13c1\u0007\u02dd\u0002\u0002\u13be\u13bf\u0005\u03ac",
    "\u01d7\u0002\u13bf\u13c0\u0007\u031f\u0002\u0002\u13c0\u13c2\u0003\u0002",
    "\u0002\u0002\u13c1\u13be\u0003\u0002\u0002\u0002\u13c1\u13c2\u0003\u0002",
    "\u0002\u0002\u13c2\u13c3\u0003\u0002\u0002\u0002\u13c3\u13c4\u0005\u03ac",
    "\u01d7\u0002\u13c4\u13df\u0007\u0085\u0002\u0002\u13c5\u13c6\u0005\u03ac",
    "\u01d7\u0002\u13c6\u13c7\u0007\u031f\u0002\u0002\u13c7\u13c9\u0003\u0002",
    "\u0002\u0002\u13c8\u13c5\u0003\u0002\u0002\u0002\u13c8\u13c9\u0003\u0002",
    "\u0002\u0002\u13c9\u13cd\u0003\u0002\u0002\u0002\u13ca\u13cb\u0005\u03ac",
    "\u01d7\u0002\u13cb\u13cc\u0007\u031f\u0002\u0002\u13cc\u13ce\u0003\u0002",
    "\u0002\u0002\u13cd\u13ca\u0003\u0002\u0002\u0002\u13cd\u13ce\u0003\u0002",
    "\u0002\u0002\u13ce\u13d2\u0003\u0002\u0002\u0002\u13cf\u13d0\u0005\u03ac",
    "\u01d7\u0002\u13d0\u13d1\u0007\u031f\u0002\u0002\u13d1\u13d3\u0003\u0002",
    "\u0002\u0002\u13d2\u13cf\u0003\u0002\u0002\u0002\u13d2\u13d3\u0003\u0002",
    "\u0002\u0002\u13d3\u13d4\u0003\u0002\u0002\u0002\u13d4\u13e0\u0005\u03ac",
    "\u01d7\u0002\u13d5\u13d6\u0005\u03ac\u01d7\u0002\u13d6\u13d7\u0007\u031f",
    "\u0002\u0002\u13d7\u13d9\u0003\u0002\u0002\u0002\u13d8\u13d5\u0003\u0002",
    "\u0002\u0002\u13d8\u13d9\u0003\u0002\u0002\u0002\u13d9\u13dd\u0003\u0002",
    "\u0002\u0002\u13da\u13db\u0005\u03ac\u01d7\u0002\u13db\u13dc\u0007\u031f",
    "\u0002\u0002\u13dc\u13de\u0003\u0002\u0002\u0002\u13dd\u13da\u0003\u0002",
    "\u0002\u0002\u13dd\u13de\u0003\u0002\u0002\u0002\u13de\u13e0\u0003\u0002",
    "\u0002\u0002\u13df\u13c8\u0003\u0002\u0002\u0002\u13df\u13d8\u0003\u0002",
    "\u0002\u0002\u13e0\u018d\u0003\u0002\u0002\u0002\u13e1\u13e2\u0007\t",
    "\u0002\u0002\u13e2\u13e3\u0007\u0170\u0002\u0002\u13e3\u13e4\u0005\u03ac",
    "\u01d7\u0002\u13e4\u1417\u0007\u017b\u0002\u0002\u13e5\u13e7\u0007\u0326",
    "\u0002\u0002\u13e6\u13e5\u0003\u0002\u0002\u0002\u13e6\u13e7\u0003\u0002",
    "\u0002\u0002\u13e7\u13e8\u0003\u0002\u0002\u0002\u13e8\u13e9\u0007\u0256",
    "\u0002\u0002\u13e9\u13ea\u0007\u0313\u0002\u0002\u13ea\u1418\u0005\u03ac",
    "\u01d7\u0002\u13eb\u13ed\u0007\u0326\u0002\u0002\u13ec\u13eb\u0003\u0002",
    "\u0002\u0002\u13ec\u13ed\u0003\u0002\u0002\u0002\u13ed\u13ee\u0003\u0002",
    "\u0002\u0002\u13ee\u13ef\u0007[\u0002\u0002\u13ef\u13f2\u0007\u0313",
    "\u0002\u0002\u13f0\u13f3\u0005\u03ac\u01d7\u0002\u13f1\u13f3\u0007\u00de",
    "\u0002\u0002\u13f2\u13f0\u0003\u0002\u0002\u0002\u13f2\u13f1\u0003\u0002",
    "\u0002\u0002\u13f3\u1418\u0003\u0002\u0002\u0002\u13f4\u13f6\u0007\u0326",
    "\u0002\u0002\u13f5\u13f4\u0003\u0002\u0002\u0002\u13f5\u13f6\u0003\u0002",
    "\u0002\u0002\u13f6\u13f7\u0003\u0002\u0002\u0002\u13f7\u13f8\u0007\u0236",
    "\u0002\u0002\u13f8\u13f9\u0007\u0313\u0002\u0002\u13f9\u1418\u0005\u03ac",
    "\u01d7\u0002\u13fa\u13fc\u0007\u0326\u0002\u0002\u13fb\u13fa\u0003\u0002",
    "\u0002\u0002\u13fb\u13fc\u0003\u0002\u0002\u0002\u13fc\u13fd\u0003\u0002",
    "\u0002\u0002\u13fd\u13fe\u0007\u00f3\u0002\u0002\u13fe\u13ff\u0007\u0313",
    "\u0002\u0002\u13ff\u1403\u0007\u030f\u0002\u0002\u1400\u1401\u0007\u00e3",
    "\u0002\u0002\u1401\u1402\u0007\u0313\u0002\u0002\u1402\u1404\u0007\u030f",
    "\u0002\u0002\u1403\u1400\u0003\u0002\u0002\u0002\u1404\u1405\u0003\u0002",
    "\u0002\u0002\u1405\u1403\u0003\u0002\u0002\u0002\u1405\u1406\u0003\u0002",
    "\u0002\u0002\u1406\u1418\u0003\u0002\u0002\u0002\u1407\u1409\u0007\u0326",
    "\u0002\u0002\u1408\u1407\u0003\u0002\u0002\u0002\u1408\u1409\u0003\u0002",
    "\u0002\u0002\u1409\u140a\u0003\u0002\u0002\u0002\u140a\u140b\u0007\u01d5",
    "\u0002\u0002\u140b\u140f\u0007\u0313\u0002\u0002\u140c\u1410\u0007\u00d4",
    "\u0002\u0002\u140d\u1410\u0007\u030b\u0002\u0002\u140e\u1410\u0005\u03ac",
    "\u01d7\u0002\u140f\u140c\u0003\u0002\u0002\u0002\u140f\u140d\u0003\u0002",
    "\u0002\u0002\u140f\u140e\u0003\u0002\u0002\u0002\u1410\u1418\u0003\u0002",
    "\u0002\u0002\u1411\u1413\u0007\u0326\u0002\u0002\u1412\u1411\u0003\u0002",
    "\u0002\u0002\u1412\u1413\u0003\u0002\u0002\u0002\u1413\u1414\u0003\u0002",
    "\u0002\u0002\u1414\u1415\u0007\u018e\u0002\u0002\u1415\u1416\u0007\u0313",
    "\u0002\u0002\u1416\u1418\t\b\u0002\u0002\u1417\u13e6\u0003\u0002\u0002",
    "\u0002\u1417\u13ec\u0003\u0002\u0002\u0002\u1417\u13f5\u0003\u0002\u0002",
    "\u0002\u1417\u13fb\u0003\u0002\u0002\u0002\u1417\u1408\u0003\u0002\u0002",
    "\u0002\u1417\u1412\u0003\u0002\u0002\u0002\u1418\u1419\u0003\u0002\u0002",
    "\u0002\u1419\u1417\u0003\u0002\u0002\u0002\u1419\u141a\u0003\u0002\u0002",
    "\u0002\u141a\u018f\u0003\u0002\u0002\u0002\u141b\u141c\u0007H\u0002",
    "\u0002\u141c\u141d\u0007\u0170\u0002\u0002\u141d\u1421\u0005\u03ac\u01d7",
    "\u0002\u141e\u141f\t2\u0002\u0002\u141f\u1420\u0007\u0236\u0002\u0002",
    "\u1420\u1422\u0005\u03ac\u01d7\u0002\u1421\u141e\u0003\u0002\u0002\u0002",
    "\u1421\u1422\u0003\u0002\u0002\u0002\u1422\u1435\u0003\u0002\u0002\u0002",
    "\u1423\u1432\u0007\u017b\u0002\u0002\u1424\u1426\u0007\u0326\u0002\u0002",
    "\u1425\u1424\u0003\u0002\u0002\u0002\u1425\u1426\u0003\u0002\u0002\u0002",
    "\u1426\u1427\u0003\u0002\u0002\u0002\u1427\u1428\u0007[\u0002\u0002",
    "\u1428\u1429\u0007\u0313\u0002\u0002\u1429\u1431\u0005\u03ac\u01d7\u0002",
    "\u142a\u142c\u0007\u0326\u0002\u0002\u142b\u142a\u0003\u0002\u0002\u0002",
    "\u142b\u142c\u0003\u0002\u0002\u0002\u142c\u142d\u0003\u0002\u0002\u0002",
    "\u142d\u142e\u0007\u018e\u0002\u0002\u142e\u142f\u0007\u0313\u0002\u0002",
    "\u142f\u1431\t\b\u0002\u0002\u1430\u1425\u0003\u0002\u0002\u0002\u1430",
    "\u142b\u0003\u0002\u0002\u0002\u1431\u1434\u0003\u0002\u0002\u0002\u1432",
    "\u1430\u0003\u0002\u0002\u0002\u1432\u1433\u0003\u0002\u0002\u0002\u1433",
    "\u1436\u0003\u0002\u0002\u0002\u1434\u1432\u0003\u0002\u0002\u0002\u1435",
    "\u1423\u0003\u0002\u0002\u0002\u1435\u1436\u0003\u0002\u0002\u0002\u1436",
    "\u14ae\u0003\u0002\u0002\u0002\u1437\u1438\u0007H\u0002\u0002\u1438",
    "\u1489\u0007\u0170\u0002\u0002\u1439\u145c\u0005\u03ac\u01d7\u0002\u143a",
    "\u1459\u0007\u017b\u0002\u0002\u143b\u143d\u0007\u0326\u0002\u0002\u143c",
    "\u143b\u0003\u0002\u0002\u0002\u143c\u143d\u0003\u0002\u0002\u0002\u143d",
    "\u143e\u0003\u0002\u0002\u0002\u143e\u143f\u0007[\u0002\u0002\u143f",
    "\u1440\u0007\u0313\u0002\u0002\u1440\u1458\u0005\u03ac\u01d7\u0002\u1441",
    "\u1443\u0007\u0326\u0002\u0002\u1442\u1441\u0003\u0002\u0002\u0002\u1442",
    "\u1443\u0003\u0002\u0002\u0002\u1443\u1444\u0003\u0002\u0002\u0002\u1444",
    "\u1445\u0007\u01d5\u0002\u0002\u1445\u1449\u0007\u0313\u0002\u0002\u1446",
    "\u144a\u0007\u00d4\u0002\u0002\u1447\u144a\u0007\u030b\u0002\u0002\u1448",
    "\u144a\u0005\u03ac\u01d7\u0002\u1449\u1446\u0003\u0002\u0002\u0002\u1449",
    "\u1447\u0003\u0002\u0002\u0002\u1449\u1448\u0003\u0002\u0002\u0002\u144a",
    "\u1458\u0003\u0002\u0002\u0002\u144b\u144d\u0007\u0326\u0002\u0002\u144c",
    "\u144b\u0003\u0002\u0002\u0002\u144c\u144d\u0003\u0002\u0002\u0002\u144d",
    "\u144e\u0003\u0002\u0002\u0002\u144e\u144f\u0007\u013f\u0002\u0002\u144f",
    "\u1450\u0007\u0313\u0002\u0002\u1450\u1458\u0007\u0310\u0002\u0002\u1451",
    "\u1453\u0007\u0326\u0002\u0002\u1452\u1451\u0003\u0002\u0002\u0002\u1452",
    "\u1453\u0003\u0002\u0002\u0002\u1453\u1454\u0003\u0002\u0002\u0002\u1454",
    "\u1455\u0007\u018e\u0002\u0002\u1455\u1456\u0007\u0313\u0002\u0002\u1456",
    "\u1458\t\b\u0002\u0002\u1457\u143c\u0003\u0002\u0002\u0002\u1457\u1442",
    "\u0003\u0002\u0002\u0002\u1457\u144c\u0003\u0002\u0002\u0002\u1457\u1452",
    "\u0003\u0002\u0002\u0002\u1458\u145b\u0003\u0002\u0002\u0002\u1459\u1457",
    "\u0003\u0002\u0002\u0002\u1459\u145a\u0003\u0002\u0002\u0002\u145a\u145d",
    "\u0003\u0002\u0002\u0002\u145b\u1459\u0003\u0002\u0002\u0002\u145c\u143a",
    "\u0003\u0002\u0002\u0002\u145c\u145d\u0003\u0002\u0002\u0002\u145d\u148a",
    "\u0003\u0002\u0002\u0002\u145e\u145f\u0005\u03ac\u01d7\u0002\u145f\u1460",
    "\u0007\u017b\u0002\u0002\u1460\u1461\u0007\u00f3\u0002\u0002\u1461\u1462",
    "\u0007\u0313\u0002\u0002\u1462\u1481\u0007\u030f\u0002\u0002\u1463\u1465",
    "\u0007\u0326\u0002\u0002\u1464\u1463\u0003\u0002\u0002\u0002\u1464\u1465",
    "\u0003\u0002\u0002\u0002\u1465\u1466\u0003\u0002\u0002\u0002\u1466\u1467",
    "\u0007[\u0002\u0002\u1467\u1468\u0007\u0313\u0002\u0002\u1468\u1480",
    "\u0005\u03ac\u01d7\u0002\u1469\u146b\u0007\u0326\u0002\u0002\u146a\u1469",
    "\u0003\u0002\u0002\u0002\u146a\u146b\u0003\u0002\u0002\u0002\u146b\u146c",
    "\u0003\u0002\u0002\u0002\u146c\u146d\u0007\u01d5\u0002\u0002\u146d\u1471",
    "\u0007\u0313\u0002\u0002\u146e\u1472\u0007\u00d4\u0002\u0002\u146f\u1472",
    "\u0007\u030b\u0002\u0002\u1470\u1472\u0005\u03ac\u01d7\u0002\u1471\u146e",
    "\u0003\u0002\u0002\u0002\u1471\u146f\u0003\u0002\u0002\u0002\u1471\u1470",
    "\u0003\u0002\u0002\u0002\u1472\u1480\u0003\u0002\u0002\u0002\u1473\u1475",
    "\u0007\u0326\u0002\u0002\u1474\u1473\u0003\u0002\u0002\u0002\u1474\u1475",
    "\u0003\u0002\u0002\u0002\u1475\u1476\u0003\u0002\u0002\u0002\u1476\u1477",
    "\u0007\u013f\u0002\u0002\u1477\u1478\u0007\u0313\u0002\u0002\u1478\u1480",
    "\u0007\u0310\u0002\u0002\u1479\u147b\u0007\u0326\u0002\u0002\u147a\u1479",
    "\u0003\u0002\u0002\u0002\u147a\u147b\u0003\u0002\u0002\u0002\u147b\u147c",
    "\u0003\u0002\u0002\u0002\u147c\u147d\u0007\u018e\u0002\u0002\u147d\u147e",
    "\u0007\u0313\u0002\u0002\u147e\u1480\t\b\u0002\u0002\u147f\u1464\u0003",
    "\u0002\u0002\u0002\u147f\u146a\u0003\u0002\u0002\u0002\u147f\u1474\u0003",
    "\u0002\u0002\u0002\u147f\u147a\u0003\u0002\u0002\u0002\u1480\u1483\u0003",
    "\u0002\u0002\u0002\u1481\u147f\u0003\u0002\u0002\u0002\u1481\u1482\u0003",
    "\u0002\u0002\u0002\u1482\u148a\u0003\u0002\u0002\u0002\u1483\u1481\u0003",
    "\u0002\u0002\u0002\u1484\u1485\u0005\u03ac\u01d7\u0002\u1485\u1486\u0007",
    "\u008b\u0002\u0002\u1486\u1487\u0007{\u0002\u0002\u1487\u1488\u0007",
    "\u0288\u0002\u0002\u1488\u148a\u0003\u0002\u0002\u0002\u1489\u1439\u0003",
    "\u0002\u0002\u0002\u1489\u145e\u0003\u0002\u0002\u0002\u1489\u1484\u0003",
    "\u0002\u0002\u0002\u148a\u14ae\u0003\u0002\u0002\u0002\u148b\u148c\u0007",
    "H\u0002\u0002\u148c\u148d\u0007\u0170\u0002\u0002\u148d\u14a8\u0005",
    "\u03ac\u01d7\u0002\u148e\u148f\u0007\u017d\u0002\u0002\u148f\u149e\u0007",
    "\u0236\u0002\u0002\u1490\u1492\u0007\u0326\u0002\u0002\u1491\u1490\u0003",
    "\u0002\u0002\u0002\u1491\u1492\u0003\u0002\u0002\u0002\u1492\u1493\u0003",
    "\u0002\u0002\u0002\u1493\u1494\u0007[\u0002\u0002\u1494\u1495\u0007",
    "\u0313\u0002\u0002\u1495\u149d\u0005\u03ac\u01d7\u0002\u1496\u1498\u0007",
    "\u0326\u0002\u0002\u1497\u1496\u0003\u0002\u0002\u0002\u1497\u1498\u0003",
    "\u0002\u0002\u0002\u1498\u1499\u0003\u0002\u0002\u0002\u1499\u149a\u0007",
    "\u018e\u0002\u0002\u149a\u149b\u0007\u0313\u0002\u0002\u149b\u149d\t",
    "\b\u0002\u0002\u149c\u1491\u0003\u0002\u0002\u0002\u149c\u1497\u0003",
    "\u0002\u0002\u0002\u149d\u14a0\u0003\u0002\u0002\u0002\u149e\u149c\u0003",
    "\u0002\u0002\u0002\u149e\u149f\u0003\u0002\u0002\u0002\u149f\u14a9\u0003",
    "\u0002\u0002\u0002\u14a0\u149e\u0003\u0002\u0002\u0002\u14a1\u14a2\t",
    "2\u0002\u0002\u14a2\u14a3\u0007*\u0002\u0002\u14a3\u14a9\u0005\u03ac",
    "\u01d7\u0002\u14a4\u14a5\t2\u0002\u0002\u14a5\u14a6\u0007\u0011\u0002",
    "\u0002\u14a6\u14a7\u0007\u00ab\u0002\u0002\u14a7\u14a9\u0005\u03ac\u01d7",
    "\u0002\u14a8\u148e\u0003\u0002\u0002\u0002\u14a8\u14a1\u0003\u0002\u0002",
    "\u0002\u14a8\u14a4\u0003\u0002\u0002\u0002\u14a9\u14ae\u0003\u0002\u0002",
    "\u0002\u14aa\u14ab\u0007H\u0002\u0002\u14ab\u14ac\u0007\u0170\u0002",
    "\u0002\u14ac\u14ae\u0005\u03ac\u01d7\u0002\u14ad\u141b\u0003\u0002\u0002",
    "\u0002\u14ad\u1437\u0003\u0002\u0002\u0002\u14ad\u148b\u0003\u0002\u0002",
    "\u0002\u14ad\u14aa\u0003\u0002\u0002\u0002\u14ae\u0191\u0003\u0002\u0002",
    "\u0002\u14af\u14b0\u0007H\u0002\u0002\u14b0\u14b1\u0007\u0170\u0002",
    "\u0002\u14b1\u14b7\u0005\u03ac\u01d7\u0002\u14b2\u14b3\t2\u0002\u0002",
    "\u14b3\u14b4\u0007\u0236\u0002\u0002\u14b4\u14b8\u0005\u03ac\u01d7\u0002",
    "\u14b5\u14b6\u0007\u017d\u0002\u0002\u14b6\u14b8\u0007\u0236\u0002\u0002",
    "\u14b7\u14b2\u0003\u0002\u0002\u0002\u14b7\u14b5\u0003\u0002\u0002\u0002",
    "\u14b7\u14b8\u0003\u0002\u0002\u0002\u14b8\u14bd\u0003\u0002\u0002\u0002",
    "\u14b9\u14ba\u0007\u017b\u0002\u0002\u14ba\u14bb\u0007[\u0002\u0002",
    "\u14bb\u14bc\u0007\u0313\u0002\u0002\u14bc\u14be\u0005\u03ac\u01d7\u0002",
    "\u14bd\u14b9\u0003\u0002\u0002\u0002\u14bd\u14be\u0003\u0002\u0002\u0002",
    "\u14be\u14cc\u0003\u0002\u0002\u0002\u14bf\u14c0\u0007H\u0002\u0002",
    "\u14c0\u14c1\u0007\u0170\u0002\u0002\u14c1\u14c2\u0005\u03ac\u01d7\u0002",
    "\u14c2\u14c3\u0007\u008b\u0002\u0002\u14c3\u14c4\u0007{\u0002\u0002",
    "\u14c4\u14c9\u0007\u0288\u0002\u0002\u14c5\u14c6\u0007\u017b\u0002\u0002",
    "\u14c6\u14c7\u0007[\u0002\u0002\u14c7\u14c8\u0007\u0313\u0002\u0002",
    "\u14c8\u14ca\u0005\u03ac\u01d7\u0002\u14c9\u14c5\u0003\u0002\u0002\u0002",
    "\u14c9\u14ca\u0003\u0002\u0002\u0002\u14ca\u14cc\u0003\u0002\u0002\u0002",
    "\u14cb\u14af\u0003\u0002\u0002\u0002\u14cb\u14bf\u0003\u0002\u0002\u0002",
    "\u14cc\u0193\u0003\u0002\u0002\u0002\u14cd\u14ce\u0007\t\u0002\u0002",
    "\u14ce\u14cf\u0007\u0170\u0002\u0002\u14cf\u14d0\u0005\u03ac\u01d7\u0002",
    "\u14d0\u14e9\u0007\u017b\u0002\u0002\u14d1\u14d3\u0007\u0326\u0002\u0002",
    "\u14d2\u14d1\u0003\u0002\u0002\u0002\u14d2\u14d3\u0003\u0002\u0002\u0002",
    "\u14d3\u14d4\u0003\u0002\u0002\u0002\u14d4\u14d5\u0007\u0256\u0002\u0002",
    "\u14d5\u14d6\u0007\u0313\u0002\u0002\u14d6\u14ea\u0005\u03ac\u01d7\u0002",
    "\u14d7\u14d9\u0007\u0326\u0002\u0002\u14d8\u14d7\u0003\u0002\u0002\u0002",
    "\u14d8\u14d9\u0003\u0002\u0002\u0002\u14d9\u14da\u0003\u0002\u0002\u0002",
    "\u14da\u14db\u0007[\u0002\u0002\u14db\u14dc\u0007\u0313\u0002\u0002",
    "\u14dc\u14ea\u0005\u03ac\u01d7\u0002\u14dd\u14df\u0007\u0326\u0002\u0002",
    "\u14de\u14dd\u0003\u0002\u0002\u0002\u14de\u14df\u0003\u0002\u0002\u0002",
    "\u14df\u14e0\u0003\u0002\u0002\u0002\u14e0\u14e1\u0007\u0236\u0002\u0002",
    "\u14e1\u14e2\u0007\u0313\u0002\u0002\u14e2\u14ea\u0005\u03ac\u01d7\u0002",
    "\u14e3\u14e5\u0007\u0326\u0002\u0002\u14e4\u14e3\u0003\u0002\u0002\u0002",
    "\u14e4\u14e5\u0003\u0002\u0002\u0002\u14e5\u14e6\u0003\u0002\u0002\u0002",
    "\u14e6\u14e7\u0007\u018e\u0002\u0002\u14e7\u14e8\u0007\u0313\u0002\u0002",
    "\u14e8\u14ea\t\b\u0002\u0002\u14e9\u14d2\u0003\u0002\u0002\u0002\u14e9",
    "\u14d8\u0003\u0002\u0002\u0002\u14e9\u14de\u0003\u0002\u0002\u0002\u14e9",
    "\u14e4\u0003\u0002\u0002\u0002\u14ea\u14eb\u0003\u0002\u0002\u0002\u14eb",
    "\u14e9\u0003\u0002\u0002\u0002\u14eb\u14ec\u0003\u0002\u0002\u0002\u14ec",
    "\u0195\u0003\u0002\u0002\u0002\u14ed\u14ee\u0007\t\u0002\u0002\u14ee",
    "\u14ef\u0007\u0300\u0002\u0002\u14ef\u14f2\u0007\u0092\u0002\u0002\u14f0",
    "\u14f3\u0005\u03ac\u01d7\u0002\u14f1\u14f3\u0007\u01d3\u0002\u0002\u14f2",
    "\u14f0\u0003\u0002\u0002\u0002\u14f2\u14f1\u0003\u0002\u0002\u0002\u14f3",
    "\u1513\u0003\u0002\u0002\u0002\u14f4\u14f5\u0007\u017b\u0002\u0002\u14f5",
    "\u150e\u0007\u0324\u0002\u0002\u14f6\u14f7\u0007\u021b\u0002\u0002\u14f7",
    "\u14f8\u0007\u0313\u0002\u0002\u14f8\u150f\t3\u0002\u0002\u14f9\u14fb",
    "\u0007\u0326\u0002\u0002\u14fa\u14f9\u0003\u0002\u0002\u0002\u14fa\u14fb",
    "\u0003\u0002\u0002\u0002\u14fb\u14fc\u0003\u0002\u0002\u0002\u14fc\u14fd",
    "\u0007\u02a5\u0002\u0002\u14fd\u14fe\u0007\u0313\u0002\u0002\u14fe\u150f",
    "\u0007\u030b\u0002\u0002\u14ff\u1501\u0007\u0326\u0002\u0002\u1500\u14ff",
    "\u0003\u0002\u0002\u0002\u1500\u1501\u0003\u0002\u0002\u0002\u1501\u1502",
    "\u0003\u0002\u0002\u0002\u1502\u1503\u0007\u02a6\u0002\u0002\u1503\u1504",
    "\u0007\u0313\u0002\u0002\u1504\u150f\u0007\u030b\u0002\u0002\u1505\u1506",
    "\u0007\u02a7\u0002\u0002\u1506\u1507\u0007\u0313\u0002\u0002\u1507\u150f",
    "\u0007\u030b\u0002\u0002\u1508\u1509\u0007\u0247\u0002\u0002\u1509\u150a",
    "\u0007\u0313\u0002\u0002\u150a\u150f\u0007\u030b\u0002\u0002\u150b\u150c",
    "\u0007\u0210\u0002\u0002\u150c\u150d\u0007\u0313\u0002\u0002\u150d\u150f",
    "\u0007\u030b\u0002\u0002\u150e\u14f6\u0003\u0002\u0002\u0002\u150e\u14fa",
    "\u0003\u0002\u0002\u0002\u150e\u1500\u0003\u0002\u0002\u0002\u150e\u1505",
    "\u0003\u0002\u0002\u0002\u150e\u1508\u0003\u0002\u0002\u0002\u150e\u150b",
    "\u0003\u0002\u0002\u0002\u150f\u1510\u0003\u0002\u0002\u0002\u1510\u150e",
    "\u0003\u0002\u0002\u0002\u1510\u1511\u0003\u0002\u0002\u0002\u1511\u1512",
    "\u0003\u0002\u0002\u0002\u1512\u1514\u0007\u0325\u0002\u0002\u1513\u14f4",
    "\u0003\u0002\u0002\u0002\u1513\u1514\u0003\u0002\u0002\u0002\u1514\u151a",
    "\u0003\u0002\u0002\u0002\u1515\u1518\u0007\u02f6\u0002\u0002\u1516\u1519",
    "\u0005\u03ac\u01d7\u0002\u1517\u1519\u0007\u01d3\u0002\u0002\u1518\u1516",
    "\u0003\u0002\u0002\u0002\u1518\u1517\u0003\u0002\u0002\u0002\u1519\u151b",
    "\u0003\u0002\u0002\u0002\u151a\u1515\u0003\u0002\u0002\u0002\u151a\u151b",
    "\u0003\u0002\u0002\u0002\u151b\u0197\u0003\u0002\u0002\u0002\u151c\u151d",
    "\u0007H\u0002\u0002\u151d\u151e\u0007\u0300\u0002\u0002\u151e\u151f",
    "\u0007\u0092\u0002\u0002\u151f\u153f\u0005\u03ac\u01d7\u0002\u1520\u1521",
    "\u0007\u017b\u0002\u0002\u1521\u153a\u0007\u0324\u0002\u0002\u1522\u1523",
    "\u0007\u021b\u0002\u0002\u1523\u1524\u0007\u0313\u0002\u0002\u1524\u153b",
    "\t3\u0002\u0002\u1525\u1527\u0007\u0326\u0002\u0002\u1526\u1525\u0003",
    "\u0002\u0002\u0002\u1526\u1527\u0003\u0002\u0002\u0002\u1527\u1528\u0003",
    "\u0002\u0002\u0002\u1528\u1529\u0007\u02a5\u0002\u0002\u1529\u152a\u0007",
    "\u0313\u0002\u0002\u152a\u153b\u0007\u030b\u0002\u0002\u152b\u152d\u0007",
    "\u0326\u0002\u0002\u152c\u152b\u0003\u0002\u0002\u0002\u152c\u152d\u0003",
    "\u0002\u0002\u0002\u152d\u152e\u0003\u0002\u0002\u0002\u152e\u152f\u0007",
    "\u02a6\u0002\u0002\u152f\u1530\u0007\u0313\u0002\u0002\u1530\u153b\u0007",
    "\u030b\u0002\u0002\u1531\u1532\u0007\u02a7\u0002\u0002\u1532\u1533\u0007",
    "\u0313\u0002\u0002\u1533\u153b\u0007\u030b\u0002\u0002\u1534\u1535\u0007",
    "\u0247\u0002\u0002\u1535\u1536\u0007\u0313\u0002\u0002\u1536\u153b\u0007",
    "\u030b\u0002\u0002\u1537\u1538\u0007\u0210\u0002\u0002\u1538\u1539\u0007",
    "\u0313\u0002\u0002\u1539\u153b\u0007\u030b\u0002\u0002\u153a\u1522\u0003",
    "\u0002\u0002\u0002\u153a\u1526\u0003\u0002\u0002\u0002\u153a\u152c\u0003",
    "\u0002\u0002\u0002\u153a\u1531\u0003\u0002\u0002\u0002\u153a\u1534\u0003",
    "\u0002\u0002\u0002\u153a\u1537\u0003\u0002\u0002\u0002\u153b\u153c\u0003",
    "\u0002\u0002\u0002\u153c\u153a\u0003\u0002\u0002\u0002\u153c\u153d\u0003",
    "\u0002\u0002\u0002\u153d\u153e\u0003\u0002\u0002\u0002\u153e\u1540\u0007",
    "\u0325\u0002\u0002\u153f\u1520\u0003\u0002\u0002\u0002\u153f\u1540\u0003",
    "\u0002\u0002\u0002\u1540\u154e\u0003\u0002\u0002\u0002\u1541\u1544\u0007",
    "\u02f6\u0002\u0002\u1542\u1545\u0005\u03ac\u01d7\u0002\u1543\u1545\u0007",
    "\u01d3\u0002\u0002\u1544\u1542\u0003\u0002\u0002\u0002\u1544\u1543\u0003",
    "\u0002\u0002\u0002\u1544\u1545\u0003\u0002\u0002\u0002\u1545\u154c\u0003",
    "\u0002\u0002\u0002\u1546\u1548\u0007\u0326\u0002\u0002\u1547\u1546\u0003",
    "\u0002\u0002\u0002\u1547\u1548\u0003\u0002\u0002\u0002\u1548\u1549\u0003",
    "\u0002\u0002\u0002\u1549\u154a\u0007{\u0002\u0002\u154a\u154d\u0005",
    "\u03ac\u01d7\u0002\u154b\u154d\u0007\u01d3\u0002\u0002\u154c\u1547\u0003",
    "\u0002\u0002\u0002\u154c\u154b\u0003\u0002\u0002\u0002\u154c\u154d\u0003",
    "\u0002\u0002\u0002\u154d\u154f\u0003\u0002\u0002\u0002\u154e\u1541\u0003",
    "\u0002\u0002\u0002\u154e\u154f\u0003\u0002\u0002\u0002\u154f\u0199\u0003",
    "\u0002\u0002\u0002\u1550\u1551\u0007H\u0002\u0002\u1551\u1552\u0007",
    "\u0301\u0002\u0002\u1552\u1553\u0007\u012d\u0002\u0002\u1553\u1557\u0007",
    "\u01b7\u0002\u0002\u1554\u1555\u0005\u03ac\u01d7\u0002\u1555\u1556\u0007",
    "\u031f\u0002\u0002\u1556\u1558\u0003\u0002\u0002\u0002\u1557\u1554\u0003",
    "\u0002\u0002\u0002\u1557\u1558\u0003\u0002\u0002\u0002\u1558\u1559\u0003",
    "\u0002\u0002\u0002\u1559\u155a\u0005\u03ac\u01d7\u0002\u155a\u155e\u0007",
    "\u000f\u0002\u0002\u155b\u155f\u0007\u030f\u0002\u0002\u155c\u155f\u0005",
    "\u03ac\u01d7\u0002\u155d\u155f\u0007\u030a\u0002\u0002\u155e\u155b\u0003",
    "\u0002\u0002\u0002\u155e\u155c\u0003\u0002\u0002\u0002\u155e\u155d\u0003",
    "\u0002\u0002\u0002\u155f\u019b\u0003\u0002\u0002\u0002\u1560\u1561\u0007",
    "H\u0002\u0002\u1561\u1564\u0007\u028a\u0002\u0002\u1562\u1565\u0005",
    "\u0376\u01bc\u0002\u1563\u1565\u0005\u03ac\u01d7\u0002\u1564\u1562\u0003",
    "\u0002\u0002\u0002\u1564\u1563\u0003\u0002\u0002\u0002\u1565\u1567\u0003",
    "\u0002\u0002\u0002\u1566\u1568\u0005\u019e\u00d0\u0002\u1567\u1566\u0003",
    "\u0002\u0002\u0002\u1567\u1568\u0003\u0002\u0002\u0002\u1568\u156c\u0003",
    "\u0002\u0002\u0002\u1569\u156a\u0007\u00e4\u0002\u0002\u156a\u156d\u0005",
    "\u03ac\u01d7\u0002\u156b\u156d\u0007Y\u0002\u0002\u156c\u1569\u0003",
    "\u0002\u0002\u0002\u156c\u156b\u0003\u0002\u0002\u0002\u156c\u156d\u0003",
    "\u0002\u0002\u0002\u156d\u019d\u0003\u0002\u0002\u0002\u156e\u1575\u0007",
    "\u017b\u0002\u0002\u156f\u1570\u0007\u02d2\u0002\u0002\u1570\u1571\u0007",
    "\u0313\u0002\u0002\u1571\u1573\t\b\u0002\u0002\u1572\u1574\u0007\u0326",
    "\u0002\u0002\u1573\u1572\u0003\u0002\u0002\u0002\u1573\u1574\u0003\u0002",
    "\u0002\u0002\u1574\u1576\u0003\u0002\u0002\u0002\u1575\u156f\u0003\u0002",
    "\u0002\u0002\u1575\u1576\u0003\u0002\u0002\u0002\u1576\u157d\u0003\u0002",
    "\u0002\u0002\u1577\u1578\u0007\u02ac\u0002\u0002\u1578\u1579\u0007\u0313",
    "\u0002\u0002\u1579\u157b\t\b\u0002\u0002\u157a\u157c\u0007\u0326\u0002",
    "\u0002\u157b\u157a\u0003\u0002\u0002\u0002\u157b\u157c\u0003\u0002\u0002",
    "\u0002\u157c\u157e\u0003\u0002\u0002\u0002\u157d\u1577\u0003\u0002\u0002",
    "\u0002\u157d\u157e\u0003\u0002\u0002\u0002\u157e\u15ac\u0003\u0002\u0002",
    "\u0002\u157f\u1580\u0007\u0184\u0002\u0002\u1580\u15a6\u0007\u0324\u0002",
    "\u0002\u1581\u1582\u0007\u02d2\u0002\u0002\u1582\u1583\u0007\u0313\u0002",
    "\u0002\u1583\u1585\t\b\u0002\u0002\u1584\u1586\u0007\u0326\u0002\u0002",
    "\u1585\u1584\u0003\u0002\u0002\u0002\u1585\u1586\u0003\u0002\u0002\u0002",
    "\u1586\u1588\u0003\u0002\u0002\u0002\u1587\u1581\u0003\u0002\u0002\u0002",
    "\u1587\u1588\u0003\u0002\u0002\u0002\u1588\u158f\u0003\u0002\u0002\u0002",
    "\u1589\u158a\u0007\u0286\u0002\u0002\u158a\u158b\u0007\u0313\u0002\u0002",
    "\u158b\u158d\u0005\u037c\u01bf\u0002\u158c\u158e\u0007\u0326\u0002\u0002",
    "\u158d\u158c\u0003\u0002\u0002\u0002\u158d\u158e\u0003\u0002\u0002\u0002",
    "\u158e\u1590\u0003\u0002\u0002\u0002\u158f\u1589\u0003\u0002\u0002\u0002",
    "\u158f\u1590\u0003\u0002\u0002\u0002\u1590\u1597\u0003\u0002\u0002\u0002",
    "\u1591\u1592\u0007\u0244\u0002\u0002\u1592\u1593\u0007\u0313\u0002\u0002",
    "\u1593\u1595\u0007\u030b\u0002\u0002\u1594\u1596\u0007\u0326\u0002\u0002",
    "\u1595\u1594\u0003\u0002\u0002\u0002\u1595\u1596\u0003\u0002\u0002\u0002",
    "\u1596\u1598\u0003\u0002\u0002\u0002\u1597\u1591\u0003\u0002\u0002\u0002",
    "\u1597\u1598\u0003\u0002\u0002\u0002\u1598\u15a3\u0003\u0002\u0002\u0002",
    "\u1599\u159a\u0007v\u0002\u0002\u159a\u159e\u0007\u000f\u0002\u0002",
    "\u159b\u159f\u0007\u02c1\u0002\u0002\u159c\u159f\u0007\u030f\u0002\u0002",
    "\u159d\u159f\u0007\u0274\u0002\u0002\u159e\u159b\u0003\u0002\u0002\u0002",
    "\u159e\u159c\u0003\u0002\u0002\u0002\u159e\u159d\u0003\u0002\u0002\u0002",
    "\u159f\u15a1\u0003\u0002\u0002\u0002\u15a0\u15a2\u0007\u0326\u0002\u0002",
    "\u15a1\u15a0\u0003\u0002\u0002\u0002\u15a1\u15a2\u0003\u0002\u0002\u0002",
    "\u15a2\u15a4\u0003\u0002\u0002\u0002\u15a3\u1599\u0003\u0002\u0002\u0002",
    "\u15a3\u15a4\u0003\u0002\u0002\u0002\u15a4\u15a7\u0003\u0002\u0002\u0002",
    "\u15a5\u15a7\u0007g\u0002\u0002\u15a6\u1587\u0003\u0002\u0002\u0002",
    "\u15a6\u15a5\u0003\u0002\u0002\u0002\u15a7\u15a8\u0003\u0002\u0002\u0002",
    "\u15a8\u15aa\u0007\u0325\u0002\u0002\u15a9\u15ab\u0007\u0326\u0002\u0002",
    "\u15aa\u15a9\u0003\u0002\u0002\u0002\u15aa\u15ab\u0003\u0002\u0002\u0002",
    "\u15ab\u15ad\u0003\u0002\u0002\u0002\u15ac\u157f\u0003\u0002\u0002\u0002",
    "\u15ac\u15ad\u0003\u0002\u0002\u0002\u15ad\u15b5\u0003\u0002\u0002\u0002",
    "\u15ae\u15af\u0007\u027c\u0002\u0002\u15af\u15b0\u0007\u0324\u0002\u0002",
    "\u15b0\u15b1\u0007\u02d2\u0002\u0002\u15b1\u15b2\u0007\u0313\u0002\u0002",
    "\u15b2\u15b3\t\b\u0002\u0002\u15b3\u15b4\u0003\u0002\u0002\u0002\u15b4",
    "\u15b6\u0007\u0325\u0002\u0002\u15b5\u15ae\u0003\u0002\u0002\u0002\u15b5",
    "\u15b6\u0003\u0002\u0002\u0002\u15b6\u019f\u0003\u0002\u0002\u0002\u15b7",
    "\u15b8\u0007\t\u0002\u0002\u15b8\u15bb\u0007\u028a\u0002\u0002\u15b9",
    "\u15bc\u0005\u0376\u01bc\u0002\u15ba\u15bc\u0005\u03ac\u01d7\u0002\u15bb",
    "\u15b9\u0003\u0002\u0002\u0002\u15bb\u15ba\u0003\u0002\u0002\u0002\u15bc",
    "\u15bf\u0003\u0002\u0002\u0002\u15bd\u15c0\u0005\u019e\u00d0\u0002\u15be",
    "\u15c0\u0005\u01a2\u00d2\u0002\u15bf\u15bd\u0003\u0002\u0002\u0002\u15bf",
    "\u15be\u0003\u0002\u0002\u0002\u15c0\u01a1\u0003\u0002\u0002\u0002\u15c1",
    "\u15c7\u0007\u0298\u0002\u0002\u15c2\u15c3\u0007\u017b\u0002\u0002\u15c3",
    "\u15c4\u0007\u0324\u0002\u0002\u15c4\u15c5\u0005\u01a4\u00d3\u0002\u15c5",
    "\u15c6\u0007\u0325\u0002\u0002\u15c6\u15c8\u0003\u0002\u0002\u0002\u15c7",
    "\u15c2\u0003\u0002\u0002\u0002\u15c7\u15c8\u0003\u0002\u0002\u0002\u15c8",
    "\u15d7\u0003\u0002\u0002\u0002\u15c9\u15ce\u0007\u029f\u0002\u0002\u15ca",
    "\u15cb\u0007\u017b\u0002\u0002\u15cb\u15cc\u0007\u0232\u0002\u0002\u15cc",
    "\u15cd\u0007\u0313\u0002\u0002\u15cd\u15cf\t\b\u0002\u0002\u15ce\u15ca",
    "\u0003\u0002\u0002\u0002\u15ce\u15cf\u0003\u0002\u0002\u0002\u15cf\u15d7",
    "\u0003\u0002\u0002\u0002\u15d0\u15d1\u0007\u0254\u0002\u0002\u15d1\u15d4",
    "\u0007\u015c\u0002\u0002\u15d2\u15d5\u0005\u03ac\u01d7\u0002\u15d3\u15d5",
    "\u0007Y\u0002\u0002\u15d4\u15d2\u0003\u0002\u0002\u0002\u15d4\u15d3",
    "\u0003\u0002\u0002\u0002\u15d5\u15d7\u0003\u0002\u0002\u0002\u15d6\u15c1",
    "\u0003\u0002\u0002\u0002\u15d6\u15c9\u0003\u0002\u0002\u0002\u15d6\u15d0",
    "\u0003\u0002\u0002\u0002\u15d7\u01a3\u0003\u0002\u0002\u0002\u15d8\u15d9",
    "\u0007\u0246\u0002\u0002\u15d9\u15da\u0007\u0313\u0002\u0002\u15da\u15db",
    "\u0007\u030b\u0002\u0002\u15db\u01a5\u0003\u0002\u0002\u0002\u15dc\u15dd",
    "\u0007H\u0002\u0002\u15dd\u15de\u0007C\u0002\u0002\u15de\u15e1\u0005",
    "\u0396\u01cc\u0002\u15df\u15e0\u0007\u0013\u0002\u0002\u15e0\u15e2\u0005",
    "\u03ac\u01d7\u0002\u15e1\u15df\u0003\u0002\u0002\u0002\u15e1\u15e2\u0003",
    "\u0002\u0002\u0002\u15e2\u15e3\u0003\u0002\u0002\u0002\u15e3\u15ee\u0007",
    "\u0324\u0002\u0002\u15e4\u15e7\u0005\u03ac\u01d7\u0002\u15e5\u15e7\u0007",
    "Y\u0002\u0002\u15e6\u15e4\u0003\u0002\u0002\u0002\u15e6\u15e5\u0003",
    "\u0002\u0002\u0002\u15e7\u15e8\u0003\u0002\u0002\u0002\u15e8\u15e9\u0007",
    "\u02c3\u0002\u0002\u15e9\u15ea\u0007%\u0002\u0002\u15ea\u15ec\t4\u0002",
    "\u0002\u15eb\u15ed\u0007\u0326\u0002\u0002\u15ec\u15eb\u0003\u0002\u0002",
    "\u0002\u15ec\u15ed\u0003\u0002\u0002\u0002\u15ed\u15ef\u0003\u0002\u0002",
    "\u0002\u15ee\u15e6\u0003\u0002\u0002\u0002\u15ef\u15f0\u0003\u0002\u0002",
    "\u0002\u15f0\u15ee\u0003\u0002\u0002\u0002\u15f0\u15f1\u0003\u0002\u0002",
    "\u0002\u15f1\u15f2\u0003\u0002\u0002\u0002\u15f2\u15f3\u0007\u0325\u0002",
    "\u0002\u15f3\u01a7\u0003\u0002\u0002\u0002\u15f4\u15fb\u0005\u0392\u01ca",
    "\u0002\u15f5\u15fb\u0005\u0394\u01cb\u0002\u15f6\u15fb\u0005\u039a\u01ce",
    "\u0002\u15f7\u15fb\u0005\u039e\u01d0\u0002\u15f8\u15fb\u0005\u03a2\u01d2",
    "\u0002\u15f9\u15fb\u0005\u039c\u01cf\u0002\u15fa\u15f4\u0003\u0002\u0002",
    "\u0002\u15fa\u15f5\u0003\u0002\u0002\u0002\u15fa\u15f6\u0003\u0002\u0002",
    "\u0002\u15fa\u15f7\u0003\u0002\u0002\u0002\u15fa\u15f8\u0003\u0002\u0002",
    "\u0002\u15fa\u15f9\u0003\u0002\u0002\u0002\u15fb\u01a9\u0003\u0002\u0002",
    "\u0002\u15fc\u15fd\u0007H\u0002\u0002\u15fd\u15fe\u0007\u024b\u0002",
    "\u0002\u15fe\u15ff\u0007\u02f0\u0002\u0002\u15ff\u1602\u0005\u03ac\u01d7",
    "\u0002\u1600\u1601\u0007\u0013\u0002\u0002\u1601\u1603\u0005\u03ac\u01d7",
    "\u0002\u1602\u1600\u0003\u0002\u0002\u0002\u1602\u1603\u0003\u0002\u0002",
    "\u0002\u1603\u1604\u0003\u0002\u0002\u0002\u1604\u1605\u0007\u02f7\u0002",
    "\u0002\u1605\u160e\u0007\u0313\u0002\u0002\u1606\u160f\u0007\u00d4\u0002",
    "\u0002\u1607\u160f\u0007\u01e8\u0002\u0002\u1608\u160f\u0007\u02fe\u0002",
    "\u0002\u1609\u160a\u0007\u02f8\u0002\u0002\u160a\u160b\u0007\u017b\u0002",
    "\u0002\u160b\u160c\u0007\u012d\u0002\u0002\u160c\u160d\u0007\u01b7\u0002",
    "\u0002\u160d\u160f\u0005\u03ac\u01d7\u0002\u160e\u1606\u0003\u0002\u0002",
    "\u0002\u160e\u1607\u0003\u0002\u0002\u0002\u160e\u1608\u0003\u0002\u0002",
    "\u0002\u160e\u1609\u0003\u0002\u0002\u0002\u160f\u01ab\u0003\u0002\u0002",
    "\u0002\u1610\u1612\u0005\u02d0\u0169\u0002\u1611\u1610\u0003\u0002\u0002",
    "\u0002\u1611\u1612\u0003\u0002\u0002\u0002\u1612\u1613\u0003\u0002\u0002",
    "\u0002\u1613\u161b\u0007\u00c8\u0002\u0002\u1614\u1615\u0007\u015d\u0002",
    "\u0002\u1615\u1616\u0007\u0324\u0002\u0002\u1616\u1617\u0005\u02c2\u0162",
    "\u0002\u1617\u1619\u0007\u0325\u0002\u0002\u1618\u161a\u0007\u00f4\u0002",
    "\u0002\u1619\u1618\u0003\u0002\u0002\u0002\u1619\u161a\u0003\u0002\u0002",
    "\u0002\u161a\u161c\u0003\u0002\u0002\u0002\u161b\u1614\u0003\u0002\u0002",
    "\u0002\u161b\u161c\u0003\u0002\u0002\u0002\u161c\u161e\u0003\u0002\u0002",
    "\u0002\u161d\u161f\u0007\u00a4\u0002\u0002\u161e\u161d\u0003\u0002\u0002",
    "\u0002\u161e\u161f\u0003\u0002\u0002\u0002\u161f\u1620\u0003\u0002\u0002",
    "\u0002\u1620\u1622\u0005\u037e\u01c0\u0002\u1621\u1623\u0005\u0344\u01a3",
    "\u0002\u1622\u1621\u0003\u0002\u0002\u0002\u1622\u1623\u0003\u0002\u0002",
    "\u0002\u1623\u1625\u0003\u0002\u0002\u0002\u1624\u1626\u0005\u033e\u01a0",
    "\u0002\u1625\u1624\u0003\u0002\u0002\u0002\u1625\u1626\u0003\u0002\u0002",
    "\u0002\u1626\u1627\u0003\u0002\u0002\u0002\u1627\u1628\u0007\u02f6\u0002",
    "\u0002\u1628\u1629\u0005\u030a\u0186\u0002\u1629\u162a\u0007\u00e4\u0002",
    "\u0002\u162a\u1635\u0005\u02d8\u016d\u0002\u162b\u162c\u0007\u0177\u0002",
    "\u0002\u162c\u162f\u0007\u00bb\u0002\u0002\u162d\u162e\u0007\n\u0002",
    "\u0002\u162e\u1630\u0005\u02d8\u016d\u0002\u162f\u162d\u0003\u0002\u0002",
    "\u0002\u162f\u1630\u0003\u0002\u0002\u0002\u1630\u1631\u0003\u0002\u0002",
    "\u0002\u1631\u1632\u0007\u015b\u0002\u0002\u1632\u1634\u0005\u01ae\u00d8",
    "\u0002\u1633\u162b\u0003\u0002\u0002\u0002\u1634\u1637\u0003\u0002\u0002",
    "\u0002\u1635\u1633\u0003\u0002\u0002\u0002\u1635\u1636\u0003\u0002\u0002",
    "\u0002\u1636\u1645\u0003\u0002\u0002\u0002\u1637\u1635\u0003\u0002\u0002",
    "\u0002\u1638\u1639\u0007\u0177\u0002\u0002\u1639\u163a\u0007\u00db\u0002",
    "\u0002\u163a\u163d\u0007\u00bb\u0002\u0002\u163b\u163c\u0007%\u0002",
    "\u0002\u163c\u163e\u0007\u0158\u0002\u0002\u163d\u163b\u0003\u0002\u0002",
    "\u0002\u163d\u163e\u0003\u0002\u0002\u0002\u163e\u1641\u0003\u0002\u0002",
    "\u0002\u163f\u1640\u0007\n\u0002\u0002\u1640\u1642\u0005\u02d8\u016d",
    "\u0002\u1641\u163f\u0003\u0002\u0002\u0002\u1641\u1642\u0003\u0002\u0002",
    "\u0002\u1642\u1643\u0003\u0002\u0002\u0002\u1643\u1644\u0007\u015b\u0002",
    "\u0002\u1644\u1646\u0005\u01b0\u00d9\u0002\u1645\u1638\u0003\u0002\u0002",
    "\u0002\u1645\u1646\u0003\u0002\u0002\u0002\u1646\u1654\u0003\u0002\u0002",
    "\u0002\u1647\u1648\u0007\u0177\u0002\u0002\u1648\u1649\u0007\u00db\u0002",
    "\u0002\u1649\u164a\u0007\u00bb\u0002\u0002\u164a\u164b\u0007%\u0002",
    "\u0002\u164b\u164e\u0007\u0143\u0002\u0002\u164c\u164d\u0007\n\u0002",
    "\u0002\u164d\u164f\u0005\u02d8\u016d\u0002\u164e\u164c\u0003\u0002\u0002",
    "\u0002\u164e\u164f\u0003\u0002\u0002\u0002\u164f\u1650\u0003\u0002\u0002",
    "\u0002\u1650\u1651\u0007\u015b\u0002\u0002\u1651\u1653\u0005\u01ae\u00d8",
    "\u0002\u1652\u1647\u0003\u0002\u0002\u0002\u1653\u1656\u0003\u0002\u0002",
    "\u0002\u1654\u1652\u0003\u0002\u0002\u0002\u1654\u1655\u0003\u0002\u0002",
    "\u0002\u1655\u1658\u0003\u0002\u0002\u0002\u1656\u1654\u0003\u0002\u0002",
    "\u0002\u1657\u1659\u0005\u01c2\u00e2\u0002\u1658\u1657\u0003\u0002\u0002",
    "\u0002\u1658\u1659\u0003\u0002\u0002\u0002\u1659\u165b\u0003\u0002\u0002",
    "\u0002\u165a\u165c\u0005\u02f6\u017c\u0002\u165b\u165a\u0003\u0002\u0002",
    "\u0002\u165b\u165c\u0003\u0002\u0002\u0002\u165c\u165d\u0003\u0002\u0002",
    "\u0002\u165d\u165e\u0007\u0327\u0002\u0002\u165e\u01ad\u0003\u0002\u0002",
    "\u0002\u165f\u1660\u0007\u016b\u0002\u0002\u1660\u1661\u0007\u013c\u0002",
    "\u0002\u1661\u1666\u0005\u02d4\u016b\u0002\u1662\u1663\u0007\u0326\u0002",
    "\u0002\u1663\u1665\u0005\u02d4\u016b\u0002\u1664\u1662\u0003\u0002\u0002",
    "\u0002\u1665\u1668\u0003\u0002\u0002\u0002\u1666\u1664\u0003\u0002\u0002",
    "\u0002\u1666\u1667\u0003\u0002\u0002\u0002\u1667\u166b\u0003\u0002\u0002",
    "\u0002\u1668\u1666\u0003\u0002\u0002\u0002\u1669\u166b\u0007\\\u0002",
    "\u0002\u166a\u165f\u0003\u0002\u0002\u0002\u166a\u1669\u0003\u0002\u0002",
    "\u0002\u166b\u01af\u0003\u0002\u0002\u0002\u166c\u1671\u0007\u00a1\u0002",
    "\u0002\u166d\u166e\u0007\u0324\u0002\u0002\u166e\u166f\u0005\u0384\u01c3",
    "\u0002\u166f\u1670\u0007\u0325\u0002\u0002\u1670\u1672\u0003\u0002\u0002",
    "\u0002\u1671\u166d\u0003\u0002\u0002\u0002\u1671\u1672\u0003\u0002\u0002",
    "\u0002\u1672\u1676\u0003\u0002\u0002\u0002\u1673\u1677\u0005\u034e\u01a8",
    "\u0002\u1674\u1675\u0007Y\u0002\u0002\u1675\u1677\u0007\u0171\u0002",
    "\u0002\u1676\u1673\u0003\u0002\u0002\u0002\u1676\u1674\u0003\u0002\u0002",
    "\u0002\u1677\u01b1\u0003\u0002\u0002\u0002\u1678\u167a\u0005\u02d0\u0169",
    "\u0002\u1679\u1678\u0003\u0002\u0002\u0002\u1679\u167a\u0003\u0002\u0002",
    "\u0002\u167a\u167b\u0003\u0002\u0002\u0002\u167b\u1683\u0007\\\u0002",
    "\u0002\u167c\u167d\u0007\u015d\u0002\u0002\u167d\u167e\u0007\u0324\u0002",
    "\u0002\u167e\u167f\u0005\u02c2\u0162\u0002\u167f\u1681\u0007\u0325\u0002",
    "\u0002\u1680\u1682\u0007\u00f4\u0002\u0002\u1681\u1680\u0003\u0002\u0002",
    "\u0002\u1681\u1682\u0003\u0002\u0002\u0002\u1682\u1684\u0003\u0002\u0002",
    "\u0002\u1683\u167c\u0003\u0002\u0002\u0002\u1683\u1684\u0003\u0002\u0002",
    "\u0002\u1684\u1686\u0003\u0002\u0002\u0002\u1685\u1687\u0007\u008b\u0002",
    "\u0002\u1686\u1685\u0003\u0002\u0002\u0002\u1686\u1687\u0003\u0002\u0002",
    "\u0002\u1687\u1688\u0003\u0002\u0002\u0002\u1688\u168a\u0005\u01b4\u00db",
    "\u0002\u1689\u168b\u0005\u0344\u01a3\u0002\u168a\u1689\u0003\u0002\u0002",
    "\u0002\u168a\u168b\u0003\u0002\u0002\u0002\u168b\u168d\u0003\u0002\u0002",
    "\u0002\u168c\u168e\u0005\u01c2\u00e2\u0002\u168d\u168c\u0003\u0002\u0002",
    "\u0002\u168d\u168e\u0003\u0002\u0002\u0002\u168e\u1691\u0003\u0002\u0002",
    "\u0002\u168f\u1690\u0007\u008b\u0002\u0002\u1690\u1692\u0005\u030a\u0186",
    "\u0002\u1691\u168f\u0003\u0002\u0002\u0002\u1691\u1692\u0003\u0002\u0002",
    "\u0002\u1692\u16a0\u0003\u0002\u0002\u0002\u1693\u169e\u0007\u0178\u0002",
    "\u0002\u1694\u169f\u0005\u02d8\u016d\u0002\u1695\u1696\u0007J\u0002",
    "\u0002\u1696\u169c\u0007\u00e0\u0002\u0002\u1697\u1699\u0007\u020c\u0002",
    "\u0002\u1698\u1697\u0003\u0002\u0002\u0002\u1698\u1699\u0003\u0002\u0002",
    "\u0002\u1699\u169a\u0003\u0002\u0002\u0002\u169a\u169d\u0005\u0386\u01c4",
    "\u0002\u169b\u169d\u0007\u030a\u0002\u0002\u169c\u1698\u0003\u0002\u0002",
    "\u0002\u169c\u169b\u0003\u0002\u0002\u0002\u169d\u169f\u0003\u0002\u0002",
    "\u0002\u169e\u1694\u0003\u0002\u0002\u0002\u169e\u1695\u0003\u0002\u0002",
    "\u0002\u169f\u16a1\u0003\u0002\u0002\u0002\u16a0\u1693\u0003\u0002\u0002",
    "\u0002\u16a0\u16a1\u0003\u0002\u0002\u0002\u16a1\u16a3\u0003\u0002\u0002",
    "\u0002\u16a2\u16a4\u0005\u02ee\u0178\u0002\u16a3\u16a2\u0003\u0002\u0002",
    "\u0002\u16a3\u16a4\u0003\u0002\u0002\u0002\u16a4\u16a6\u0003\u0002\u0002",
    "\u0002\u16a5\u16a7\u0005\u02f6\u017c\u0002\u16a6\u16a5\u0003\u0002\u0002",
    "\u0002\u16a6\u16a7\u0003\u0002\u0002\u0002\u16a7\u16a9\u0003\u0002\u0002",
    "\u0002\u16a8\u16aa\u0007\u0327\u0002\u0002\u16a9\u16a8\u0003\u0002\u0002",
    "\u0002\u16a9\u16aa\u0003\u0002\u0002\u0002\u16aa\u01b3\u0003\u0002\u0002",
    "\u0002\u16ab\u16b0\u0005\u037e\u01c0\u0002\u16ac\u16b0\u0005\u0340\u01a1",
    "\u0002\u16ad\u16b0\u0005\u0258\u012d\u0002\u16ae\u16b0\u0007\u030a\u0002",
    "\u0002\u16af\u16ab\u0003\u0002\u0002\u0002\u16af\u16ac\u0003\u0002\u0002",
    "\u0002\u16af\u16ad\u0003\u0002\u0002\u0002\u16af\u16ae\u0003\u0002\u0002",
    "\u0002\u16b0\u01b5\u0003\u0002\u0002\u0002\u16b1\u16b3\u0005\u02d0\u0169",
    "\u0002\u16b2\u16b1\u0003\u0002\u0002\u0002\u16b2\u16b3\u0003\u0002\u0002",
    "\u0002\u16b3\u16b4\u0003\u0002\u0002\u0002\u16b4\u16bc\u0007\u00a1\u0002",
    "\u0002\u16b5\u16b6\u0007\u015d\u0002\u0002\u16b6\u16b7\u0007\u0324\u0002",
    "\u0002\u16b7\u16b8\u0005\u02c2\u0162\u0002\u16b8\u16ba\u0007\u0325\u0002",
    "\u0002\u16b9\u16bb\u0007\u00f4\u0002\u0002\u16ba\u16b9\u0003\u0002\u0002",
    "\u0002\u16ba\u16bb\u0003\u0002\u0002\u0002\u16bb\u16bd\u0003\u0002\u0002",
    "\u0002\u16bc\u16b5\u0003\u0002\u0002\u0002\u16bc\u16bd\u0003\u0002\u0002",
    "\u0002\u16bd\u16bf\u0003\u0002\u0002\u0002\u16be\u16c0\u0007\u00a4\u0002",
    "\u0002\u16bf\u16be\u0003\u0002\u0002\u0002\u16bf\u16c0\u0003\u0002\u0002",
    "\u0002\u16c0\u16c3\u0003\u0002\u0002\u0002\u16c1\u16c4\u0005\u037e\u01c0",
    "\u0002\u16c2\u16c4\u0005\u0258\u012d\u0002\u16c3\u16c1\u0003\u0002\u0002",
    "\u0002\u16c3\u16c2\u0003\u0002\u0002\u0002\u16c4\u16c6\u0003\u0002\u0002",
    "\u0002\u16c5\u16c7\u0005\u0344\u01a3\u0002\u16c6\u16c5\u0003\u0002\u0002",
    "\u0002\u16c6\u16c7\u0003\u0002\u0002\u0002\u16c7\u16cc\u0003\u0002\u0002",
    "\u0002\u16c8\u16c9\u0007\u0324\u0002\u0002\u16c9\u16ca\u0005\u0384\u01c3",
    "\u0002\u16ca\u16cb\u0007\u0325\u0002\u0002\u16cb\u16cd\u0003\u0002\u0002",
    "\u0002\u16cc\u16c8\u0003\u0002\u0002\u0002\u16cc\u16cd\u0003\u0002\u0002",
    "\u0002\u16cd\u16cf\u0003\u0002\u0002\u0002\u16ce\u16d0\u0005\u01c2\u00e2",
    "\u0002\u16cf\u16ce\u0003\u0002\u0002\u0002\u16cf\u16d0\u0003\u0002\u0002",
    "\u0002\u16d0\u16d1\u0003\u0002\u0002\u0002\u16d1\u16d3\u0005\u01b8\u00dd",
    "\u0002\u16d2\u16d4\u0005\u02ee\u0178\u0002\u16d3\u16d2\u0003\u0002\u0002",
    "\u0002\u16d3\u16d4\u0003\u0002\u0002\u0002\u16d4\u16d6\u0003\u0002\u0002",
    "\u0002\u16d5\u16d7\u0005\u02f6\u017c\u0002\u16d6\u16d5\u0003\u0002\u0002",
    "\u0002\u16d6\u16d7\u0003\u0002\u0002\u0002\u16d7\u16d9\u0003\u0002\u0002",
    "\u0002\u16d8\u16da\u0007\u0327\u0002\u0002\u16d9\u16d8\u0003\u0002\u0002",
    "\u0002\u16d9\u16da\u0003\u0002\u0002\u0002\u16da\u01b7\u0003\u0002\u0002",
    "\u0002\u16db\u16e1\u0005\u034e\u01a8\u0002\u16dc\u16e1\u0005\u0328\u0195",
    "\u0002\u16dd\u16e1\u0005\u026c\u0137\u0002\u16de\u16df\u0007Y\u0002",
    "\u0002\u16df\u16e1\u0007\u0171\u0002\u0002\u16e0\u16db\u0003\u0002\u0002",
    "\u0002\u16e0\u16dc\u0003\u0002\u0002\u0002\u16e0\u16dd\u0003\u0002\u0002",
    "\u0002\u16e0\u16de\u0003\u0002\u0002\u0002\u16e1\u01b9\u0003\u0002\u0002",
    "\u0002\u16e2\u16e4\u0007\u0324\u0002\u0002\u16e3\u16e2\u0003\u0002\u0002",
    "\u0002\u16e3\u16e4\u0003\u0002\u0002\u0002\u16e4\u16e5\u0003\u0002\u0002",
    "\u0002\u16e5\u16ea\u0007\u029a\u0002\u0002\u16e6\u16eb\u0007\u0005\u0002",
    "\u0002\u16e7\u16eb\u0007b\u0002\u0002\u16e8\u16eb\u0005\u02e6\u0174",
    "\u0002\u16e9\u16eb\u0007\u0329\u0002\u0002\u16ea\u16e6\u0003\u0002\u0002",
    "\u0002\u16ea\u16e7\u0003\u0002\u0002\u0002\u16ea\u16e8\u0003\u0002\u0002",
    "\u0002\u16ea\u16e9\u0003\u0002\u0002\u0002\u16eb\u16f4\u0003\u0002\u0002",
    "\u0002\u16ec\u16ed\u0007\u030a\u0002\u0002\u16ed\u16ee\u0007\u0313\u0002",
    "\u0002\u16ee\u16f0\u0005\u02c2\u0162\u0002\u16ef\u16f1\u0007\u0326\u0002",
    "\u0002\u16f0\u16ef\u0003\u0002\u0002\u0002\u16f0\u16f1\u0003\u0002\u0002",
    "\u0002\u16f1\u16f3\u0003\u0002\u0002\u0002\u16f2\u16ec\u0003\u0002\u0002",
    "\u0002\u16f3\u16f6\u0003\u0002\u0002\u0002\u16f4\u16f2\u0003\u0002\u0002",
    "\u0002\u16f4\u16f5\u0003\u0002\u0002\u0002\u16f5\u16f7\u0003\u0002\u0002",
    "\u0002\u16f6\u16f4\u0003\u0002\u0002\u0002\u16f7\u16f8\u0007\u008b\u0002",
    "\u0002\u16f8\u16fe\u0005\u0376\u01bc\u0002\u16f9\u16fa\u0007\u00a4\u0002",
    "\u0002\u16fa\u16fb\u0005\u03ac\u01d7\u0002\u16fb\u16fc\u0007\u0178\u0002",
    "\u0002\u16fc\u16fd\u0005\u02d8\u016d\u0002\u16fd\u16ff\u0003\u0002\u0002",
    "\u0002\u16fe\u16f9\u0003\u0002\u0002\u0002\u16fe\u16ff\u0003\u0002\u0002",
    "\u0002\u16ff\u1701\u0003\u0002\u0002\u0002\u1700\u1702\u0007\u0325\u0002",
    "\u0002\u1701\u1700\u0003\u0002\u0002\u0002\u1701\u1702\u0003\u0002\u0002",
    "\u0002\u1702\u01bb\u0003\u0002\u0002\u0002\u1703\u1705\u0005\u02d0\u0169",
    "\u0002\u1704\u1703\u0003\u0002\u0002\u0002\u1704\u1705\u0003\u0002\u0002",
    "\u0002\u1705\u1706\u0003\u0002\u0002\u0002\u1706\u1708\u0005\u02e0\u0171",
    "\u0002\u1707\u1709\u0005\u02ec\u0177\u0002\u1708\u1707\u0003\u0002\u0002",
    "\u0002\u1708\u1709\u0003\u0002\u0002\u0002\u1709\u170b\u0003\u0002\u0002",
    "\u0002\u170a\u170c\u0005\u02ee\u0178\u0002\u170b\u170a\u0003\u0002\u0002",
    "\u0002\u170b\u170c\u0003\u0002\u0002\u0002\u170c\u170e\u0003\u0002\u0002",
    "\u0002\u170d\u170f\u0005\u02f6\u017c\u0002\u170e\u170d\u0003\u0002\u0002",
    "\u0002\u170e\u170f\u0003\u0002\u0002\u0002\u170f\u1711\u0003\u0002\u0002",
    "\u0002\u1710\u1712\u0007\u0327\u0002\u0002\u1711\u1710\u0003\u0002\u0002",
    "\u0002\u1711\u1712\u0003\u0002\u0002\u0002\u1712\u01bd\u0003\u0002\u0002",
    "\u0002\u1713\u1716\u0007\u030a\u0002\u0002\u1714\u1716\u0005\u03a8\u01d5",
    "\u0002\u1715\u1713\u0003\u0002\u0002\u0002\u1715\u1714\u0003\u0002\u0002",
    "\u0002\u1716\u01bf\u0003\u0002\u0002\u0002\u1717\u1719\u0005\u02d0\u0169",
    "\u0002\u1718\u1717\u0003\u0002\u0002\u0002\u1718\u1719\u0003\u0002\u0002",
    "\u0002\u1719\u171a\u0003\u0002\u0002\u0002\u171a\u1722\u0007\u016b\u0002",
    "\u0002\u171b\u171c\u0007\u015d\u0002\u0002\u171c\u171d\u0007\u0324\u0002",
    "\u0002\u171d\u171e\u0005\u02c2\u0162\u0002\u171e\u1720\u0007\u0325\u0002",
    "\u0002\u171f\u1721\u0007\u00f4\u0002\u0002\u1720\u171f\u0003\u0002\u0002",
    "\u0002\u1720\u1721\u0003\u0002\u0002\u0002\u1721\u1723\u0003\u0002\u0002",
    "\u0002\u1722\u171b\u0003\u0002\u0002\u0002\u1722\u1723\u0003\u0002\u0002",
    "\u0002\u1723\u1726\u0003\u0002\u0002\u0002\u1724\u1727\u0005\u037e\u01c0",
    "\u0002\u1725\u1727\u0005\u0258\u012d\u0002\u1726\u1724\u0003\u0002\u0002",
    "\u0002\u1726\u1725\u0003\u0002\u0002\u0002\u1727\u1729\u0003\u0002\u0002",
    "\u0002\u1728\u172a\u0005\u0342\u01a2\u0002\u1729\u1728\u0003\u0002\u0002",
    "\u0002\u1729\u172a\u0003\u0002\u0002\u0002\u172a\u172b\u0003\u0002\u0002",
    "\u0002\u172b\u172c\u0007\u013c\u0002\u0002\u172c\u1731\u0005\u02d4\u016b",
    "\u0002\u172d\u172e\u0007\u0326\u0002\u0002\u172e\u1730\u0005\u02d4\u016b",
    "\u0002\u172f\u172d\u0003\u0002\u0002\u0002\u1730\u1733\u0003\u0002\u0002",
    "\u0002\u1731\u172f\u0003\u0002\u0002\u0002\u1731\u1732\u0003\u0002\u0002",
    "\u0002\u1732\u1735\u0003\u0002\u0002\u0002\u1733\u1731\u0003\u0002\u0002",
    "\u0002\u1734\u1736\u0005\u01c2\u00e2\u0002\u1735\u1734\u0003\u0002\u0002",
    "\u0002\u1735\u1736\u0003\u0002\u0002\u0002\u1736\u1739\u0003\u0002\u0002",
    "\u0002\u1737\u1738\u0007\u008b\u0002\u0002\u1738\u173a\u0005\u030a\u0186",
    "\u0002\u1739\u1737\u0003\u0002\u0002\u0002\u1739\u173a\u0003\u0002\u0002",
    "\u0002\u173a\u1748\u0003\u0002\u0002\u0002\u173b\u1746\u0007\u0178\u0002",
    "\u0002\u173c\u1747\u0005\u02d6\u016c\u0002\u173d\u173e\u0007J\u0002",
    "\u0002\u173e\u1744\u0007\u00e0\u0002\u0002\u173f\u1741\u0007\u020c\u0002",
    "\u0002\u1740\u173f\u0003\u0002\u0002\u0002\u1740\u1741\u0003\u0002\u0002",
    "\u0002\u1741\u1742\u0003\u0002\u0002\u0002\u1742\u1745\u0005\u0386\u01c4",
    "\u0002\u1743\u1745\u0007\u030a\u0002\u0002\u1744\u1740\u0003\u0002\u0002",
    "\u0002\u1744\u1743\u0003\u0002\u0002\u0002\u1745\u1747\u0003\u0002\u0002",
    "\u0002\u1746\u173c\u0003\u0002\u0002\u0002\u1746\u173d\u0003\u0002\u0002",
    "\u0002\u1747\u1749\u0003\u0002\u0002\u0002\u1748\u173b\u0003\u0002\u0002",
    "\u0002\u1748\u1749\u0003\u0002\u0002\u0002\u1749\u174b\u0003\u0002\u0002",
    "\u0002\u174a\u174c\u0005\u02ee\u0178\u0002\u174b\u174a\u0003\u0002\u0002",
    "\u0002\u174b\u174c\u0003\u0002\u0002\u0002\u174c\u174e\u0003\u0002\u0002",
    "\u0002\u174d\u174f\u0005\u02f6\u017c\u0002\u174e\u174d\u0003\u0002\u0002",
    "\u0002\u174e\u174f\u0003\u0002\u0002\u0002\u174f\u1751\u0003\u0002\u0002",
    "\u0002\u1750\u1752\u0007\u0327\u0002\u0002\u1751\u1750\u0003\u0002\u0002",
    "\u0002\u1751\u1752\u0003\u0002\u0002\u0002\u1752\u01c1\u0003\u0002\u0002",
    "\u0002\u1753\u1754\u0007\u0273\u0002\u0002\u1754\u1759\u0005\u01c4\u00e3",
    "\u0002\u1755\u1756\u0007\u0326\u0002\u0002\u1756\u1758\u0005\u01c4\u00e3",
    "\u0002\u1757\u1755\u0003\u0002\u0002\u0002\u1758\u175b\u0003\u0002\u0002",
    "\u0002\u1759\u1757\u0003\u0002\u0002\u0002\u1759\u175a\u0003\u0002\u0002",
    "\u0002\u175a\u1767\u0003\u0002\u0002\u0002\u175b\u1759\u0003\u0002\u0002",
    "\u0002\u175c\u175f\u0007\u00a4\u0002\u0002\u175d\u1760\u0007\u030a\u0002",
    "\u0002\u175e\u1760\u0005\u0378\u01bd\u0002\u175f\u175d\u0003\u0002\u0002",
    "\u0002\u175f\u175e\u0003\u0002\u0002\u0002\u1760\u1765\u0003\u0002\u0002",
    "\u0002\u1761\u1762\u0007\u0324\u0002\u0002\u1762\u1763\u0005\u0384\u01c3",
    "\u0002\u1763\u1764\u0007\u0325\u0002\u0002\u1764\u1766\u0003\u0002\u0002",
    "\u0002\u1765\u1761\u0003\u0002\u0002\u0002\u1765\u1766\u0003\u0002\u0002",
    "\u0002\u1766\u1768\u0003\u0002\u0002\u0002\u1767\u175c\u0003\u0002\u0002",
    "\u0002\u1767\u1768\u0003\u0002\u0002\u0002\u1768\u01c3\u0003\u0002\u0002",
    "\u0002\u1769\u176c\u0005\u01c6\u00e4\u0002\u176a\u176c\u0005\u02c2\u0162",
    "\u0002\u176b\u1769\u0003\u0002\u0002\u0002\u176b\u176a\u0003\u0002\u0002",
    "\u0002\u176c\u176e\u0003\u0002\u0002\u0002\u176d\u176f\u0005\u033c\u019f",
    "\u0002\u176e\u176d\u0003\u0002\u0002\u0002\u176e\u176f\u0003\u0002\u0002",
    "\u0002\u176f\u01c5\u0003\u0002\u0002\u0002\u1770\u1774\u0007\u01d8\u0002",
    "\u0002\u1771\u1774\u0007\u0220\u0002\u0002\u1772\u1774\u0005\u0378\u01bd",
    "\u0002\u1773\u1770\u0003\u0002\u0002\u0002\u1773\u1771\u0003\u0002\u0002",
    "\u0002\u1773\u1772\u0003\u0002\u0002\u0002\u1774\u1775\u0003\u0002\u0002",
    "\u0002\u1775\u1778\u0007\u031f\u0002\u0002\u1776\u1779\u0007\u0329\u0002",
    "\u0002\u1777\u1779\u0005\u03ac\u01d7\u0002\u1778\u1776\u0003\u0002\u0002",
    "\u0002\u1778\u1777\u0003\u0002\u0002\u0002\u1779\u177c\u0003\u0002\u0002",
    "\u0002\u177a\u177c\u0007\u0303\u0002\u0002\u177b\u1773\u0003\u0002\u0002",
    "\u0002\u177b\u177a\u0003\u0002\u0002\u0002\u177c\u01c7\u0003\u0002\u0002",
    "\u0002\u177d\u177e\u0007H\u0002\u0002\u177e\u177f\u0007T\u0002\u0002",
    "\u177f\u1783\u0005\u03ac\u01d7\u0002\u1780\u1781\u0007=\u0002\u0002",
    "\u1781\u1782\u0007\u0313\u0002\u0002\u1782\u1784\t5\u0002\u0002\u1783",
    "\u1780\u0003\u0002\u0002\u0002\u1783\u1784\u0003\u0002\u0002\u0002\u1784",
    "\u1791\u0003\u0002\u0002\u0002\u1785\u1787\u0007\u00e4\u0002\u0002\u1786",
    "\u1788\u0007\u00ff\u0002\u0002\u1787\u1786\u0003\u0002\u0002\u0002\u1787",
    "\u1788\u0003\u0002\u0002\u0002\u1788\u1789\u0003\u0002\u0002\u0002\u1789",
    "\u178e\u0005\u036a\u01b6\u0002\u178a\u178b\u0007\u0326\u0002\u0002\u178b",
    "\u178d\u0005\u036a\u01b6\u0002\u178c\u178a\u0003\u0002\u0002\u0002\u178d",
    "\u1790\u0003\u0002\u0002\u0002\u178e\u178c\u0003\u0002\u0002\u0002\u178e",
    "\u178f\u0003\u0002\u0002\u0002\u178f\u1792\u0003\u0002\u0002\u0002\u1790",
    "\u178e\u0003\u0002\u0002\u0002\u1791\u1785\u0003\u0002\u0002\u0002\u1791",
    "\u1792\u0003\u0002\u0002\u0002\u1792\u179d\u0003\u0002\u0002\u0002\u1793",
    "\u1794\u0007\u00ba\u0002\u0002\u1794\u1795\u0007\u00e4\u0002\u0002\u1795",
    "\u179a\u0005\u036a\u01b6\u0002\u1796\u1797\u0007\u0326\u0002\u0002\u1797",
    "\u1799\u0005\u036a\u01b6\u0002\u1798\u1796\u0003\u0002\u0002\u0002\u1799",
    "\u179c\u0003\u0002\u0002\u0002\u179a\u1798\u0003\u0002\u0002\u0002\u179a",
    "\u179b\u0003\u0002\u0002\u0002\u179b\u179e\u0003\u0002\u0002\u0002\u179c",
    "\u179a\u0003\u0002\u0002\u0002\u179d\u1793\u0003\u0002\u0002\u0002\u179d",
    "\u179e\u0003\u0002\u0002\u0002\u179e\u17a1\u0003\u0002\u0002\u0002\u179f",
    "\u17a0\u00076\u0002\u0002\u17a0\u17a2\u0005\u03ac\u01d7\u0002\u17a1",
    "\u179f\u0003\u0002\u0002\u0002\u17a1\u17a2\u0003\u0002\u0002\u0002\u17a2",
    "\u17ac\u0003\u0002\u0002\u0002\u17a3\u17a4\u0007\u017b\u0002\u0002\u17a4",
    "\u17a9\u0005\u0366\u01b4\u0002\u17a5\u17a6\u0007\u0326\u0002\u0002\u17a6",
    "\u17a8\u0005\u0366\u01b4\u0002\u17a7\u17a5\u0003\u0002\u0002\u0002\u17a8",
    "\u17ab\u0003\u0002\u0002\u0002\u17a9\u17a7\u0003\u0002\u0002\u0002\u17a9",
    "\u17aa\u0003\u0002\u0002\u0002\u17aa\u17ad\u0003\u0002\u0002\u0002\u17ab",
    "\u17a9\u0003\u0002\u0002\u0002\u17ac\u17a3\u0003\u0002\u0002\u0002\u17ac",
    "\u17ad\u0003\u0002\u0002\u0002\u17ad\u01c9\u0003\u0002\u0002\u0002\u17ae",
    "\u17b0\u0007H\u0002\u0002\u17af\u17b1\u0007\u0167\u0002\u0002\u17b0",
    "\u17af\u0003\u0002\u0002\u0002\u17b0\u17b1\u0003\u0002\u0002\u0002\u17b1",
    "\u17b3\u0003\u0002\u0002\u0002\u17b2\u17b4\u0005\u038a\u01c6\u0002\u17b3",
    "\u17b2\u0003\u0002\u0002\u0002\u17b3\u17b4\u0003\u0002\u0002\u0002\u17b4",
    "\u17b5\u0003\u0002\u0002\u0002\u17b5\u17b6\u0007\u009d\u0002\u0002\u17b6",
    "\u17b7\u0005\u03ac\u01d7\u0002\u17b7\u17b8\u0007\u00e4\u0002\u0002\u17b8",
    "\u17b9\u0005\u0322\u0192\u0002\u17b9\u17ba\u0007\u0324\u0002\u0002\u17ba",
    "\u17bb\u0005\u0382\u01c2\u0002\u17bb\u17c1\u0007\u0325\u0002\u0002\u17bc",
    "\u17bd\u0007\u009b\u0002\u0002\u17bd\u17be\u0007\u0324\u0002\u0002\u17be",
    "\u17bf\u0005\u0384\u01c3\u0002\u17bf\u17c0\u0007\u0325\u0002\u0002\u17c0",
    "\u17c2\u0003\u0002\u0002\u0002\u17c1\u17bc\u0003\u0002\u0002\u0002\u17c1",
    "\u17c2\u0003\u0002\u0002\u0002\u17c2\u17c5\u0003\u0002\u0002\u0002\u17c3",
    "\u17c4\u0007\u0178\u0002\u0002\u17c4\u17c6\u0005\u02d8\u016d\u0002\u17c5",
    "\u17c3\u0003\u0002\u0002\u0002\u17c5\u17c6\u0003\u0002\u0002\u0002\u17c6",
    "\u17c8\u0003\u0002\u0002\u0002\u17c7\u17c9\u0005\u02b2\u015a\u0002\u17c8",
    "\u17c7\u0003\u0002\u0002\u0002\u17c8\u17c9\u0003\u0002\u0002\u0002\u17c9",
    "\u17cc\u0003\u0002\u0002\u0002\u17ca\u17cb\u0007\u00e4\u0002\u0002\u17cb",
    "\u17cd\u0005\u03ac\u01d7\u0002\u17cc\u17ca\u0003\u0002\u0002\u0002\u17cc",
    "\u17cd\u0003\u0002\u0002\u0002\u17cd\u17cf\u0003\u0002\u0002\u0002\u17ce",
    "\u17d0\u0007\u0327\u0002\u0002\u17cf\u17ce\u0003\u0002\u0002\u0002\u17cf",
    "\u17d0\u0003\u0002\u0002\u0002\u17d0\u01cb\u0003\u0002\u0002\u0002\u17d1",
    "\u17d4\u0007H\u0002\u0002\u17d2\u17d3\u0007\u00ec\u0002\u0002\u17d3",
    "\u17d5\u0007\t\u0002\u0002\u17d4\u17d2\u0003\u0002\u0002\u0002\u17d4",
    "\u17d5\u0003\u0002\u0002\u0002\u17d5\u17d8\u0003\u0002\u0002\u0002\u17d6",
    "\u17d8\u0007\t\u0002\u0002\u17d7\u17d1\u0003\u0002\u0002\u0002\u17d7",
    "\u17d6\u0003\u0002\u0002\u0002\u17d8\u17d9\u0003\u0002\u0002\u0002\u17d9",
    "\u17da\t6\u0002\u0002\u17da\u17dd\u0005\u037c\u01bf\u0002\u17db\u17dc",
    "\u0007\u0327\u0002\u0002\u17dc\u17de\u0007\u030b\u0002\u0002\u17dd\u17db",
    "\u0003\u0002\u0002\u0002\u17dd\u17de\u0003\u0002\u0002\u0002\u17de\u17ed",
    "\u0003\u0002\u0002\u0002\u17df\u17e1\u0007\u0324\u0002\u0002\u17e0\u17df",
    "\u0003\u0002\u0002\u0002\u17e0\u17e1\u0003\u0002\u0002\u0002\u17e1\u17e2",
    "\u0003\u0002\u0002\u0002\u17e2\u17e7\u0005\u01e2\u00f2\u0002\u17e3\u17e4",
    "\u0007\u0326\u0002\u0002\u17e4\u17e6\u0005\u01e2\u00f2\u0002\u17e5\u17e3",
    "\u0003\u0002\u0002\u0002\u17e6\u17e9\u0003\u0002\u0002\u0002\u17e7\u17e5",
    "\u0003\u0002\u0002\u0002\u17e7\u17e8\u0003\u0002\u0002\u0002\u17e8\u17eb",
    "\u0003\u0002\u0002\u0002\u17e9\u17e7\u0003\u0002\u0002\u0002\u17ea\u17ec",
    "\u0007\u0325\u0002\u0002\u17eb\u17ea\u0003\u0002\u0002\u0002\u17eb\u17ec",
    "\u0003\u0002\u0002\u0002\u17ec\u17ee\u0003\u0002\u0002\u0002\u17ed\u17e0",
    "\u0003\u0002\u0002\u0002\u17ed\u17ee\u0003\u0002\u0002\u0002\u17ee\u17f8",
    "\u0003\u0002\u0002\u0002\u17ef\u17f0\u0007\u017b\u0002\u0002\u17f0\u17f5",
    "\u0005\u01e4\u00f3\u0002\u17f1\u17f2\u0007\u0326\u0002\u0002\u17f2\u17f4",
    "\u0005\u01e4\u00f3\u0002\u17f3\u17f1\u0003\u0002\u0002\u0002\u17f4\u17f7",
    "\u0003\u0002\u0002\u0002\u17f5\u17f3\u0003\u0002\u0002\u0002\u17f5\u17f6",
    "\u0003\u0002\u0002\u0002\u17f6\u17f9\u0003\u0002\u0002\u0002\u17f7\u17f5",
    "\u0003\u0002\u0002\u0002\u17f8\u17ef\u0003\u0002\u0002\u0002\u17f8\u17f9",
    "\u0003\u0002\u0002\u0002\u17f9\u17fc\u0003\u0002\u0002\u0002\u17fa\u17fb",
    "\u0007\u0085\u0002\u0002\u17fb\u17fd\u0007\u0111\u0002\u0002\u17fc\u17fa",
    "\u0003\u0002\u0002\u0002\u17fc\u17fd\u0003\u0002\u0002\u0002\u17fd\u17fe",
    "\u0003\u0002\u0002\u0002\u17fe\u17ff\u0007\u000f\u0002\u0002\u17ff\u1800",
    "\u0005\u0006\u0004\u0002\u1800\u01cd\u0003\u0002\u0002\u0002\u1801\u1804",
    "\u0005\u01d0\u00e9\u0002\u1802\u1804\u0005\u01d6\u00ec\u0002\u1803\u1801",
    "\u0003\u0002\u0002\u0002\u1803\u1802\u0003\u0002\u0002\u0002\u1804\u01cf",
    "\u0003\u0002\u0002\u0002\u1805\u1808\u0007H\u0002\u0002\u1806\u1807",
    "\u0007\u00ec\u0002\u0002\u1807\u1809\u0007\t\u0002\u0002\u1808\u1806",
    "\u0003\u0002\u0002\u0002\u1808\u1809\u0003\u0002\u0002\u0002\u1809\u180c",
    "\u0003\u0002\u0002\u0002\u180a\u180c\u0007\t\u0002\u0002\u180b\u1805",
    "\u0003\u0002\u0002\u0002\u180b\u180a\u0003\u0002\u0002\u0002\u180c\u180d",
    "\u0003\u0002\u0002\u0002\u180d\u180e\u0007\u0162\u0002\u0002\u180e\u180f",
    "\u0005\u037a\u01be\u0002\u180f\u1810\u0007\u00e4\u0002\u0002\u1810\u181a",
    "\u0005\u0378\u01bd\u0002\u1811\u1812\u0007\u017b\u0002\u0002\u1812\u1817",
    "\u0005\u01d2\u00ea\u0002\u1813\u1814\u0007\u0326\u0002\u0002\u1814\u1816",
    "\u0005\u01d2\u00ea\u0002\u1815\u1813\u0003\u0002\u0002\u0002\u1816\u1819",
    "\u0003\u0002\u0002\u0002\u1817\u1815\u0003\u0002\u0002\u0002\u1817\u1818",
    "\u0003\u0002\u0002\u0002\u1818\u181b\u0003\u0002\u0002\u0002\u1819\u1817",
    "\u0003\u0002\u0002\u0002\u181a\u1811\u0003\u0002\u0002\u0002\u181a\u181b",
    "\u0003\u0002\u0002\u0002\u181b\u1820\u0003\u0002\u0002\u0002\u181c\u1821",
    "\u0007\u0085\u0002\u0002\u181d\u1821\u0007\u018a\u0002\u0002\u181e\u181f",
    "\u0007\u00a2\u0002\u0002\u181f\u1821\u0007\u00e0\u0002\u0002\u1820\u181c",
    "\u0003\u0002\u0002\u0002\u1820\u181d\u0003\u0002\u0002\u0002\u1820\u181e",
    "\u0003\u0002\u0002\u0002\u1821\u1822\u0003\u0002\u0002\u0002\u1822\u1827",
    "\u0005\u01d4\u00eb\u0002\u1823\u1824\u0007\u0326\u0002\u0002\u1824\u1826",
    "\u0005\u01d4\u00eb\u0002\u1825\u1823\u0003\u0002\u0002\u0002\u1826\u1829",
    "\u0003\u0002\u0002\u0002\u1827\u1825\u0003\u0002\u0002\u0002\u1827\u1828",
    "\u0003\u0002\u0002\u0002\u1828\u182c\u0003\u0002\u0002\u0002\u1829\u1827",
    "\u0003\u0002\u0002\u0002\u182a\u182b\u0007\u017b\u0002\u0002\u182b\u182d",
    "\u0007\r\u0002\u0002\u182c\u182a\u0003\u0002\u0002\u0002\u182c\u182d",
    "\u0003\u0002\u0002\u0002\u182d\u1831\u0003\u0002\u0002\u0002\u182e\u182f",
    "\u0007\u00db\u0002\u0002\u182f\u1830\u0007\u0085\u0002\u0002\u1830\u1832",
    "\u0007\u0111\u0002\u0002\u1831\u182e\u0003\u0002\u0002\u0002\u1831\u1832",
    "\u0003\u0002\u0002\u0002\u1832\u1833\u0003\u0002\u0002\u0002\u1833\u1834",
    "\u0007\u000f\u0002\u0002\u1834\u1835\u0005\u0006\u0004\u0002\u1835\u01d1",
    "\u0003\u0002\u0002\u0002\u1836\u1839\u0007\u01ec\u0002\u0002\u1837\u1839",
    "\u0005\u029a\u014e\u0002\u1838\u1836\u0003\u0002\u0002\u0002\u1838\u1837",
    "\u0003\u0002\u0002\u0002\u1839\u01d3\u0003\u0002\u0002\u0002\u183a\u183b",
    "\t7\u0002\u0002\u183b\u01d5\u0003\u0002\u0002\u0002\u183c\u183f\u0007",
    "H\u0002\u0002\u183d\u183e\u0007\u00ec\u0002\u0002\u183e\u1840\u0007",
    "\t\u0002\u0002\u183f\u183d\u0003\u0002\u0002\u0002\u183f\u1840\u0003",
    "\u0002\u0002\u0002\u1840\u1843\u0003\u0002\u0002\u0002\u1841\u1843\u0007",
    "\t\u0002\u0002\u1842\u183c\u0003\u0002\u0002\u0002\u1842\u1841\u0003",
    "\u0002\u0002\u0002\u1843\u1844\u0003\u0002\u0002\u0002\u1844\u1845\u0007",
    "\u0162\u0002\u0002\u1845\u1846\u0005\u037a\u01be\u0002\u1846\u184a\u0007",
    "\u00e4\u0002\u0002\u1847\u1848\u0007\u0005\u0002\u0002\u1848\u184b\u0007",
    "\u0136\u0002\u0002\u1849\u184b\u0007T\u0002\u0002\u184a\u1847\u0003",
    "\u0002\u0002\u0002\u184a\u1849\u0003\u0002\u0002\u0002\u184b\u1855\u0003",
    "\u0002\u0002\u0002\u184c\u184d\u0007\u017b\u0002\u0002\u184d\u1852\u0005",
    "\u01d2\u00ea\u0002\u184e\u184f\u0007\u0326\u0002\u0002\u184f\u1851\u0005",
    "\u01d2\u00ea\u0002\u1850\u184e\u0003\u0002\u0002\u0002\u1851\u1854\u0003",
    "\u0002\u0002\u0002\u1852\u1850\u0003\u0002\u0002\u0002\u1852\u1853\u0003",
    "\u0002\u0002\u0002\u1853\u1856\u0003\u0002\u0002\u0002\u1854\u1852\u0003",
    "\u0002\u0002\u0002\u1855\u184c\u0003\u0002\u0002\u0002\u1855\u1856\u0003",
    "\u0002\u0002\u0002\u1856\u1857\u0003\u0002\u0002\u0002\u1857\u1858\t",
    "8\u0002\u0002\u1858\u185d\u0005\u01d8\u00ed\u0002\u1859\u185a\u0007",
    "\u0326\u0002\u0002\u185a\u185c\u0005\u01d4\u00eb\u0002\u185b\u1859\u0003",
    "\u0002\u0002\u0002\u185c\u185f\u0003\u0002\u0002\u0002\u185d\u185b\u0003",
    "\u0002\u0002\u0002\u185d\u185e\u0003\u0002\u0002\u0002\u185e\u1860\u0003",
    "\u0002\u0002\u0002\u185f\u185d\u0003\u0002\u0002\u0002\u1860\u1861\u0007",
    "\u000f\u0002\u0002\u1861\u1862\u0005\u0006\u0004\u0002\u1862\u01d7\u0003",
    "\u0002\u0002\u0002\u1863\u1864\u0005\u03ae\u01d8\u0002\u1864\u01d9\u0003",
    "\u0002\u0002\u0002\u1865\u1868\u0007H\u0002\u0002\u1866\u1867\u0007",
    "\u00ec\u0002\u0002\u1867\u1869\u0007\t\u0002\u0002\u1868\u1866\u0003",
    "\u0002\u0002\u0002\u1868\u1869\u0003\u0002\u0002\u0002\u1869\u186c\u0003",
    "\u0002\u0002\u0002\u186a\u186c\u0007\t\u0002\u0002\u186b\u1865\u0003",
    "\u0002\u0002\u0002\u186b\u186a\u0003\u0002\u0002\u0002\u186c\u186d\u0003",
    "\u0002\u0002\u0002\u186d\u186e\u0007\u008d\u0002\u0002\u186e\u187c\u0005",
    "\u037c\u01bf\u0002\u186f\u1870\u0007\u0324\u0002\u0002\u1870\u1875\u0005",
    "\u01e2\u00f2\u0002\u1871\u1872\u0007\u0326\u0002\u0002\u1872\u1874\u0005",
    "\u01e2\u00f2\u0002\u1873\u1871\u0003\u0002\u0002\u0002\u1874\u1877\u0003",
    "\u0002\u0002\u0002\u1875\u1873\u0003\u0002\u0002\u0002\u1875\u1876\u0003",
    "\u0002\u0002\u0002\u1876\u1878\u0003\u0002\u0002\u0002\u1877\u1875\u0003",
    "\u0002\u0002\u0002\u1878\u1879\u0007\u0325\u0002\u0002\u1879\u187d\u0003",
    "\u0002\u0002\u0002\u187a\u187b\u0007\u0324\u0002\u0002\u187b\u187d\u0007",
    "\u0325\u0002\u0002\u187c\u186f\u0003\u0002\u0002\u0002\u187c\u187a\u0003",
    "\u0002\u0002\u0002\u187d\u1881\u0003\u0002\u0002\u0002\u187e\u1882\u0005",
    "\u01dc\u00ef\u0002\u187f\u1882\u0005\u01de\u00f0\u0002\u1880\u1882\u0005",
    "\u01e0\u00f1\u0002\u1881\u187e\u0003\u0002\u0002\u0002\u1881\u187f\u0003",
    "\u0002\u0002\u0002\u1881\u1880\u0003\u0002\u0002\u0002\u1882\u1884\u0003",
    "\u0002\u0002\u0002\u1883\u1885\u0007\u0327\u0002\u0002\u1884\u1883\u0003",
    "\u0002\u0002\u0002\u1884\u1885\u0003\u0002\u0002\u0002\u1885\u01db\u0003",
    "\u0002\u0002\u0002\u1886\u1887\u0007\u011a\u0002\u0002\u1887\u1891\u0007",
    "\u0155\u0002\u0002\u1888\u1889\u0007\u017b\u0002\u0002\u1889\u188e\u0005",
    "\u01e6\u00f4\u0002\u188a\u188b\u0007\u0326\u0002\u0002\u188b\u188d\u0005",
    "\u01e6\u00f4\u0002\u188c\u188a\u0003\u0002\u0002\u0002\u188d\u1890\u0003",
    "\u0002\u0002\u0002\u188e\u188c\u0003\u0002\u0002\u0002\u188e\u188f\u0003",
    "\u0002\u0002\u0002\u188f\u1892\u0003\u0002\u0002\u0002\u1890\u188e\u0003",
    "\u0002\u0002\u0002\u1891\u1888\u0003\u0002\u0002\u0002\u1891\u1892\u0003",
    "\u0002\u0002\u0002\u1892\u1894\u0003\u0002\u0002\u0002\u1893\u1895\u0007",
    "\u000f\u0002\u0002\u1894\u1893\u0003\u0002\u0002\u0002\u1894\u1895\u0003",
    "\u0002\u0002\u0002\u1895\u1896\u0003\u0002\u0002\u0002\u1896\u189c\u0007",
    "\u0119\u0002\u0002\u1897\u1898\u0007\u0324\u0002\u0002\u1898\u1899\u0005",
    "\u01bc\u00df\u0002\u1899\u189a\u0007\u0325\u0002\u0002\u189a\u189d\u0003",
    "\u0002\u0002\u0002\u189b\u189d\u0005\u01bc\u00df\u0002\u189c\u1897\u0003",
    "\u0002\u0002\u0002\u189c\u189b\u0003\u0002\u0002\u0002\u189d\u01dd\u0003",
    "\u0002\u0002\u0002\u189e\u189f\u0007\u011a\u0002\u0002\u189f\u18a0\u0007",
    "\u030a\u0002\u0002\u18a0\u18aa\u0005\u029e\u0150\u0002\u18a1\u18a2\u0007",
    "\u017b\u0002\u0002\u18a2\u18a7\u0005\u01e6\u00f4\u0002\u18a3\u18a4\u0007",
    "\u0326\u0002\u0002\u18a4\u18a6\u0005\u01e6\u00f4\u0002\u18a5\u18a3\u0003",
    "\u0002\u0002\u0002\u18a6\u18a9\u0003\u0002\u0002\u0002\u18a7\u18a5\u0003",
    "\u0002\u0002\u0002\u18a7\u18a8\u0003\u0002\u0002\u0002\u18a8\u18ab\u0003",
    "\u0002\u0002\u0002\u18a9\u18a7\u0003\u0002\u0002\u0002\u18aa\u18a1\u0003",
    "\u0002\u0002\u0002\u18aa\u18ab\u0003\u0002\u0002\u0002\u18ab\u18ad\u0003",
    "\u0002\u0002\u0002\u18ac\u18ae\u0007\u000f\u0002\u0002\u18ad\u18ac\u0003",
    "\u0002\u0002\u0002\u18ad\u18ae\u0003\u0002\u0002\u0002\u18ae\u18af\u0003",
    "\u0002\u0002\u0002\u18af\u18b3\u0007\u001b\u0002\u0002\u18b0\u18b2\u0005",
    "\b\u0005\u0002\u18b1\u18b0\u0003\u0002\u0002\u0002\u18b2\u18b5\u0003",
    "\u0002\u0002\u0002\u18b3\u18b1\u0003\u0002\u0002\u0002\u18b3\u18b4\u0003",
    "\u0002\u0002\u0002\u18b4\u18b6\u0003\u0002\u0002\u0002\u18b5\u18b3\u0003",
    "\u0002\u0002\u0002\u18b6\u18b8\u0007\u0119\u0002\u0002\u18b7\u18b9\u0007",
    "\u0327\u0002\u0002\u18b8\u18b7\u0003\u0002\u0002\u0002\u18b8\u18b9\u0003",
    "\u0002\u0002\u0002\u18b9\u18ba\u0003\u0002\u0002\u0002\u18ba\u18bc\u0007",
    "l\u0002\u0002\u18bb\u18bd\u0007\u0327\u0002\u0002\u18bc\u18bb\u0003",
    "\u0002\u0002\u0002\u18bc\u18bd\u0003\u0002\u0002\u0002\u18bd\u01df\u0003",
    "\u0002\u0002\u0002\u18be\u18bf\u0007\u011a\u0002\u0002\u18bf\u18c9\u0005",
    "\u03a4\u01d3\u0002\u18c0\u18c1\u0007\u017b\u0002\u0002\u18c1\u18c6\u0005",
    "\u01e6\u00f4\u0002\u18c2\u18c3\u0007\u0326\u0002\u0002\u18c3\u18c5\u0005",
    "\u01e6\u00f4\u0002\u18c4\u18c2\u0003\u0002\u0002\u0002\u18c5\u18c8\u0003",
    "\u0002\u0002\u0002\u18c6\u18c4\u0003\u0002\u0002\u0002\u18c6\u18c7\u0003",
    "\u0002\u0002\u0002\u18c7\u18ca\u0003\u0002\u0002\u0002\u18c8\u18c6\u0003",
    "\u0002\u0002\u0002\u18c9\u18c0\u0003\u0002\u0002\u0002\u18c9\u18ca\u0003",
    "\u0002\u0002\u0002\u18ca\u18cc\u0003\u0002\u0002\u0002\u18cb\u18cd\u0007",
    "\u000f\u0002\u0002\u18cc\u18cb\u0003\u0002\u0002\u0002\u18cc\u18cd\u0003",
    "\u0002\u0002\u0002\u18cd\u18ce\u0003\u0002\u0002\u0002\u18ce\u18d2\u0007",
    "\u001b\u0002\u0002\u18cf\u18d1\u0005\b\u0005\u0002\u18d0\u18cf\u0003",
    "\u0002\u0002\u0002\u18d1\u18d4\u0003\u0002\u0002\u0002\u18d2\u18d0\u0003",
    "\u0002\u0002\u0002\u18d2\u18d3\u0003\u0002\u0002\u0002\u18d3\u18d5\u0003",
    "\u0002\u0002\u0002\u18d4\u18d2\u0003\u0002\u0002\u0002\u18d5\u18d6\u0007",
    "\u0119\u0002\u0002\u18d6\u18d8\u0005\u02c2\u0162\u0002\u18d7\u18d9\u0007",
    "\u0327\u0002\u0002\u18d8\u18d7\u0003\u0002\u0002\u0002\u18d8\u18d9\u0003",
    "\u0002\u0002\u0002\u18d9\u18da\u0003\u0002\u0002\u0002\u18da\u18db\u0007",
    "l\u0002\u0002\u18db\u01e1\u0003\u0002\u0002\u0002\u18dc\u18e0\u0007",
    "\u030a\u0002\u0002\u18dd\u18de\u0005\u03ac\u01d7\u0002\u18de\u18df\u0007",
    "\u031f\u0002\u0002\u18df\u18e1\u0003\u0002\u0002\u0002\u18e0\u18dd\u0003",
    "\u0002\u0002\u0002\u18e0\u18e1\u0003\u0002\u0002\u0002\u18e1\u18e3\u0003",
    "\u0002\u0002\u0002\u18e2\u18e4\u0007\u000f\u0002\u0002\u18e3\u18e2\u0003",
    "\u0002\u0002\u0002\u18e3\u18e4\u0003\u0002\u0002\u0002\u18e4\u18e5\u0003",
    "\u0002\u0002\u0002\u18e5\u18e7\u0005\u03a4\u01d3\u0002\u18e6\u18e8\u0007",
    "\u0172\u0002\u0002\u18e7\u18e6\u0003\u0002\u0002\u0002\u18e7\u18e8\u0003",
    "\u0002\u0002\u0002\u18e8\u18eb\u0003\u0002\u0002\u0002\u18e9\u18ea\u0007",
    "\u0313\u0002\u0002\u18ea\u18ec\u0005\u03a6\u01d4\u0002\u18eb\u18e9\u0003",
    "\u0002\u0002\u0002\u18eb\u18ec\u0003\u0002\u0002\u0002\u18ec\u18ee\u0003",
    "\u0002\u0002\u0002\u18ed\u18ef\t9\u0002\u0002\u18ee\u18ed\u0003\u0002",
    "\u0002\u0002\u18ee\u18ef\u0003\u0002\u0002\u0002\u18ef\u01e3\u0003\u0002",
    "\u0002\u0002\u18f0\u18f4\u0007\u01ec\u0002\u0002\u18f1\u18f4\u0007\u0299",
    "\u0002\u0002\u18f2\u18f4\u0005\u029a\u014e\u0002\u18f3\u18f0\u0003\u0002",
    "\u0002\u0002\u18f3\u18f1\u0003\u0002\u0002\u0002\u18f3\u18f2\u0003\u0002",
    "\u0002\u0002\u18f4\u01e5\u0003\u0002\u0002\u0002\u18f5\u1902\u0007\u01ec",
    "\u0002\u0002\u18f6\u1902\u0007\u02b5\u0002\u0002\u18f7\u18f8\u0007\u011a",
    "\u0002\u0002\u18f8\u18f9\u0007\u00de\u0002\u0002\u18f9\u18fa\u0007\u00e4",
    "\u0002\u0002\u18fa\u18fb\u0007\u00de\u0002\u0002\u18fb\u1902\u0007\u021e",
    "\u0002\u0002\u18fc\u18fd\u0007\'\u0002\u0002\u18fd\u18fe\u0007\u00e4",
    "\u0002\u0002\u18fe\u18ff\u0007\u00de\u0002\u0002\u18ff\u1902\u0007\u021e",
    "\u0002\u0002\u1900\u1902\u0005\u029a\u014e\u0002\u1901\u18f5\u0003\u0002",
    "\u0002\u0002\u1901\u18f6\u0003\u0002\u0002\u0002\u1901\u18f7\u0003\u0002",
    "\u0002\u0002\u1901\u18fc\u0003\u0002\u0002\u0002\u1901\u1900\u0003\u0002",
    "\u0002\u0002\u1902\u01e7\u0003\u0002\u0002\u0002\u1903\u1904\u0007H",
    "\u0002\u0002\u1904\u1905\u0007\u0149\u0002\u0002\u1905\u1906\u0005\u03ac",
    "\u01d7\u0002\u1906\u1907\u0007\u00e4\u0002\u0002\u1907\u1908\u0005\u0322",
    "\u0192\u0002\u1908\u1909\u0007\u0324\u0002\u0002\u1909\u190a\u0005\u0384",
    "\u01c3\u0002\u190a\u191d\u0007\u0325\u0002\u0002\u190b\u1911\u0007\u017b",
    "\u0002\u0002\u190c\u1912\u0007\u0207\u0002\u0002\u190d\u190e\u0007\u02b4",
    "\u0002\u0002\u190e\u190f\u0007\u030b\u0002\u0002\u190f\u1912\t:\u0002",
    "\u0002\u1910\u1912\u0007\u02d1\u0002\u0002\u1911\u190c\u0003\u0002\u0002",
    "\u0002\u1911\u190d\u0003\u0002\u0002\u0002\u1911\u1910\u0003\u0002\u0002",
    "\u0002\u1912\u1915\u0003\u0002\u0002\u0002\u1913\u1914\u0007\u0326\u0002",
    "\u0002\u1914\u1916\u0007\u0260\u0002\u0002\u1915\u1913\u0003\u0002\u0002",
    "\u0002\u1915\u1916\u0003\u0002\u0002\u0002\u1916\u191b\u0003\u0002\u0002",
    "\u0002\u1917\u1918\u0007\u0326\u0002\u0002\u1918\u1919\u0007\u021c\u0002",
    "\u0002\u1919\u191a\u0007\u0313\u0002\u0002\u191a\u191c\u0005\u0388\u01c5",
    "\u0002\u191b\u1917\u0003\u0002\u0002\u0002\u191b\u191c\u0003\u0002\u0002",
    "\u0002\u191c\u191e\u0003\u0002\u0002\u0002\u191d\u190b\u0003\u0002\u0002",
    "\u0002\u191d\u191e\u0003\u0002\u0002\u0002\u191e\u1920\u0003\u0002\u0002",
    "\u0002\u191f\u1921\u0007\u0327\u0002\u0002\u1920\u191f\u0003\u0002\u0002",
    "\u0002\u1920\u1921\u0003\u0002\u0002\u0002\u1921\u01e9\u0003\u0002\u0002",
    "\u0002\u1922\u1923\u0007H\u0002\u0002\u1923\u1924\u0007\u0155\u0002",
    "\u0002\u1924\u1925\u0005\u0378\u01bd\u0002\u1925\u1926\u0007\u0324\u0002",
    "\u0002\u1926\u1928\u0005\u02a4\u0153\u0002\u1927\u1929\u0007\u0326\u0002",
    "\u0002\u1928\u1927\u0003\u0002\u0002\u0002\u1928\u1929\u0003\u0002\u0002",
    "\u0002\u1929\u192a\u0003\u0002\u0002\u0002\u192a\u192e\u0007\u0325\u0002",
    "\u0002\u192b\u192d\u0005\u01ec\u00f7\u0002\u192c\u192b\u0003\u0002\u0002",
    "\u0002\u192d\u1930\u0003\u0002\u0002\u0002\u192e\u192c\u0003\u0002\u0002",
    "\u0002\u192e\u192f\u0003\u0002\u0002\u0002\u192f\u1934\u0003\u0002\u0002",
    "\u0002\u1930\u192e\u0003\u0002\u0002\u0002\u1931\u1932\u0007\u00e4\u0002",
    "\u0002\u1932\u1935\u0005\u03ac\u01d7\u0002\u1933\u1935\u0007Y\u0002",
    "\u0002\u1934\u1931\u0003\u0002\u0002\u0002\u1934\u1933\u0003\u0002\u0002",
    "\u0002\u1934\u1935\u0003\u0002\u0002\u0002\u1935\u1939\u0003\u0002\u0002",
    "\u0002\u1936\u1937\u0007\u02e1\u0002\u0002\u1937\u193a\u0005\u03ac\u01d7",
    "\u0002\u1938\u193a\u0007Y\u0002\u0002\u1939\u1936\u0003\u0002\u0002",
    "\u0002\u1939\u1938\u0003\u0002\u0002\u0002\u1939\u193a\u0003\u0002\u0002",
    "\u0002\u193a\u193c\u0003\u0002\u0002\u0002\u193b\u193d\u0007\u0327\u0002",
    "\u0002\u193c\u193b\u0003\u0002\u0002\u0002\u193c\u193d\u0003\u0002\u0002",
    "\u0002\u193d\u01eb\u0003\u0002\u0002\u0002\u193e\u193f\u0007\u017b\u0002",
    "\u0002\u193f\u1940\u0007\u0324\u0002\u0002\u1940\u1945\u0005\u02b4\u015b",
    "\u0002\u1941\u1942\u0007\u0326\u0002\u0002\u1942\u1944\u0005\u02b4\u015b",
    "\u0002\u1943\u1941\u0003\u0002\u0002\u0002\u1944\u1947\u0003\u0002\u0002",
    "\u0002\u1945\u1943\u0003\u0002\u0002\u0002\u1945\u1946\u0003\u0002\u0002",
    "\u0002\u1946\u1948\u0003\u0002\u0002\u0002\u1947\u1945\u0003\u0002\u0002",
    "\u0002\u1948\u1949\u0007\u0325\u0002\u0002\u1949\u01ed\u0003\u0002\u0002",
    "\u0002\u194a\u194b\u0007H\u0002\u0002\u194b\u194c\u0007\u0174\u0002",
    "\u0002\u194c\u1951\u0005\u037a\u01be\u0002\u194d\u194e\u0007\u0324\u0002",
    "\u0002\u194e\u194f\u0005\u0384\u01c3\u0002\u194f\u1950\u0007\u0325\u0002",
    "\u0002\u1950\u1952\u0003\u0002\u0002\u0002\u1951\u194d\u0003\u0002\u0002",
    "\u0002\u1951\u1952\u0003\u0002\u0002\u0002\u1952\u195c\u0003\u0002\u0002",
    "\u0002\u1953\u1954\u0007\u017b\u0002\u0002\u1954\u1959\u0005\u01f0\u00f9",
    "\u0002\u1955\u1956\u0007\u0326\u0002\u0002\u1956\u1958\u0005\u01f0\u00f9",
    "\u0002\u1957\u1955\u0003\u0002\u0002\u0002\u1958\u195b\u0003\u0002\u0002",
    "\u0002\u1959\u1957\u0003\u0002\u0002\u0002\u1959\u195a\u0003\u0002\u0002",
    "\u0002\u195a\u195d\u0003\u0002\u0002\u0002\u195b\u1959\u0003\u0002\u0002",
    "\u0002\u195c\u1953\u0003\u0002\u0002\u0002\u195c\u195d\u0003\u0002\u0002",
    "\u0002\u195d\u195e\u0003\u0002\u0002\u0002\u195e\u195f\u0007\u000f\u0002",
    "\u0002\u195f\u1963\u0005\u01bc\u00df\u0002\u1960\u1961\u0007\u017b\u0002",
    "\u0002\u1961\u1962\u0007-\u0002\u0002\u1962\u1964\u0007\u00eb\u0002",
    "\u0002\u1963\u1960\u0003\u0002\u0002\u0002\u1963\u1964\u0003\u0002\u0002",
    "\u0002\u1964\u1966\u0003\u0002\u0002\u0002\u1965\u1967\u0007\u0327\u0002",
    "\u0002\u1966\u1965\u0003\u0002\u0002\u0002\u1966\u1967\u0003\u0002\u0002",
    "\u0002\u1967\u01ef\u0003\u0002\u0002\u0002\u1968\u1969\t;\u0002\u0002",
    "\u1969\u01f1\u0003\u0002\u0002\u0002\u196a\u196b\u0007\t\u0002\u0002",
    "\u196b\u196c\u0007\u0155\u0002\u0002\u196c\u1993\u0005\u0378\u01bd\u0002",
    "\u196d\u196e\u0007\u013c\u0002\u0002\u196e\u196f\u0007\u0324\u0002\u0002",
    "\u196f\u1970\u0007\u0235\u0002\u0002\u1970\u1971\u0007\u0313\u0002\u0002",
    "\u1971\u1972\t<\u0002\u0002\u1972\u1994\u0007\u0325\u0002\u0002\u1973",
    "\u1974\u0007\u0003\u0002\u0002\u1974\u1994\u0005\u02a6\u0154\u0002\u1975",
    "\u1976\u0007\t\u0002\u0002\u1976\u1977\u00077\u0002\u0002\u1977\u1994",
    "\u0005\u02a8\u0155\u0002\u1978\u1979\u0007g\u0002\u0002\u1979\u197a",
    "\u00077\u0002\u0002\u197a\u1994\u0005\u03ac\u01d7\u0002\u197b\u197c",
    "\u0007g\u0002\u0002\u197c\u197d\u0007<\u0002\u0002\u197d\u1994\u0005",
    "\u03ac\u01d7\u0002\u197e\u197f\u0007\u017b\u0002\u0002\u197f\u1980\u0007",
    "-\u0002\u0002\u1980\u1981\u0007\u0003\u0002\u0002\u1981\u1982\u0007",
    "<\u0002\u0002\u1982\u1983\u0005\u03ac\u01d7\u0002\u1983\u1984\u0007",
    "\u0088\u0002\u0002\u1984\u1985\u0007\u00ab\u0002\u0002\u1985\u1986\u0007",
    "\u0324\u0002\u0002\u1986\u1987\u0005\u0384\u01c3\u0002\u1987\u1988\u0007",
    "\u0325\u0002\u0002\u1988\u1989\u0007\u010d\u0002\u0002\u1989\u198a\u0005",
    "\u0378\u01bd\u0002\u198a\u198b\u0007\u0324\u0002\u0002\u198b\u198c\u0005",
    "\u0384\u01c3\u0002\u198c\u198d\u0007\u0325\u0002\u0002\u198d\u1994\u0003",
    "\u0002\u0002\u0002\u198e\u198f\u0007-\u0002\u0002\u198f\u1990\u0007",
    "<\u0002\u0002\u1990\u1994\u0005\u03ac\u01d7\u0002\u1991\u1992\u0007",
    "\u0298\u0002\u0002\u1992\u1994\u0005\u01ec\u00f7\u0002\u1993\u196d\u0003",
    "\u0002\u0002\u0002\u1993\u1973\u0003\u0002\u0002\u0002\u1993\u1975\u0003",
    "\u0002\u0002\u0002\u1993\u1978\u0003\u0002\u0002\u0002\u1993\u197b\u0003",
    "\u0002\u0002\u0002\u1993\u197e\u0003\u0002\u0002\u0002\u1993\u198e\u0003",
    "\u0002\u0002\u0002\u1993\u1991\u0003\u0002\u0002\u0002\u1994\u1996\u0003",
    "\u0002\u0002\u0002\u1995\u1997\u0007\u0327\u0002\u0002\u1996\u1995\u0003",
    "\u0002\u0002\u0002\u1996\u1997\u0003\u0002\u0002\u0002\u1997\u01f3\u0003",
    "\u0002\u0002\u0002\u1998\u1999\u0007\t\u0002\u0002\u1999\u199c\u0007",
    "T\u0002\u0002\u199a\u199d\u0005\u03ac\u01d7\u0002\u199b\u199d\u0007",
    "J\u0002\u0002\u199c\u199a\u0003\u0002\u0002\u0002\u199c\u199b\u0003",
    "\u0002\u0002\u0002\u199d\u19aa\u0003\u0002\u0002\u0002\u199e\u199f\u0007",
    "\u0253\u0002\u0002\u199f\u19a0\u0007\u0256\u0002\u0002\u19a0\u19a1\u0007",
    "\u0313\u0002\u0002\u19a1\u19ab\u0005\u03ac\u01d7\u0002\u19a2\u19a3\u0007",
    "6\u0002\u0002\u19a3\u19ab\u0005\u03ac\u01d7\u0002\u19a4\u19a5\u0007",
    "\u013c\u0002\u0002\u19a5\u19a8\u0005\u01f6\u00fc\u0002\u19a6\u19a7\u0007",
    "\u017b\u0002\u0002\u19a7\u19a9\u0005\u023c\u011f\u0002\u19a8\u19a6\u0003",
    "\u0002\u0002\u0002\u19a8\u19a9\u0003\u0002\u0002\u0002\u19a9\u19ab\u0003",
    "\u0002\u0002\u0002\u19aa\u199e\u0003\u0002\u0002\u0002\u19aa\u19a2\u0003",
    "\u0002\u0002\u0002\u19aa\u19a4\u0003\u0002\u0002\u0002\u19ab\u19ad\u0003",
    "\u0002\u0002\u0002\u19ac\u19ae\u0007\u0327\u0002\u0002\u19ad\u19ac\u0003",
    "\u0002\u0002\u0002\u19ad\u19ae\u0003\u0002\u0002\u0002\u19ae\u01f5\u0003",
    "\u0002\u0002\u0002\u19af\u19c7\u0005\u01f8\u00fd\u0002\u19b0\u19c7\u0005",
    "\u01fa\u00fe\u0002\u19b1\u19c7\u0005\u01fe\u0100\u0002\u19b2\u19c7\u0005",
    "\u0200\u0101\u0002\u19b3\u19c7\u0005\u0204\u0103\u0002\u19b4\u19c7\u0005",
    "\u021e\u0110\u0002\u19b5\u19c7\u0005\u0220\u0111\u0002\u19b6\u19c7\u0005",
    "\u0222\u0112\u0002\u19b7\u19c7\u0005\u0224\u0113\u0002\u19b8\u19c7\u0005",
    "\u0226\u0114\u0002\u19b9\u19c7\u0005\u0228\u0115\u0002\u19ba\u19c7\u0005",
    "\u022a\u0116\u0002\u19bb\u19bc\u0007\u01fd\u0002\u0002\u19bc\u19c7\u0005",
    "\u0368\u01b5\u0002\u19bd\u19c7\u0005\u022c\u0117\u0002\u19be\u19c7\u0005",
    "\u022e\u0118\u0002\u19bf\u19c7\u0005\u0230\u0119\u0002\u19c0\u19c7\u0005",
    "\u0232\u011a\u0002\u19c1\u19c7\u0005\u0234\u011b\u0002\u19c2\u19c7\u0005",
    "\u0236\u011c\u0002\u19c3\u19c7\u0005\u0238\u011d\u0002\u19c4\u19c7\u0005",
    "\u023a\u011e\u0002\u19c5\u19c7\u0005\u023c\u011f\u0002\u19c6\u19af\u0003",
    "\u0002\u0002\u0002\u19c6\u19b0\u0003\u0002\u0002\u0002\u19c6\u19b1\u0003",
    "\u0002\u0002\u0002\u19c6\u19b2\u0003\u0002\u0002\u0002\u19c6\u19b3\u0003",
    "\u0002\u0002\u0002\u19c6\u19b4\u0003\u0002\u0002\u0002\u19c6\u19b5\u0003",
    "\u0002\u0002\u0002\u19c6\u19b6\u0003\u0002\u0002\u0002\u19c6\u19b7\u0003",
    "\u0002\u0002\u0002\u19c6\u19b8\u0003\u0002\u0002\u0002\u19c6\u19b9\u0003",
    "\u0002\u0002\u0002\u19c6\u19ba\u0003\u0002\u0002\u0002\u19c6\u19bb\u0003",
    "\u0002\u0002\u0002\u19c6\u19bd\u0003\u0002\u0002\u0002\u19c6\u19be\u0003",
    "\u0002\u0002\u0002\u19c6\u19bf\u0003\u0002\u0002\u0002\u19c6\u19c0\u0003",
    "\u0002\u0002\u0002\u19c6\u19c1\u0003\u0002\u0002\u0002\u19c6\u19c2\u0003",
    "\u0002\u0002\u0002\u19c6\u19c3\u0003\u0002\u0002\u0002\u19c6\u19c4\u0003",
    "\u0002\u0002\u0002\u19c6\u19c5\u0003\u0002\u0002\u0002\u19c7\u01f7\u0003",
    "\u0002\u0002\u0002\u19c8\u19c9\u0007\u019c\u0002\u0002\u19c9\u19da\u0005",
    "\u0388\u01c5\u0002\u19ca\u19cb\u0007\u019d\u0002\u0002\u19cb\u19da\u0007",
    "\u00e1\u0002\u0002\u19cc\u19d1\u0007\u00e4\u0002\u0002\u19cd\u19ce\u0007",
    "\u021c\u0002\u0002\u19ce\u19cf\u0007\u0313\u0002\u0002\u19cf\u19d2\u0007",
    "\u00e4\u0002\u0002\u19d0\u19d2\u0007\u00e1\u0002\u0002\u19d1\u19cd\u0003",
    "\u0002\u0002\u0002\u19d1\u19d0\u0003\u0002\u0002\u0002\u19d2\u19da\u0003",
    "\u0002\u0002\u0002\u19d3\u19d4\u0007\u019e\u0002\u0002\u19d4\u19da\u0005",
    "\u0388\u01c5\u0002\u19d5\u19d6\u0007\u019f\u0002\u0002\u19d6\u19da\u0005",
    "\u0388\u01c5\u0002\u19d7\u19d8\u0007\u01a0\u0002\u0002\u19d8\u19da\t",
    "\b\u0002\u0002\u19d9\u19c8\u0003\u0002\u0002\u0002\u19d9\u19ca\u0003",
    "\u0002\u0002\u0002\u19d9\u19cc\u0003\u0002\u0002\u0002\u19d9\u19d3\u0003",
    "\u0002\u0002\u0002\u19d9\u19d5\u0003\u0002\u0002\u0002\u19d9\u19d7\u0003",
    "\u0002\u0002\u0002\u19da\u01f9\u0003\u0002\u0002\u0002\u19db\u19dc\u0007",
    "\u01b3\u0002\u0002\u19dc\u19ec\u0007\u0313\u0002\u0002\u19dd\u19ed\u0007",
    "\u00e1\u0002\u0002\u19de\u19e9\u0007\u00e4\u0002\u0002\u19df\u19e4\u0005",
    "\u01fc\u00ff\u0002\u19e0\u19e1\u0007\u0326\u0002\u0002\u19e1\u19e3\u0005",
    "\u01fc\u00ff\u0002\u19e2\u19e0\u0003\u0002\u0002\u0002\u19e3\u19e6\u0003",
    "\u0002\u0002\u0002\u19e4\u19e2\u0003\u0002\u0002\u0002\u19e4\u19e5\u0003",
    "\u0002\u0002\u0002\u19e5\u19e8\u0003\u0002\u0002\u0002\u19e6\u19e4\u0003",
    "\u0002\u0002\u0002\u19e7\u19df\u0003\u0002\u0002\u0002\u19e8\u19eb\u0003",
    "\u0002\u0002\u0002\u19e9\u19e7\u0003\u0002\u0002\u0002\u19e9\u19ea\u0003",
    "\u0002\u0002\u0002\u19ea\u19ed\u0003\u0002\u0002\u0002\u19eb\u19e9\u0003",
    "\u0002\u0002\u0002\u19ec\u19dd\u0003\u0002\u0002\u0002\u19ec\u19de\u0003",
    "\u0002\u0002\u0002\u19ed\u01fb\u0003\u0002\u0002\u0002\u19ee\u19ef\u0007",
    "\u019b\u0002\u0002\u19ef\u19f0\u0007\u0313\u0002\u0002\u19f0\u19f5\u0005",
    "\u0388\u01c5\u0002\u19f1\u19f2\u0007\u01b2\u0002\u0002\u19f2\u19f3\u0007",
    "\u0313\u0002\u0002\u19f3\u19f5\t=\u0002\u0002\u19f4\u19ee\u0003\u0002",
    "\u0002\u0002\u19f4\u19f1\u0003\u0002\u0002\u0002\u19f5\u01fd\u0003\u0002",
    "\u0002\u0002\u19f6\u19f7\u0007=\u0002\u0002\u19f7\u19f8\u0007\u0313",
    "\u0002\u0002\u19f8\u19f9\t5\u0002\u0002\u19f9\u01ff\u0003\u0002\u0002",
    "\u0002\u19fa\u19fb\u0007\u01c8\u0002\u0002\u19fb\u19ff\u0005\u0388\u01c5",
    "\u0002\u19fc\u19fd\u0007\u01c9\u0002\u0002\u19fd\u19ff\t>\u0002\u0002",
    "\u19fe\u19fa\u0003\u0002\u0002\u0002\u19fe\u19fc\u0003\u0002\u0002\u0002",
    "\u19ff\u0201\u0003\u0002\u0002\u0002\u1a00\u1a01\u0007\t\u0002\u0002",
    "\u1a01\u1a02\u0007m\u0002\u0002\u1a02\u1a05\u0005\u03ac\u01d7\u0002",
    "\u1a03\u1a04\u0007\u0013\u0002\u0002\u1a04\u1a06\u0005\u03ac\u01d7\u0002",
    "\u1a05\u1a03\u0003\u0002\u0002\u0002\u1a05\u1a06\u0003\u0002\u0002\u0002",
    "\u1a06\u1a0e\u0003\u0002\u0002\u0002\u1a07\u1a08\u0007\u014a\u0002\u0002",
    "\u1a08\u1a0c\u0007\u0313\u0002\u0002\u1a09\u1a0d\u0007\u014d\u0002\u0002",
    "\u1a0a\u1a0d\u0007\u0150\u0002\u0002\u1a0b\u1a0d\u0007\u01e2\u0002\u0002",
    "\u1a0c\u1a09\u0003\u0002\u0002\u0002\u1a0c\u1a0a\u0003\u0002\u0002\u0002",
    "\u1a0c\u1a0b\u0003\u0002\u0002\u0002\u1a0d\u1a0f\u0003\u0002\u0002\u0002",
    "\u1a0e\u1a07\u0003\u0002\u0002\u0002\u1a0e\u1a0f\u0003\u0002\u0002\u0002",
    "\u1a0f\u1a10\u0003\u0002\u0002\u0002\u1a10\u1a11\u0007\u000f\u0002\u0002",
    "\u1a11\u1a12\u0007\u0159\u0002\u0002\u1a12\u1a13\u0007\u0324\u0002\u0002",
    "\u1a13\u1a14\u0007\u00b7\u0002\u0002\u1a14\u1a15\u0007\u0313\u0002\u0002",
    "\u1a15\u1a1a\u0007\u030b\u0002\u0002\u1a16\u1a17\u0007\u0326\u0002\u0002",
    "\u1a17\u1a18\u0007\u00b6\u0002\u0002\u1a18\u1a19\u0007\u0313\u0002\u0002",
    "\u1a19\u1a1b\t?\u0002\u0002\u1a1a\u1a16\u0003\u0002\u0002\u0002\u1a1a",
    "\u1a1b\u0003\u0002\u0002\u0002\u1a1b\u1a1c\u0003\u0002\u0002\u0002\u1a1c",
    "\u1a8a\u0007\u0325\u0002\u0002\u1a1d\u1a8b\u0007\u02ee\u0002\u0002\u1a1e",
    "\u1a1f\u0007\u0085\u0002\u0002\u1a1f\u1a20\u0007\u0138\u0002\u0002\u1a20",
    "\u1a21\u0007\u0324\u0002\u0002\u1a21\u1a22\u0007\u0014\u0002\u0002\u1a22",
    "\u1a33\u0007\u0313\u0002\u0002\u1a23\u1a25\u0007\u017a\u0002\u0002\u1a24",
    "\u1a26\t@\u0002\u0002\u1a25\u1a24\u0003\u0002\u0002\u0002\u1a25\u1a26",
    "\u0003\u0002\u0002\u0002\u1a26\u1a29\u0003\u0002\u0002\u0002\u1a27\u1a28",
    "\u0007*\u0002\u0002\u1a28\u1a2a\u0005\u03ac\u01d7\u0002\u1a29\u1a27",
    "\u0003\u0002\u0002\u0002\u1a29\u1a2a\u0003\u0002\u0002\u0002\u1a2a\u1a34",
    "\u0003\u0002\u0002\u0002\u1a2b\u1a2c\u0007*\u0002\u0002\u1a2c\u1a2e",
    "\u0005\u03ac\u01d7\u0002\u1a2d\u1a2f\u0007\u017a\u0002\u0002\u1a2e\u1a2d",
    "\u0003\u0002\u0002\u0002\u1a2e\u1a2f\u0003\u0002\u0002\u0002\u1a2f\u1a31",
    "\u0003\u0002\u0002\u0002\u1a30\u1a32\t@\u0002\u0002\u1a31\u1a30\u0003",
    "\u0002\u0002\u0002\u1a31\u1a32\u0003\u0002\u0002\u0002\u1a32\u1a34\u0003",
    "\u0002\u0002\u0002\u1a33\u1a23\u0003\u0002\u0002\u0002\u1a33\u1a2b\u0003",
    "\u0002\u0002\u0002\u1a34\u1a46\u0003\u0002\u0002\u0002\u1a35\u1a37\u0007",
    "\u0326\u0002\u0002\u1a36\u1a35\u0003\u0002\u0002\u0002\u1a36\u1a37\u0003",
    "\u0002\u0002\u0002\u1a37\u1a38\u0003\u0002\u0002\u0002\u1a38\u1a39\u0007",
    "\u01ec\u0002\u0002\u1a39\u1a3a\u0007\u0313\u0002\u0002\u1a3a\u1a44\t",
    "A\u0002\u0002\u1a3b\u1a42\u0007\u018c\u0002\u0002\u1a3c\u1a43\u0007",
    "\u0004\u0002\u0002\u1a3d\u1a43\u0007\u0291\u0002\u0002\u1a3e\u1a3f\u0007",
    "\u0004\u0002\u0002\u1a3f\u1a43\u0007\u0291\u0002\u0002\u1a40\u1a41\u0007",
    "\u0291\u0002\u0002\u1a41\u1a43\u0007\u0004\u0002\u0002\u1a42\u1a3c\u0003",
    "\u0002\u0002\u0002\u1a42\u1a3d\u0003\u0002\u0002\u0002\u1a42\u1a3e\u0003",
    "\u0002\u0002\u0002\u1a42\u1a40\u0003\u0002\u0002\u0002\u1a43\u1a45\u0003",
    "\u0002\u0002\u0002\u1a44\u1a3b\u0003\u0002\u0002\u0002\u1a44\u1a45\u0003",
    "\u0002\u0002\u0002\u1a45\u1a47\u0003\u0002\u0002\u0002\u1a46\u1a36\u0003",
    "\u0002\u0002\u0002\u1a46\u1a47\u0003\u0002\u0002\u0002\u1a47\u1a4e\u0003",
    "\u0002\u0002\u0002\u1a48\u1a4a\u0007\u0326\u0002\u0002\u1a49\u1a48\u0003",
    "\u0002\u0002\u0002\u1a49\u1a4a\u0003\u0002\u0002\u0002\u1a4a\u1a4b\u0003",
    "\u0002\u0002\u0002\u1a4b\u1a4c\u0007\u00c9\u0002\u0002\u1a4c\u1a4d\u0007",
    "\u0313\u0002\u0002\u1a4d\u1a4f\tB\u0002\u0002\u1a4e\u1a49\u0003\u0002",
    "\u0002\u0002\u1a4e\u1a4f\u0003\u0002\u0002\u0002\u1a4f\u1a56\u0003\u0002",
    "\u0002\u0002\u1a50\u1a52\u0007\u0326\u0002\u0002\u1a51\u1a50\u0003\u0002",
    "\u0002\u0002\u1a51\u1a52\u0003\u0002\u0002\u0002\u1a52\u1a53\u0003\u0002",
    "\u0002\u0002\u1a53\u1a54\u0007\u00ca\u0002\u0002\u1a54\u1a55\u0007\u0313",
    "\u0002\u0002\u1a55\u1a57\u0007\u030b\u0002\u0002\u1a56\u1a51\u0003\u0002",
    "\u0002\u0002\u1a56\u1a57\u0003\u0002\u0002\u0002\u1a57\u1a58\u0003\u0002",
    "\u0002\u0002\u1a58\u1a8b\u0007\u0325\u0002\u0002\u1a59\u1a5a\u0007\u0085",
    "\u0002\u0002\u1a5a\u1a5b\u0007U\u0002\u0002\u1a5b\u1a5c\u0007\u0324",
    "\u0002\u0002\u1a5c\u1a5d\u0007\u0014\u0002\u0002\u1a5d\u1a6e\u0007\u0313",
    "\u0002\u0002\u1a5e\u1a60\u0007\u017a\u0002\u0002\u1a5f\u1a61\t@\u0002",
    "\u0002\u1a60\u1a5f\u0003\u0002\u0002\u0002\u1a60\u1a61\u0003\u0002\u0002",
    "\u0002\u1a61\u1a64\u0003\u0002\u0002\u0002\u1a62\u1a63\u0007*\u0002",
    "\u0002\u1a63\u1a65\u0005\u03ac\u01d7\u0002\u1a64\u1a62\u0003\u0002\u0002",
    "\u0002\u1a64\u1a65\u0003\u0002\u0002\u0002\u1a65\u1a6f\u0003\u0002\u0002",
    "\u0002\u1a66\u1a67\u0007*\u0002\u0002\u1a67\u1a69\u0005\u03ac\u01d7",
    "\u0002\u1a68\u1a6a\u0007\u017a\u0002\u0002\u1a69\u1a68\u0003\u0002\u0002",
    "\u0002\u1a69\u1a6a\u0003\u0002\u0002\u0002\u1a6a\u1a6c\u0003\u0002\u0002",
    "\u0002\u1a6b\u1a6d\t@\u0002\u0002\u1a6c\u1a6b\u0003\u0002\u0002\u0002",
    "\u1a6c\u1a6d\u0003\u0002\u0002\u0002\u1a6d\u1a6f\u0003\u0002\u0002\u0002",
    "\u1a6e\u1a5e\u0003\u0002\u0002\u0002\u1a6e\u1a66\u0003\u0002\u0002\u0002",
    "\u1a6f\u1a81\u0003\u0002\u0002\u0002\u1a70\u1a72\u0007\u0326\u0002\u0002",
    "\u1a71\u1a70\u0003\u0002\u0002\u0002\u1a71\u1a72\u0003\u0002\u0002\u0002",
    "\u1a72\u1a73\u0003\u0002\u0002\u0002\u1a73\u1a74\u0007\u01ec\u0002\u0002",
    "\u1a74\u1a75\u0007\u0313\u0002\u0002\u1a75\u1a7f\tA\u0002\u0002\u1a76",
    "\u1a7d\u0007\u018c\u0002\u0002\u1a77\u1a7e\u0007\u0004\u0002\u0002\u1a78",
    "\u1a7e\u0007\u0291\u0002\u0002\u1a79\u1a7a\u0007\u0004\u0002\u0002\u1a7a",
    "\u1a7e\u0007\u0291\u0002\u0002\u1a7b\u1a7c\u0007\u0291\u0002\u0002\u1a7c",
    "\u1a7e\u0007\u0004\u0002\u0002\u1a7d\u1a77\u0003\u0002\u0002\u0002\u1a7d",
    "\u1a78\u0003\u0002\u0002\u0002\u1a7d\u1a79\u0003\u0002\u0002\u0002\u1a7d",
    "\u1a7b\u0003\u0002\u0002\u0002\u1a7e\u1a80\u0003\u0002\u0002\u0002\u1a7f",
    "\u1a76\u0003\u0002\u0002\u0002\u1a7f\u1a80\u0003\u0002\u0002\u0002\u1a80",
    "\u1a82\u0003\u0002\u0002\u0002\u1a81\u1a71\u0003\u0002\u0002\u0002\u1a81",
    "\u1a82\u0003\u0002\u0002\u0002\u1a82\u1a84\u0003\u0002\u0002\u0002\u1a83",
    "\u1a85\u0007\u0326\u0002\u0002\u1a84\u1a83\u0003\u0002\u0002\u0002\u1a84",
    "\u1a85\u0003\u0002\u0002\u0002\u1a85\u1a86\u0003\u0002\u0002\u0002\u1a86",
    "\u1a87\u0007\u0120\u0002\u0002\u1a87\u1a88\u0007\u0313\u0002\u0002\u1a88",
    "\u1a89\tC\u0002\u0002\u1a89\u1a8b\u0007\u0325\u0002\u0002\u1a8a\u1a1d",
    "\u0003\u0002\u0002\u0002\u1a8a\u1a1e\u0003\u0002\u0002\u0002\u1a8a\u1a59",
    "\u0003\u0002\u0002\u0002\u1a8b\u0203\u0003\u0002\u0002\u0002\u1a8c\u1a8d",
    "\u0005\u0206\u0104\u0002\u1a8d\u0205\u0003\u0002\u0002\u0002\u1a8e\u1a8f",
    "\u0005\u0208\u0105\u0002\u1a8f\u1a90\u0005\u020e\u0108\u0002\u1a90\u1a95",
    "\u0003\u0002\u0002\u0002\u1a91\u1a92\u0005\u020a\u0106\u0002\u1a92\u1a93",
    "\u0005\u0210\u0109\u0002\u1a93\u1a95\u0003\u0002\u0002\u0002\u1a94\u1a8e",
    "\u0003\u0002\u0002\u0002\u1a94\u1a91\u0003\u0002\u0002\u0002\u1a95\u0207",
    "\u0003\u0002\u0002\u0002\u1a96\u1a97\u0007\u0279\u0002\u0002\u1a97\u0209",
    "\u0003\u0002\u0002\u0002\u1a98\u1a99\u0007\u017e\u0002\u0002\u1a99\u020b",
    "\u0003\u0002\u0002\u0002\u1a9a\u1a9b\u0007\u0313\u0002\u0002\u1a9b\u020d",
    "\u0003\u0002\u0002\u0002\u1a9c\u1a9d\u0005\u020c\u0107\u0002\u1a9d\u1a9e",
    "\u0005\u0214\u010b\u0002\u1a9e\u1aa9\u0003\u0002\u0002\u0002\u1a9f\u1aa9",
    "\u0007}\u0002\u0002\u1aa0\u1aa9\u0007\u0087\u0002\u0002\u1aa1\u1aa9",
    "\u0007\u00e1\u0002\u0002\u1aa2\u1aa9\u0007\u0117\u0002\u0002\u1aa3\u1aa4",
    "\u0007\u0128\u0002\u0002\u1aa4\u1aa9\tD\u0002\u0002\u1aa5\u1aa9\u0007",
    "\u02d7\u0002\u0002\u1aa6\u1aa7\u0007\u02e7\u0002\u0002\u1aa7\u1aa9\u0007",
    "\u030b\u0002\u0002\u1aa8\u1a9c\u0003\u0002\u0002\u0002\u1aa8\u1a9f\u0003",
    "\u0002\u0002\u0002\u1aa8\u1aa0\u0003\u0002\u0002\u0002\u1aa8\u1aa1\u0003",
    "\u0002\u0002\u0002\u1aa8\u1aa2\u0003\u0002\u0002\u0002\u1aa8\u1aa3\u0003",
    "\u0002\u0002\u0002\u1aa8\u1aa5\u0003\u0002\u0002\u0002\u1aa8\u1aa6\u0003",
    "\u0002\u0002\u0002\u1aa9\u020f\u0003\u0002\u0002\u0002\u1aaa\u1aab\u0005",
    "\u020c\u0107\u0002\u1aab\u1aac\u0005\u0212\u010a\u0002\u1aac\u1aaf\u0003",
    "\u0002\u0002\u0002\u1aad\u1aaf\u0007\u00e1\u0002\u0002\u1aae\u1aaa\u0003",
    "\u0002\u0002\u0002\u1aae\u1aad\u0003\u0002\u0002\u0002\u1aaf\u0211\u0003",
    "\u0002\u0002\u0002\u1ab0\u1ab1\u0005\u0214\u010b\u0002\u1ab1\u0213\u0003",
    "\u0002\u0002\u0002\u1ab2\u1ab3\u0005\u0218\u010d\u0002\u1ab3\u1ab4\u0005",
    "\u021c\u010f\u0002\u1ab4\u1ab5\u0005\u0216\u010c\u0002\u1ab5\u1ab6\u0005",
    "\u021a\u010e\u0002\u1ab6\u0215\u0003\u0002\u0002\u0002\u1ab7\u1ab8\u0007",
    "\u0328\u0002\u0002\u1ab8\u0217\u0003\u0002\u0002\u0002\u1ab9\u1aba\u0007",
    "\u0159\u0002\u0002\u1aba\u1abb\u0007\u0328\u0002\u0002\u1abb\u1abc\u0007",
    "f\u0002\u0002\u1abc\u0219\u0003\u0002\u0002\u0002\u1abd\u1abe\u0007",
    "\u030b\u0002\u0002\u1abe\u021b\u0003\u0002\u0002\u0002\u1abf\u1ac0\u0005",
    "\u03ac\u01d7\u0002\u1ac0\u1ac1\u0007\u031f\u0002\u0002\u1ac1\u1ac2\u0005",
    "\u021c\u010f\u0002\u1ac2\u1aca\u0003\u0002\u0002\u0002\u1ac3\u1ac4\u0005",
    "\u03ac\u01d7\u0002\u1ac4\u1ac5\u0007\u031f\u0002\u0002\u1ac5\u1ac8\u0003",
    "\u0002\u0002\u0002\u1ac6\u1ac8\u0005\u03ac\u01d7\u0002\u1ac7\u1ac3\u0003",
    "\u0002\u0002\u0002\u1ac7\u1ac6\u0003\u0002\u0002\u0002\u1ac8\u1aca\u0003",
    "\u0002\u0002\u0002\u1ac9\u1abf\u0003\u0002\u0002\u0002\u1ac9\u1ac7\u0003",
    "\u0002\u0002\u0002\u1aca\u021d\u0003\u0002\u0002\u0002\u1acb\u1acc\u0007",
    "\u01ce\u0002\u0002\u1acc\u1acd\u0005\u0388\u01c5\u0002\u1acd\u021f\u0003",
    "\u0002\u0002\u0002\u1ace\u1acf\u0007\u01ec\u0002\u0002\u1acf\u1ad0\u0005",
    "\u0388\u01c5\u0002\u1ad0\u0221\u0003\u0002\u0002\u0002\u1ad1\u1ad2\t",
    "E\u0002\u0002\u1ad2\u0223\u0003\u0002\u0002\u0002\u1ad3\u1ad4\tF\u0002",
    "\u0002\u1ad4\u0225\u0003\u0002\u0002\u0002\u1ad5\u1ad6\tG\u0002\u0002",
    "\u1ad6\u0227\u0003\u0002\u0002\u0002\u1ad7\u1ad8\u0007\u01d7\u0002\u0002",
    "\u1ad8\u1ad9\u0007\u0313\u0002\u0002\u1ad9\u1ada\tH\u0002\u0002\u1ada",
    "\u0229\u0003\u0002\u0002\u0002\u1adb\u1adc\u0007\u01d0\u0002\u0002\u1adc",
    "\u1af5\u0005\u0388\u01c5\u0002\u1add\u1ade\u0007\u02ec\u0002\u0002\u1ade",
    "\u1af5\u0005\u0388\u01c5\u0002\u1adf\u1ae0\u0007\u01d5\u0002\u0002\u1ae0",
    "\u1ae3\u0007\u0313\u0002\u0002\u1ae1\u1ae4\u0005\u03ac\u01d7\u0002\u1ae2",
    "\u1ae4\u0007\u030f\u0002\u0002\u1ae3\u1ae1\u0003\u0002\u0002\u0002\u1ae3",
    "\u1ae2\u0003\u0002\u0002\u0002\u1ae4\u1af5\u0003\u0002\u0002\u0002\u1ae5",
    "\u1ae6\u0007\u01d4\u0002\u0002\u1ae6\u1ae9\u0007\u0313\u0002\u0002\u1ae7",
    "\u1aea\u0005\u03ac\u01d7\u0002\u1ae8\u1aea\u0007\u030f\u0002\u0002\u1ae9",
    "\u1ae7\u0003\u0002\u0002\u0002\u1ae9\u1ae8\u0003\u0002\u0002\u0002\u1aea",
    "\u1af5\u0003\u0002\u0002\u0002\u1aeb\u1aec\u0007\u0257\u0002\u0002\u1aec",
    "\u1aed\u0007\u0313\u0002\u0002\u1aed\u1af5\t\b\u0002\u0002\u1aee\u1aef",
    "\u0007\u02e9\u0002\u0002\u1aef\u1af0\u0007\u0313\u0002\u0002\u1af0\u1af5",
    "\t\b\u0002\u0002\u1af1\u1af2\u0007\u02ef\u0002\u0002\u1af2\u1af3\u0007",
    "\u0313\u0002\u0002\u1af3\u1af5\u0007\u030b\u0002\u0002\u1af4\u1adb\u0003",
    "\u0002\u0002\u0002\u1af4\u1add\u0003\u0002\u0002\u0002\u1af4\u1adf\u0003",
    "\u0002\u0002\u0002\u1af4\u1ae5\u0003\u0002\u0002\u0002\u1af4\u1aeb\u0003",
    "\u0002\u0002\u0002\u1af4\u1aee\u0003\u0002\u0002\u0002\u1af4\u1af1\u0003",
    "\u0002\u0002\u0002\u1af5\u022b\u0003\u0002\u0002\u0002\u1af6\u1aff\u0007",
    "\u0211\u0002\u0002\u1af7\u1af8\u0007\u01a1\u0002\u0002\u1af8\u1af9\u0007",
    "\u0092\u0002\u0002\u1af9\u1afa\u0007\u0313\u0002\u0002\u1afa\u1afd\u0005",
    "\u03ac\u01d7\u0002\u1afb\u1afd\u0007\u00e1\u0002\u0002\u1afc\u1af7\u0003",
    "\u0002\u0002\u0002\u1afc\u1afb\u0003\u0002\u0002\u0002\u1afd\u1b00\u0003",
    "\u0002\u0002\u0002\u1afe\u1b00\tI\u0002\u0002\u1aff\u1afc\u0003\u0002",
    "\u0002\u0002\u1aff\u1afe\u0003\u0002\u0002\u0002\u1b00\u022d\u0003\u0002",
    "\u0002\u0002\u1b01\u1b02\u0007\u0252\u0002\u0002\u1b02\u1b03\t\b\u0002",
    "\u0002\u1b03\u022f\u0003\u0002\u0002\u0002\u1b04\u1b05\u0007\u0276\u0002",
    "\u0002\u1b05\u1b06\tJ\u0002\u0002\u1b06\u0231\u0003\u0002\u0002\u0002",
    "\u1b07\u1b08\u0007\u029b\u0002\u0002\u1b08\u1b0e\tK\u0002\u0002\u1b09",
    "\u1b0a\u0007\u02e8\u0002\u0002\u1b0a\u1b0e\u0005\u0388\u01c5\u0002\u1b0b",
    "\u1b0c\u0007\u0275\u0002\u0002\u1b0c\u1b0e\tL\u0002\u0002\u1b0d\u1b07",
    "\u0003\u0002\u0002\u0002\u1b0d\u1b09\u0003\u0002\u0002\u0002\u1b0d\u1b0b",
    "\u0003\u0002\u0002\u0002\u1b0e\u0233\u0003\u0002\u0002\u0002\u1b0f\u1b16",
    "\u0007\u01ea\u0002\u0002\u1b10\u1b16\u0007\u01e3\u0002\u0002\u1b11\u1b16",
    "\u0007\u0259\u0002\u0002\u1b12\u1b16\u0007\u01ee\u0002\u0002\u1b13\u1b14",
    "\u0007\u0215\u0002\u0002\u1b14\u1b16\u0005\u0388\u01c5\u0002\u1b15\u1b0f",
    "\u0003\u0002\u0002\u0002\u1b15\u1b10\u0003\u0002\u0002\u0002\u1b15\u1b11",
    "\u0003\u0002\u0002\u0002\u1b15\u1b12\u0003\u0002\u0002\u0002\u1b15\u1b13",
    "\u0003\u0002\u0002\u0002\u1b16\u0235\u0003\u0002\u0002\u0002\u1b17\u1b18",
    "\u0007\u018f\u0002\u0002\u1b18\u1b1d\u0005\u0388\u01c5\u0002\u1b19\u1b1a",
    "\u0007\u0294\u0002\u0002\u1b1a\u1b1d\t\b\u0002\u0002\u1b1b\u1b1d\t\b",
    "\u0002\u0002\u1b1c\u1b17\u0003\u0002\u0002\u0002\u1b1c\u1b19\u0003\u0002",
    "\u0002\u0002\u1b1c\u1b1b\u0003\u0002\u0002\u0002\u1b1d\u0237\u0003\u0002",
    "\u0002\u0002\u1b1e\u1b1f\u0007\u0191\u0002\u0002\u1b1f\u1b34\u0005\u0388",
    "\u01c5\u0002\u1b20\u1b21\u0007\u0190\u0002\u0002\u1b21\u1b34\u0005\u0388",
    "\u01c5\u0002\u1b22\u1b23\u0007\u0192\u0002\u0002\u1b23\u1b34\u0005\u0388",
    "\u01c5\u0002\u1b24\u1b25\u0007\u0193\u0002\u0002\u1b25\u1b34\u0005\u0388",
    "\u01c5\u0002\u1b26\u1b27\u0007\u0196\u0002\u0002\u1b27\u1b34\u0005\u0388",
    "\u01c5\u0002\u1b28\u1b29\u0007\u01ba\u0002\u0002\u1b29\u1b2a\u0007\u0313",
    "\u0002\u0002\u1b2a\u1b34\u0007\u030b\u0002\u0002\u1b2b\u1b2c\u0007\u01bc",
    "\u0002\u0002\u1b2c\u1b34\u0005\u0388\u01c5\u0002\u1b2d\u1b2e\u0007\u0268",
    "\u0002\u0002\u1b2e\u1b34\u0005\u0388\u01c5\u0002\u1b2f\u1b30\u0007\u028d",
    "\u0002\u0002\u1b30\u1b34\u0005\u0388\u01c5\u0002\u1b31\u1b32\u0007\u029c",
    "\u0002\u0002\u1b32\u1b34\u0005\u0388\u01c5\u0002\u1b33\u1b1e\u0003\u0002",
    "\u0002\u0002\u1b33\u1b20\u0003\u0002\u0002\u0002\u1b33\u1b22\u0003\u0002",
    "\u0002\u0002\u1b33\u1b24\u0003\u0002\u0002\u0002\u1b33\u1b26\u0003\u0002",
    "\u0002\u0002\u1b33\u1b28\u0003\u0002\u0002\u0002\u1b33\u1b2b\u0003\u0002",
    "\u0002\u0002\u1b33\u1b2d\u0003\u0002\u0002\u0002\u1b33\u1b2f\u0003\u0002",
    "\u0002\u0002\u1b33\u1b31\u0003\u0002\u0002\u0002\u1b34\u0239\u0003\u0002",
    "\u0002\u0002\u1b35\u1b36\u0007\u02df\u0002\u0002\u1b36\u1b37\u0007\u0313",
    "\u0002\u0002\u1b37\u1b38\u0007\u030b\u0002\u0002\u1b38\u1b39\tM\u0002",
    "\u0002\u1b39\u023b\u0003\u0002\u0002\u0002\u1b3a\u1b3b\u0007\u011f\u0002",
    "\u0002\u1b3b\u1b3c\u0007\u018a\u0002\u0002\u1b3c\u1b41\u0007\u030b\u0002",
    "\u0002\u1b3d\u1b3e\u0007\u011f\u0002\u0002\u1b3e\u1b41\u0007\u0219\u0002",
    "\u0002\u1b3f\u1b41\u0007\u0264\u0002\u0002\u1b40\u1b3a\u0003\u0002\u0002",
    "\u0002\u1b40\u1b3d\u0003\u0002\u0002\u0002\u1b40\u1b3f\u0003\u0002\u0002",
    "\u0002\u1b41\u023d\u0003\u0002\u0002\u0002\u1b42\u1b43\u0007g\u0002",
    "\u0002\u1b43\u1b46\u0007\u009d\u0002\u0002\u1b44\u1b45\u0007\u0099\u0002",
    "\u0002\u1b45\u1b47\u0007w\u0002\u0002\u1b46\u1b44\u0003\u0002\u0002",
    "\u0002\u1b46\u1b47\u0003\u0002\u0002\u0002\u1b47\u1b58\u0003\u0002\u0002",
    "\u0002\u1b48\u1b4d\u0005\u0240\u0121\u0002\u1b49\u1b4a\u0007\u0326\u0002",
    "\u0002\u1b4a\u1b4c\u0005\u0240\u0121\u0002\u1b4b\u1b49\u0003\u0002\u0002",
    "\u0002\u1b4c\u1b4f\u0003\u0002\u0002\u0002\u1b4d\u1b4b\u0003\u0002\u0002",
    "\u0002\u1b4d\u1b4e\u0003\u0002\u0002\u0002\u1b4e\u1b59\u0003\u0002\u0002",
    "\u0002\u1b4f\u1b4d\u0003\u0002\u0002\u0002\u1b50\u1b55\u0005\u0242\u0122",
    "\u0002\u1b51\u1b52\u0007\u0326\u0002\u0002\u1b52\u1b54\u0005\u0242\u0122",
    "\u0002\u1b53\u1b51\u0003\u0002\u0002\u0002\u1b54\u1b57\u0003\u0002\u0002",
    "\u0002\u1b55\u1b53\u0003\u0002\u0002\u0002\u1b55\u1b56\u0003\u0002\u0002",
    "\u0002\u1b56\u1b59\u0003\u0002\u0002\u0002\u1b57\u1b55\u0003\u0002\u0002",
    "\u0002\u1b58\u1b48\u0003\u0002\u0002\u0002\u1b58\u1b50\u0003\u0002\u0002",
    "\u0002\u1b59\u1b5b\u0003\u0002\u0002\u0002\u1b5a\u1b5c\u0007\u0327\u0002",
    "\u0002\u1b5b\u1b5a\u0003\u0002\u0002\u0002\u1b5b\u1b5c\u0003\u0002\u0002",
    "\u0002\u1b5c\u023f\u0003\u0002\u0002\u0002\u1b5d\u1b5e\u0005\u03ac\u01d7",
    "\u0002\u1b5e\u1b5f\u0007\u00e4\u0002\u0002\u1b5f\u1b60\u0005\u0376\u01bc",
    "\u0002\u1b60\u0241\u0003\u0002\u0002\u0002\u1b61\u1b62\u0005\u03ac\u01d7",
    "\u0002\u1b62\u1b63\u0007\u031f\u0002\u0002\u1b63\u1b65\u0003\u0002\u0002",
    "\u0002\u1b64\u1b61\u0003\u0002\u0002\u0002\u1b64\u1b65\u0003\u0002\u0002",
    "\u0002\u1b65\u1b66\u0003\u0002\u0002\u0002\u1b66\u1b67\u0005\u03ac\u01d7",
    "\u0002\u1b67\u1b68\u0007\u031f\u0002\u0002\u1b68\u1b69\u0005\u03ac\u01d7",
    "\u0002\u1b69\u0243\u0003\u0002\u0002\u0002\u1b6a\u1b6b\u0007g\u0002",
    "\u0002\u1b6b\u1b6e\t6\u0002\u0002\u1b6c\u1b6d\u0007\u0099\u0002\u0002",
    "\u1b6d\u1b6f\u0007w\u0002\u0002\u1b6e\u1b6c\u0003\u0002\u0002\u0002",
    "\u1b6e\u1b6f\u0003\u0002\u0002\u0002\u1b6f\u1b70\u0003\u0002\u0002\u0002",
    "\u1b70\u1b75\u0005\u037c\u01bf\u0002\u1b71\u1b72\u0007\u0326\u0002\u0002",
    "\u1b72\u1b74\u0005\u037c\u01bf\u0002\u1b73\u1b71\u0003\u0002\u0002\u0002",
    "\u1b74\u1b77\u0003\u0002\u0002\u0002\u1b75\u1b73\u0003\u0002\u0002\u0002",
    "\u1b75\u1b76\u0003\u0002\u0002\u0002\u1b76\u1b79\u0003\u0002\u0002\u0002",
    "\u1b77\u1b75\u0003\u0002\u0002\u0002\u1b78\u1b7a\u0007\u0327\u0002\u0002",
    "\u1b79\u1b78\u0003\u0002\u0002\u0002\u1b79\u1b7a\u0003\u0002\u0002\u0002",
    "\u1b7a\u0245\u0003\u0002\u0002\u0002\u1b7b\u1b7e\u0005\u0248\u0125\u0002",
    "\u1b7c\u1b7e\u0005\u024a\u0126\u0002\u1b7d\u1b7b\u0003\u0002\u0002\u0002",
    "\u1b7d\u1b7c\u0003\u0002\u0002\u0002\u1b7e\u0247\u0003\u0002\u0002\u0002",
    "\u1b7f\u1b80\u0007g\u0002\u0002\u1b80\u1b83\u0007\u0162\u0002\u0002",
    "\u1b81\u1b82\u0007\u0099\u0002\u0002\u1b82\u1b84\u0007w\u0002\u0002",
    "\u1b83\u1b81\u0003\u0002\u0002\u0002\u1b83\u1b84\u0003\u0002\u0002\u0002",
    "\u1b84\u1b85\u0003\u0002\u0002\u0002\u1b85\u1b8a\u0005\u037a\u01be\u0002",
    "\u1b86\u1b87\u0007\u0326\u0002\u0002\u1b87\u1b89\u0005\u037a\u01be\u0002",
    "\u1b88\u1b86\u0003\u0002\u0002\u0002\u1b89\u1b8c\u0003\u0002\u0002\u0002",
    "\u1b8a\u1b88\u0003\u0002\u0002\u0002\u1b8a\u1b8b\u0003\u0002\u0002\u0002",
    "\u1b8b\u1b8e\u0003\u0002\u0002\u0002\u1b8c\u1b8a\u0003\u0002\u0002\u0002",
    "\u1b8d\u1b8f\u0007\u0327\u0002\u0002\u1b8e\u1b8d\u0003\u0002\u0002\u0002",
    "\u1b8e\u1b8f\u0003\u0002\u0002\u0002\u1b8f\u0249\u0003\u0002\u0002\u0002",
    "\u1b90\u1b91\u0007g\u0002\u0002\u1b91\u1b94\u0007\u0162\u0002\u0002",
    "\u1b92\u1b93\u0007\u0099\u0002\u0002\u1b93\u1b95\u0007w\u0002\u0002",
    "\u1b94\u1b92\u0003\u0002\u0002\u0002\u1b94\u1b95\u0003\u0002\u0002\u0002",
    "\u1b95\u1b96\u0003\u0002\u0002\u0002\u1b96\u1b9b\u0005\u037a\u01be\u0002",
    "\u1b97\u1b98\u0007\u0326\u0002\u0002\u1b98\u1b9a\u0005\u037a\u01be\u0002",
    "\u1b99\u1b97\u0003\u0002\u0002\u0002\u1b9a\u1b9d\u0003\u0002\u0002\u0002",
    "\u1b9b\u1b99\u0003\u0002\u0002\u0002\u1b9b\u1b9c\u0003\u0002\u0002\u0002",
    "\u1b9c\u1b9e\u0003\u0002\u0002\u0002\u1b9d\u1b9b\u0003\u0002\u0002\u0002",
    "\u1b9e\u1ba2\u0007\u00e4\u0002\u0002\u1b9f\u1ba3\u0007T\u0002\u0002",
    "\u1ba0\u1ba1\u0007\u0005\u0002\u0002\u1ba1\u1ba3\u0007\u0136\u0002\u0002",
    "\u1ba2\u1b9f\u0003\u0002\u0002\u0002\u1ba2\u1ba0\u0003\u0002\u0002\u0002",
    "\u1ba3\u1ba5\u0003\u0002\u0002\u0002\u1ba4\u1ba6\u0007\u0327\u0002\u0002",
    "\u1ba5\u1ba4\u0003\u0002\u0002\u0002\u1ba5\u1ba6\u0003\u0002\u0002\u0002",
    "\u1ba6\u024b\u0003\u0002\u0002\u0002\u1ba7\u1ba8\u0007g\u0002\u0002",
    "\u1ba8\u1bab\u0007\u008d\u0002\u0002\u1ba9\u1baa\u0007\u0099\u0002\u0002",
    "\u1baa\u1bac\u0007w\u0002\u0002\u1bab\u1ba9\u0003\u0002\u0002\u0002",
    "\u1bab\u1bac\u0003\u0002\u0002\u0002\u1bac\u1bad\u0003\u0002\u0002\u0002",
    "\u1bad\u1bb2\u0005\u037c\u01bf\u0002\u1bae\u1baf\u0007\u0326\u0002\u0002",
    "\u1baf\u1bb1\u0005\u037c\u01bf\u0002\u1bb0\u1bae\u0003\u0002\u0002\u0002",
    "\u1bb1\u1bb4\u0003\u0002\u0002\u0002\u1bb2\u1bb0\u0003\u0002\u0002\u0002",
    "\u1bb2\u1bb3\u0003\u0002\u0002\u0002\u1bb3\u1bb6\u0003\u0002\u0002\u0002",
    "\u1bb4\u1bb2\u0003\u0002\u0002\u0002\u1bb5\u1bb7\u0007\u0327\u0002\u0002",
    "\u1bb6\u1bb5\u0003\u0002\u0002\u0002\u1bb6\u1bb7\u0003\u0002\u0002\u0002",
    "\u1bb7\u024d\u0003\u0002\u0002\u0002\u1bb8\u1bb9\u0007g\u0002\u0002",
    "\u1bb9\u1bc3\u0007\u0149\u0002\u0002\u1bba\u1bbc\u0007\u0326\u0002\u0002",
    "\u1bbb\u1bba\u0003\u0002\u0002\u0002\u1bbb\u1bbc\u0003\u0002\u0002\u0002",
    "\u1bbc\u1bc0\u0003\u0002\u0002\u0002\u1bbd\u1bbe\u0005\u0378\u01bd\u0002",
    "\u1bbe\u1bbf\u0007\u031f\u0002\u0002\u1bbf\u1bc1\u0003\u0002\u0002\u0002",
    "\u1bc0\u1bbd\u0003\u0002\u0002\u0002\u1bc0\u1bc1\u0003\u0002\u0002\u0002",
    "\u1bc1\u1bc2\u0003\u0002\u0002\u0002\u1bc2\u1bc4\u0005\u03ac\u01d7\u0002",
    "\u1bc3\u1bbb\u0003\u0002\u0002\u0002\u1bc4\u1bc5\u0003\u0002\u0002\u0002",
    "\u1bc5\u1bc3\u0003\u0002\u0002\u0002\u1bc5\u1bc6\u0003\u0002\u0002\u0002",
    "\u1bc6\u1bc7\u0003\u0002\u0002\u0002\u1bc7\u1bc8\u0007\u0327\u0002\u0002",
    "\u1bc8\u024f\u0003\u0002\u0002\u0002\u1bc9\u1bca\u0007g\u0002\u0002",
    "\u1bca\u1bcd\u0007\u0155\u0002\u0002\u1bcb\u1bcc\u0007\u0099\u0002\u0002",
    "\u1bcc\u1bce\u0007w\u0002\u0002\u1bcd\u1bcb\u0003\u0002\u0002\u0002",
    "\u1bcd\u1bce\u0003\u0002\u0002\u0002\u1bce\u1bcf\u0003\u0002\u0002\u0002",
    "\u1bcf\u1bd1\u0005\u0378\u01bd\u0002\u1bd0\u1bd2\u0007\u0327\u0002\u0002",
    "\u1bd1\u1bd0\u0003\u0002\u0002\u0002\u1bd1\u1bd2\u0003\u0002\u0002\u0002",
    "\u1bd2\u0251\u0003\u0002\u0002\u0002\u1bd3\u1bd4\u0007g\u0002\u0002",
    "\u1bd4\u1bd7\u0007\u0174\u0002\u0002\u1bd5\u1bd6\u0007\u0099\u0002\u0002",
    "\u1bd6\u1bd8\u0007w\u0002\u0002\u1bd7\u1bd5\u0003\u0002\u0002\u0002",
    "\u1bd7\u1bd8\u0003\u0002\u0002\u0002\u1bd8\u1bd9\u0003\u0002\u0002\u0002",
    "\u1bd9\u1bde\u0005\u037a\u01be\u0002\u1bda\u1bdb\u0007\u0326\u0002\u0002",
    "\u1bdb\u1bdd\u0005\u037a\u01be\u0002\u1bdc\u1bda\u0003\u0002\u0002\u0002",
    "\u1bdd\u1be0\u0003\u0002\u0002\u0002\u1bde\u1bdc\u0003\u0002\u0002\u0002",
    "\u1bde\u1bdf\u0003\u0002\u0002\u0002\u1bdf\u1be2\u0003\u0002\u0002\u0002",
    "\u1be0\u1bde\u0003\u0002\u0002\u0002\u1be1\u1be3\u0007\u0327\u0002\u0002",
    "\u1be2\u1be1\u0003\u0002\u0002\u0002\u1be2\u1be3\u0003\u0002\u0002\u0002",
    "\u1be3\u0253\u0003\u0002\u0002\u0002\u1be4\u1be5\u0007H\u0002\u0002",
    "\u1be5\u1be6\u0007\u02f0\u0002\u0002\u1be6\u1beb\u0005\u037a\u01be\u0002",
    "\u1be7\u1be8\u0007\u008b\u0002\u0002\u1be8\u1be9\u0005\u03a4\u01d3\u0002",
    "\u1be9\u1bea\u0005\u03a6\u01d4\u0002\u1bea\u1bec\u0003\u0002\u0002\u0002",
    "\u1beb\u1be7\u0003\u0002\u0002\u0002\u1beb\u1bec\u0003\u0002\u0002\u0002",
    "\u1bec\u1bf3\u0003\u0002\u0002\u0002\u1bed\u1bee\u0007\u000f\u0002\u0002",
    "\u1bee\u1bef\u0007\u0155\u0002\u0002\u1bef\u1bf0\u0007\u0324\u0002\u0002",
    "\u1bf0\u1bf1\u0005\u02a4\u0153\u0002\u1bf1\u1bf2\u0007\u0325\u0002\u0002",
    "\u1bf2\u1bf4\u0003\u0002\u0002\u0002\u1bf3\u1bed\u0003\u0002\u0002\u0002",
    "\u1bf3\u1bf4\u0003\u0002\u0002\u0002\u1bf4\u0255\u0003\u0002\u0002\u0002",
    "\u1bf5\u1bf6\u0007g\u0002\u0002\u1bf6\u1bf9\u0007\u02f0\u0002\u0002",
    "\u1bf7\u1bf8\u0007\u0099\u0002\u0002\u1bf8\u1bfa\u0007w\u0002\u0002",
    "\u1bf9\u1bf7\u0003\u0002\u0002\u0002\u1bf9\u1bfa\u0003\u0002\u0002\u0002",
    "\u1bfa\u1bfb\u0003\u0002\u0002\u0002\u1bfb\u1bfc\u0005\u037a\u01be\u0002",
    "\u1bfc\u0257\u0003\u0002\u0002\u0002\u1bfd\u1c00\u0005\u025a\u012e\u0002",
    "\u1bfe\u1c00\u0005\u025c\u012f\u0002\u1bff\u1bfd\u0003\u0002\u0002\u0002",
    "\u1bff\u1bfe\u0003\u0002\u0002\u0002\u1c00\u0259\u0003\u0002\u0002\u0002",
    "\u1c01\u1c02\u0007\u00e8\u0002\u0002\u1c02\u1c03\u0007\u0324\u0002\u0002",
    "\u1c03\u1c04\u0005\u03ac\u01d7\u0002\u1c04\u1c05\u0007\u0326\u0002\u0002",
    "\u1c05\u1c06\u0007\u030f\u0002\u0002\u1c06\u1c07\u0007\u0325\u0002\u0002",
    "\u1c07\u025b\u0003\u0002\u0002\u0002\u1c08\u1c09\u0007\u00e7\u0002\u0002",
    "\u1c09\u1c0a\u0007\u0324\u0002\u0002\u1c0a\u1c0b\u0007\u030f\u0002\u0002",
    "\u1c0b\u1c0c\u0007\u0326\u0002\u0002\u1c0c\u1c0d\u0007\u030f\u0002\u0002",
    "\u1c0d\u1c0e\u0007\u0325\u0002\u0002\u1c0e\u1c10\u0007\u031f\u0002\u0002",
    "\u1c0f\u1c11\u0005\u03ac\u01d7\u0002\u1c10\u1c0f\u0003\u0002\u0002\u0002",
    "\u1c10\u1c11\u0003\u0002\u0002\u0002\u1c11\u1c12\u0003\u0002\u0002\u0002",
    "\u1c12\u1c14\u0007\u031f\u0002\u0002\u1c13\u1c15\u0005\u03ac\u01d7\u0002",
    "\u1c14\u1c13\u0003\u0002\u0002\u0002\u1c14\u1c15\u0003\u0002\u0002\u0002",
    "\u1c15\u1c16\u0003\u0002\u0002\u0002\u1c16\u1c17\u0007\u031f\u0002\u0002",
    "\u1c17\u1c18\u0005\u03ac\u01d7\u0002\u1c18\u025d\u0003\u0002\u0002\u0002",
    "\u1c19\u1c1a\u0007X\u0002\u0002\u1c1a\u1c1c\u0007\u030a\u0002\u0002",
    "\u1c1b\u1c1d\u0007\u000f\u0002\u0002\u1c1c\u1c1b\u0003\u0002\u0002\u0002",
    "\u1c1c\u1c1d\u0003\u0002\u0002\u0002\u1c1d\u1c1e\u0003\u0002\u0002\u0002",
    "\u1c1e\u1c20\u0005\u029e\u0150\u0002\u1c1f\u1c21\u0007\u0327\u0002\u0002",
    "\u1c20\u1c1f\u0003\u0002\u0002\u0002\u1c20\u1c21\u0003\u0002\u0002\u0002",
    "\u1c21\u1c45\u0003\u0002\u0002\u0002\u1c22\u1c23\u0007X\u0002\u0002",
    "\u1c23\u1c28\u0005\u029c\u014f\u0002\u1c24\u1c25\u0007\u0326\u0002\u0002",
    "\u1c25\u1c27\u0005\u029c\u014f\u0002\u1c26\u1c24\u0003\u0002\u0002\u0002",
    "\u1c27\u1c2a\u0003\u0002\u0002\u0002\u1c28\u1c26\u0003\u0002\u0002\u0002",
    "\u1c28\u1c29\u0003\u0002\u0002\u0002\u1c29\u1c2c\u0003\u0002\u0002\u0002",
    "\u1c2a\u1c28\u0003\u0002\u0002\u0002\u1c2b\u1c2d\u0007\u0327\u0002\u0002",
    "\u1c2c\u1c2b\u0003\u0002\u0002\u0002\u1c2c\u1c2d\u0003\u0002\u0002\u0002",
    "\u1c2d\u1c45\u0003\u0002\u0002\u0002\u1c2e\u1c2f\u0007X\u0002\u0002",
    "\u1c2f\u1c31\u0007\u030a\u0002\u0002\u1c30\u1c32\u0007\u000f\u0002\u0002",
    "\u1c31\u1c30\u0003\u0002\u0002\u0002\u1c31\u1c32\u0003\u0002\u0002\u0002",
    "\u1c32\u1c33\u0003\u0002\u0002\u0002\u1c33\u1c35\u0005\u02a0\u0151\u0002",
    "\u1c34\u1c36\u0007\u0327\u0002\u0002\u1c35\u1c34\u0003\u0002\u0002\u0002",
    "\u1c35\u1c36\u0003\u0002\u0002\u0002\u1c36\u1c45\u0003\u0002\u0002\u0002",
    "\u1c37\u1c38\u0007\u017b\u0002\u0002\u1c38\u1c39\u0007\u0302\u0002\u0002",
    "\u1c39\u1c3a\u0007\u0324\u0002\u0002\u1c3a\u1c3c\u0007\u030f\u0002\u0002",
    "\u1c3b\u1c3d\u0007\u0326\u0002\u0002\u1c3c\u1c3b\u0003\u0002\u0002\u0002",
    "\u1c3c\u1c3d\u0003\u0002\u0002\u0002\u1c3d\u1c3e\u0003\u0002\u0002\u0002",
    "\u1c3e\u1c3f\u0007\u000f\u0002\u0002\u1c3f\u1c40\u0005\u03ac\u01d7\u0002",
    "\u1c40\u1c42\u0007\u0325\u0002\u0002\u1c41\u1c43\u0007\u0327\u0002\u0002",
    "\u1c42\u1c41\u0003\u0002\u0002\u0002\u1c42\u1c43\u0003\u0002\u0002\u0002",
    "\u1c43\u1c45\u0003\u0002\u0002\u0002\u1c44\u1c19\u0003\u0002\u0002\u0002",
    "\u1c44\u1c22\u0003\u0002\u0002\u0002\u1c44\u1c2e\u0003\u0002\u0002\u0002",
    "\u1c44\u1c37\u0003\u0002\u0002\u0002\u1c45\u025f\u0003\u0002\u0002\u0002",
    "\u1c46\u1c48\u00072\u0002\u0002\u1c47\u1c49\u0007\u020c\u0002\u0002",
    "\u1c48\u1c47\u0003\u0002\u0002\u0002\u1c48\u1c49\u0003\u0002\u0002\u0002",
    "\u1c49\u1c4a\u0003\u0002\u0002\u0002\u1c4a\u1c4c\u0005\u0386\u01c4\u0002",
    "\u1c4b\u1c4d\u0007\u0327\u0002\u0002\u1c4c\u1c4b\u0003\u0002\u0002\u0002",
    "\u1c4c\u1c4d\u0003\u0002\u0002\u0002\u1c4d\u1c61\u0003\u0002\u0002\u0002",
    "\u1c4e\u1c50\u0007W\u0002\u0002\u1c4f\u1c51\u0007\u020c\u0002\u0002",
    "\u1c50\u1c4f\u0003\u0002\u0002\u0002\u1c50\u1c51\u0003\u0002\u0002\u0002",
    "\u1c51\u1c52\u0003\u0002\u0002\u0002\u1c52\u1c54\u0005\u0386\u01c4\u0002",
    "\u1c53\u1c55\u0007\u0327\u0002\u0002\u1c54\u1c53\u0003\u0002\u0002\u0002",
    "\u1c54\u1c55\u0003\u0002\u0002\u0002\u1c55\u1c61\u0003\u0002\u0002\u0002",
    "\u1c56\u1c61\u0005\u02b6\u015c\u0002\u1c57\u1c61\u0005\u02bc\u015f\u0002",
    "\u1c58\u1c5a\u0007\u00e6\u0002\u0002\u1c59\u1c5b\u0007\u020c\u0002\u0002",
    "\u1c5a\u1c59\u0003\u0002\u0002\u0002\u1c5a\u1c5b\u0003\u0002\u0002\u0002",
    "\u1c5b\u1c5c\u0003\u0002\u0002\u0002\u1c5c\u1c5e\u0005\u0386\u01c4\u0002",
    "\u1c5d\u1c5f\u0007\u0327\u0002\u0002\u1c5e\u1c5d\u0003\u0002\u0002\u0002",
    "\u1c5e\u1c5f\u0003\u0002\u0002\u0002\u1c5f\u1c61\u0003\u0002\u0002\u0002",
    "\u1c60\u1c46\u0003\u0002\u0002\u0002\u1c60\u1c4e\u0003\u0002\u0002\u0002",
    "\u1c60\u1c56\u0003\u0002\u0002\u0002\u1c60\u1c57\u0003\u0002\u0002\u0002",
    "\u1c60\u1c58\u0003\u0002\u0002\u0002\u1c61\u0261\u0003\u0002\u0002\u0002",
    "\u1c62\u1c63\u0007\u0019\u0002\u0002\u1c63\u1c64\u0007T\u0002\u0002",
    "\u1c64\u1c71\u0005\u03ac\u01d7\u0002\u1c65\u1c6e\u0007\u010b\u0002\u0002",
    "\u1c66\u1c68\u0007\u0326\u0002\u0002\u1c67\u1c66\u0003\u0002\u0002\u0002",
    "\u1c67\u1c68\u0003\u0002\u0002\u0002\u1c68\u1c69\u0003\u0002\u0002\u0002",
    "\u1c69\u1c6a\tN\u0002\u0002\u1c6a\u1c6b\u0007\u0313\u0002\u0002\u1c6b",
    "\u1c6d\u0007\u030f\u0002\u0002\u1c6c\u1c67\u0003\u0002\u0002\u0002\u1c6d",
    "\u1c70\u0003\u0002\u0002\u0002\u1c6e\u1c6c\u0003\u0002\u0002\u0002\u1c6e",
    "\u1c6f\u0003\u0002\u0002\u0002\u1c6f\u1c72\u0003\u0002\u0002\u0002\u1c70",
    "\u1c6e\u0003\u0002\u0002\u0002\u1c71\u1c65\u0003\u0002\u0002\u0002\u1c71",
    "\u1c72\u0003\u0002\u0002\u0002\u1c72\u1c7b\u0003\u0002\u0002\u0002\u1c73",
    "\u1c75\u0007\u0326\u0002\u0002\u1c74\u1c73\u0003\u0002\u0002\u0002\u1c74",
    "\u1c75\u0003\u0002\u0002\u0002\u1c75\u1c76\u0003\u0002\u0002\u0002\u1c76",
    "\u1c77\tN\u0002\u0002\u1c77\u1c78\u0007\u0313\u0002\u0002\u1c78\u1c7a",
    "\u0007\u030f\u0002\u0002\u1c79\u1c74\u0003\u0002\u0002\u0002\u1c7a\u1c7d",
    "\u0003\u0002\u0002\u0002\u1c7b\u1c79\u0003\u0002\u0002\u0002\u1c7b\u1c7c",
    "\u0003\u0002\u0002\u0002\u1c7c\u1c95\u0003\u0002\u0002\u0002\u1c7d\u1c7b",
    "\u0003\u0002\u0002\u0002\u1c7e\u1c83\u0007\u015c\u0002\u0002\u1c7f\u1c81",
    "\u0007\u0326\u0002\u0002\u1c80\u1c7f\u0003\u0002\u0002\u0002\u1c80\u1c81",
    "\u0003\u0002\u0002\u0002\u1c81\u1c82\u0003\u0002\u0002\u0002\u1c82\u1c84",
    "\u0005\u03ac\u01d7\u0002\u1c83\u1c80\u0003\u0002\u0002\u0002\u1c84\u1c85",
    "\u0003\u0002\u0002\u0002\u1c85\u1c83\u0003\u0002\u0002\u0002\u1c85\u1c86",
    "\u0003\u0002\u0002\u0002\u1c86\u1c96\u0003\u0002\u0002\u0002\u1c87\u1c91",
    "\u0007\u015c\u0002\u0002\u1c88\u1c8a\u0007\u0326\u0002\u0002\u1c89\u1c88",
    "\u0003\u0002\u0002\u0002\u1c89\u1c8a\u0003\u0002\u0002\u0002\u1c8a\u1c8b",
    "\u0003\u0002\u0002\u0002\u1c8b\u1c8c\tO\u0002\u0002\u1c8c\u1c8f\u0007",
    "\u0313\u0002\u0002\u1c8d\u1c90\u0007\u030f\u0002\u0002\u1c8e\u1c90\u0005",
    "\u03ac\u01d7\u0002\u1c8f\u1c8d\u0003\u0002\u0002\u0002\u1c8f\u1c8e\u0003",
    "\u0002\u0002\u0002\u1c90\u1c92\u0003\u0002\u0002\u0002\u1c91\u1c89\u0003",
    "\u0002\u0002\u0002\u1c92\u1c93\u0003\u0002\u0002\u0002\u1c93\u1c91\u0003",
    "\u0002\u0002\u0002\u1c93\u1c94\u0003\u0002\u0002\u0002\u1c94\u1c96\u0003",
    "\u0002\u0002\u0002\u1c95\u1c7e\u0003\u0002\u0002\u0002\u1c95\u1c87\u0003",
    "\u0002\u0002\u0002\u1c96\u1cb8\u0003\u0002\u0002\u0002\u1c97\u1c98\u0007",
    "\u00cc\u0002\u0002\u1c98\u1c9d\u0007\u015c\u0002\u0002\u1c99\u1c9b\u0007",
    "\u0326\u0002\u0002\u1c9a\u1c99\u0003\u0002\u0002\u0002\u1c9a\u1c9b\u0003",
    "\u0002\u0002\u0002\u1c9b\u1c9c\u0003\u0002\u0002\u0002\u1c9c\u1c9e\u0005",
    "\u03ac\u01d7\u0002\u1c9d\u1c9a\u0003\u0002\u0002\u0002\u1c9e\u1c9f\u0003",
    "\u0002\u0002\u0002\u1c9f\u1c9d\u0003\u0002\u0002\u0002\u1c9f\u1ca0\u0003",
    "\u0002\u0002\u0002\u1ca0\u1ca2\u0003\u0002\u0002\u0002\u1ca1\u1c97\u0003",
    "\u0002\u0002\u0002\u1ca2\u1ca3\u0003\u0002\u0002\u0002\u1ca3\u1ca1\u0003",
    "\u0002\u0002\u0002\u1ca3\u1ca4\u0003\u0002\u0002\u0002\u1ca4\u1cb9\u0003",
    "\u0002\u0002\u0002\u1ca5\u1ca6\u0007\u00cc\u0002\u0002\u1ca6\u1cb0\u0007",
    "\u015c\u0002\u0002\u1ca7\u1ca9\u0007\u0326\u0002\u0002\u1ca8\u1ca7\u0003",
    "\u0002\u0002\u0002\u1ca8\u1ca9\u0003\u0002\u0002\u0002\u1ca9\u1caa\u0003",
    "\u0002\u0002\u0002\u1caa\u1cab\tO\u0002\u0002\u1cab\u1cae\u0007\u0313",
    "\u0002\u0002\u1cac\u1caf\u0007\u030f\u0002\u0002\u1cad\u1caf\u0005\u03ac",
    "\u01d7\u0002\u1cae\u1cac\u0003\u0002\u0002\u0002\u1cae\u1cad\u0003\u0002",
    "\u0002\u0002\u1caf\u1cb1\u0003\u0002\u0002\u0002\u1cb0\u1ca8\u0003\u0002",
    "\u0002\u0002\u1cb1\u1cb2\u0003\u0002\u0002\u0002\u1cb2\u1cb0\u0003\u0002",
    "\u0002\u0002\u1cb2\u1cb3\u0003\u0002\u0002\u0002\u1cb3\u1cb5\u0003\u0002",
    "\u0002\u0002\u1cb4\u1ca5\u0003\u0002\u0002\u0002\u1cb5\u1cb6\u0003\u0002",
    "\u0002\u0002\u1cb6\u1cb4\u0003\u0002\u0002\u0002\u1cb6\u1cb7\u0003\u0002",
    "\u0002\u0002\u1cb7\u1cb9\u0003\u0002\u0002\u0002\u1cb8\u1ca1\u0003\u0002",
    "\u0002\u0002\u1cb8\u1cb4\u0003\u0002\u0002\u0002\u1cb8\u1cb9\u0003\u0002",
    "\u0002\u0002\u1cb9\u1d5a\u0003\u0002\u0002\u0002\u1cba\u1d57\u0007\u017b",
    "\u0002\u0002\u1cbb\u1cbd\u0007\u0326\u0002\u0002\u1cbc\u1cbb\u0003\u0002",
    "\u0002\u0002\u1cbc\u1cbd\u0003\u0002\u0002\u0002\u1cbd\u1cbe\u0003\u0002",
    "\u0002\u0002\u1cbe\u1d56\u0007`\u0002\u0002\u1cbf\u1cc1\u0007\u0326",
    "\u0002\u0002\u1cc0\u1cbf\u0003\u0002\u0002\u0002\u1cc0\u1cc1\u0003\u0002",
    "\u0002\u0002\u1cc1\u1cc2\u0003\u0002\u0002\u0002\u1cc2\u1d56\u0007G",
    "\u0002\u0002\u1cc3\u1cc5\u0007\u0326\u0002\u0002\u1cc4\u1cc3\u0003\u0002",
    "\u0002\u0002\u1cc4\u1cc5\u0003\u0002\u0002\u0002\u1cc5\u1cc6\u0003\u0002",
    "\u0002\u0002\u1cc6\u1d56\tP\u0002\u0002\u1cc7\u1cc9\u0007\u0326\u0002",
    "\u0002\u1cc8\u1cc7\u0003\u0002\u0002\u0002\u1cc8\u1cc9\u0003\u0002\u0002",
    "\u0002\u1cc9\u1cca\u0003\u0002\u0002\u0002\u1cca\u1ccb\u0007\u01dd\u0002",
    "\u0002\u1ccb\u1cce\u0007\u0313\u0002\u0002\u1ccc\u1ccf\u0007\u030f\u0002",
    "\u0002\u1ccd\u1ccf\u0005\u03ac\u01d7\u0002\u1cce\u1ccc\u0003\u0002\u0002",
    "\u0002\u1cce\u1ccd\u0003\u0002\u0002\u0002\u1ccf\u1d56\u0003\u0002\u0002",
    "\u0002\u1cd0\u1cd2\u0007\u0326\u0002\u0002\u1cd1\u1cd0\u0003\u0002\u0002",
    "\u0002\u1cd1\u1cd2\u0003\u0002\u0002\u0002\u1cd2\u1cd3\u0003\u0002\u0002",
    "\u0002\u1cd3\u1cd4\u0007\u0256\u0002\u0002\u1cd4\u1cd5\u0007\u0313\u0002",
    "\u0002\u1cd5\u1d56\u0005\u03ac\u01d7\u0002\u1cd6\u1cd8\u0007\u0326\u0002",
    "\u0002\u1cd7\u1cd6\u0003\u0002\u0002\u0002\u1cd7\u1cd8\u0003\u0002\u0002",
    "\u0002\u1cd8\u1cd9\u0003\u0002\u0002\u0002\u1cd9\u1d56\u0007\u01c6\u0002",
    "\u0002\u1cda\u1cdc\u0007\u0326\u0002\u0002\u1cdb\u1cda\u0003\u0002\u0002",
    "\u0002\u1cdb\u1cdc\u0003\u0002\u0002\u0002\u1cdc\u1cdd\u0003\u0002\u0002",
    "\u0002\u1cdd\u1d56\u0007\u0084\u0002\u0002\u1cde\u1ce0\u0007\u0326\u0002",
    "\u0002\u1cdf\u1cde\u0003\u0002\u0002\u0002\u1cdf\u1ce0\u0003\u0002\u0002",
    "\u0002\u1ce0\u1ced\u0003\u0002\u0002\u0002\u1ce1\u1ce2\u0007x\u0002",
    "\u0002\u1ce2\u1ce5\u0007\u0313\u0002\u0002\u1ce3\u1ce6\u0007\u030f\u0002",
    "\u0002\u1ce4\u1ce6\u0005\u03ac\u01d7\u0002\u1ce5\u1ce3\u0003\u0002\u0002",
    "\u0002\u1ce5\u1ce4\u0003\u0002\u0002\u0002\u1ce6\u1cee\u0003\u0002\u0002",
    "\u0002\u1ce7\u1ce8\u0007\u0118\u0002\u0002\u1ce8\u1ceb\u0007\u0313\u0002",
    "\u0002\u1ce9\u1cec\u0007\u030b\u0002\u0002\u1cea\u1cec\u0005\u03ac\u01d7",
    "\u0002\u1ceb\u1ce9\u0003\u0002\u0002\u0002\u1ceb\u1cea\u0003\u0002\u0002",
    "\u0002\u1cec\u1cee\u0003\u0002\u0002\u0002\u1ced\u1ce1\u0003\u0002\u0002",
    "\u0002\u1ced\u1ce7\u0003\u0002\u0002\u0002\u1cee\u1d56\u0003\u0002\u0002",
    "\u0002\u1cef\u1cf1\u0007\u0326\u0002\u0002\u1cf0\u1cef\u0003\u0002\u0002",
    "\u0002\u1cf0\u1cf1\u0003\u0002\u0002\u0002\u1cf1\u1cf2\u0003\u0002\u0002",
    "\u0002\u1cf2\u1d56\tQ\u0002\u0002\u1cf3\u1cf5\u0007\u0326\u0002\u0002",
    "\u1cf4\u1cf3\u0003\u0002\u0002\u0002\u1cf4\u1cf5\u0003\u0002\u0002\u0002",
    "\u1cf5\u1cf6\u0003\u0002\u0002\u0002\u1cf6\u1d56\tR\u0002\u0002\u1cf7",
    "\u1cf9\u0007\u0326\u0002\u0002\u1cf8\u1cf7\u0003\u0002\u0002\u0002\u1cf8",
    "\u1cf9\u0003\u0002\u0002\u0002\u1cf9\u1cfa\u0003\u0002\u0002\u0002\u1cfa",
    "\u1d56\tS\u0002\u0002\u1cfb\u1cfd\u0007\u0326\u0002\u0002\u1cfc\u1cfb",
    "\u0003\u0002\u0002\u0002\u1cfc\u1cfd\u0003\u0002\u0002\u0002\u1cfd\u1cfe",
    "\u0003\u0002\u0002\u0002\u1cfe\u1cff\u0007\u00c4\u0002\u0002\u1cff\u1d02",
    "\u0007\u0313\u0002\u0002\u1d00\u1d03\u0007\u030f\u0002\u0002\u1d01\u1d03",
    "\u0005\u03ac\u01d7\u0002\u1d02\u1d00\u0003\u0002\u0002\u0002\u1d02\u1d01",
    "\u0003\u0002\u0002\u0002\u1d03\u1d56\u0003\u0002\u0002\u0002\u1d04\u1d06",
    "\u0007\u0326\u0002\u0002\u1d05\u1d04\u0003\u0002\u0002\u0002\u1d05\u1d06",
    "\u0003\u0002\u0002\u0002\u1d06\u1d07\u0003\u0002\u0002\u0002\u1d07\u1d08",
    "\u0007\u00c5\u0002\u0002\u1d08\u1d09\u0007\u0313\u0002\u0002\u1d09\u1d56",
    "\u0007\u030f\u0002\u0002\u1d0a\u1d0c\u0007\u0326\u0002\u0002\u1d0b\u1d0a",
    "\u0003\u0002\u0002\u0002\u1d0b\u1d0c\u0003\u0002\u0002\u0002\u1d0c\u1d0d",
    "\u0003\u0002\u0002\u0002\u1d0d\u1d0e\u0007\u001e\u0002\u0002\u1d0e\u1d11",
    "\u0007\u0313\u0002\u0002\u1d0f\u1d12\u0007\u030b\u0002\u0002\u1d10\u1d12",
    "\u0005\u03ac\u01d7\u0002\u1d11\u1d0f\u0003\u0002\u0002\u0002\u1d11\u1d10",
    "\u0003\u0002\u0002\u0002\u1d12\u1d56\u0003\u0002\u0002\u0002\u1d13\u1d15",
    "\u0007\u0326\u0002\u0002\u1d14\u1d13\u0003\u0002\u0002\u0002\u1d14\u1d15",
    "\u0003\u0002\u0002\u0002\u1d15\u1d16\u0003\u0002\u0002\u0002\u1d16\u1d17",
    "\u0007#\u0002\u0002\u1d17\u1d1a\u0007\u0313\u0002\u0002\u1d18\u1d1b",
    "\u0007\u030b\u0002\u0002\u1d19\u1d1b\u0005\u03ac\u01d7\u0002\u1d1a\u1d18",
    "\u0003\u0002\u0002\u0002\u1d1a\u1d19\u0003\u0002\u0002\u0002\u1d1b\u1d56",
    "\u0003\u0002\u0002\u0002\u1d1c\u1d1e\u0007\u0326\u0002\u0002\u1d1d\u1d1c",
    "\u0003\u0002\u0002\u0002\u1d1d\u1d1e\u0003\u0002\u0002\u0002\u1d1e\u1d1f",
    "\u0003\u0002\u0002\u0002\u1d1f\u1d20\u0007\u00be\u0002\u0002\u1d20\u1d23",
    "\u0007\u0313\u0002\u0002\u1d21\u1d24\u0007\u030b\u0002\u0002\u1d22\u1d24",
    "\u0005\u03ac\u01d7\u0002\u1d23\u1d21\u0003\u0002\u0002\u0002\u1d23\u1d22",
    "\u0003\u0002\u0002\u0002\u1d24\u1d56\u0003\u0002\u0002\u0002\u1d25\u1d27",
    "\u0007\u0326\u0002\u0002\u1d26\u1d25\u0003\u0002\u0002\u0002\u1d26\u1d27",
    "\u0003\u0002\u0002\u0002\u1d27\u1d28\u0003\u0002\u0002\u0002\u1d28\u1d56",
    "\tT\u0002\u0002\u1d29\u1d2b\u0007\u0326\u0002\u0002\u1d2a\u1d29\u0003",
    "\u0002\u0002\u0002\u1d2a\u1d2b\u0003\u0002\u0002\u0002\u1d2b\u1d2c\u0003",
    "\u0002\u0002\u0002\u1d2c\u1d56\tU\u0002\u0002\u1d2d\u1d2f\u0007\u0326",
    "\u0002\u0002\u1d2e\u1d2d\u0003\u0002\u0002\u0002\u1d2e\u1d2f\u0003\u0002",
    "\u0002\u0002\u1d2f\u1d30\u0003\u0002\u0002\u0002\u1d30\u1d56\u0007\u0114",
    "\u0002\u0002\u1d31\u1d33\u0007\u0326\u0002\u0002\u1d32\u1d31\u0003\u0002",
    "\u0002\u0002\u1d32\u1d33\u0003\u0002\u0002\u0002\u1d33\u1d34\u0003\u0002",
    "\u0002\u0002\u1d34\u1d37\u0007\u014b\u0002\u0002\u1d35\u1d36\u0007\u0313",
    "\u0002\u0002\u1d36\u1d38\u0007\u030b\u0002\u0002\u1d37\u1d35\u0003\u0002",
    "\u0002\u0002\u1d37\u1d38\u0003\u0002\u0002\u0002\u1d38\u1d56\u0003\u0002",
    "\u0002\u0002\u1d39\u1d3b\u0007\u0326\u0002\u0002\u1d3a\u1d39\u0003\u0002",
    "\u0002\u0002\u1d3a\u1d3b\u0003\u0002\u0002\u0002\u1d3b\u1d3c\u0003\u0002",
    "\u0002\u0002\u1d3c\u1d56\tV\u0002\u0002\u1d3d\u1d3f\u0007\u0326\u0002",
    "\u0002\u1d3e\u1d3d\u0003\u0002\u0002\u0002\u1d3e\u1d3f\u0003\u0002\u0002",
    "\u0002\u1d3f\u1d40\u0003\u0002\u0002\u0002\u1d40\u1d56\tW\u0002\u0002",
    "\u1d41\u1d43\u0007\u0326\u0002\u0002\u1d42\u1d41\u0003\u0002\u0002\u0002",
    "\u1d42\u1d43\u0003\u0002\u0002\u0002\u1d43\u1d44\u0003\u0002\u0002\u0002",
    "\u1d44\u1d45\u0007\u01ec\u0002\u0002\u1d45\u1d46\u0007\u0324\u0002\u0002",
    "\u1d46\u1d47\u0007\u018c\u0002\u0002\u1d47\u1d48\u0007\u0313\u0002\u0002",
    "\u1d48\u1d49\tX\u0002\u0002\u1d49\u1d4a\u0007\u0326\u0002\u0002\u1d4a",
    "\u1d4b\u0007\u0136\u0002\u0002\u1d4b\u1d4c\u0007*\u0002\u0002\u1d4c",
    "\u1d53\u0007\u0313\u0002\u0002\u1d4d\u1d54\u0005\u03ac\u01d7\u0002\u1d4e",
    "\u1d4f\u0007\u0136\u0002\u0002\u1d4f\u1d50\u0007\u0011\u0002\u0002\u1d50",
    "\u1d51\u0007\u00ab\u0002\u0002\u1d51\u1d52\u0007\u0313\u0002\u0002\u1d52",
    "\u1d54\u0005\u03ac\u01d7\u0002\u1d53\u1d4d\u0003\u0002\u0002\u0002\u1d53",
    "\u1d4e\u0003\u0002\u0002\u0002\u1d54\u1d56\u0003\u0002\u0002\u0002\u1d55",
    "\u1cbc\u0003\u0002\u0002\u0002\u1d55\u1cc0\u0003\u0002\u0002\u0002\u1d55",
    "\u1cc4\u0003\u0002\u0002\u0002\u1d55\u1cc8\u0003\u0002\u0002\u0002\u1d55",
    "\u1cd1\u0003\u0002\u0002\u0002\u1d55\u1cd7\u0003\u0002\u0002\u0002\u1d55",
    "\u1cdb\u0003\u0002\u0002\u0002\u1d55\u1cdf\u0003\u0002\u0002\u0002\u1d55",
    "\u1cf0\u0003\u0002\u0002\u0002\u1d55\u1cf4\u0003\u0002\u0002\u0002\u1d55",
    "\u1cf8\u0003\u0002\u0002\u0002\u1d55\u1cfc\u0003\u0002\u0002\u0002\u1d55",
    "\u1d05\u0003\u0002\u0002\u0002\u1d55\u1d0b\u0003\u0002\u0002\u0002\u1d55",
    "\u1d14\u0003\u0002\u0002\u0002\u1d55\u1d1d\u0003\u0002\u0002\u0002\u1d55",
    "\u1d26\u0003\u0002\u0002\u0002\u1d55\u1d2a\u0003\u0002\u0002\u0002\u1d55",
    "\u1d2e\u0003\u0002\u0002\u0002\u1d55\u1d32\u0003\u0002\u0002\u0002\u1d55",
    "\u1d3a\u0003\u0002\u0002\u0002\u1d55\u1d3e\u0003\u0002\u0002\u0002\u1d55",
    "\u1d42\u0003\u0002\u0002\u0002\u1d56\u1d59\u0003\u0002\u0002\u0002\u1d57",
    "\u1d55\u0003\u0002\u0002\u0002\u1d57\u1d58\u0003\u0002\u0002\u0002\u1d58",
    "\u1d5b\u0003\u0002\u0002\u0002\u1d59\u1d57\u0003\u0002\u0002\u0002\u1d5a",
    "\u1cba\u0003\u0002\u0002\u0002\u1d5a\u1d5b\u0003\u0002\u0002\u0002\u1d5b",
    "\u0263\u0003\u0002\u0002\u0002\u1d5c\u1d5d\u0007\u0019\u0002\u0002\u1d5d",
    "\u1d5e\u0007\u00ba\u0002\u0002\u1d5e\u1d76\u0005\u03ac\u01d7\u0002\u1d5f",
    "\u1d64\u0007\u015c\u0002\u0002\u1d60\u1d62\u0007\u0326\u0002\u0002\u1d61",
    "\u1d60\u0003\u0002\u0002\u0002\u1d61\u1d62\u0003\u0002\u0002\u0002\u1d62",
    "\u1d63\u0003\u0002\u0002\u0002\u1d63\u1d65\u0005\u03ac\u01d7\u0002\u1d64",
    "\u1d61\u0003\u0002\u0002\u0002\u1d65\u1d66\u0003\u0002\u0002\u0002\u1d66",
    "\u1d64\u0003\u0002\u0002\u0002\u1d66\u1d67\u0003\u0002\u0002\u0002\u1d67",
    "\u1d77\u0003\u0002\u0002\u0002\u1d68\u1d72\u0007\u015c\u0002\u0002\u1d69",
    "\u1d6b\u0007\u0326\u0002\u0002\u1d6a\u1d69\u0003\u0002\u0002\u0002\u1d6a",
    "\u1d6b\u0003\u0002\u0002\u0002\u1d6b\u1d6c\u0003\u0002\u0002\u0002\u1d6c",
    "\u1d6d\tO\u0002\u0002\u1d6d\u1d70\u0007\u0313\u0002\u0002\u1d6e\u1d71",
    "\u0007\u030f\u0002\u0002\u1d6f\u1d71\u0005\u03ac\u01d7\u0002\u1d70\u1d6e",
    "\u0003\u0002\u0002\u0002\u1d70\u1d6f\u0003\u0002\u0002\u0002\u1d71\u1d73",
    "\u0003\u0002\u0002\u0002\u1d72\u1d6a\u0003\u0002\u0002\u0002\u1d73\u1d74",
    "\u0003\u0002\u0002\u0002\u1d74\u1d72\u0003\u0002\u0002\u0002\u1d74\u1d75",
    "\u0003\u0002\u0002\u0002\u1d75\u1d77\u0003\u0002\u0002\u0002\u1d76\u1d5f",
    "\u0003\u0002\u0002\u0002\u1d76\u1d68\u0003\u0002\u0002\u0002\u1d77\u1d99",
    "\u0003\u0002\u0002\u0002\u1d78\u1d79\u0007\u00cc\u0002\u0002\u1d79\u1d7e",
    "\u0007\u015c\u0002\u0002\u1d7a\u1d7c\u0007\u0326\u0002\u0002\u1d7b\u1d7a",
    "\u0003\u0002\u0002\u0002\u1d7b\u1d7c\u0003\u0002\u0002\u0002\u1d7c\u1d7d",
    "\u0003\u0002\u0002\u0002\u1d7d\u1d7f\u0005\u03ac\u01d7\u0002\u1d7e\u1d7b",
    "\u0003\u0002\u0002\u0002\u1d7f\u1d80\u0003\u0002\u0002\u0002\u1d80\u1d7e",
    "\u0003\u0002\u0002\u0002\u1d80\u1d81\u0003\u0002\u0002\u0002\u1d81\u1d83",
    "\u0003\u0002\u0002\u0002\u1d82\u1d78\u0003\u0002\u0002\u0002\u1d83\u1d84",
    "\u0003\u0002\u0002\u0002\u1d84\u1d82\u0003\u0002\u0002\u0002\u1d84\u1d85",
    "\u0003\u0002\u0002\u0002\u1d85\u1d9a\u0003\u0002\u0002\u0002\u1d86\u1d87",
    "\u0007\u00cc\u0002\u0002\u1d87\u1d91\u0007\u015c\u0002\u0002\u1d88\u1d8a",
    "\u0007\u0326\u0002\u0002\u1d89\u1d88\u0003\u0002\u0002\u0002\u1d89\u1d8a",
    "\u0003\u0002\u0002\u0002\u1d8a\u1d8b\u0003\u0002\u0002\u0002\u1d8b\u1d8c",
    "\tO\u0002\u0002\u1d8c\u1d8f\u0007\u0313\u0002\u0002\u1d8d\u1d90\u0007",
    "\u030f\u0002\u0002\u1d8e\u1d90\u0005\u03ac\u01d7\u0002\u1d8f\u1d8d\u0003",
    "\u0002\u0002\u0002\u1d8f\u1d8e\u0003\u0002\u0002\u0002\u1d90\u1d92\u0003",
    "\u0002\u0002\u0002\u1d91\u1d89\u0003\u0002\u0002\u0002\u1d92\u1d93\u0003",
    "\u0002\u0002\u0002\u1d93\u1d91\u0003\u0002\u0002\u0002\u1d93\u1d94\u0003",
    "\u0002\u0002\u0002\u1d94\u1d96\u0003\u0002\u0002\u0002\u1d95\u1d86\u0003",
    "\u0002\u0002\u0002\u1d96\u1d97\u0003\u0002\u0002\u0002\u1d97\u1d95\u0003",
    "\u0002\u0002\u0002\u1d97\u1d98\u0003\u0002\u0002\u0002\u1d98\u1d9a\u0003",
    "\u0002\u0002\u0002\u1d99\u1d82\u0003\u0002\u0002\u0002\u1d99\u1d95\u0003",
    "\u0002\u0002\u0002\u1d99\u1d9a\u0003\u0002\u0002\u0002\u1d9a\u1e48\u0003",
    "\u0002\u0002\u0002\u1d9b\u1e45\u0007\u017b\u0002\u0002\u1d9c\u1d9e\u0007",
    "\u0326\u0002\u0002\u1d9d\u1d9c\u0003\u0002\u0002\u0002\u1d9d\u1d9e\u0003",
    "\u0002\u0002\u0002\u1d9e\u1d9f\u0003\u0002\u0002\u0002\u1d9f\u1e44\u0007",
    "`\u0002\u0002\u1da0\u1da2\u0007\u0326\u0002\u0002\u1da1\u1da0\u0003",
    "\u0002\u0002\u0002\u1da1\u1da2\u0003\u0002\u0002\u0002\u1da2\u1da3\u0003",
    "\u0002\u0002\u0002\u1da3\u1e44\u0007G\u0002\u0002\u1da4\u1da6\u0007",
    "\u0326\u0002\u0002\u1da5\u1da4\u0003\u0002\u0002\u0002\u1da5\u1da6\u0003",
    "\u0002\u0002\u0002\u1da6\u1da7\u0003\u0002\u0002\u0002\u1da7\u1e44\t",
    "P\u0002\u0002\u1da8\u1daa\u0007\u0326\u0002\u0002\u1da9\u1da8\u0003",
    "\u0002\u0002\u0002\u1da9\u1daa\u0003\u0002\u0002\u0002\u1daa\u1dab\u0003",
    "\u0002\u0002\u0002\u1dab\u1dac\u0007\u01dd\u0002\u0002\u1dac\u1daf\u0007",
    "\u0313\u0002\u0002\u1dad\u1db0\u0007\u030f\u0002\u0002\u1dae\u1db0\u0005",
    "\u03ac\u01d7\u0002\u1daf\u1dad\u0003\u0002\u0002\u0002\u1daf\u1dae\u0003",
    "\u0002\u0002\u0002\u1db0\u1e44\u0003\u0002\u0002\u0002\u1db1\u1db3\u0007",
    "\u0326\u0002\u0002\u1db2\u1db1\u0003\u0002\u0002\u0002\u1db2\u1db3\u0003",
    "\u0002\u0002\u0002\u1db3\u1db4\u0003\u0002\u0002\u0002\u1db4\u1db5\u0007",
    "\u0256\u0002\u0002\u1db5\u1db6\u0007\u0313\u0002\u0002\u1db6\u1e44\u0005",
    "\u03ac\u01d7\u0002\u1db7\u1db9\u0007\u0326\u0002\u0002\u1db8\u1db7\u0003",
    "\u0002\u0002\u0002\u1db8\u1db9\u0003\u0002\u0002\u0002\u1db9\u1dba\u0003",
    "\u0002\u0002\u0002\u1dba\u1e44\u0007\u01c6\u0002\u0002\u1dbb\u1dbd\u0007",
    "\u0326\u0002\u0002\u1dbc\u1dbb\u0003\u0002\u0002\u0002\u1dbc\u1dbd\u0003",
    "\u0002\u0002\u0002\u1dbd\u1dbe\u0003\u0002\u0002\u0002\u1dbe\u1e44\u0007",
    "\u0084\u0002\u0002\u1dbf\u1dc1\u0007\u0326\u0002\u0002\u1dc0\u1dbf\u0003",
    "\u0002\u0002\u0002\u1dc0\u1dc1\u0003\u0002\u0002\u0002\u1dc1\u1dce\u0003",
    "\u0002\u0002\u0002\u1dc2\u1dc3\u0007x\u0002\u0002\u1dc3\u1dc6\u0007",
    "\u0313\u0002\u0002\u1dc4\u1dc7\u0007\u030f\u0002\u0002\u1dc5\u1dc7\u0005",
    "\u03ac\u01d7\u0002\u1dc6\u1dc4\u0003\u0002\u0002\u0002\u1dc6\u1dc5\u0003",
    "\u0002\u0002\u0002\u1dc7\u1dcf\u0003\u0002\u0002\u0002\u1dc8\u1dc9\u0007",
    "\u0118\u0002\u0002\u1dc9\u1dcc\u0007\u0313\u0002\u0002\u1dca\u1dcd\u0007",
    "\u030b\u0002\u0002\u1dcb\u1dcd\u0005\u03ac\u01d7\u0002\u1dcc\u1dca\u0003",
    "\u0002\u0002\u0002\u1dcc\u1dcb\u0003\u0002\u0002\u0002\u1dcd\u1dcf\u0003",
    "\u0002\u0002\u0002\u1dce\u1dc2\u0003\u0002\u0002\u0002\u1dce\u1dc8\u0003",
    "\u0002\u0002\u0002\u1dcf\u1e44\u0003\u0002\u0002\u0002\u1dd0\u1dd2\u0007",
    "\u0326\u0002\u0002\u1dd1\u1dd0\u0003\u0002\u0002\u0002\u1dd1\u1dd2\u0003",
    "\u0002\u0002\u0002\u1dd2\u1dd3\u0003\u0002\u0002\u0002\u1dd3\u1e44\t",
    "Q\u0002\u0002\u1dd4\u1dd6\u0007\u0326\u0002\u0002\u1dd5\u1dd4\u0003",
    "\u0002\u0002\u0002\u1dd5\u1dd6\u0003\u0002\u0002\u0002\u1dd6\u1dd7\u0003",
    "\u0002\u0002\u0002\u1dd7\u1e44\tR\u0002\u0002\u1dd8\u1dda\u0007\u0326",
    "\u0002\u0002\u1dd9\u1dd8\u0003\u0002\u0002\u0002\u1dd9\u1dda\u0003\u0002",
    "\u0002\u0002\u1dda\u1ddb\u0003\u0002\u0002\u0002\u1ddb\u1e44\tS\u0002",
    "\u0002\u1ddc\u1dde\u0007\u0326\u0002\u0002\u1ddd\u1ddc\u0003\u0002\u0002",
    "\u0002\u1ddd\u1dde\u0003\u0002\u0002\u0002\u1dde\u1ddf\u0003\u0002\u0002",
    "\u0002\u1ddf\u1de0\u0007\u00c4\u0002\u0002\u1de0\u1de3\u0007\u0313\u0002",
    "\u0002\u1de1\u1de4\u0007\u030f\u0002\u0002\u1de2\u1de4\u0005\u03ac\u01d7",
    "\u0002\u1de3\u1de1\u0003\u0002\u0002\u0002\u1de3\u1de2\u0003\u0002\u0002",
    "\u0002\u1de4\u1e44\u0003\u0002\u0002\u0002\u1de5\u1de7\u0007\u0326\u0002",
    "\u0002\u1de6\u1de5\u0003\u0002\u0002\u0002\u1de6\u1de7\u0003\u0002\u0002",
    "\u0002\u1de7\u1de8\u0003\u0002\u0002\u0002\u1de8\u1de9\u0007\u00c5\u0002",
    "\u0002\u1de9\u1dea\u0007\u0313\u0002\u0002\u1dea\u1e44\u0007\u030f\u0002",
    "\u0002\u1deb\u1ded\u0007\u0326\u0002\u0002\u1dec\u1deb\u0003\u0002\u0002",
    "\u0002\u1dec\u1ded\u0003\u0002\u0002\u0002\u1ded\u1dee\u0003\u0002\u0002",
    "\u0002\u1dee\u1def\u0007\u001e\u0002\u0002\u1def\u1df2\u0007\u0313\u0002",
    "\u0002\u1df0\u1df3\u0007\u030b\u0002\u0002\u1df1\u1df3\u0005\u03ac\u01d7",
    "\u0002\u1df2\u1df0\u0003\u0002\u0002\u0002\u1df2\u1df1\u0003\u0002\u0002",
    "\u0002\u1df3\u1e44\u0003\u0002\u0002\u0002\u1df4\u1df6\u0007\u0326\u0002",
    "\u0002\u1df5\u1df4\u0003\u0002\u0002\u0002\u1df5\u1df6\u0003\u0002\u0002",
    "\u0002\u1df6\u1df7\u0003\u0002\u0002\u0002\u1df7\u1df8\u0007#\u0002",
    "\u0002\u1df8\u1dfb\u0007\u0313\u0002\u0002\u1df9\u1dfc\u0007\u030b\u0002",
    "\u0002\u1dfa\u1dfc\u0005\u03ac\u01d7\u0002\u1dfb\u1df9\u0003\u0002\u0002",
    "\u0002\u1dfb\u1dfa\u0003\u0002\u0002\u0002\u1dfc\u1e44\u0003\u0002\u0002",
    "\u0002\u1dfd\u1dff\u0007\u0326\u0002\u0002\u1dfe\u1dfd\u0003\u0002\u0002",
    "\u0002\u1dfe\u1dff\u0003\u0002\u0002\u0002\u1dff\u1e00\u0003\u0002\u0002",
    "\u0002\u1e00\u1e01\u0007\u00be\u0002\u0002\u1e01\u1e04\u0007\u0313\u0002",
    "\u0002\u1e02\u1e05\u0007\u030b\u0002\u0002\u1e03\u1e05\u0005\u03ac\u01d7",
    "\u0002\u1e04\u1e02\u0003\u0002\u0002\u0002\u1e04\u1e03\u0003\u0002\u0002",
    "\u0002\u1e05\u1e44\u0003\u0002\u0002\u0002\u1e06\u1e08\u0007\u0326\u0002",
    "\u0002\u1e07\u1e06\u0003\u0002\u0002\u0002\u1e07\u1e08\u0003\u0002\u0002",
    "\u0002\u1e08\u1e09\u0003\u0002\u0002\u0002\u1e09\u1e44\tT\u0002\u0002",
    "\u1e0a\u1e0c\u0007\u0326\u0002\u0002\u1e0b\u1e0a\u0003\u0002\u0002\u0002",
    "\u1e0b\u1e0c\u0003\u0002\u0002\u0002\u1e0c\u1e0d\u0003\u0002\u0002\u0002",
    "\u1e0d\u1e44\tU\u0002\u0002\u1e0e\u1e10\u0007\u0326\u0002\u0002\u1e0f",
    "\u1e0e\u0003\u0002\u0002\u0002\u1e0f\u1e10\u0003\u0002\u0002\u0002\u1e10",
    "\u1e11\u0003\u0002\u0002\u0002\u1e11\u1e44\u0007\u0114\u0002\u0002\u1e12",
    "\u1e14\u0007\u0326\u0002\u0002\u1e13\u1e12\u0003\u0002\u0002\u0002\u1e13",
    "\u1e14\u0003\u0002\u0002\u0002\u1e14\u1e15\u0003\u0002\u0002\u0002\u1e15",
    "\u1e18\u0007\u014b\u0002\u0002\u1e16\u1e17\u0007\u0313\u0002\u0002\u1e17",
    "\u1e19\u0007\u030b\u0002\u0002\u1e18\u1e16\u0003\u0002\u0002\u0002\u1e18",
    "\u1e19\u0003\u0002\u0002\u0002\u1e19\u1e44\u0003\u0002\u0002\u0002\u1e1a",
    "\u1e1c\u0007\u0326\u0002\u0002\u1e1b\u1e1a\u0003\u0002\u0002\u0002\u1e1b",
    "\u1e1c\u0003\u0002\u0002\u0002\u1e1c\u1e1d\u0003\u0002\u0002\u0002\u1e1d",
    "\u1e44\tV\u0002\u0002\u1e1e\u1e20\u0007\u0326\u0002\u0002\u1e1f\u1e1e",
    "\u0003\u0002\u0002\u0002\u1e1f\u1e20\u0003\u0002\u0002\u0002\u1e20\u1e21",
    "\u0003\u0002\u0002\u0002\u1e21\u1e44\tW\u0002\u0002\u1e22\u1e24\u0007",
    "\u0326\u0002\u0002\u1e23\u1e22\u0003\u0002\u0002\u0002\u1e23\u1e24\u0003",
    "\u0002\u0002\u0002\u1e24\u1e29\u0003\u0002\u0002\u0002\u1e25\u1e2a\u0007",
    "\u0262\u0002\u0002\u1e26\u1e27\u0007\u02d8\u0002\u0002\u1e27\u1e28\u0007",
    "\u0313\u0002\u0002\u1e28\u1e2a\u0007\u030f\u0002\u0002\u1e29\u1e25\u0003",
    "\u0002\u0002\u0002\u1e29\u1e26\u0003\u0002\u0002\u0002\u1e2a\u1e44\u0003",
    "\u0002\u0002\u0002\u1e2b\u1e2d\u0007\u0326\u0002\u0002\u1e2c\u1e2b\u0003",
    "\u0002\u0002\u0002\u1e2c\u1e2d\u0003\u0002\u0002\u0002\u1e2d\u1e2e\u0003",
    "\u0002\u0002\u0002\u1e2e\u1e44\u0007\u0263\u0002\u0002\u1e2f\u1e31\u0007",
    "\u0326\u0002\u0002\u1e30\u1e2f\u0003\u0002\u0002\u0002\u1e30\u1e31\u0003",
    "\u0002\u0002\u0002\u1e31\u1e32\u0003\u0002\u0002\u0002\u1e32\u1e33\u0007",
    "\u01ec\u0002\u0002\u1e33\u1e34\u0007\u0324\u0002\u0002\u1e34\u1e35\u0007",
    "\u018c\u0002\u0002\u1e35\u1e36\u0007\u0313\u0002\u0002\u1e36\u1e37\t",
    "X\u0002\u0002\u1e37\u1e38\u0007\u0326\u0002\u0002\u1e38\u1e39\u0007",
    "\u0136\u0002\u0002\u1e39\u1e3a\u0007*\u0002\u0002\u1e3a\u1e41\u0007",
    "\u0313\u0002\u0002\u1e3b\u1e42\u0005\u03ac\u01d7\u0002\u1e3c\u1e3d\u0007",
    "\u0136\u0002\u0002\u1e3d\u1e3e\u0007\u0011\u0002\u0002\u1e3e\u1e3f\u0007",
    "\u00ab\u0002\u0002\u1e3f\u1e40\u0007\u0313\u0002\u0002\u1e40\u1e42\u0005",
    "\u03ac\u01d7\u0002\u1e41\u1e3b\u0003\u0002\u0002\u0002\u1e41\u1e3c\u0003",
    "\u0002\u0002\u0002\u1e42\u1e44\u0003\u0002\u0002\u0002\u1e43\u1d9d\u0003",
    "\u0002\u0002\u0002\u1e43\u1da1\u0003\u0002\u0002\u0002\u1e43\u1da5\u0003",
    "\u0002\u0002\u0002\u1e43\u1da9\u0003\u0002\u0002\u0002\u1e43\u1db2\u0003",
    "\u0002\u0002\u0002\u1e43\u1db8\u0003\u0002\u0002\u0002\u1e43\u1dbc\u0003",
    "\u0002\u0002\u0002\u1e43\u1dc0\u0003\u0002\u0002\u0002\u1e43\u1dd1\u0003",
    "\u0002\u0002\u0002\u1e43\u1dd5\u0003\u0002\u0002\u0002\u1e43\u1dd9\u0003",
    "\u0002\u0002\u0002\u1e43\u1ddd\u0003\u0002\u0002\u0002\u1e43\u1de6\u0003",
    "\u0002\u0002\u0002\u1e43\u1dec\u0003\u0002\u0002\u0002\u1e43\u1df5\u0003",
    "\u0002\u0002\u0002\u1e43\u1dfe\u0003\u0002\u0002\u0002\u1e43\u1e07\u0003",
    "\u0002\u0002\u0002\u1e43\u1e0b\u0003\u0002\u0002\u0002\u1e43\u1e0f\u0003",
    "\u0002\u0002\u0002\u1e43\u1e13\u0003\u0002\u0002\u0002\u1e43\u1e1b\u0003",
    "\u0002\u0002\u0002\u1e43\u1e1f\u0003\u0002\u0002\u0002\u1e43\u1e23\u0003",
    "\u0002\u0002\u0002\u1e43\u1e2c\u0003\u0002\u0002\u0002\u1e43\u1e30\u0003",
    "\u0002\u0002\u0002\u1e44\u1e47\u0003\u0002\u0002\u0002\u1e45\u1e43\u0003",
    "\u0002\u0002\u0002\u1e45\u1e46\u0003\u0002\u0002\u0002\u1e46\u1e49\u0003",
    "\u0002\u0002\u0002\u1e47\u1e45\u0003\u0002\u0002\u0002\u1e48\u1d9b\u0003",
    "\u0002\u0002\u0002\u1e48\u1e49\u0003\u0002\u0002\u0002\u1e49\u0265\u0003",
    "\u0002\u0002\u0002\u1e4a\u1e4b\u0007\u0019\u0002\u0002\u1e4b\u1e4c\u0007",
    "*\u0002\u0002\u1e4c\u1e4d\u0005\u03ac\u01d7\u0002\u1e4d\u1e4e\u0007",
    "\u015c\u0002\u0002\u1e4e\u1e4f\u0007\u0081\u0002\u0002\u1e4f\u1e50\u0007",
    "\u0313\u0002\u0002\u1e50\u1e70\u0007\u030f\u0002\u0002\u1e51\u1e52\u0007",
    "\u017b\u0002\u0002\u1e52\u1e53\u0007\u0283\u0002\u0002\u1e53\u1e54\u0007",
    "\u00ab\u0002\u0002\u1e54\u1e6b\u0007\u0324\u0002\u0002\u1e55\u1e57\u0007",
    "\u0326\u0002\u0002\u1e56\u1e55\u0003\u0002\u0002\u0002\u1e56\u1e57\u0003",
    "\u0002\u0002\u0002\u1e57\u1e58\u0003\u0002\u0002\u0002\u1e58\u1e59\u0007",
    "\u0081\u0002\u0002\u1e59\u1e5a\u0007\u0313\u0002\u0002\u1e5a\u1e6c\u0007",
    "\u030f\u0002\u0002\u1e5b\u1e5d\u0007\u0326\u0002\u0002\u1e5c\u1e5b\u0003",
    "\u0002\u0002\u0002\u1e5c\u1e5d\u0003\u0002\u0002\u0002\u1e5d\u1e5e\u0003",
    "\u0002\u0002\u0002\u1e5e\u1e5f\u0007\u01ec\u0002\u0002\u1e5f\u1e60\u0007",
    "%\u0002\u0002\u1e60\u1e61\u0007\u00f3\u0002\u0002\u1e61\u1e62\u0007",
    "\u0313\u0002\u0002\u1e62\u1e6c\u0007\u030f\u0002\u0002\u1e63\u1e65\u0007",
    "\u0326\u0002\u0002\u1e64\u1e63\u0003\u0002\u0002\u0002\u1e64\u1e65\u0003",
    "\u0002\u0002\u0002\u1e65\u1e66\u0003\u0002\u0002\u0002\u1e66\u1e67\u0007",
    "\u01d2\u0002\u0002\u1e67\u1e68\u0007%\u0002\u0002\u1e68\u1e69\u0007",
    "\u00f3\u0002\u0002\u1e69\u1e6a\u0007\u0313\u0002\u0002\u1e6a\u1e6c\u0007",
    "\u030f\u0002\u0002\u1e6b\u1e56\u0003\u0002\u0002\u0002\u1e6b\u1e5c\u0003",
    "\u0002\u0002\u0002\u1e6b\u1e64\u0003\u0002\u0002\u0002\u1e6c\u1e6d\u0003",
    "\u0002\u0002\u0002\u1e6d\u1e6b\u0003\u0002\u0002\u0002\u1e6d\u1e6e\u0003",
    "\u0002\u0002\u0002\u1e6e\u1e6f\u0003\u0002\u0002\u0002\u1e6f\u1e71\u0007",
    "\u0325\u0002\u0002\u1e70\u1e51\u0003\u0002\u0002\u0002\u1e70\u1e71\u0003",
    "\u0002\u0002\u0002\u1e71\u0267\u0003\u0002\u0002\u0002\u1e72\u1e73\u0007",
    "\u0019\u0002\u0002\u1e73\u1e74\u0007\u00bc\u0002\u0002\u1e74\u1e75\u0007",
    "\u00ab\u0002\u0002\u1e75\u1e76\u0007\u015c\u0002\u0002\u1e76\u1e77\u0007",
    "\u0081\u0002\u0002\u1e77\u1e78\u0007\u0313\u0002\u0002\u1e78\u1e79\u0007",
    "\u030f\u0002\u0002\u1e79\u1e7a\u0007\u01ec\u0002\u0002\u1e7a\u1e7b\u0007",
    "%\u0002\u0002\u1e7b\u1e7c\u0007\u00f3\u0002\u0002\u1e7c\u1e7d\u0007",
    "\u0313\u0002\u0002\u1e7d\u1e7e\u0007\u030f\u0002\u0002\u1e7e\u0269\u0003",
    "\u0002\u0002\u0002\u1e7f\u1e80\u0007\u0019\u0002\u0002\u1e80\u1e81\u0007",
    "\u0137\u0002\u0002\u1e81\u1e82\u0007\u00bc\u0002\u0002\u1e82\u1e83\u0007",
    "\u00ab\u0002\u0002\u1e83\u1e84\u0007\u015c\u0002\u0002\u1e84\u1e85\u0007",
    "\u0081\u0002\u0002\u1e85\u1e86\u0007\u0313\u0002\u0002\u1e86\u1e87\u0007",
    "\u030f\u0002\u0002\u1e87\u1e88\u0007\u01ec\u0002\u0002\u1e88\u1e89\u0007",
    "%\u0002\u0002\u1e89\u1e8a\u0007\u00f3\u0002\u0002\u1e8a\u1e8b\u0007",
    "\u0313\u0002\u0002\u1e8b\u1e8c\u0007\u030f\u0002\u0002\u1e8c\u026b\u0003",
    "\u0002\u0002\u0002\u1e8d\u1e90\u0007v\u0002\u0002\u1e8e\u1e8f\u0007",
    "\u030a\u0002\u0002\u1e8f\u1e91\u0007\u0313\u0002\u0002\u1e90\u1e8e\u0003",
    "\u0002\u0002\u0002\u1e90\u1e91\u0003\u0002\u0002\u0002\u1e91\u1e94\u0003",
    "\u0002\u0002\u0002\u1e92\u1e95\u0005\u037c\u01bf\u0002\u1e93\u1e95\u0005",
    "\u02c2\u0162\u0002\u1e94\u1e92\u0003\u0002\u0002\u0002\u1e94\u1e93\u0003",
    "\u0002\u0002\u0002\u1e95\u1e9e\u0003\u0002\u0002\u0002\u1e96\u1e9b\u0005",
    "\u026e\u0138\u0002\u1e97\u1e98\u0007\u0326\u0002\u0002\u1e98\u1e9a\u0005",
    "\u026e\u0138\u0002\u1e99\u1e97\u0003\u0002\u0002\u0002\u1e9a\u1e9d\u0003",
    "\u0002\u0002\u0002\u1e9b\u1e99\u0003\u0002\u0002\u0002\u1e9b\u1e9c\u0003",
    "\u0002\u0002\u0002\u1e9c\u1e9f\u0003\u0002\u0002\u0002\u1e9d\u1e9b\u0003",
    "\u0002\u0002\u0002\u1e9e\u1e96\u0003\u0002\u0002\u0002\u1e9e\u1e9f\u0003",
    "\u0002\u0002\u0002\u1e9f\u1ea1\u0003\u0002\u0002\u0002\u1ea0\u1ea2\u0007",
    "\u0327\u0002\u0002\u1ea1\u1ea0\u0003\u0002\u0002\u0002\u1ea1\u1ea2\u0003",
    "\u0002\u0002\u0002\u1ea2\u1eba\u0003\u0002\u0002\u0002\u1ea3\u1ea4\u0007",
    "v\u0002\u0002\u1ea4\u1ea5\u0007\u0324\u0002\u0002\u1ea5\u1eaa\u0005",
    "\u0270\u0139\u0002\u1ea6\u1ea7\u0007\u032c\u0002\u0002\u1ea7\u1ea9\u0005",
    "\u0270\u0139\u0002\u1ea8\u1ea6\u0003\u0002\u0002\u0002\u1ea9\u1eac\u0003",
    "\u0002\u0002\u0002\u1eaa\u1ea8\u0003\u0002\u0002\u0002\u1eaa\u1eab\u0003",
    "\u0002\u0002\u0002\u1eab\u1ead\u0003\u0002\u0002\u0002\u1eac\u1eaa\u0003",
    "\u0002\u0002\u0002\u1ead\u1eb4\u0007\u0325\u0002\u0002\u1eae\u1eb0\u0007",
    "\u000f\u0002\u0002\u1eaf\u1eae\u0003\u0002\u0002\u0002\u1eaf\u1eb0\u0003",
    "\u0002\u0002\u0002\u1eb0\u1eb1\u0003\u0002\u0002\u0002\u1eb1\u1eb2\t",
    "Y\u0002\u0002\u1eb2\u1eb3\u0007\u0313\u0002\u0002\u1eb3\u1eb5\u0007",
    "\u030f\u0002\u0002\u1eb4\u1eaf\u0003\u0002\u0002\u0002\u1eb4\u1eb5\u0003",
    "\u0002\u0002\u0002\u1eb5\u1eb7\u0003\u0002\u0002\u0002\u1eb6\u1eb8\u0007",
    "\u0327\u0002\u0002\u1eb7\u1eb6\u0003\u0002\u0002\u0002\u1eb7\u1eb8\u0003",
    "\u0002\u0002\u0002\u1eb8\u1eba\u0003\u0002\u0002\u0002\u1eb9\u1e8d\u0003",
    "\u0002\u0002\u0002\u1eb9\u1ea3\u0003\u0002\u0002\u0002\u1eba\u026d\u0003",
    "\u0002\u0002\u0002\u1ebb\u1ebc\u0007\u030a\u0002\u0002\u1ebc\u1ebe\u0007",
    "\u0313\u0002\u0002\u1ebd\u1ebb\u0003\u0002\u0002\u0002\u1ebd\u1ebe\u0003",
    "\u0002\u0002\u0002\u1ebe\u1ec8\u0003\u0002\u0002\u0002\u1ebf\u1ec2\u0005",
    "\u02c0\u0161\u0002\u1ec0\u1ec2\u0005\u03ac\u01d7\u0002\u1ec1\u1ebf\u0003",
    "\u0002\u0002\u0002\u1ec1\u1ec0\u0003\u0002\u0002\u0002\u1ec2\u1ec4\u0003",
    "\u0002\u0002\u0002\u1ec3\u1ec5\tZ\u0002\u0002\u1ec4\u1ec3\u0003\u0002",
    "\u0002\u0002\u1ec4\u1ec5\u0003\u0002\u0002\u0002\u1ec5\u1ec9\u0003\u0002",
    "\u0002\u0002\u1ec6\u1ec9\u0007Y\u0002\u0002\u1ec7\u1ec9\u0007\u00de",
    "\u0002\u0002\u1ec8\u1ec1\u0003\u0002\u0002\u0002\u1ec8\u1ec6\u0003\u0002",
    "\u0002\u0002\u1ec8\u1ec7\u0003\u0002\u0002\u0002\u1ec9\u026f\u0003\u0002",
    "\u0002\u0002\u1eca\u1ecb\t\u0003\u0002\u0002\u1ecb\u0271\u0003\u0002",
    "\u0002\u0002\u1ecc\u1ece\u0005\u029a\u014e\u0002\u1ecd\u1ecf\u0007\u0327",
    "\u0002\u0002\u1ece\u1ecd\u0003\u0002\u0002\u0002\u1ece\u1ecf\u0003\u0002",
    "\u0002\u0002\u1ecf\u1f08\u0003\u0002\u0002\u0002\u1ed0\u1edc\u0007\u0091",
    "\u0002\u0002\u1ed1\u1ed3\u0007\u0005\u0002\u0002\u1ed2\u1ed4\u0007\u0285",
    "\u0002\u0002\u1ed3\u1ed2\u0003\u0002\u0002\u0002\u1ed3\u1ed4\u0003\u0002",
    "\u0002\u0002\u1ed4\u1edd\u0003\u0002\u0002\u0002\u1ed5\u1eda\u0005\u028c",
    "\u0147\u0002\u1ed6\u1ed7\u0007\u0324\u0002\u0002\u1ed7\u1ed8\u0005\u0384",
    "\u01c3\u0002\u1ed8\u1ed9\u0007\u0325\u0002\u0002\u1ed9\u1edb\u0003\u0002",
    "\u0002\u0002\u1eda\u1ed6\u0003\u0002\u0002\u0002\u1eda\u1edb\u0003\u0002",
    "\u0002\u0002\u1edb\u1edd\u0003\u0002\u0002\u0002\u1edc\u1ed1\u0003\u0002",
    "\u0002\u0002\u1edc\u1ed5\u0003\u0002\u0002\u0002\u1edd\u1ee0\u0003\u0002",
    "\u0002\u0002\u1ede\u1edf\u0007\u00e4\u0002\u0002\u1edf\u1ee1\u0005\u0378",
    "\u01bd\u0002\u1ee0\u1ede\u0003\u0002\u0002\u0002\u1ee0\u1ee1\u0003\u0002",
    "\u0002\u0002\u1ee1\u1ee2\u0003\u0002\u0002\u0002\u1ee2\u1ee3\u0007\u015c",
    "\u0002\u0002\u1ee3\u1ee8\u0005\u03ac\u01d7\u0002\u1ee4\u1ee5\u0007\u0326",
    "\u0002\u0002\u1ee5\u1ee7\u0005\u03ac\u01d7\u0002\u1ee6\u1ee4\u0003\u0002",
    "\u0002\u0002\u1ee7\u1eea\u0003\u0002\u0002\u0002\u1ee8\u1ee6\u0003\u0002",
    "\u0002\u0002\u1ee8\u1ee9\u0003\u0002\u0002\u0002\u1ee9\u1eee\u0003\u0002",
    "\u0002\u0002\u1eea\u1ee8\u0003\u0002\u0002\u0002\u1eeb\u1eec\u0007\u017b",
    "\u0002\u0002\u1eec\u1eed\u0007\u0091\u0002\u0002\u1eed\u1eef\u0007\u00eb",
    "\u0002\u0002\u1eee\u1eeb\u0003\u0002\u0002\u0002\u1eee\u1eef\u0003\u0002",
    "\u0002\u0002\u1eef\u1ef2\u0003\u0002\u0002\u0002\u1ef0\u1ef1\u0007\u000f",
    "\u0002\u0002\u1ef1\u1ef3\u0005\u03ac\u01d7\u0002\u1ef2\u1ef0\u0003\u0002",
    "\u0002\u0002\u1ef2\u1ef3\u0003\u0002\u0002\u0002\u1ef3\u1ef5\u0003\u0002",
    "\u0002\u0002\u1ef4\u1ef6\u0007\u0327\u0002\u0002\u1ef5\u1ef4\u0003\u0002",
    "\u0002\u0002\u1ef5\u1ef6\u0003\u0002\u0002\u0002\u1ef6\u1f08\u0003\u0002",
    "\u0002\u0002\u1ef7\u1efe\u0007\u011b\u0002\u0002\u1ef8\u1ef9\u0007\u0324",
    "\u0002\u0002\u1ef9\u1efa\u0007\u017b\u0002\u0002\u1efa\u1efb\u0007\u01bf",
    "\u0002\u0002\u1efb\u1efc\u0007\u0313\u0002\u0002\u1efc\u1efd\u0007\u030a",
    "\u0002\u0002\u1efd\u1eff\u0007\u0325\u0002\u0002\u1efe\u1ef8\u0003\u0002",
    "\u0002\u0002\u1efe\u1eff\u0003\u0002\u0002\u0002\u1eff\u1f01\u0003\u0002",
    "\u0002\u0002\u1f00\u1f02\u0007\u0327\u0002\u0002\u1f01\u1f00\u0003\u0002",
    "\u0002\u0002\u1f01\u1f02\u0003\u0002\u0002\u0002\u1f02\u1f08\u0003\u0002",
    "\u0002\u0002\u1f03\u1f08\u0005\u027e\u0140\u0002\u1f04\u1f08\u0005\u0280",
    "\u0141\u0002\u1f05\u1f08\u0005\u0282\u0142\u0002\u1f06\u1f08\u0005\u0274",
    "\u013b\u0002\u1f07\u1ecc\u0003\u0002\u0002\u0002\u1f07\u1ed0\u0003\u0002",
    "\u0002\u0002\u1f07\u1ef7\u0003\u0002\u0002\u0002\u1f07\u1f03\u0003\u0002",
    "\u0002\u0002\u1f07\u1f04\u0003\u0002\u0002\u0002\u1f07\u1f05\u0003\u0002",
    "\u0002\u0002\u1f07\u1f06\u0003\u0002\u0002\u0002\u1f08\u0273\u0003\u0002",
    "\u0002\u0002\u1f09\u1f0a\u0007H\u0002\u0002\u1f0a\u1f0b\u0007*\u0002",
    "\u0002\u1f0b\u1f0e\u0005\u03ac\u01d7\u0002\u1f0c\u1f0d\u0007\u0013\u0002",
    "\u0002\u1f0d\u1f0f\u0005\u03ac\u01d7\u0002\u1f0e\u1f0c\u0003\u0002\u0002",
    "\u0002\u1f0e\u1f0f\u0003\u0002\u0002\u0002\u1f0f\u1f13\u0003\u0002\u0002",
    "\u0002\u1f10\u1f11\u0007\u008b\u0002\u0002\u1f11\u1f14\u0005\u0276\u013c",
    "\u0002\u1f12\u1f14\u0005\u027a\u013e\u0002\u1f13\u1f10\u0003\u0002\u0002",
    "\u0002\u1f13\u1f12\u0003\u0002\u0002\u0002\u1f14\u1f1b\u0003\u0002\u0002",
    "\u0002\u1f15\u1f16\u0007\u0183\u0002\u0002\u1f16\u1f17\u0007\u0085\u0002",
    "\u0002\u1f17\u1f18\u0007\u001b\u0002\u0002\u1f18\u1f19\u0007\u01df\u0002",
    "\u0002\u1f19\u1f1a\u0007\u0313\u0002\u0002\u1f1a\u1f1c\t\b\u0002\u0002",
    "\u1f1b\u1f15\u0003\u0002\u0002\u0002\u1f1b\u1f1c\u0003\u0002\u0002\u0002",
    "\u1f1c\u0275\u0003\u0002\u0002\u0002\u1f1d\u1f1e\u0007\u0197\u0002\u0002",
    "\u1f1e\u1f2f\u0005\u03ac\u01d7\u0002\u1f1f\u1f21\u0007\u01ef\u0002\u0002",
    "\u1f20\u1f1f\u0003\u0002\u0002\u0002\u1f20\u1f21\u0003\u0002\u0002\u0002",
    "\u1f21\u1f22\u0003\u0002\u0002\u0002\u1f22\u1f23\u0007\u0081\u0002\u0002",
    "\u1f23\u1f24\u0007\u0313\u0002\u0002\u1f24\u1f2c\u0007\u030f\u0002\u0002",
    "\u1f25\u1f26\u0007\u017b\u0002\u0002\u1f26\u1f27\u0007\u0283\u0002\u0002",
    "\u1f27\u1f28\u0007\u00ab\u0002\u0002\u1f28\u1f29\u0007\u0324\u0002\u0002",
    "\u1f29\u1f2a\u0005\u0278\u013d\u0002\u1f2a\u1f2b\u0007\u0325\u0002\u0002",
    "\u1f2b\u1f2d\u0003\u0002\u0002\u0002\u1f2c\u1f25\u0003\u0002\u0002\u0002",
    "\u1f2c\u1f2d\u0003\u0002\u0002\u0002\u1f2d\u1f2f\u0003\u0002\u0002\u0002",
    "\u1f2e\u1f1d\u0003\u0002\u0002\u0002\u1f2e\u1f20\u0003\u0002\u0002\u0002",
    "\u1f2f\u0277\u0003\u0002\u0002\u0002\u1f30\u1f31\t[\u0002\u0002\u1f31",
    "\u1f32\u0007\u0313\u0002\u0002\u1f32\u1f39\u0007\u030f\u0002\u0002\u1f33",
    "\u1f34\u0007\u0326\u0002\u0002\u1f34\u1f35\t\\\u0002\u0002\u1f35\u1f36",
    "\u0007%\u0002\u0002\u1f36\u1f37\u0007\u00f3\u0002\u0002\u1f37\u1f38",
    "\u0007\u0313\u0002\u0002\u1f38\u1f3a\u0007\u030f\u0002\u0002\u1f39\u1f33",
    "\u0003\u0002\u0002\u0002\u1f39\u1f3a\u0003\u0002\u0002\u0002\u1f3a\u0279",
    "\u0003\u0002\u0002\u0002\u1f3b\u1f3c\u0007\u01ec\u0002\u0002\u1f3c\u1f3d",
    "\u0007%\u0002\u0002\u1f3d\u1f3e\u0007\u00f3\u0002\u0002\u1f3e\u1f3f",
    "\u0007\u0313\u0002\u0002\u1f3f\u1f41\u0007\u030f\u0002\u0002\u1f40\u1f3b",
    "\u0003\u0002\u0002\u0002\u1f40\u1f41\u0003\u0002\u0002\u0002\u1f41\u1f42",
    "\u0003\u0002\u0002\u0002\u1f42\u1f43\u0007\u017b\u0002\u0002\u1f43\u1f44",
    "\u0007\u02d6\u0002\u0002\u1f44\u1f45\u0007\u0313\u0002\u0002\u1f45\u1f4a",
    "\u0007\u030f\u0002\u0002\u1f46\u1f47\u0007\u0326\u0002\u0002\u1f47\u1f49",
    "\u0005\u027c\u013f\u0002\u1f48\u1f46\u0003\u0002\u0002\u0002\u1f49\u1f4c",
    "\u0003\u0002\u0002\u0002\u1f4a\u1f48\u0003\u0002\u0002\u0002\u1f4a\u1f4b",
    "\u0003\u0002\u0002\u0002\u1f4b\u027b\u0003\u0002\u0002\u0002\u1f4c\u1f4a",
    "\u0003\u0002\u0002\u0002\u1f4d\u1f4e\t]\u0002\u0002\u1f4e\u1f4f\u0007",
    "\u0313\u0002\u0002\u1f4f\u1f50\u0007\u030f\u0002\u0002\u1f50\u027d\u0003",
    "\u0002\u0002\u0002\u1f51\u1f52\u0007\u00e6\u0002\u0002\u1f52\u1f53\u0007",
    "\u02db\u0002\u0002\u1f53\u1f54\u0007\u00ab\u0002\u0002\u1f54\u1f55\u0005",
    "\u03ac\u01d7\u0002\u1f55\u1f56\u0007\u01d2\u0002\u0002\u1f56\u1f57\u0007",
    "%\u0002\u0002\u1f57\u1f58\u0005\u028a\u0146\u0002\u1f58\u1f62\u0003",
    "\u0002\u0002\u0002\u1f59\u1f5a\u0007\u00e6\u0002\u0002\u1f5a\u1f5b\u0007",
    "\u00bc\u0002\u0002\u1f5b\u1f5c\u0007\u00ab\u0002\u0002\u1f5c\u1f5d\u0007",
    "\u01d2\u0002\u0002\u1f5d\u1f5e\u0007%\u0002\u0002\u1f5e\u1f5f\u0007",
    "\u00f3\u0002\u0002\u1f5f\u1f60\u0007\u0313\u0002\u0002\u1f60\u1f62\u0007",
    "\u030f\u0002\u0002\u1f61\u1f51\u0003\u0002\u0002\u0002\u1f61\u1f59\u0003",
    "\u0002\u0002\u0002\u1f62\u027f\u0003\u0002\u0002\u0002\u1f63\u1f64\u0007",
    "2\u0002\u0002\u1f64\u1f65\u0007\u02db\u0002\u0002\u1f65\u1f66\u0007",
    "\u00ab\u0002\u0002\u1f66\u1f6f\u0005\u03ac\u01d7\u0002\u1f67\u1f68\u0007",
    "2\u0002\u0002\u1f68\u1f69\u0007\u0005\u0002\u0002\u1f69\u1f6a\u0007",
    "\u02db\u0002\u0002\u1f6a\u1f6f\u0007\u0228\u0002\u0002\u1f6b\u1f6c\u0007",
    "2\u0002\u0002\u1f6c\u1f6d\u0007\u00bc\u0002\u0002\u1f6d\u1f6f\u0007",
    "\u00ab\u0002\u0002\u1f6e\u1f63\u0003\u0002\u0002\u0002\u1f6e\u1f67\u0003",
    "\u0002\u0002\u0002\u1f6e\u1f6b\u0003\u0002\u0002\u0002\u1f6f\u0281\u0003",
    "\u0002\u0002\u0002\u1f70\u1f71\u0007H\u0002\u0002\u1f71\u1f72\u0007",
    "\u00bc\u0002\u0002\u1f72\u1f73\u0007\u00ab\u0002\u0002\u1f73\u1f74\u0007",
    "\u01ec\u0002\u0002\u1f74\u1f75\u0007%\u0002\u0002\u1f75\u1f76\u0007",
    "\u00f3\u0002\u0002\u1f76\u1f77\u0007\u0313\u0002\u0002\u1f77\u1f94\u0007",
    "\u030f\u0002\u0002\u1f78\u1f79\u0007H\u0002\u0002\u1f79\u1f7a\u0007",
    "\u02db\u0002\u0002\u1f7a\u1f7b\u0007\u00ab\u0002\u0002\u1f7b\u1f7e\u0005",
    "\u03ac\u01d7\u0002\u1f7c\u1f7d\u0007\u0013\u0002\u0002\u1f7d\u1f7f\u0005",
    "\u03ac\u01d7\u0002\u1f7e\u1f7c\u0003\u0002\u0002\u0002\u1f7e\u1f7f\u0003",
    "\u0002\u0002\u0002\u1f7f\u1f83\u0003\u0002\u0002\u0002\u1f80\u1f81\u0007",
    "\u008b\u0002\u0002\u1f81\u1f82\u0007\u0288\u0002\u0002\u1f82\u1f84\u0005",
    "\u03ac\u01d7\u0002\u1f83\u1f80\u0003\u0002\u0002\u0002\u1f83\u1f84\u0003",
    "\u0002\u0002\u0002\u1f84\u1f85\u0003\u0002\u0002\u0002\u1f85\u1f8f\u0007",
    "\u017b\u0002\u0002\u1f86\u1f8b\u0005\u0284\u0143\u0002\u1f87\u1f88\u0007",
    "\u01ec\u0002\u0002\u1f88\u1f89\u0007%\u0002\u0002\u1f89\u1f8b\u0005",
    "\u0288\u0145\u0002\u1f8a\u1f86\u0003\u0002\u0002\u0002\u1f8a\u1f87\u0003",
    "\u0002\u0002\u0002\u1f8b\u1f8d\u0003\u0002\u0002\u0002\u1f8c\u1f8e\u0007",
    "\u0326\u0002\u0002\u1f8d\u1f8c\u0003\u0002\u0002\u0002\u1f8d\u1f8e\u0003",
    "\u0002\u0002\u0002\u1f8e\u1f90\u0003\u0002\u0002\u0002\u1f8f\u1f8a\u0003",
    "\u0002\u0002\u0002\u1f90\u1f91\u0003\u0002\u0002\u0002\u1f91\u1f8f\u0003",
    "\u0002\u0002\u0002\u1f91\u1f92\u0003\u0002\u0002\u0002\u1f92\u1f94\u0003",
    "\u0002\u0002\u0002\u1f93\u1f70\u0003\u0002\u0002\u0002\u1f93\u1f78\u0003",
    "\u0002\u0002\u0002\u1f94\u0283\u0003\u0002\u0002\u0002\u1f95\u1f96\u0007",
    "\u0229\u0002\u0002\u1f96\u1f97\u0007\u0313\u0002\u0002\u1f97\u1fa5\u0007",
    "\u030f\u0002\u0002\u1f98\u1f99\u0007\u018c\u0002\u0002\u1f99\u1f9a\u0007",
    "\u0313\u0002\u0002\u1f9a\u1fa5\u0005\u0286\u0144\u0002\u1f9b\u1f9c\u0007",
    "\u0217\u0002\u0002\u1f9c\u1f9d\u0007\u0313\u0002\u0002\u1f9d\u1fa5\u0007",
    "\u030f\u0002\u0002\u1f9e\u1f9f\u0007\u0289\u0002\u0002\u1f9f\u1fa0\u0007",
    "\u0313\u0002\u0002\u1fa0\u1fa5\u0007\u030f\u0002\u0002\u1fa1\u1fa2\u0007",
    "\u01c5\u0002\u0002\u1fa2\u1fa3\u0007\u0313\u0002\u0002\u1fa3\u1fa5\t",
    "\u000b\u0002\u0002\u1fa4\u1f95\u0003\u0002\u0002\u0002\u1fa4\u1f98\u0003",
    "\u0002\u0002\u0002\u1fa4\u1f9b\u0003\u0002\u0002\u0002\u1fa4\u1f9e\u0003",
    "\u0002\u0002\u0002\u1fa4\u1fa1\u0003\u0002\u0002\u0002\u1fa5\u0285\u0003",
    "\u0002\u0002\u0002\u1fa6\u1fa7\t1\u0002\u0002\u1fa7\u0287\u0003\u0002",
    "\u0002\u0002\u1fa8\u1fa9\u0007*\u0002\u0002\u1fa9\u1fb4\u0005\u03ac",
    "\u01d7\u0002\u1faa\u1fab\u0007\u0011\u0002\u0002\u1fab\u1fac\u0007\u00ab",
    "\u0002\u0002\u1fac\u1fb4\u0005\u03ac\u01d7\u0002\u1fad\u1fae\u0007\u02db",
    "\u0002\u0002\u1fae\u1faf\u0007\u00ab\u0002\u0002\u1faf\u1fb4\u0005\u03ac",
    "\u01d7\u0002\u1fb0\u1fb1\u0007\u00f3\u0002\u0002\u1fb1\u1fb2\u0007\u0313",
    "\u0002\u0002\u1fb2\u1fb4\u0007\u030f\u0002\u0002\u1fb3\u1fa8\u0003\u0002",
    "\u0002\u0002\u1fb3\u1faa\u0003\u0002\u0002\u0002\u1fb3\u1fad\u0003\u0002",
    "\u0002\u0002\u1fb3\u1fb0\u0003\u0002\u0002\u0002\u1fb4\u0289\u0003\u0002",
    "\u0002\u0002\u1fb5\u1fb6\u0007*\u0002\u0002\u1fb6\u1fbb\u0005\u03ac",
    "\u01d7\u0002\u1fb7\u1fb8\u0007\u017b\u0002\u0002\u1fb8\u1fb9\u0007\u00f3",
    "\u0002\u0002\u1fb9\u1fba\u0007\u0313\u0002\u0002\u1fba\u1fbc\u0007\u030f",
    "\u0002\u0002\u1fbb\u1fb7\u0003\u0002\u0002\u0002\u1fbb\u1fbc\u0003\u0002",
    "\u0002\u0002\u1fbc\u1fcd\u0003\u0002\u0002\u0002\u1fbd\u1fbe\u0007\u0011",
    "\u0002\u0002\u1fbe\u1fbf\u0007\u00ab\u0002\u0002\u1fbf\u1fc4\u0005\u03ac",
    "\u01d7\u0002\u1fc0\u1fc1\u0007\u017b\u0002\u0002\u1fc1\u1fc2\u0007\u00f3",
    "\u0002\u0002\u1fc2\u1fc3\u0007\u0313\u0002\u0002\u1fc3\u1fc5\u0007\u030f",
    "\u0002\u0002\u1fc4\u1fc0\u0003\u0002\u0002\u0002\u1fc4\u1fc5\u0003\u0002",
    "\u0002\u0002\u1fc5\u1fcd\u0003\u0002\u0002\u0002\u1fc6\u1fc7\u0007\u02db",
    "\u0002\u0002\u1fc7\u1fc8\u0007\u00ab\u0002\u0002\u1fc8\u1fcd\u0005\u03ac",
    "\u01d7\u0002\u1fc9\u1fca\u0007\u00f3\u0002\u0002\u1fca\u1fcb\u0007\u0313",
    "\u0002\u0002\u1fcb\u1fcd\u0007\u030f\u0002\u0002\u1fcc\u1fb5\u0003\u0002",
    "\u0002\u0002\u1fcc\u1fbd\u0003\u0002\u0002\u0002\u1fcc\u1fc6\u0003\u0002",
    "\u0002\u0002\u1fcc\u1fc9\u0003\u0002\u0002\u0002\u1fcd\u028b\u0003\u0002",
    "\u0002\u0002\u1fce\u1fe9\u0007v\u0002\u0002\u1fcf\u1fd0\u0007\u0174",
    "\u0002\u0002\u1fd0\u1fe9\u0005\u03ac\u01d7\u0002\u1fd1\u1fd2\u0007\u02de",
    "\u0002\u0002\u1fd2\u1fe9\u0005\u03ac\u01d7\u0002\u1fd3\u1fd5\u0007\u01be",
    "\u0002\u0002\u1fd4\u1fd6\u0005\u03ac\u01d7\u0002\u1fd5\u1fd4\u0003\u0002",
    "\u0002\u0002\u1fd5\u1fd6\u0003\u0002\u0002\u0002\u1fd6\u1fe9\u0003\u0002",
    "\u0002\u0002\u1fd7\u1fd8\u0007H\u0002\u0002\u1fd8\u1fe9\t^\u0002\u0002",
    "\u1fd9\u1fe9\u0007\u02c7\u0002\u0002\u1fda\u1fe9\u0007\u021a\u0002\u0002",
    "\u1fdb\u1fe9\u0007\u0131\u0002\u0002\u1fdc\u1fe9\u0007\u010d\u0002\u0002",
    "\u1fdd\u1fe9\u0007\u00a1\u0002\u0002\u1fde\u1fe6\u0007\t\u0002\u0002",
    "\u1fdf\u1fe1\u0007\f\u0002\u0002\u1fe0\u1fdf\u0003\u0002\u0002\u0002",
    "\u1fe0\u1fe1\u0003\u0002\u0002\u0002\u1fe1\u1fe4\u0003\u0002\u0002\u0002",
    "\u1fe2\u1fe5\u0005\u03ac\u01d7\u0002\u1fe3\u1fe5\u0007T\u0002\u0002",
    "\u1fe4\u1fe2\u0003\u0002\u0002\u0002\u1fe4\u1fe3\u0003\u0002\u0002\u0002",
    "\u1fe5\u1fe7\u0003\u0002\u0002\u0002\u1fe6\u1fe0\u0003\u0002\u0002\u0002",
    "\u1fe6\u1fe7\u0003\u0002\u0002\u0002\u1fe7\u1fe9\u0003\u0002\u0002\u0002",
    "\u1fe8\u1fce\u0003\u0002\u0002\u0002\u1fe8\u1fcf\u0003\u0002\u0002\u0002",
    "\u1fe8\u1fd1\u0003\u0002\u0002\u0002\u1fe8\u1fd3\u0003\u0002\u0002\u0002",
    "\u1fe8\u1fd7\u0003\u0002\u0002\u0002\u1fe8\u1fd9\u0003\u0002\u0002\u0002",
    "\u1fe8\u1fda\u0003\u0002\u0002\u0002\u1fe8\u1fdb\u0003\u0002\u0002\u0002",
    "\u1fe8\u1fdc\u0003\u0002\u0002\u0002\u1fe8\u1fdd\u0003\u0002\u0002\u0002",
    "\u1fe8\u1fde\u0003\u0002\u0002\u0002\u1fe9\u028d\u0003\u0002\u0002\u0002",
    "\u1fea\u1feb\u0007\u013c\u0002\u0002\u1feb\u1fee\u0007\u030a\u0002\u0002",
    "\u1fec\u1fed\u0007\u031f\u0002\u0002\u1fed\u1fef\u0005\u03ac\u01d7\u0002",
    "\u1fee\u1fec\u0003\u0002\u0002\u0002\u1fee\u1fef\u0003\u0002\u0002\u0002",
    "\u1fef\u1ff0\u0003\u0002\u0002\u0002\u1ff0\u1ff1\u0007\u0313\u0002\u0002",
    "\u1ff1\u1ff3\u0005\u02c2\u0162\u0002\u1ff2\u1ff4\u0007\u0327\u0002\u0002",
    "\u1ff3\u1ff2\u0003\u0002\u0002\u0002\u1ff3\u1ff4\u0003\u0002\u0002\u0002",
    "\u1ff4\u2012\u0003\u0002\u0002\u0002\u1ff5\u1ff6\u0007\u013c\u0002\u0002",
    "\u1ff6\u1ff7\u0007\u030a\u0002\u0002\u1ff7\u1ff8\u0005\u03b2\u01da\u0002",
    "\u1ff8\u1ffa\u0005\u02c2\u0162\u0002\u1ff9\u1ffb\u0007\u0327\u0002\u0002",
    "\u1ffa\u1ff9\u0003\u0002\u0002\u0002\u1ffa\u1ffb\u0003\u0002\u0002\u0002",
    "\u1ffb\u2012\u0003\u0002\u0002\u0002\u1ffc\u1ffd\u0007\u013c\u0002\u0002",
    "\u1ffd\u1ffe\u0007\u030a\u0002\u0002\u1ffe\u1fff\u0007\u0313\u0002\u0002",
    "\u1fff\u2000\u0007O\u0002\u0002\u2000\u200b\u0005\u02b8\u015d\u0002",
    "\u2001\u2009\u0007\u0085\u0002\u0002\u2002\u2003\u0007\u0109\u0002\u0002",
    "\u2003\u200a\u0007\u026e\u0002\u0002\u2004\u2007\u0007\u016b\u0002\u0002",
    "\u2005\u2006\u0007\u00e0\u0002\u0002\u2006\u2008\u0005\u0384\u01c3\u0002",
    "\u2007\u2005\u0003\u0002\u0002\u0002\u2007\u2008\u0003\u0002\u0002\u0002",
    "\u2008\u200a\u0003\u0002\u0002\u0002\u2009\u2002\u0003\u0002\u0002\u0002",
    "\u2009\u2004\u0003\u0002\u0002\u0002\u200a\u200c\u0003\u0002\u0002\u0002",
    "\u200b\u2001\u0003\u0002\u0002\u0002\u200b\u200c\u0003\u0002\u0002\u0002",
    "\u200c\u200e\u0003\u0002\u0002\u0002\u200d\u200f\u0007\u0327\u0002\u0002",
    "\u200e\u200d\u0003\u0002\u0002\u0002\u200e\u200f\u0003\u0002\u0002\u0002",
    "\u200f\u2012\u0003\u0002\u0002\u0002\u2010\u2012\u0005\u02be\u0160\u0002",
    "\u2011\u1fea\u0003\u0002\u0002\u0002\u2011\u1ff5\u0003\u0002\u0002\u0002",
    "\u2011\u1ffc\u0003\u0002\u0002\u0002\u2011\u2010\u0003\u0002\u0002\u0002",
    "\u2012\u028f\u0003\u0002\u0002\u0002\u2013\u2014\u0007\u001b\u0002\u0002",
    "\u2014\u2015\u0007c\u0002\u0002\u2015\u2018\t_\u0002\u0002\u2016\u2019",
    "\u0005\u03ac\u01d7\u0002\u2017\u2019\u0007\u030a\u0002\u0002\u2018\u2016",
    "\u0003\u0002\u0002\u0002\u2018\u2017\u0003\u0002\u0002\u0002\u2018\u2019",
    "\u0003\u0002\u0002\u0002\u2019\u201b\u0003\u0002\u0002\u0002\u201a\u201c",
    "\u0007\u0327\u0002\u0002\u201b\u201a\u0003\u0002\u0002\u0002\u201b\u201c",
    "\u0003\u0002\u0002\u0002\u201c\u2061\u0003\u0002\u0002\u0002\u201d\u201e",
    "\u0007\u001b\u0002\u0002\u201e\u2028\t_\u0002\u0002\u201f\u2022\u0005",
    "\u03ac\u01d7\u0002\u2020\u2022\u0007\u030a\u0002\u0002\u2021\u201f\u0003",
    "\u0002\u0002\u0002\u2021\u2020\u0003\u0002\u0002\u0002\u2022\u2026\u0003",
    "\u0002\u0002\u0002\u2023\u2024\u0007\u017b\u0002\u0002\u2024\u2025\u0007",
    "\u023a\u0002\u0002\u2025\u2027\u0007\u030f\u0002\u0002\u2026\u2023\u0003",
    "\u0002\u0002\u0002\u2026\u2027\u0003\u0002\u0002\u0002\u2027\u2029\u0003",
    "\u0002\u0002\u0002\u2028\u2021\u0003\u0002\u0002\u0002\u2028\u2029\u0003",
    "\u0002\u0002\u0002\u2029\u202b\u0003\u0002\u0002\u0002\u202a\u202c\u0007",
    "\u0327\u0002\u0002\u202b\u202a\u0003\u0002\u0002\u0002\u202b\u202c\u0003",
    "\u0002\u0002\u0002\u202c\u2061\u0003\u0002\u0002\u0002\u202d\u202e\u0007",
    "9\u0002\u0002\u202e\u203b\t_\u0002\u0002\u202f\u2032\u0005\u03ac\u01d7",
    "\u0002\u2030\u2032\u0007\u030a\u0002\u0002\u2031\u202f\u0003\u0002\u0002",
    "\u0002\u2031\u2030\u0003\u0002\u0002\u0002\u2032\u2039\u0003\u0002\u0002",
    "\u0002\u2033\u2034\u0007\u017b\u0002\u0002\u2034\u2035\u0007\u0324\u0002",
    "\u0002\u2035\u2036\u0007\u01d7\u0002\u0002\u2036\u2037\u0007\u0313\u0002",
    "\u0002\u2037\u2038\t\b\u0002\u0002\u2038\u203a\u0007\u0325\u0002\u0002",
    "\u2039\u2033\u0003\u0002\u0002\u0002\u2039\u203a\u0003\u0002\u0002\u0002",
    "\u203a\u203c\u0003\u0002\u0002\u0002\u203b\u2031\u0003\u0002\u0002\u0002",
    "\u203b\u203c\u0003\u0002\u0002\u0002\u203c\u203e\u0003\u0002\u0002\u0002",
    "\u203d\u203f\u0007\u0327\u0002\u0002\u203e\u203d\u0003\u0002\u0002\u0002",
    "\u203e\u203f\u0003\u0002\u0002\u0002\u203f\u2061\u0003\u0002\u0002\u0002",
    "\u2040\u2042\u00079\u0002\u0002\u2041\u2043\u0007\u02ff\u0002\u0002",
    "\u2042\u2041\u0003\u0002\u0002\u0002\u2042\u2043\u0003\u0002\u0002\u0002",
    "\u2043\u2045\u0003\u0002\u0002\u0002\u2044\u2046\u0007\u0327\u0002\u0002",
    "\u2045\u2044\u0003\u0002\u0002\u0002\u2045\u2046\u0003\u0002\u0002\u0002",
    "\u2046\u2061\u0003\u0002\u0002\u0002\u2047\u2048\u0007\u011f\u0002\u0002",
    "\u2048\u204b\t_\u0002\u0002\u2049\u204c\u0005\u03ac\u01d7\u0002\u204a",
    "\u204c\u0007\u030a\u0002\u0002\u204b\u2049\u0003\u0002\u0002\u0002\u204b",
    "\u204a\u0003\u0002\u0002\u0002\u204b\u204c\u0003\u0002\u0002\u0002\u204c",
    "\u204e\u0003\u0002\u0002\u0002\u204d\u204f\u0007\u0327\u0002\u0002\u204e",
    "\u204d\u0003\u0002\u0002\u0002\u204e\u204f\u0003\u0002\u0002\u0002\u204f",
    "\u2061\u0003\u0002\u0002\u0002\u2050\u2052\u0007\u011f\u0002\u0002\u2051",
    "\u2053\u0007\u02ff\u0002\u0002\u2052\u2051\u0003\u0002\u0002\u0002\u2052",
    "\u2053\u0003\u0002\u0002\u0002\u2053\u2055\u0003\u0002\u0002\u0002\u2054",
    "\u2056\u0007\u0327\u0002\u0002\u2055\u2054\u0003\u0002\u0002\u0002\u2055",
    "\u2056\u0003\u0002\u0002\u0002\u2056\u2061\u0003\u0002\u0002\u0002\u2057",
    "\u2058\u0007\u012b\u0002\u0002\u2058\u205b\t_\u0002\u0002\u2059\u205c",
    "\u0005\u03ac\u01d7\u0002\u205a\u205c\u0007\u030a\u0002\u0002\u205b\u2059",
    "\u0003\u0002\u0002\u0002\u205b\u205a\u0003\u0002\u0002\u0002\u205b\u205c",
    "\u0003\u0002\u0002\u0002\u205c\u205e\u0003\u0002\u0002\u0002\u205d\u205f",
    "\u0007\u0327\u0002\u0002\u205e\u205d\u0003\u0002\u0002\u0002\u205e\u205f",
    "\u0003\u0002\u0002\u0002\u205f\u2061\u0003\u0002\u0002\u0002\u2060\u2013",
    "\u0003\u0002\u0002\u0002\u2060\u201d\u0003\u0002\u0002\u0002\u2060\u202d",
    "\u0003\u0002\u0002\u0002\u2060\u2040\u0003\u0002\u0002\u0002\u2060\u2047",
    "\u0003\u0002\u0002\u0002\u2060\u2050\u0003\u0002\u0002\u0002\u2060\u2057",
    "\u0003\u0002\u0002\u0002\u2061\u0291\u0003\u0002\u0002\u0002\u2062\u2064",
    "\u0007\u020d\u0002\u0002\u2063\u2065\u0007\u030b\u0002\u0002\u2064\u2063",
    "\u0003\u0002\u0002\u0002\u2064\u2065\u0003\u0002\u0002\u0002\u2065\u0293",
    "\u0003\u0002\u0002\u0002\u2066\u2067\u0007\u016e\u0002\u0002\u2067\u2069",
    "\u0005\u03ac\u01d7\u0002\u2068\u206a\u0007\u0327\u0002\u0002\u2069\u2068",
    "\u0003\u0002\u0002\u0002\u2069\u206a\u0003\u0002\u0002\u0002\u206a\u0295",
    "\u0003\u0002\u0002\u0002\u206b\u206c\u0007V\u0002\u0002\u206c\u2071",
    "\u0005\u03ae\u01d8\u0002\u206d\u206e\u0007\u0324\u0002\u0002\u206e\u206f",
    "\u0005\u0350\u01a9\u0002\u206f\u2070\u0007\u0325\u0002\u0002\u2070\u2072",
    "\u0003\u0002\u0002\u0002\u2071\u206d\u0003\u0002\u0002\u0002\u2071\u2072",
    "\u0003\u0002\u0002\u0002\u2072\u2075\u0003\u0002\u0002\u0002\u2073\u2074",
    "\u0007\u017b\u0002\u0002\u2074\u2076\u0005\u0298\u014d\u0002\u2075\u2073",
    "\u0003\u0002\u0002\u0002\u2075\u2076\u0003\u0002\u0002\u0002\u2076\u2078",
    "\u0003\u0002\u0002\u0002\u2077\u2079\u0007\u0327\u0002\u0002\u2078\u2077",
    "\u0003\u0002\u0002\u0002\u2078\u2079\u0003\u0002\u0002\u0002\u2079\u0297",
    "\u0003\u0002\u0002\u0002\u207a\u207d\u0005\u03ae\u01d8\u0002\u207b\u207c",
    "\u0007\u0326\u0002\u0002\u207c\u207e\u0005\u03ae\u01d8\u0002\u207d\u207b",
    "\u0003\u0002\u0002\u0002\u207d\u207e\u0003\u0002\u0002\u0002\u207e\u0299",
    "\u0003\u0002\u0002\u0002\u207f\u2080\u0007v\u0002\u0002\u2080\u2081",
    "\u0007\u000f\u0002\u0002\u2081\u2082\t`\u0002\u0002\u2082\u029b\u0003",
    "\u0002\u0002\u0002\u2083\u2085\u0007\u030a\u0002\u0002\u2084\u2086\u0007",
    "\u000f\u0002\u0002\u2085\u2084\u0003\u0002\u0002\u0002\u2085\u2086\u0003",
    "\u0002\u0002\u0002\u2086\u2087\u0003\u0002\u0002\u0002\u2087\u208a\u0005",
    "\u03a4\u01d3\u0002\u2088\u2089\u0007\u0313\u0002\u0002\u2089\u208b\u0005",
    "\u02c2\u0162\u0002\u208a\u2088\u0003\u0002\u0002\u0002\u208a\u208b\u0003",
    "\u0002\u0002\u0002\u208b\u029d\u0003\u0002\u0002\u0002\u208c\u208d\u0007",
    "\u0155\u0002\u0002\u208d\u208e\u0007\u0324\u0002\u0002\u208e\u208f\u0005",
    "\u02a4\u0153\u0002\u208f\u2090\u0007\u0325\u0002\u0002\u2090\u029f\u0003",
    "\u0002\u0002\u0002\u2091\u2092\u0007\u0301\u0002\u0002\u2092\u2094\u0007",
    "\u0324\u0002\u0002\u2093\u2095\ta\u0002\u0002\u2094\u2093\u0003\u0002",
    "\u0002\u0002\u2094\u2095\u0003\u0002\u0002\u0002\u2095\u2096\u0003\u0002",
    "\u0002\u0002\u2096\u2097\u0005\u02a2\u0152\u0002\u2097\u2098\u0007\u0325",
    "\u0002\u0002\u2098\u02a1\u0003\u0002\u0002\u0002\u2099\u209a\u0007\u030c",
    "\u0002\u0002\u209a\u209b\u0007\u031f\u0002\u0002\u209b\u209c\u0007\u030c",
    "\u0002\u0002\u209c\u02a3\u0003\u0002\u0002\u0002\u209d\u20a4\u0005\u02a6",
    "\u0154\u0002\u209e\u20a0\u0007\u0326\u0002\u0002\u209f\u209e\u0003\u0002",
    "\u0002\u0002\u209f\u20a0\u0003\u0002\u0002\u0002\u20a0\u20a1\u0003\u0002",
    "\u0002\u0002\u20a1\u20a3\u0005\u02a6\u0154\u0002\u20a2\u209f\u0003\u0002",
    "\u0002\u0002\u20a3\u20a6\u0003\u0002\u0002\u0002\u20a4\u20a2\u0003\u0002",
    "\u0002\u0002\u20a4\u20a5\u0003\u0002\u0002\u0002\u20a5\u02a5\u0003\u0002",
    "\u0002\u0002\u20a6\u20a4\u0003\u0002\u0002\u0002\u20a7\u20aa\u0005\u02a8",
    "\u0155\u0002\u20a8\u20aa\u0005\u02ac\u0157\u0002\u20a9\u20a7\u0003\u0002",
    "\u0002\u0002\u20a9\u20a8\u0003\u0002\u0002\u0002\u20aa\u02a7\u0003\u0002",
    "\u0002\u0002\u20ab\u20af\u0005\u03ac\u01d7\u0002\u20ac\u20b0\u0005\u03a4",
    "\u01d3\u0002\u20ad\u20ae\u0007\u000f\u0002\u0002\u20ae\u20b0\u0005\u02c2",
    "\u0162\u0002\u20af\u20ac\u0003\u0002\u0002\u0002\u20af\u20ad\u0003\u0002",
    "\u0002\u0002\u20b0\u20b3\u0003\u0002\u0002\u0002\u20b1\u20b2\u00076",
    "\u0002\u0002\u20b2\u20b4\u0005\u03ac\u01d7\u0002\u20b3\u20b1\u0003\u0002",
    "\u0002\u0002\u20b3\u20b4\u0003\u0002\u0002\u0002\u20b4\u20b6\u0003\u0002",
    "\u0002\u0002\u20b5\u20b7\u0005\u038c\u01c7\u0002\u20b6\u20b5\u0003\u0002",
    "\u0002\u0002\u20b6\u20b7\u0003\u0002\u0002\u0002\u20b7\u20cd\u0003\u0002",
    "\u0002\u0002\u20b8\u20b9\u0007<\u0002\u0002\u20b9\u20bb\u0005\u03ac",
    "\u01d7\u0002\u20ba\u20b8\u0003\u0002\u0002\u0002\u20ba\u20bb\u0003\u0002",
    "\u0002\u0002\u20bb\u20bc\u0003\u0002\u0002\u0002\u20bc\u20be\u0005\u038e",
    "\u01c8\u0002\u20bd\u20bf\u0005\u038e\u01c8\u0002\u20be\u20bd\u0003\u0002",
    "\u0002\u0002\u20be\u20bf\u0003\u0002\u0002\u0002\u20bf\u20ce\u0003\u0002",
    "\u0002\u0002\u20c0\u20c6\u0007\u0096\u0002\u0002\u20c1\u20c2\u0007\u0324",
    "\u0002\u0002\u20c2\u20c3\u0007\u030b\u0002\u0002\u20c3\u20c4\u0007\u0326",
    "\u0002\u0002\u20c4\u20c5\u0007\u030b\u0002\u0002\u20c5\u20c7\u0007\u0325",
    "\u0002\u0002\u20c6\u20c1\u0003\u0002\u0002\u0002\u20c6\u20c7\u0003\u0002",
    "\u0002\u0002\u20c7\u20cb\u0003\u0002\u0002\u0002\u20c8\u20c9\u0007\u00db",
    "\u0002\u0002\u20c9\u20ca\u0007\u0085\u0002\u0002\u20ca\u20cc\u0007\u0111",
    "\u0002\u0002\u20cb\u20c8\u0003\u0002\u0002\u0002\u20cb\u20cc\u0003\u0002",
    "\u0002\u0002\u20cc\u20ce\u0003\u0002\u0002\u0002\u20cd\u20ba\u0003\u0002",
    "\u0002\u0002\u20cd\u20c0\u0003\u0002\u0002\u0002\u20cd\u20ce\u0003\u0002",
    "\u0002\u0002\u20ce\u20d0\u0003\u0002\u0002\u0002\u20cf\u20d1\u0007\u0122",
    "\u0002\u0002\u20d0\u20cf\u0003\u0002\u0002\u0002\u20d0\u20d1\u0003\u0002",
    "\u0002\u0002\u20d1\u20d5\u0003\u0002\u0002\u0002\u20d2\u20d4\u0005\u02aa",
    "\u0156\u0002\u20d3\u20d2\u0003\u0002\u0002\u0002\u20d4\u20d7\u0003\u0002",
    "\u0002\u0002\u20d5\u20d3\u0003\u0002\u0002\u0002\u20d5\u20d6\u0003\u0002",
    "\u0002\u0002\u20d6\u02a9\u0003\u0002\u0002\u0002\u20d7\u20d5\u0003\u0002",
    "\u0002\u0002\u20d8\u20d9\u0007<\u0002\u0002\u20d9\u20db\u0005\u03ac",
    "\u01d7\u0002\u20da\u20d8\u0003\u0002\u0002\u0002\u20da\u20db\u0003\u0002",
    "\u0002\u0002\u20db\u2101\u0003\u0002\u0002\u0002\u20dc\u20dd\u0007\u00ff",
    "\u0002\u0002\u20dd\u20e0\u0007\u00ab\u0002\u0002\u20de\u20e0\u0007\u0167",
    "\u0002\u0002\u20df\u20dc\u0003\u0002\u0002\u0002\u20df\u20de\u0003\u0002",
    "\u0002\u0002\u20e0\u20e2\u0003\u0002\u0002\u0002\u20e1\u20e3\u0005\u038a",
    "\u01c6\u0002\u20e2\u20e1\u0003\u0002\u0002\u0002\u20e2\u20e3\u0003\u0002",
    "\u0002\u0002\u20e3\u20e5\u0003\u0002\u0002\u0002\u20e4\u20e6\u0005\u02b2",
    "\u015a\u0002\u20e5\u20e4\u0003\u0002\u0002\u0002\u20e5\u20e6\u0003\u0002",
    "\u0002\u0002\u20e6\u2102\u0003\u0002\u0002\u0002\u20e7\u20eb\u0007-",
    "\u0002\u0002\u20e8\u20e9\u0007\u00db\u0002\u0002\u20e9\u20ea\u0007\u0085",
    "\u0002\u0002\u20ea\u20ec\u0007\u0111\u0002\u0002\u20eb\u20e8\u0003\u0002",
    "\u0002\u0002\u20eb\u20ec\u0003\u0002\u0002\u0002\u20ec\u20ed\u0003\u0002",
    "\u0002\u0002\u20ed\u20ee\u0007\u0324\u0002\u0002\u20ee\u20ef\u0005\u02d8",
    "\u016d\u0002\u20ef\u20f0\u0007\u0325\u0002\u0002\u20f0\u2102\u0003\u0002",
    "\u0002\u0002\u20f1\u20f2\u0007\u0088\u0002\u0002\u20f2\u20f4\u0007\u00ab",
    "\u0002\u0002\u20f3\u20f1\u0003\u0002\u0002\u0002\u20f3\u20f4\u0003\u0002",
    "\u0002\u0002\u20f4\u20f5\u0003\u0002\u0002\u0002\u20f5\u20f6\u0007\u010d",
    "\u0002\u0002\u20f6\u20f7\u0005\u0378\u01bd\u0002\u20f7\u20f8\u0007\u0324",
    "\u0002\u0002\u20f8\u20f9\u0005\u0384\u01c3\u0002\u20f9\u20fb\u0007\u0325",
    "\u0002\u0002\u20fa\u20fc\u0005\u02ae\u0158\u0002\u20fb\u20fa\u0003\u0002",
    "\u0002\u0002\u20fb\u20fc\u0003\u0002\u0002\u0002\u20fc\u20fe\u0003\u0002",
    "\u0002\u0002\u20fd\u20ff\u0005\u02b0\u0159\u0002\u20fe\u20fd\u0003\u0002",
    "\u0002\u0002\u20fe\u20ff\u0003\u0002\u0002\u0002\u20ff\u2102\u0003\u0002",
    "\u0002\u0002\u2100\u2102\u0005\u038c\u01c7\u0002\u2101\u20df\u0003\u0002",
    "\u0002\u0002\u2101\u20e7\u0003\u0002\u0002\u0002\u2101\u20f3\u0003\u0002",
    "\u0002\u0002\u2101\u2100\u0003\u0002\u0002\u0002\u2102\u02ab\u0003\u0002",
    "\u0002\u0002\u2103\u2104\u0007<\u0002\u0002\u2104\u2106\u0005\u03ac",
    "\u01d7\u0002\u2105\u2103\u0003\u0002\u0002\u0002\u2105\u2106\u0003\u0002",
    "\u0002\u0002\u2106\u2144\u0003\u0002\u0002\u0002\u2107\u2108\u0007\u00ff",
    "\u0002\u0002\u2108\u210b\u0007\u00ab\u0002\u0002\u2109\u210b\u0007\u0167",
    "\u0002\u0002\u210a\u2107\u0003\u0002\u0002\u0002\u210a\u2109\u0003\u0002",
    "\u0002\u0002\u210b\u210d\u0003\u0002\u0002\u0002\u210c\u210e\u0005\u038a",
    "\u01c6\u0002\u210d\u210c\u0003\u0002\u0002\u0002\u210d\u210e\u0003\u0002",
    "\u0002\u0002\u210e\u210f\u0003\u0002\u0002\u0002\u210f\u2110\u0007\u0324",
    "\u0002\u0002\u2110\u2111\u0005\u0382\u01c2\u0002\u2111\u2113\u0007\u0325",
    "\u0002\u0002\u2112\u2114\u0005\u02b2\u015a\u0002\u2113\u2112\u0003\u0002",
    "\u0002\u0002\u2113\u2114\u0003\u0002\u0002\u0002\u2114\u2117\u0003\u0002",
    "\u0002\u0002\u2115\u2116\u0007\u00e4\u0002\u0002\u2116\u2118\u0005\u03ac",
    "\u01d7\u0002\u2117\u2115\u0003\u0002\u0002\u0002\u2117\u2118\u0003\u0002",
    "\u0002\u0002\u2118\u2145\u0003\u0002\u0002\u0002\u2119\u211d\u0007-",
    "\u0002\u0002\u211a\u211b\u0007\u00db\u0002\u0002\u211b\u211c\u0007\u0085",
    "\u0002\u0002\u211c\u211e\u0007\u0111\u0002\u0002\u211d\u211a\u0003\u0002",
    "\u0002\u0002\u211d\u211e\u0003\u0002\u0002\u0002\u211e\u211f\u0003\u0002",
    "\u0002\u0002\u211f\u2120\u0007\u0324\u0002\u0002\u2120\u2121\u0005\u02d8",
    "\u016d\u0002\u2121\u2122\u0007\u0325\u0002\u0002\u2122\u2145\u0003\u0002",
    "\u0002\u0002\u2123\u2125\u0007Y\u0002\u0002\u2124\u2126\u0007\u0324",
    "\u0002\u0002\u2125\u2124\u0003\u0002\u0002\u0002\u2125\u2126\u0003\u0002",
    "\u0002\u0002\u2126\u212b\u0003\u0002\u0002\u0002\u2127\u212c\u0007\u030f",
    "\u0002\u0002\u2128\u212c\u0007\u032c\u0002\u0002\u2129\u212c\u0005\u032a",
    "\u0196\u0002\u212a\u212c\u0007\u030b\u0002\u0002\u212b\u2127\u0003\u0002",
    "\u0002\u0002\u212b\u2128\u0003\u0002\u0002\u0002\u212b\u2129\u0003\u0002",
    "\u0002\u0002\u212b\u212a\u0003\u0002\u0002\u0002\u212c\u212d\u0003\u0002",
    "\u0002\u0002\u212d\u212b\u0003\u0002\u0002\u0002\u212d\u212e\u0003\u0002",
    "\u0002\u0002\u212e\u2130\u0003\u0002\u0002\u0002\u212f\u2131\u0007\u0325",
    "\u0002\u0002\u2130\u212f\u0003\u0002\u0002\u0002\u2130\u2131\u0003\u0002",
    "\u0002\u0002\u2131\u2132\u0003\u0002\u0002\u0002\u2132\u2133\u0007\u0085",
    "\u0002\u0002\u2133\u2145\u0005\u03ac\u01d7\u0002\u2134\u2135\u0007\u0088",
    "\u0002\u0002\u2135\u2136\u0007\u00ab\u0002\u0002\u2136\u2137\u0007\u0324",
    "\u0002\u0002\u2137\u2138\u0005\u0384\u01c3\u0002\u2138\u2139\u0007\u0325",
    "\u0002\u0002\u2139\u213a\u0007\u010d\u0002\u0002\u213a\u213b\u0005\u0378",
    "\u01bd\u0002\u213b\u213c\u0007\u0324\u0002\u0002\u213c\u213d\u0005\u0384",
    "\u01c3\u0002\u213d\u213f\u0007\u0325\u0002\u0002\u213e\u2140\u0005\u02ae",
    "\u0158\u0002\u213f\u213e\u0003\u0002\u0002\u0002\u213f\u2140\u0003\u0002",
    "\u0002\u0002\u2140\u2142\u0003\u0002\u0002\u0002\u2141\u2143\u0005\u02b0",
    "\u0159\u0002\u2142\u2141\u0003\u0002\u0002\u0002\u2142\u2143\u0003\u0002",
    "\u0002\u0002\u2143\u2145\u0003\u0002\u0002\u0002\u2144\u210a\u0003\u0002",
    "\u0002\u0002\u2144\u2119\u0003\u0002\u0002\u0002\u2144\u2123\u0003\u0002",
    "\u0002\u0002\u2144\u2134\u0003\u0002\u0002\u0002\u2145\u02ad\u0003\u0002",
    "\u0002\u0002\u2146\u2147\u0007\u00e4\u0002\u0002\u2147\u214f\u0007\\",
    "\u0002\u0002\u2148\u2149\u0007\u0261\u0002\u0002\u2149\u2150\u0007\u0182",
    "\u0002\u0002\u214a\u2150\u0007(\u0002\u0002\u214b\u214c\u0007\u013c",
    "\u0002\u0002\u214c\u2150\u0007\u00de\u0002\u0002\u214d\u214e\u0007\u013c",
    "\u0002\u0002\u214e\u2150\u0007Y\u0002\u0002\u214f\u2148\u0003\u0002",
    "\u0002\u0002\u214f\u214a\u0003\u0002\u0002\u0002\u214f\u214b\u0003\u0002",
    "\u0002\u0002\u214f\u214d\u0003\u0002\u0002\u0002\u2150\u02af\u0003\u0002",
    "\u0002\u0002\u2151\u2152\u0007\u00e4\u0002\u0002\u2152\u215a\u0007\u016b",
    "\u0002\u0002\u2153\u2154\u0007\u0261\u0002\u0002\u2154\u215b\u0007\u0182",
    "\u0002\u0002\u2155\u215b\u0007(\u0002\u0002\u2156\u2157\u0007\u013c",
    "\u0002\u0002\u2157\u215b\u0007\u00de\u0002\u0002\u2158\u2159\u0007\u013c",
    "\u0002\u0002\u2159\u215b\u0007Y\u0002\u0002\u215a\u2153\u0003\u0002",
    "\u0002\u0002\u215a\u2155\u0003\u0002\u0002\u0002\u215a\u2156\u0003\u0002",
    "\u0002\u0002\u215a\u2158\u0003\u0002\u0002\u0002\u215b\u02b1\u0003\u0002",
    "\u0002\u0002\u215c\u215d\u0007\u017b\u0002\u0002\u215d\u215e\u0007\u0324",
    "\u0002\u0002\u215e\u2163\u0005\u02b4\u015b\u0002\u215f\u2160\u0007\u0326",
    "\u0002\u0002\u2160\u2162\u0005\u02b4\u015b\u0002\u2161\u215f\u0003\u0002",
    "\u0002\u0002\u2162\u2165\u0003\u0002\u0002\u0002\u2163\u2161\u0003\u0002",
    "\u0002\u0002\u2163\u2164\u0003\u0002\u0002\u0002\u2164\u2166\u0003\u0002",
    "\u0002\u0002\u2165\u2163\u0003\u0002\u0002\u0002\u2166\u2167\u0007\u0325",
    "\u0002\u0002\u2167\u02b3\u0003\u0002\u0002\u0002\u2168\u2169\u0005\u03ae",
    "\u01d8\u0002\u2169\u216d\u0007\u0313\u0002\u0002\u216a\u216e\u0005\u03ae",
    "\u01d8\u0002\u216b\u216e\u0005\u0388\u01c5\u0002\u216c\u216e\u0007\u030b",
    "\u0002\u0002\u216d\u216a\u0003\u0002\u0002\u0002\u216d\u216b\u0003\u0002",
    "\u0002\u0002\u216d\u216c\u0003\u0002\u0002\u0002\u216e\u02b5\u0003\u0002",
    "\u0002\u0002\u216f\u2170\u0007X\u0002\u0002\u2170\u2190\u0005\u0386",
    "\u01c4\u0002\u2171\u217b\u0007O\u0002\u0002\u2172\u2179\u0005\u02b8",
    "\u015d\u0002\u2173\u2174\u0007\u0085\u0002\u0002\u2174\u2177\u0007\u016b",
    "\u0002\u0002\u2175\u2176\u0007\u00e0\u0002\u0002\u2176\u2178\u0005\u0384",
    "\u01c3\u0002\u2177\u2175\u0003\u0002\u0002\u0002\u2177\u2178\u0003\u0002",
    "\u0002\u0002\u2178\u217a\u0003\u0002\u0002\u0002\u2179\u2173\u0003\u0002",
    "\u0002\u0002\u2179\u217a\u0003\u0002\u0002\u0002\u217a\u217c\u0003\u0002",
    "\u0002\u0002\u217b\u2172\u0003\u0002\u0002\u0002\u217b\u217c\u0003\u0002",
    "\u0002\u0002\u217c\u2191\u0003\u0002\u0002\u0002\u217d\u217f\u0007\u021f",
    "\u0002\u0002\u217e\u217d\u0003\u0002\u0002\u0002\u217e\u217f\u0003\u0002",
    "\u0002\u0002\u217f\u2181\u0003\u0002\u0002\u0002\u2180\u2182\u0007\u02b7",
    "\u0002\u0002\u2181\u2180\u0003\u0002\u0002\u0002\u2181\u2182\u0003\u0002",
    "\u0002\u0002\u2182\u2183\u0003\u0002\u0002\u0002\u2183\u2184\u0007O",
    "\u0002\u0002\u2184\u2185\u0007\u0085\u0002\u0002\u2185\u218e\u0005\u01bc",
    "\u00df\u0002\u2186\u218c\u0007\u0085\u0002\u0002\u2187\u2188\u0007\u0109",
    "\u0002\u0002\u2188\u218d\u0007\u026e\u0002\u0002\u2189\u218d\u0007\u016b",
    "\u0002\u0002\u218a\u218b\u0007\u00e0\u0002\u0002\u218b\u218d\u0005\u0384",
    "\u01c3\u0002\u218c\u2187\u0003\u0002\u0002\u0002\u218c\u2189\u0003\u0002",
    "\u0002\u0002\u218c\u218a\u0003\u0002\u0002\u0002\u218d\u218f\u0003\u0002",
    "\u0002\u0002\u218e\u2186\u0003\u0002\u0002\u0002\u218e\u218f\u0003\u0002",
    "\u0002\u0002\u218f\u2191\u0003\u0002\u0002\u0002\u2190\u2171\u0003\u0002",
    "\u0002\u0002\u2190\u217e\u0003\u0002\u0002\u0002\u2191\u2193\u0003\u0002",
    "\u0002\u0002\u2192\u2194\u0007\u0327\u0002\u0002\u2193\u2192\u0003\u0002",
    "\u0002\u0002\u2193\u2194\u0003\u0002\u0002\u0002\u2194\u02b7\u0003\u0002",
    "\u0002\u0002\u2195\u2197\u0005\u02ba\u015e\u0002\u2196\u2195\u0003\u0002",
    "\u0002\u0002\u2197\u219a\u0003\u0002\u0002\u0002\u2198\u2196\u0003\u0002",
    "\u0002\u0002\u2198\u2199\u0003\u0002\u0002\u0002\u2199\u219b\u0003\u0002",
    "\u0002\u0002\u219a\u2198\u0003\u0002\u0002\u0002\u219b\u219c\u0007\u0085",
    "\u0002\u0002\u219c\u219d\u0005\u01bc\u00df\u0002\u219d\u02b9\u0003\u0002",
    "\u0002\u0002\u219e\u21a4\t>\u0002\u0002\u219f\u21a4\tb\u0002\u0002\u21a0",
    "\u21a4\tc\u0002\u0002\u21a1\u21a4\td\u0002\u0002\u21a2\u21a4\u0007\u02f1",
    "\u0002\u0002\u21a3\u219e\u0003\u0002\u0002\u0002\u21a3\u219f\u0003\u0002",
    "\u0002\u0002\u21a3\u21a0\u0003\u0002\u0002\u0002\u21a3\u21a1\u0003\u0002",
    "\u0002\u0002\u21a3\u21a2\u0003\u0002\u0002\u0002\u21a4\u02bb\u0003\u0002",
    "\u0002\u0002\u21a5\u21af\u0007\u0080\u0002\u0002\u21a6\u21ad\u0007\u025b",
    "\u0002\u0002\u21a7\u21ad\u0007\u0280\u0002\u0002\u21a8\u21ad\u0007\u01ff",
    "\u0002\u0002\u21a9\u21ad\u0007\u022b\u0002\u0002\u21aa\u21ab\te\u0002",
    "\u0002\u21ab\u21ad\u0005\u02c2\u0162\u0002\u21ac\u21a6\u0003\u0002\u0002",
    "\u0002\u21ac\u21a7\u0003\u0002\u0002\u0002\u21ac\u21a8\u0003\u0002\u0002",
    "\u0002\u21ac\u21a9\u0003\u0002\u0002\u0002\u21ac\u21aa\u0003\u0002\u0002",
    "\u0002\u21ac\u21ad\u0003\u0002\u0002\u0002\u21ad\u21ae\u0003\u0002\u0002",
    "\u0002\u21ae\u21b0\u0007\u008b\u0002\u0002\u21af\u21ac\u0003\u0002\u0002",
    "\u0002\u21af\u21b0\u0003\u0002\u0002\u0002\u21b0\u21b2\u0003\u0002\u0002",
    "\u0002\u21b1\u21b3\u0007\u020c\u0002\u0002\u21b2\u21b1\u0003\u0002\u0002",
    "\u0002\u21b2\u21b3\u0003\u0002\u0002\u0002\u21b3\u21b4\u0003\u0002\u0002",
    "\u0002\u21b4\u21be\u0005\u0386\u01c4\u0002\u21b5\u21b6\u0007\u00a4\u0002",
    "\u0002\u21b6\u21bb\u0007\u030a\u0002\u0002\u21b7\u21b8\u0007\u0326\u0002",
    "\u0002\u21b8\u21ba\u0007\u030a\u0002\u0002\u21b9\u21b7\u0003\u0002\u0002",
    "\u0002\u21ba\u21bd\u0003\u0002\u0002\u0002\u21bb\u21b9\u0003\u0002\u0002",
    "\u0002\u21bb\u21bc\u0003\u0002\u0002\u0002\u21bc\u21bf\u0003\u0002\u0002",
    "\u0002\u21bd\u21bb\u0003\u0002\u0002\u0002\u21be\u21b5\u0003\u0002\u0002",
    "\u0002\u21be\u21bf\u0003\u0002\u0002\u0002\u21bf\u21c1\u0003\u0002\u0002",
    "\u0002\u21c0\u21c2\u0007\u0327\u0002\u0002\u21c1\u21c0\u0003\u0002\u0002",
    "\u0002\u21c1\u21c2\u0003\u0002\u0002\u0002\u21c2\u02bd\u0003\u0002\u0002",
    "\u0002\u21c3\u21c4\u0007\u013c\u0002\u0002\u21c4\u21c8\u0005\u03ac\u01d7",
    "\u0002\u21c5\u21c9\u0005\u03ac\u01d7\u0002\u21c6\u21c9\u0005\u02c0\u0161",
    "\u0002\u21c7\u21c9\u0005\u0388\u01c5\u0002\u21c8\u21c5\u0003\u0002\u0002",
    "\u0002\u21c8\u21c6\u0003\u0002\u0002\u0002\u21c8\u21c7\u0003\u0002\u0002",
    "\u0002\u21c9\u21cb\u0003\u0002\u0002\u0002\u21ca\u21cc\u0007\u0327\u0002",
    "\u0002\u21cb\u21ca\u0003\u0002\u0002\u0002\u21cb\u21cc\u0003\u0002\u0002",
    "\u0002\u21cc\u21f4\u0003\u0002\u0002\u0002\u21cd\u21ce\u0007\u013c\u0002",
    "\u0002\u21ce\u21cf\u0007\u0160\u0002\u0002\u21cf\u21d0\u0007\u0223\u0002",
    "\u0002\u21d0\u21d9\u0007\u022e\u0002\u0002\u21d1\u21d2\u0007\u0109\u0002",
    "\u0002\u21d2\u21da\u0007\u02f3\u0002\u0002\u21d3\u21d4\u0007\u0109\u0002",
    "\u0002\u21d4\u21da\u0007\u01b9\u0002\u0002\u21d5\u21d6\u0007\u02a4\u0002",
    "\u0002\u21d6\u21da\u0007\u0109\u0002\u0002\u21d7\u21da\u0007\u02cd\u0002",
    "\u0002\u21d8\u21da\u0007\u02c4\u0002\u0002\u21d9\u21d1\u0003\u0002\u0002",
    "\u0002\u21d9\u21d3\u0003\u0002\u0002\u0002\u21d9\u21d5\u0003\u0002\u0002",
    "\u0002\u21d9\u21d7\u0003\u0002\u0002\u0002\u21d9\u21d8\u0003\u0002\u0002",
    "\u0002\u21da\u21dc\u0003\u0002\u0002\u0002\u21db\u21dd\u0007\u0327\u0002",
    "\u0002\u21dc\u21db\u0003\u0002\u0002\u0002\u21dc\u21dd\u0003\u0002\u0002",
    "\u0002\u21dd\u21f4\u0003\u0002\u0002\u0002\u21de\u21df\u0007\u013c\u0002",
    "\u0002\u21df\u21e0\u0007\u0098\u0002\u0002\u21e0\u21e1\u0005\u0378\u01bd",
    "\u0002\u21e1\u21e3\u0005\u0388\u01c5\u0002\u21e2\u21e4\u0007\u0327\u0002",
    "\u0002\u21e3\u21e2\u0003\u0002\u0002\u0002\u21e3\u21e4\u0003\u0002\u0002",
    "\u0002\u21e4\u21f4\u0003\u0002\u0002\u0002\u21e5\u21e6\u0007\u013c\u0002",
    "\u0002\u21e6\u21e7\u0007\u0190\u0002\u0002\u21e7\u21f4\u0005\u0388\u01c5",
    "\u0002\u21e8\u21e9\u0007\u013c\u0002\u0002\u21e9\u21ea\u0007\u028d\u0002",
    "\u0002\u21ea\u21f4\u0005\u0388\u01c5\u0002\u21eb\u21ec\u0007\u013c\u0002",
    "\u0002\u21ec\u21ed\u0007\u0192\u0002\u0002\u21ed\u21f4\u0005\u0388\u01c5",
    "\u0002\u21ee\u21ef\u0007\u013c\u0002\u0002\u21ef\u21f0\u0007\u0193\u0002",
    "\u0002\u21f0\u21f4\u0005\u0388\u01c5\u0002\u21f1\u21f2\u0007\u013c\u0002",
    "\u0002\u21f2\u21f4\u0005\u0334\u019b\u0002\u21f3\u21c3\u0003\u0002\u0002",
    "\u0002\u21f3\u21cd\u0003\u0002\u0002\u0002\u21f3\u21de\u0003\u0002\u0002",
    "\u0002\u21f3\u21e5\u0003\u0002\u0002\u0002\u21f3\u21e8\u0003\u0002\u0002",
    "\u0002\u21f3\u21eb\u0003\u0002\u0002\u0002\u21f3\u21ee\u0003\u0002\u0002",
    "\u0002\u21f3\u21f1\u0003\u0002\u0002\u0002\u21f4\u02bf\u0003\u0002\u0002",
    "\u0002\u21f5\u21f8\u0005\u03a8\u01d5\u0002\u21f6\u21f8\u0007\u030a\u0002",
    "\u0002\u21f7\u21f5\u0003\u0002\u0002\u0002\u21f7\u21f6\u0003\u0002\u0002",
    "\u0002\u21f8\u02c1\u0003\u0002\u0002\u0002\u21f9\u21fa\b\u0162\u0001",
    "\u0002\u21fa\u2202\u0005\u02c4\u0163\u0002\u21fb\u2202\u0005\u032a\u0196",
    "\u0002\u21fc\u2202\u0005\u02c6\u0164\u0002\u21fd\u2202\u0005\u0380\u01c1",
    "\u0002\u21fe\u2202\u0005\u02ca\u0166\u0002\u21ff\u2202\u0005\u02c8\u0165",
    "\u0002\u2200\u2202\u0005\u035a\u01ae\u0002\u2201\u21f9\u0003\u0002\u0002",
    "\u0002\u2201\u21fb\u0003\u0002\u0002\u0002\u2201\u21fc\u0003\u0002\u0002",
    "\u0002\u2201\u21fd\u0003\u0002\u0002\u0002\u2201\u21fe\u0003\u0002\u0002",
    "\u0002\u2201\u21ff\u0003\u0002\u0002\u0002\u2201\u2200\u0003\u0002\u0002",
    "\u0002\u2202\u2216\u0003\u0002\u0002\u0002\u2203\u2204\f\u0007\u0002",
    "\u0002\u2204\u2205\tf\u0002\u0002\u2205\u2215\u0005\u02c2\u0162\b\u2206",
    "\u2207\f\u0006\u0002\u0002\u2207\u2208\tg\u0002\u0002\u2208\u2215\u0005",
    "\u02c2\u0162\u0007\u2209\u220a\f\u0005\u0002\u0002\u220a\u220b\u0005",
    "\u03b0\u01d9\u0002\u220b\u220c\u0005\u02c2\u0162\u0006\u220c\u2215\u0003",
    "\u0002\u0002\u0002\u220d\u220e\f\u0004\u0002\u0002\u220e\u220f\u0005",
    "\u03b2\u01da\u0002\u220f\u2210\u0005\u02c2\u0162\u0005\u2210\u2215\u0003",
    "\u0002\u0002\u0002\u2211\u2212\f\f\u0002\u0002\u2212\u2213\u00076\u0002",
    "\u0002\u2213\u2215\u0005\u03ac\u01d7\u0002\u2214\u2203\u0003\u0002\u0002",
    "\u0002\u2214\u2206\u0003\u0002\u0002\u0002\u2214\u2209\u0003\u0002\u0002",
    "\u0002\u2214\u220d\u0003\u0002\u0002\u0002\u2214\u2211\u0003\u0002\u0002",
    "\u0002\u2215\u2218\u0003\u0002\u0002\u0002\u2216\u2214\u0003\u0002\u0002",
    "\u0002\u2216\u2217\u0003\u0002\u0002\u0002\u2217\u02c3\u0003\u0002\u0002",
    "\u0002\u2218\u2216\u0003\u0002\u0002\u0002\u2219\u221e\u0007Y\u0002",
    "\u0002\u221a\u221e\u0007\u00de\u0002\u0002\u221b\u221e\u0007\u030a\u0002",
    "\u0002\u221c\u221e\u0005\u03a8\u01d5\u0002\u221d\u2219\u0003\u0002\u0002",
    "\u0002\u221d\u221a\u0003\u0002\u0002\u0002\u221d\u221b\u0003\u0002\u0002",
    "\u0002\u221d\u221c\u0003\u0002\u0002\u0002\u221e\u02c5\u0003\u0002\u0002",
    "\u0002\u221f\u2220\u0007)\u0002\u0002\u2220\u2222\u0005\u02c2\u0162",
    "\u0002\u2221\u2223\u0005\u0338\u019d\u0002\u2222\u2221\u0003\u0002\u0002",
    "\u0002\u2223\u2224\u0003\u0002\u0002\u0002\u2224\u2222\u0003\u0002\u0002",
    "\u0002\u2224\u2225\u0003\u0002\u0002\u0002\u2225\u2228\u0003\u0002\u0002",
    "\u0002\u2226\u2227\u0007j\u0002\u0002\u2227\u2229\u0005\u02c2\u0162",
    "\u0002\u2228\u2226\u0003\u0002\u0002\u0002\u2228\u2229\u0003\u0002\u0002",
    "\u0002\u2229\u222a\u0003\u0002\u0002\u0002\u222a\u222b\u0007l\u0002",
    "\u0002\u222b\u2239\u0003\u0002\u0002\u0002\u222c\u222e\u0007)\u0002",
    "\u0002\u222d\u222f\u0005\u033a\u019e\u0002\u222e\u222d\u0003\u0002\u0002",
    "\u0002\u222f\u2230\u0003\u0002\u0002\u0002\u2230\u222e\u0003\u0002\u0002",
    "\u0002\u2230\u2231\u0003\u0002\u0002\u0002\u2231\u2234\u0003\u0002\u0002",
    "\u0002\u2232\u2233\u0007j\u0002\u0002\u2233\u2235\u0005\u02c2\u0162",
    "\u0002\u2234\u2232\u0003\u0002\u0002\u0002\u2234\u2235\u0003\u0002\u0002",
    "\u0002\u2235\u2236\u0003\u0002\u0002\u0002\u2236\u2237\u0007l\u0002",
    "\u0002\u2237\u2239\u0003\u0002\u0002\u0002\u2238\u221f\u0003\u0002\u0002",
    "\u0002\u2238\u222c\u0003\u0002\u0002\u0002\u2239\u02c7\u0003\u0002\u0002",
    "\u0002\u223a\u223b\u0007\u032e\u0002\u0002\u223b\u223f\u0005\u02c2\u0162",
    "\u0002\u223c\u223d\th\u0002\u0002\u223d\u223f\u0005\u02c2\u0162\u0002",
    "\u223e\u223a\u0003\u0002\u0002\u0002\u223e\u223c\u0003\u0002\u0002\u0002",
    "\u223f\u02c9\u0003\u0002\u0002\u0002\u2240\u2241\u0007\u0324\u0002\u0002",
    "\u2241\u2242\u0005\u02c2\u0162\u0002\u2242\u2243\u0007\u0325\u0002\u0002",
    "\u2243\u2249\u0003\u0002\u0002\u0002\u2244\u2245\u0007\u0324\u0002\u0002",
    "\u2245\u2246\u0005\u02ce\u0168\u0002\u2246\u2247\u0007\u0325\u0002\u0002",
    "\u2247\u2249\u0003\u0002\u0002\u0002\u2248\u2240\u0003\u0002\u0002\u0002",
    "\u2248\u2244\u0003\u0002\u0002\u0002\u2249\u02cb\u0003\u0002\u0002\u0002",
    "\u224a\u2253\u0007\u00de\u0002\u0002\u224b\u2253\u0005\u03a8\u01d5\u0002",
    "\u224c\u2253\u0005\u032a\u0196\u0002\u224d\u2253\u0007\u030a\u0002\u0002",
    "\u224e\u224f\u0007\u0324\u0002\u0002\u224f\u2250\u0005\u02cc\u0167\u0002",
    "\u2250\u2251\u0007\u0325\u0002\u0002\u2251\u2253\u0003\u0002\u0002\u0002",
    "\u2252\u224a\u0003\u0002\u0002\u0002\u2252\u224b\u0003\u0002\u0002\u0002",
    "\u2252\u224c\u0003\u0002\u0002\u0002\u2252\u224d\u0003\u0002\u0002\u0002",
    "\u2252\u224e\u0003\u0002\u0002\u0002\u2253\u02cd\u0003\u0002\u0002\u0002",
    "\u2254\u2255\u0005\u01bc\u00df\u0002\u2255\u02cf\u0003\u0002\u0002\u0002",
    "\u2256\u2259\u0007\u017b\u0002\u0002\u2257\u2258\u0007\u0302\u0002\u0002",
    "\u2258\u225a\u0007\u0326\u0002\u0002\u2259\u2257\u0003\u0002\u0002\u0002",
    "\u2259\u225a\u0003\u0002\u0002\u0002\u225a\u225b\u0003\u0002\u0002\u0002",
    "\u225b\u2260\u0005\u02d2\u016a\u0002\u225c\u225d\u0007\u0326\u0002\u0002",
    "\u225d\u225f\u0005\u02d2\u016a\u0002\u225e\u225c\u0003\u0002\u0002\u0002",
    "\u225f\u2262\u0003\u0002\u0002\u0002\u2260\u225e\u0003\u0002\u0002\u0002",
    "\u2260\u2261\u0003\u0002\u0002\u0002\u2261\u2271\u0003\u0002\u0002\u0002",
    "\u2262\u2260\u0003\u0002\u0002\u0002\u2263\u2264\u0007\u017b\u0002\u0002",
    "\u2264\u2269\u0007\u001f\u0002\u0002\u2265\u2266\u0007\u0324\u0002\u0002",
    "\u2266\u2267\u0005\u0320\u0191\u0002\u2267\u2268\u0007\u0325\u0002\u0002",
    "\u2268\u226a\u0003\u0002\u0002\u0002\u2269\u2265\u0003\u0002\u0002\u0002",
    "\u2269\u226a\u0003\u0002\u0002\u0002\u226a\u226b\u0003\u0002\u0002\u0002",
    "\u226b\u226c\u0007\u000f\u0002\u0002\u226c\u226d\u0007\u0324\u0002\u0002",
    "\u226d\u226e\u0005\u01bc\u00df\u0002\u226e\u226f\u0007\u0325\u0002\u0002",
    "\u226f\u2271\u0003\u0002\u0002\u0002\u2270\u2256\u0003\u0002\u0002\u0002",
    "\u2270\u2263\u0003\u0002\u0002\u0002\u2271\u02d1\u0003\u0002\u0002\u0002",
    "\u2272\u2277\u0005\u03ac\u01d7\u0002\u2273\u2274\u0007\u0324\u0002\u0002",
    "\u2274\u2275\u0005\u0384\u01c3\u0002\u2275\u2276\u0007\u0325\u0002\u0002",
    "\u2276\u2278\u0003\u0002\u0002\u0002\u2277\u2273\u0003\u0002\u0002\u0002",
    "\u2277\u2278\u0003\u0002\u0002\u0002\u2278\u2279\u0003\u0002\u0002\u0002",
    "\u2279\u227a\u0007\u000f\u0002\u0002\u227a\u227b\u0007\u0324\u0002\u0002",
    "\u227b\u227c\u0005\u01bc\u00df\u0002\u227c\u227d\u0007\u0325\u0002\u0002",
    "\u227d\u02d3\u0003\u0002\u0002\u0002\u227e\u2281\u0005\u0380\u01c1\u0002",
    "\u227f\u2281\u0007\u030a\u0002\u0002\u2280\u227e\u0003\u0002\u0002\u0002",
    "\u2280\u227f\u0003\u0002\u0002\u0002\u2281\u2284\u0003\u0002\u0002\u0002",
    "\u2282\u2285\u0007\u0313\u0002\u0002\u2283\u2285\u0005\u03b2\u01da\u0002",
    "\u2284\u2282\u0003\u0002\u0002\u0002\u2284\u2283\u0003\u0002\u0002\u0002",
    "\u2285\u2286\u0003\u0002\u0002\u0002\u2286\u228f\u0005\u02c2\u0162\u0002",
    "\u2287\u2288\u0005\u03ac\u01d7\u0002\u2288\u2289\u0007\u031f\u0002\u0002",
    "\u2289\u228a\u0005\u03ac\u01d7\u0002\u228a\u228b\u0007\u0324\u0002\u0002",
    "\u228b\u228c\u0005\u0350\u01a9\u0002\u228c\u228d\u0007\u0325\u0002\u0002",
    "\u228d\u228f\u0003\u0002\u0002\u0002\u228e\u2280\u0003\u0002\u0002\u0002",
    "\u228e\u2287\u0003\u0002\u0002\u0002\u228f\u02d5\u0003\u0002\u0002\u0002",
    "\u2290\u2295\u0005\u02d8\u016d\u0002\u2291\u2292\u0007\u0326\u0002\u0002",
    "\u2292\u2294\u0005\u02d8\u016d\u0002\u2293\u2291\u0003\u0002\u0002\u0002",
    "\u2294\u2297\u0003\u0002\u0002\u0002\u2295\u2293\u0003\u0002\u0002\u0002",
    "\u2295\u2296\u0003\u0002\u0002\u0002\u2296\u02d7\u0003\u0002\u0002\u0002",
    "\u2297\u2295\u0003\u0002\u0002\u0002\u2298\u229d\u0005\u02da\u016e\u0002",
    "\u2299\u229a\u0007\u00ec\u0002\u0002\u229a\u229c\u0005\u02da\u016e\u0002",
    "\u229b\u2299\u0003\u0002\u0002\u0002\u229c\u229f\u0003\u0002\u0002\u0002",
    "\u229d\u229b\u0003\u0002\u0002\u0002\u229d\u229e\u0003\u0002\u0002\u0002",
    "\u229e\u02d9\u0003\u0002\u0002\u0002\u229f\u229d\u0003\u0002\u0002\u0002",
    "\u22a0\u22a5\u0005\u02dc\u016f\u0002\u22a1\u22a2\u0007\n\u0002\u0002",
    "\u22a2\u22a4\u0005\u02dc\u016f\u0002\u22a3\u22a1\u0003\u0002\u0002\u0002",
    "\u22a4\u22a7\u0003\u0002\u0002\u0002\u22a5\u22a3\u0003\u0002\u0002\u0002",
    "\u22a5\u22a6\u0003\u0002\u0002\u0002\u22a6\u02db\u0003\u0002\u0002\u0002",
    "\u22a7\u22a5\u0003\u0002\u0002\u0002\u22a8\u22aa\u0007\u00db\u0002\u0002",
    "\u22a9\u22a8\u0003\u0002\u0002\u0002\u22a9\u22aa\u0003\u0002\u0002\u0002",
    "\u22aa\u22ab\u0003\u0002\u0002\u0002\u22ab\u22ac\u0005\u02de\u0170\u0002",
    "\u22ac\u02dd\u0003\u0002\u0002\u0002\u22ad\u22ae\u0007w\u0002\u0002",
    "\u22ae\u22af\u0007\u0324\u0002\u0002\u22af\u22b0\u0005\u02ce\u0168\u0002",
    "\u22b0\u22b1\u0007\u0325\u0002\u0002\u22b1\u22e5\u0003\u0002\u0002\u0002",
    "\u22b2\u22b3\u0005\u02c2\u0162\u0002\u22b3\u22b4\u0005\u03b0\u01d9\u0002",
    "\u22b4\u22b5\u0005\u02c2\u0162\u0002\u22b5\u22e5\u0003\u0002\u0002\u0002",
    "\u22b6\u22b7\u0005\u02c2\u0162\u0002\u22b7\u22b8\u0005\u03b0\u01d9\u0002",
    "\u22b8\u22b9\ti\u0002\u0002\u22b9\u22ba\u0007\u0324\u0002\u0002\u22ba",
    "\u22bb\u0005\u02ce\u0168\u0002\u22bb\u22bc\u0007\u0325\u0002\u0002\u22bc",
    "\u22e5\u0003\u0002\u0002\u0002\u22bd\u22bf\u0005\u02c2\u0162\u0002\u22be",
    "\u22c0\u0007\u00db\u0002\u0002\u22bf\u22be\u0003\u0002\u0002\u0002\u22bf",
    "\u22c0\u0003\u0002\u0002\u0002\u22c0\u22c1\u0003\u0002\u0002\u0002\u22c1",
    "\u22c2\u0007\u001c\u0002\u0002\u22c2\u22c3\u0005\u02c2\u0162\u0002\u22c3",
    "\u22c4\u0007\n\u0002\u0002\u22c4\u22c5\u0005\u02c2\u0162\u0002\u22c5",
    "\u22e5\u0003\u0002\u0002\u0002\u22c6\u22c8\u0005\u02c2\u0162\u0002\u22c7",
    "\u22c9\u0007\u00db\u0002\u0002\u22c8\u22c7\u0003\u0002\u0002\u0002\u22c8",
    "\u22c9\u0003\u0002\u0002\u0002\u22c9\u22ca\u0003\u0002\u0002\u0002\u22ca",
    "\u22cb\u0007\u009a\u0002\u0002\u22cb\u22ce\u0007\u0324\u0002\u0002\u22cc",
    "\u22cf\u0005\u02ce\u0168\u0002\u22cd\u22cf\u0005\u0350\u01a9\u0002\u22ce",
    "\u22cc\u0003\u0002\u0002\u0002\u22ce\u22cd\u0003\u0002\u0002\u0002\u22cf",
    "\u22d0\u0003\u0002\u0002\u0002\u22d0\u22d1\u0007\u0325\u0002\u0002\u22d1",
    "\u22e5\u0003\u0002\u0002\u0002\u22d2\u22d4\u0005\u02c2\u0162\u0002\u22d3",
    "\u22d5\u0007\u00db\u0002\u0002\u22d4\u22d3\u0003\u0002\u0002\u0002\u22d4",
    "\u22d5\u0003\u0002\u0002\u0002\u22d5\u22d6\u0003\u0002\u0002\u0002\u22d6",
    "\u22d7\u0007\u00b3\u0002\u0002\u22d7\u22da\u0005\u02c2\u0162\u0002\u22d8",
    "\u22d9\u0007o\u0002\u0002\u22d9\u22db\u0005\u02c2\u0162\u0002\u22da",
    "\u22d8\u0003\u0002\u0002\u0002\u22da\u22db\u0003\u0002\u0002\u0002\u22db",
    "\u22e5\u0003\u0002\u0002\u0002\u22dc\u22dd\u0005\u02c2\u0162\u0002\u22dd",
    "\u22de\u0007\u00a7\u0002\u0002\u22de\u22df\u0005\u038c\u01c7\u0002\u22df",
    "\u22e5\u0003\u0002\u0002\u0002\u22e0\u22e1\u0007\u0324\u0002\u0002\u22e1",
    "\u22e2\u0005\u02d8\u016d\u0002\u22e2\u22e3\u0007\u0325\u0002\u0002\u22e3",
    "\u22e5\u0003\u0002\u0002\u0002\u22e4\u22ad\u0003\u0002\u0002\u0002\u22e4",
    "\u22b2\u0003\u0002\u0002\u0002\u22e4\u22b6\u0003\u0002\u0002\u0002\u22e4",
    "\u22bd\u0003\u0002\u0002\u0002\u22e4\u22c6\u0003\u0002\u0002\u0002\u22e4",
    "\u22d2\u0003\u0002\u0002\u0002\u22e4\u22dc\u0003\u0002\u0002\u0002\u22e4",
    "\u22e0\u0003\u0002\u0002\u0002\u22e5\u02df\u0003\u0002\u0002\u0002\u22e6",
    "\u22ec\u0005\u02e4\u0173\u0002\u22e7\u22e8\u0007\u0324\u0002\u0002\u22e8",
    "\u22e9\u0005\u02e0\u0171\u0002\u22e9\u22ea\u0007\u0325\u0002\u0002\u22ea",
    "\u22ec\u0003\u0002\u0002\u0002\u22eb\u22e6\u0003\u0002\u0002\u0002\u22eb",
    "\u22e7\u0003\u0002\u0002\u0002\u22ec\u22f0\u0003\u0002\u0002\u0002\u22ed",
    "\u22ef\u0005\u02e2\u0172\u0002\u22ee\u22ed\u0003\u0002\u0002\u0002\u22ef",
    "\u22f2\u0003\u0002\u0002\u0002\u22f0\u22ee\u0003\u0002\u0002\u0002\u22f0",
    "\u22f1\u0003\u0002\u0002\u0002\u22f1\u02e1\u0003\u0002\u0002\u0002\u22f2",
    "\u22f0\u0003\u0002\u0002\u0002\u22f3\u22f5\u0007\u0166\u0002\u0002\u22f4",
    "\u22f6\u0007\u0005\u0002\u0002\u22f5\u22f4\u0003\u0002\u0002\u0002\u22f5",
    "\u22f6\u0003\u0002\u0002\u0002\u22f6\u22fa\u0003\u0002\u0002\u0002\u22f7",
    "\u22fa\u0007t\u0002\u0002\u22f8\u22fa\u0007\u00a3\u0002\u0002\u22f9",
    "\u22f3\u0003\u0002\u0002\u0002\u22f9\u22f7\u0003\u0002\u0002\u0002\u22f9",
    "\u22f8\u0003\u0002\u0002\u0002\u22fa\u2300\u0003\u0002\u0002\u0002\u22fb",
    "\u2301\u0005\u02e4\u0173\u0002\u22fc\u22fd\u0007\u0324\u0002\u0002\u22fd",
    "\u22fe\u0005\u02e0\u0171\u0002\u22fe\u22ff\u0007\u0325\u0002\u0002\u22ff",
    "\u2301\u0003\u0002\u0002\u0002\u2300\u22fb\u0003\u0002\u0002\u0002\u2300",
    "\u22fc\u0003\u0002\u0002\u0002\u2301\u02e3\u0003\u0002\u0002\u0002\u2302",
    "\u2304\u0007\u0131\u0002\u0002\u2303\u2305\tj\u0002\u0002\u2304\u2303",
    "\u0003\u0002\u0002\u0002\u2304\u2305\u0003\u0002\u0002\u0002\u2305\u2307",
    "\u0003\u0002\u0002\u0002\u2306\u2308\u0005\u02e6\u0174\u0002\u2307\u2306",
    "\u0003\u0002\u0002\u0002\u2307\u2308\u0003\u0002\u0002\u0002\u2308\u2309",
    "\u0003\u0002\u0002\u0002\u2309\u230c\u0005\u02fc\u017f\u0002\u230a\u230b",
    "\u0007\u00a4\u0002\u0002\u230b\u230d\u0005\u0378\u01bd\u0002\u230c\u230a",
    "\u0003\u0002\u0002\u0002\u230c\u230d\u0003\u0002\u0002\u0002\u230d\u2310",
    "\u0003\u0002\u0002\u0002\u230e\u230f\u0007\u008b\u0002\u0002\u230f\u2311",
    "\u0005\u030a\u0186\u0002\u2310\u230e\u0003\u0002\u0002\u0002\u2310\u2311",
    "\u0003\u0002\u0002\u0002\u2311\u2314\u0003\u0002\u0002\u0002\u2312\u2313",
    "\u0007\u0178\u0002\u0002\u2313\u2315\u0005\u02d8\u016d\u0002\u2314\u2312",
    "\u0003\u0002\u0002\u0002\u2314\u2315\u0003\u0002\u0002\u0002\u2315\u2323",
    "\u0003\u0002\u0002\u0002\u2316\u2317\u0007\u0092\u0002\u0002\u2317\u2319",
    "\u0007%\u0002\u0002\u2318\u231a\u0007\u0005\u0002\u0002\u2319\u2318",
    "\u0003\u0002\u0002\u0002\u2319\u231a\u0003\u0002\u0002\u0002\u231a\u231b",
    "\u0003\u0002\u0002\u0002\u231b\u2320\u0005\u02f4\u017b\u0002\u231c\u231d",
    "\u0007\u0326\u0002\u0002\u231d\u231f\u0005\u02f4\u017b\u0002\u231e\u231c",
    "\u0003\u0002\u0002\u0002\u231f\u2322\u0003\u0002\u0002\u0002\u2320\u231e",
    "\u0003\u0002\u0002\u0002\u2320\u2321\u0003\u0002\u0002\u0002\u2321\u2324",
    "\u0003\u0002\u0002\u0002\u2322\u2320\u0003\u0002\u0002\u0002\u2323\u2316",
    "\u0003\u0002\u0002\u0002\u2323\u2324\u0003\u0002\u0002\u0002\u2324\u2327",
    "\u0003\u0002\u0002\u0002\u2325\u2326\u0007\u0093\u0002\u0002\u2326\u2328",
    "\u0005\u02d8\u016d\u0002\u2327\u2325\u0003\u0002\u0002\u0002\u2327\u2328",
    "\u0003\u0002\u0002\u0002\u2328\u02e5\u0003\u0002\u0002\u0002\u2329\u232c",
    "\u0007\u015d\u0002\u0002\u232a\u232d\u0005\u02e8\u0175\u0002\u232b\u232d",
    "\u0005\u02ea\u0176\u0002\u232c\u232a\u0003\u0002\u0002\u0002\u232c\u232b",
    "\u0003\u0002\u0002\u0002\u232d\u2330\u0003\u0002\u0002\u0002\u232e\u232f",
    "\u0007\u017b\u0002\u0002\u232f\u2331\u0007\u02e3\u0002\u0002\u2330\u232e",
    "\u0003\u0002\u0002\u0002\u2330\u2331\u0003\u0002\u0002\u0002\u2331\u02e7",
    "\u0003\u0002\u0002\u0002\u2332\u2333\tk\u0002\u0002\u2333\u233a\u0007",
    "\u00f4\u0002\u0002\u2334\u2335\u0007\u0324\u0002\u0002\u2335\u2336\u0005",
    "\u02c2\u0162\u0002\u2336\u2337\u0007\u0325\u0002\u0002\u2337\u2338\u0007",
    "\u00f4\u0002\u0002\u2338\u233a\u0003\u0002\u0002\u0002\u2339\u2332\u0003",
    "\u0002\u0002\u0002\u2339\u2334\u0003\u0002\u0002\u0002\u233a\u02e9\u0003",
    "\u0002\u0002\u0002\u233b\u2341\u0007\u030b\u0002\u0002\u233c\u233d\u0007",
    "\u0324\u0002\u0002\u233d\u233e\u0005\u02c2\u0162\u0002\u233e\u233f\u0007",
    "\u0325\u0002\u0002\u233f\u2341\u0003\u0002\u0002\u0002\u2340\u233b\u0003",
    "\u0002\u0002\u0002\u2340\u233c\u0003\u0002\u0002\u0002\u2341\u02eb\u0003",
    "\u0002\u0002\u0002\u2342\u2343\u0007\u00ed\u0002\u0002\u2343\u2344\u0007",
    "%\u0002\u0002\u2344\u2349\u0005\u02f2\u017a\u0002\u2345\u2346\u0007",
    "\u0326\u0002\u0002\u2346\u2348\u0005\u02f2\u017a\u0002\u2347\u2345\u0003",
    "\u0002\u0002\u0002\u2348\u234b\u0003\u0002\u0002\u0002\u2349\u2347\u0003",
    "\u0002\u0002\u0002\u2349\u234a\u0003\u0002\u0002\u0002\u234a\u2357\u0003",
    "\u0002\u0002\u0002\u234b\u2349\u0003\u0002\u0002\u0002\u234c\u234d\u0007",
    "\u026b\u0002\u0002\u234d\u234e\u0005\u02c2\u0162\u0002\u234e\u2355\t",
    "l\u0002\u0002\u234f\u2350\u0007\u0080\u0002\u0002\u2350\u2351\tm\u0002",
    "\u0002\u2351\u2352\u0005\u02c2\u0162\u0002\u2352\u2353\tl\u0002\u0002",
    "\u2353\u2354\u0007\u026e\u0002\u0002\u2354\u2356\u0003\u0002\u0002\u0002",
    "\u2355\u234f\u0003\u0002\u0002\u0002\u2355\u2356\u0003\u0002\u0002\u0002",
    "\u2356\u2358\u0003\u0002\u0002\u0002\u2357\u234c\u0003\u0002\u0002\u0002",
    "\u2357\u2358\u0003\u0002\u0002\u0002\u2358\u02ed\u0003\u0002\u0002\u0002",
    "\u2359\u235a\u0007\u0085\u0002\u0002\u235a\u2372\u0007!\u0002\u0002",
    "\u235b\u235c\u0007\u0085\u0002\u0002\u235c\u235e\u0007\u0301\u0002\u0002",
    "\u235d\u235f\u0005\u02f0\u0179\u0002\u235e\u235d\u0003\u0002\u0002\u0002",
    "\u235e\u235f\u0003\u0002\u0002\u0002\u235f\u2372\u0003\u0002\u0002\u0002",
    "\u2360\u2361\u0007\u0085\u0002\u0002\u2361\u2362\u0007\u0301\u0002\u0002",
    "\u2362\u2364\tn\u0002\u0002\u2363\u2365\u0007\u0326\u0002\u0002\u2364",
    "\u2363\u0003\u0002\u0002\u0002\u2364\u2365\u0003\u0002\u0002\u0002\u2365",
    "\u2369\u0003\u0002\u0002\u0002\u2366\u2367\u0007\u0324\u0002\u0002\u2367",
    "\u2368\u0007\u030f\u0002\u0002\u2368\u236a\u0007\u0325\u0002\u0002\u2369",
    "\u2366\u0003\u0002\u0002\u0002\u2369\u236a\u0003\u0002\u0002\u0002\u236a",
    "\u236e\u0003\u0002\u0002\u0002\u236b\u236d\u0005\u02f0\u0179\u0002\u236c",
    "\u236b\u0003\u0002\u0002\u0002\u236d\u2370\u0003\u0002\u0002\u0002\u236e",
    "\u236c\u0003\u0002\u0002\u0002\u236e\u236f\u0003\u0002\u0002\u0002\u236f",
    "\u2372\u0003\u0002\u0002\u0002\u2370\u236e\u0003\u0002\u0002\u0002\u2371",
    "\u2359\u0003\u0002\u0002\u0002\u2371\u235b\u0003\u0002\u0002\u0002\u2371",
    "\u2360\u0003\u0002\u0002\u0002\u2372\u02ef\u0003\u0002\u0002\u0002\u2373",
    "\u2374\u0007\u0326\u0002\u0002\u2374\u2375\to\u0002\u0002\u2375\u02f1",
    "\u0003\u0002\u0002\u0002\u2376\u2378\u0005\u02c2\u0162\u0002\u2377\u2379",
    "\tp\u0002\u0002\u2378\u2377\u0003\u0002\u0002\u0002\u2378\u2379\u0003",
    "\u0002\u0002\u0002\u2379\u02f3\u0003\u0002\u0002\u0002\u237a\u237b\u0005",
    "\u02c2\u0162\u0002\u237b\u02f5\u0003\u0002\u0002\u0002\u237c\u237d\u0007",
    "\u00eb\u0002\u0002\u237d\u237e\u0007\u0324\u0002\u0002\u237e\u2383\u0005",
    "\u02f8\u017d\u0002\u237f\u2380\u0007\u0326\u0002\u0002\u2380\u2382\u0005",
    "\u02f8\u017d\u0002\u2381\u237f\u0003\u0002\u0002\u0002\u2382\u2385\u0003",
    "\u0002\u0002\u0002\u2383\u2381\u0003\u0002\u0002\u0002\u2383\u2384\u0003",
    "\u0002\u0002\u0002\u2384\u2386\u0003\u0002\u0002\u0002\u2385\u2383\u0003",
    "\u0002\u0002\u0002\u2386\u2387\u0007\u0325\u0002\u0002\u2387\u02f7\u0003",
    "\u0002\u0002\u0002\u2388\u2389\u0007\u01f8\u0002\u0002\u2389\u23b6\u0007",
    "\u030b\u0002\u0002\u238a\u238b\tq\u0002\u0002\u238b\u23b6\u0007\u0092",
    "\u0002\u0002\u238c\u238d\tr\u0002\u0002\u238d\u23b6\u0007\u0166\u0002",
    "\u0002\u238e\u238f\ts\u0002\u0002\u238f\u23b6\u0007\u00a9\u0002\u0002",
    "\u2390\u2391\u0007\u01f1\u0002\u0002\u2391\u23b6\u0007\u02fc\u0002\u0002",
    "\u2392\u2393\u0007\u0202\u0002\u0002\u2393\u23b6\u0007\u00ed\u0002\u0002",
    "\u2394\u23b6\u0007\u0218\u0002\u0002\u2395\u2396\u0007\u0225\u0002\u0002",
    "\u2396\u23b6\u0007\u00fa\u0002\u0002\u2397\u2398\u0007\u0226\u0002\u0002",
    "\u2398\u23b6\u0007\u00fa\u0002\u0002\u2399\u239a\u0007\u0246\u0002\u0002",
    "\u239a\u23b6\u0007\u030b\u0002\u0002\u239b\u239c\u0007\u0248\u0002\u0002",
    "\u239c\u23b6\u0007\u030b\u0002\u0002\u239d\u239e\u0007\u0271\u0002\u0002",
    "\u239e\u239f\u0007\u0085\u0002\u0002\u239f\u23a0\u0007\u0324\u0002\u0002",
    "\u23a0\u23a5\u0005\u02fa\u017e\u0002\u23a1\u23a2\u0007\u0326\u0002\u0002",
    "\u23a2\u23a4\u0005\u02fa\u017e\u0002\u23a3\u23a1\u0003\u0002\u0002\u0002",
    "\u23a4\u23a7\u0003\u0002\u0002\u0002\u23a5\u23a3\u0003\u0002\u0002\u0002",
    "\u23a5\u23a6\u0003\u0002\u0002\u0002\u23a6\u23a8\u0003\u0002\u0002\u0002",
    "\u23a7\u23a5\u0003\u0002\u0002\u0002\u23a8\u23a9\u0007\u0325\u0002\u0002",
    "\u23a9\u23b6\u0003\u0002\u0002\u0002\u23aa\u23ab\u0007\u0271\u0002\u0002",
    "\u23ab\u23ac\u0007\u0085\u0002\u0002\u23ac\u23b6\u0007\u02f4\u0002\u0002",
    "\u23ad\u23ae\u0007\u0276\u0002\u0002\u23ae\u23b6\tJ\u0002\u0002\u23af",
    "\u23b6\u0007\u0299\u0002\u0002\u23b0\u23b1\u0007\u02ad\u0002\u0002\u23b1",
    "\u23b6\u0007\u00fa\u0002\u0002\u23b2\u23b3\u0007\u016e\u0002\u0002\u23b3",
    "\u23b4\u0007\u00fa\u0002\u0002\u23b4\u23b6\u0007\u030f\u0002\u0002\u23b5",
    "\u2388\u0003\u0002\u0002\u0002\u23b5\u238a\u0003\u0002\u0002\u0002\u23b5",
    "\u238c\u0003\u0002\u0002\u0002\u23b5\u238e\u0003\u0002\u0002\u0002\u23b5",
    "\u2390\u0003\u0002\u0002\u0002\u23b5\u2392\u0003\u0002\u0002\u0002\u23b5",
    "\u2394\u0003\u0002\u0002\u0002\u23b5\u2395\u0003\u0002\u0002\u0002\u23b5",
    "\u2397\u0003\u0002\u0002\u0002\u23b5\u2399\u0003\u0002\u0002\u0002\u23b5",
    "\u239b\u0003\u0002\u0002\u0002\u23b5\u239d\u0003\u0002\u0002\u0002\u23b5",
    "\u23aa\u0003\u0002\u0002\u0002\u23b5\u23ad\u0003\u0002\u0002\u0002\u23b5",
    "\u23af\u0003\u0002\u0002\u0002\u23b5\u23b0\u0003\u0002\u0002\u0002\u23b5",
    "\u23b2\u0003\u0002\u0002\u0002\u23b6\u02f9\u0003\u0002\u0002\u0002\u23b7",
    "\u23be\u0007\u030a\u0002\u0002\u23b8\u23bf\u0007\u02f4\u0002\u0002\u23b9",
    "\u23bc\u0007\u0313\u0002\u0002\u23ba\u23bd\u0005\u03a8\u01d5\u0002\u23bb",
    "\u23bd\u0007\u00de\u0002\u0002\u23bc\u23ba\u0003\u0002\u0002\u0002\u23bc",
    "\u23bb\u0003\u0002\u0002\u0002\u23bd\u23bf\u0003\u0002\u0002\u0002\u23be",
    "\u23b8\u0003\u0002\u0002\u0002\u23be\u23b9\u0003\u0002\u0002\u0002\u23bf",
    "\u02fb\u0003\u0002\u0002\u0002\u23c0\u23c5\u0005\u0308\u0185\u0002\u23c1",
    "\u23c2\u0007\u0326\u0002\u0002\u23c2\u23c4\u0005\u0308\u0185\u0002\u23c3",
    "\u23c1\u0003\u0002\u0002\u0002\u23c4\u23c7\u0003\u0002\u0002\u0002\u23c5",
    "\u23c3\u0003\u0002\u0002\u0002\u23c5\u23c6\u0003\u0002\u0002\u0002\u23c6",
    "\u02fd\u0003\u0002\u0002\u0002\u23c7\u23c5\u0003\u0002\u0002\u0002\u23c8",
    "\u23c9\u0007\u0324\u0002\u0002\u23c9\u23ce\u0005\u0270\u0139\u0002\u23ca",
    "\u23cb\u0007\u0326\u0002\u0002\u23cb\u23cd\u0005\u0270\u0139\u0002\u23cc",
    "\u23ca\u0003\u0002\u0002\u0002\u23cd\u23d0\u0003\u0002\u0002\u0002\u23ce",
    "\u23cc\u0003\u0002\u0002\u0002\u23ce\u23cf\u0003\u0002\u0002\u0002\u23cf",
    "\u23d1\u0003\u0002\u0002\u0002\u23d0\u23ce\u0003\u0002\u0002\u0002\u23d1",
    "\u23d2\u0007\u0325\u0002\u0002\u23d2\u02ff\u0003\u0002\u0002\u0002\u23d3",
    "\u23d9\u0007\u0329\u0002\u0002\u23d4\u23d5\u0005\u0378\u01bd\u0002\u23d5",
    "\u23d6\u0007\u031f\u0002\u0002\u23d6\u23d7\u0005\u0300\u0181\u0002\u23d7",
    "\u23d9\u0003\u0002\u0002\u0002\u23d8\u23d3\u0003\u0002\u0002\u0002\u23d8",
    "\u23d4\u0003\u0002\u0002\u0002\u23d9\u0301\u0003\u0002\u0002\u0002\u23da",
    "\u23db\u0005\u0378\u01bd\u0002\u23db\u23dc\u0007\u031f\u0002\u0002\u23dc",
    "\u23de\u0003\u0002\u0002\u0002\u23dd\u23da\u0003\u0002\u0002\u0002\u23dd",
    "\u23de\u0003\u0002\u0002\u0002\u23de\u23e4\u0003\u0002\u0002\u0002\u23df",
    "\u23e5\u0005\u03ac\u01d7\u0002\u23e0\u23e1\u0007\u0323\u0002\u0002\u23e1",
    "\u23e5\u0007\u0096\u0002\u0002\u23e2\u23e3\u0007\u0323\u0002\u0002\u23e3",
    "\u23e5\u0007\u02b1\u0002\u0002\u23e4\u23df\u0003\u0002\u0002\u0002\u23e4",
    "\u23e0\u0003\u0002\u0002\u0002\u23e4\u23e2\u0003\u0002\u0002\u0002\u23e5",
    "\u23e7\u0003\u0002\u0002\u0002\u23e6\u23e8\u0005\u033c\u019f\u0002\u23e7",
    "\u23e6\u0003\u0002\u0002\u0002\u23e7\u23e8\u0003\u0002\u0002\u0002\u23e8",
    "\u0303\u0003\u0002\u0002\u0002\u23e9\u23ea\u0005\u03ac\u01d7\u0002\u23ea",
    "\u23eb\u0007\u031f\u0002\u0002\u23eb\u23ec\u0005\u03ac\u01d7\u0002\u23ec",
    "\u23ee\u0005\u02fe\u0180\u0002\u23ed\u23ef\u0005\u033c\u019f\u0002\u23ee",
    "\u23ed\u0003\u0002\u0002\u0002\u23ee\u23ef\u0003\u0002\u0002\u0002\u23ef",
    "\u23fb\u0003\u0002\u0002\u0002\u23f0\u23f1\u0005\u03ac\u01d7\u0002\u23f1",
    "\u23f2\u0007\u0328\u0002\u0002\u23f2\u23f3\u0007\u0328\u0002\u0002\u23f3",
    "\u23f5\u0005\u03ac\u01d7\u0002\u23f4\u23f6\u0005\u02fe\u0180\u0002\u23f5",
    "\u23f4\u0003\u0002\u0002\u0002\u23f5\u23f6\u0003\u0002\u0002\u0002\u23f6",
    "\u23f8\u0003\u0002\u0002\u0002\u23f7\u23f9\u0005\u033c\u019f\u0002\u23f8",
    "\u23f7\u0003\u0002\u0002\u0002\u23f8\u23f9\u0003\u0002\u0002\u0002\u23f9",
    "\u23fb\u0003\u0002\u0002\u0002\u23fa\u23e9\u0003\u0002\u0002\u0002\u23fa",
    "\u23f0\u0003\u0002\u0002\u0002\u23fb\u0305\u0003\u0002\u0002\u0002\u23fc",
    "\u23fd\u0005\u034c\u01a7\u0002\u23fd\u23fe\u0007\u0313\u0002\u0002\u23fe",
    "\u23ff\u0005\u02c2\u0162\u0002\u23ff\u2405\u0003\u0002\u0002\u0002\u2400",
    "\u2402\u0005\u02c2\u0162\u0002\u2401\u2403\u0005\u033c\u019f\u0002\u2402",
    "\u2401\u0003\u0002\u0002\u0002\u2402\u2403\u0003\u0002\u0002\u0002\u2403",
    "\u2405\u0003\u0002\u0002\u0002\u2404\u23fc\u0003\u0002\u0002\u0002\u2404",
    "\u2400\u0003\u0002\u0002\u0002\u2405\u0307\u0003\u0002\u0002\u0002\u2406",
    "\u240b\u0005\u0300\u0181\u0002\u2407\u240b\u0005\u0302\u0182\u0002\u2408",
    "\u240b\u0005\u0304\u0183\u0002\u2409\u240b\u0005\u0306\u0184\u0002\u240a",
    "\u2406\u0003\u0002\u0002\u0002\u240a\u2407\u0003\u0002\u0002\u0002\u240a",
    "\u2408\u0003\u0002\u0002\u0002\u240a\u2409\u0003\u0002\u0002\u0002\u240b",
    "\u0309\u0003\u0002\u0002\u0002\u240c\u2411\u0005\u030c\u0187\u0002\u240d",
    "\u240e\u0007\u0326\u0002\u0002\u240e\u2410\u0005\u030c\u0187\u0002\u240f",
    "\u240d\u0003\u0002\u0002\u0002\u2410\u2413\u0003\u0002\u0002\u0002\u2411",
    "\u240f\u0003\u0002\u0002\u0002\u2411\u2412\u0003\u0002\u0002\u0002\u2412",
    "\u030b\u0003\u0002\u0002\u0002\u2413\u2411\u0003\u0002\u0002\u0002\u2414",
    "\u241a\u0005\u030e\u0188\u0002\u2415\u2416\u0007\u0324\u0002\u0002\u2416",
    "\u2417\u0005\u030e\u0188\u0002\u2417\u2418\u0007\u0325\u0002\u0002\u2418",
    "\u241a\u0003\u0002\u0002\u0002\u2419\u2414\u0003\u0002\u0002\u0002\u2419",
    "\u2415\u0003\u0002\u0002\u0002\u241a\u030d\u0003\u0002\u0002\u0002\u241b",
    "\u241f\u0005\u0310\u0189\u0002\u241c\u241e\u0005\u031a\u018e\u0002\u241d",
    "\u241c\u0003\u0002\u0002\u0002\u241e\u2421\u0003\u0002\u0002\u0002\u241f",
    "\u241d\u0003\u0002\u0002\u0002\u241f\u2420\u0003\u0002\u0002\u0002\u2420",
    "\u030f\u0003\u0002\u0002\u0002\u2421\u241f\u0003\u0002\u0002\u0002\u2422",
    "\u2424\u0005\u0322\u0192\u0002\u2423\u2425\u0005\u033e\u01a0\u0002\u2424",
    "\u2423\u0003\u0002\u0002\u0002\u2424\u2425\u0003\u0002\u0002\u0002\u2425",
    "\u2451\u0003\u0002\u0002\u0002\u2426\u2428\u0005\u0376\u01bc\u0002\u2427",
    "\u2429\u0005\u033e\u01a0\u0002\u2428\u2427\u0003\u0002\u0002\u0002\u2428",
    "\u2429\u0003\u0002\u0002\u0002\u2429\u2451\u0003\u0002\u0002\u0002\u242a",
    "\u242c\u0005\u0324\u0193\u0002\u242b\u242d\u0005\u033e\u01a0\u0002\u242c",
    "\u242b\u0003\u0002\u0002\u0002\u242c\u242d\u0003\u0002\u0002\u0002\u242d",
    "\u2451\u0003\u0002\u0002\u0002\u242e\u2433\u0005\u0328\u0195\u0002\u242f",
    "\u2431\u0005\u033e\u01a0\u0002\u2430\u2432\u0005\u034a\u01a6\u0002\u2431",
    "\u2430\u0003\u0002\u0002\u0002\u2431\u2432\u0003\u0002\u0002\u0002\u2432",
    "\u2434\u0003\u0002\u0002\u0002\u2433\u242f\u0003\u0002\u0002\u0002\u2433",
    "\u2434\u0003\u0002\u0002\u0002\u2434\u2451\u0003\u0002\u0002\u0002\u2435",
    "\u2436\u0005\u0318\u018d\u0002\u2436\u2437\u0005\u033e\u01a0\u0002\u2437",
    "\u2451\u0003\u0002\u0002\u0002\u2438\u243a\u0005\u032a\u0196\u0002\u2439",
    "\u243b\u0005\u033e\u01a0\u0002\u243a\u2439\u0003\u0002\u0002\u0002\u243a",
    "\u243b\u0003\u0002\u0002\u0002\u243b\u2451\u0003\u0002\u0002\u0002\u243c",
    "\u243e\u0007\u030a\u0002\u0002\u243d\u243f\u0005\u033e\u01a0\u0002\u243e",
    "\u243d\u0003\u0002\u0002\u0002\u243e\u243f\u0003\u0002\u0002\u0002\u243f",
    "\u2451\u0003\u0002\u0002\u0002\u2440\u2441\u0007\u030a\u0002\u0002\u2441",
    "\u2442\u0007\u031f\u0002\u0002\u2442\u2447\u0005\u032a\u0196\u0002\u2443",
    "\u2445\u0005\u033e\u01a0\u0002\u2444\u2446\u0005\u034a\u01a6\u0002\u2445",
    "\u2444\u0003\u0002\u0002\u0002\u2445\u2446\u0003\u0002\u0002\u0002\u2446",
    "\u2448\u0003\u0002\u0002\u0002\u2447\u2443\u0003\u0002\u0002\u0002\u2447",
    "\u2448\u0003\u0002\u0002\u0002\u2448\u2451\u0003\u0002\u0002\u0002\u2449",
    "\u2451\u0005\u0312\u018a\u0002\u244a\u244b\u0007\u0328\u0002\u0002\u244b",
    "\u244c\u0007\u0328\u0002\u0002\u244c\u244e\u0005\u032a\u0196\u0002\u244d",
    "\u244f\u0005\u033e\u01a0\u0002\u244e\u244d\u0003\u0002\u0002\u0002\u244e",
    "\u244f\u0003\u0002\u0002\u0002\u244f\u2451\u0003\u0002\u0002\u0002\u2450",
    "\u2422\u0003\u0002\u0002\u0002\u2450\u2426\u0003\u0002\u0002\u0002\u2450",
    "\u242a\u0003\u0002\u0002\u0002\u2450\u242e\u0003\u0002\u0002\u0002\u2450",
    "\u2435\u0003\u0002\u0002\u0002\u2450\u2438\u0003\u0002\u0002\u0002\u2450",
    "\u243c\u0003\u0002\u0002\u0002\u2450\u2440\u0003\u0002\u0002\u0002\u2450",
    "\u2449\u0003\u0002\u0002\u0002\u2450\u244a\u0003\u0002\u0002\u0002\u2451",
    "\u0311\u0003\u0002\u0002\u0002\u2452\u2453\u0007\u00ea\u0002\u0002\u2453",
    "\u2454\u0007\u0324\u0002\u0002\u2454\u2455\u0005\u02c2\u0162\u0002\u2455",
    "\u2456\u0007\u0326\u0002\u0002\u2456\u2459\u0005\u02c2\u0162\u0002\u2457",
    "\u2458\u0007\u0326\u0002\u0002\u2458\u245a\u0005\u02c2\u0162\u0002\u2459",
    "\u2457\u0003\u0002\u0002\u0002\u2459\u245a\u0003\u0002\u0002\u0002\u245a",
    "\u245b\u0003\u0002\u0002\u0002\u245b\u2461\u0007\u0325\u0002\u0002\u245c",
    "\u245d\u0007\u017b\u0002\u0002\u245d\u245e\u0007\u0324\u0002\u0002\u245e",
    "\u245f\u0005\u0314\u018b\u0002\u245f\u2460\u0007\u0325\u0002\u0002\u2460",
    "\u2462\u0003\u0002\u0002\u0002\u2461\u245c\u0003\u0002\u0002\u0002\u2461",
    "\u2462\u0003\u0002\u0002\u0002\u2462\u0313\u0003\u0002\u0002\u0002\u2463",
    "\u2468\u0005\u0316\u018c\u0002\u2464\u2465\u0007\u0326\u0002\u0002\u2465",
    "\u2467\u0005\u0316\u018c\u0002\u2466\u2464\u0003\u0002\u0002\u0002\u2467",
    "\u246a\u0003\u0002\u0002\u0002\u2468\u2466\u0003\u0002\u0002\u0002\u2468",
    "\u2469\u0003\u0002\u0002\u0002\u2469\u0315\u0003\u0002\u0002\u0002\u246a",
    "\u2468\u0003\u0002\u0002\u0002\u246b\u246c\u0007\u030c\u0002\u0002\u246c",
    "\u246e\u0005\u03a4\u01d3\u0002\u246d\u246f\u0007\u030f\u0002\u0002\u246e",
    "\u246d\u0003\u0002\u0002\u0002\u246e\u246f\u0003\u0002\u0002\u0002\u246f",
    "\u0317\u0003\u0002\u0002\u0002\u2470\u2471\u0007+\u0002\u0002\u2471",
    "\u2472\u0007\u0324\u0002\u0002\u2472\u2473\u0007,\u0002\u0002\u2473",
    "\u2474\u0005\u0378\u01bd\u0002\u2474\u2475\u0007\u0326\u0002\u0002\u2475",
    "\u2476\tt\u0002\u0002\u2476\u2477\u0007\u0325\u0002\u0002\u2477\u0319",
    "\u0003\u0002\u0002\u0002\u2478\u247a\u0007\u00a0\u0002\u0002\u2479\u2478",
    "\u0003\u0002\u0002\u0002\u2479\u247a\u0003\u0002\u0002\u0002\u247a\u2480",
    "\u0003\u0002\u0002\u0002\u247b\u247d\tu\u0002\u0002\u247c\u247e\u0007",
    "\u00ee\u0002\u0002\u247d\u247c\u0003\u0002\u0002\u0002\u247d\u247e\u0003",
    "\u0002\u0002\u0002\u247e\u2480\u0003\u0002\u0002\u0002\u247f\u2479\u0003",
    "\u0002\u0002\u0002\u247f\u247b\u0003\u0002\u0002\u0002\u2480\u2482\u0003",
    "\u0002\u0002\u0002\u2481\u2483\tv\u0002\u0002\u2482\u2481\u0003\u0002",
    "\u0002\u0002\u2482\u2483\u0003\u0002\u0002\u0002\u2483\u2484\u0003\u0002",
    "\u0002\u0002\u2484\u2485\u0007\u00a9\u0002\u0002\u2485\u2486\u0005\u030c",
    "\u0187\u0002\u2486\u2487\u0007\u00e4\u0002\u0002\u2487\u2488\u0005\u02d8",
    "\u016d\u0002\u2488\u249b\u0003\u0002\u0002\u0002\u2489\u248a\u0007I",
    "\u0002\u0002\u248a\u248b\u0007\u00a9\u0002\u0002\u248b\u249b\u0005\u030c",
    "\u0187\u0002\u248c\u248d\u0007I\u0002\u0002\u248d\u248e\u0007\u0195",
    "\u0002\u0002\u248e\u249b\u0005\u030c\u0187\u0002\u248f\u2490\u0007\u00ee",
    "\u0002\u0002\u2490\u2491\u0007\u0195\u0002\u0002\u2491\u249b\u0005\u030c",
    "\u0187\u0002\u2492\u2493\u0007\u00f9\u0002\u0002\u2493\u2494\u0005\u031c",
    "\u018f\u0002\u2494\u2495\u0005\u033e\u01a0\u0002\u2495\u249b\u0003\u0002",
    "\u0002\u0002\u2496\u2497\u0007\u0169\u0002\u0002\u2497\u2498\u0005\u031e",
    "\u0190\u0002\u2498\u2499\u0005\u033e\u01a0\u0002\u2499\u249b\u0003\u0002",
    "\u0002\u0002\u249a\u247f\u0003\u0002\u0002\u0002\u249a\u2489\u0003\u0002",
    "\u0002\u0002\u249a\u248c\u0003\u0002\u0002\u0002\u249a\u248f\u0003\u0002",
    "\u0002\u0002\u249a\u2492\u0003\u0002\u0002\u0002\u249a\u2496\u0003\u0002",
    "\u0002\u0002\u249b\u031b\u0003\u0002\u0002\u0002\u249c\u249d\u0007\u0324",
    "\u0002\u0002\u249d\u249e\u0005\u0354\u01ab\u0002\u249e\u249f\u0007\u0085",
    "\u0002\u0002\u249f\u24a0\u0005\u0380\u01c1\u0002\u24a0\u24a1\u0007\u009a",
    "\u0002\u0002\u24a1\u24a2\u0005\u034a\u01a6\u0002\u24a2\u24a3\u0007\u0325",
    "\u0002\u0002\u24a3\u031d\u0003\u0002\u0002\u0002\u24a4\u24a5\u0007\u0324",
    "\u0002\u0002\u24a5\u24a6\u0005\u02c2\u0162\u0002\u24a6\u24a7\u0007\u0085",
    "\u0002\u0002\u24a7\u24a8\u0005\u0380\u01c1\u0002\u24a8\u24a9\u0007\u009a",
    "\u0002\u0002\u24a9\u24aa\u0007\u0324\u0002\u0002\u24aa\u24ab\u0005\u0320",
    "\u0191\u0002\u24ab\u24ac\u0007\u0325\u0002\u0002\u24ac\u24ad\u0007\u0325",
    "\u0002\u0002\u24ad\u031f\u0003\u0002\u0002\u0002\u24ae\u24b3\u0005\u0380",
    "\u01c1\u0002\u24af\u24b0\u0007\u0326\u0002\u0002\u24b0\u24b2\u0005\u0380",
    "\u01c1\u0002\u24b1\u24af\u0003\u0002\u0002\u0002\u24b2\u24b5\u0003\u0002",
    "\u0002\u0002\u24b3\u24b1\u0003\u0002\u0002\u0002\u24b3\u24b4\u0003\u0002",
    "\u0002\u0002\u24b4\u0321\u0003\u0002\u0002\u0002\u24b5\u24b3\u0003\u0002",
    "\u0002\u0002\u24b6\u24b8\u0005\u0378\u01bd\u0002\u24b7\u24b9\u0005\u0342",
    "\u01a2\u0002\u24b8\u24b7\u0003\u0002\u0002\u0002\u24b8\u24b9\u0003\u0002",
    "\u0002\u0002\u24b9\u0323\u0003\u0002\u0002\u0002\u24ba\u24bb\u0007\u00e9",
    "\u0002\u0002\u24bb\u24bc\u0007\u0324\u0002\u0002\u24bc\u24bd\u0007\u030f",
    "\u0002\u0002\u24bd\u24be\u0007\u0326\u0002\u0002\u24be\u24bf\u0007\u030f",
    "\u0002\u0002\u24bf\u24c0\u0007\u0326\u0002\u0002\u24c0\u24c1\u0007\u030f",
    "\u0002\u0002\u24c1\u24d5\u0007\u0325\u0002\u0002\u24c2\u24c3\u0007\u00e9",
    "\u0002\u0002\u24c3\u24c4\u0007\u0324\u0002\u0002\u24c4\u24c5\u0007$",
    "\u0002\u0002\u24c5\u24c6\u0007\u030f\u0002\u0002\u24c6\u24d0\u0007\u0326",
    "\u0002\u0002\u24c7\u24cc\u0005\u0326\u0194\u0002\u24c8\u24c9\u0007\u0326",
    "\u0002\u0002\u24c9\u24cb\u0005\u0326\u0194\u0002\u24ca\u24c8\u0003\u0002",
    "\u0002\u0002\u24cb\u24ce\u0003\u0002\u0002\u0002\u24cc\u24ca\u0003\u0002",
    "\u0002\u0002\u24cc\u24cd\u0003\u0002\u0002\u0002\u24cd\u24d1\u0003\u0002",
    "\u0002\u0002\u24ce\u24cc\u0003\u0002\u0002\u0002\u24cf\u24d1\u0005\u03ac",
    "\u01d7\u0002\u24d0\u24c7\u0003\u0002\u0002\u0002\u24d0\u24cf\u0003\u0002",
    "\u0002\u0002\u24d1\u24d2\u0003\u0002\u0002\u0002\u24d2\u24d3\u0007\u0325",
    "\u0002\u0002\u24d3\u24d5\u0003\u0002\u0002\u0002\u24d4\u24ba\u0003\u0002",
    "\u0002\u0002\u24d4\u24c2\u0003\u0002\u0002\u0002\u24d5\u0325\u0003\u0002",
    "\u0002\u0002\u24d6\u24d7\u0005\u03ac\u01d7\u0002\u24d7\u24d8\u0007\u0313",
    "\u0002\u0002\u24d8\u24d9\t\u0016\u0002\u0002\u24d9\u0327\u0003\u0002",
    "\u0002\u0002\u24da\u24e5\u0005\u02ce\u0168\u0002\u24db\u24dc\u0007\u0324",
    "\u0002\u0002\u24dc\u24dd\u0005\u02ce\u0168\u0002\u24dd\u24de\u0007\u0325",
    "\u0002\u0002\u24de\u24e5\u0003\u0002\u0002\u0002\u24df\u24e5\u0005\u034e",
    "\u01a8\u0002\u24e0\u24e1\u0007\u0324\u0002\u0002\u24e1\u24e2\u0005\u034e",
    "\u01a8\u0002\u24e2\u24e3\u0007\u0325\u0002\u0002\u24e3\u24e5\u0003\u0002",
    "\u0002\u0002\u24e4\u24da\u0003\u0002\u0002\u0002\u24e4\u24db\u0003\u0002",
    "\u0002\u0002\u24e4\u24df\u0003\u0002\u0002\u0002\u24e4\u24e0\u0003\u0002",
    "\u0002\u0002\u24e5\u0329\u0003\u0002\u0002\u0002\u24e6\u2562\u0005\u0352",
    "\u01aa\u0002\u24e7\u2562\u0005\u0354\u01ab\u0002\u24e8\u2562\u0005\u0356",
    "\u01ac\u0002\u24e9\u24ea\u0005\u0390\u01c9\u0002\u24ea\u24ec\u0007\u0324",
    "\u0002\u0002\u24eb\u24ed\u0005\u0350\u01a9\u0002\u24ec\u24eb\u0003\u0002",
    "\u0002\u0002\u24ec\u24ed\u0003\u0002\u0002\u0002\u24ed\u24ee\u0003\u0002",
    "\u0002\u0002\u24ee\u24ef\u0007\u0325\u0002\u0002\u24ef\u2562\u0003\u0002",
    "\u0002\u0002\u24f0\u24f1\u0007\u01a7\u0002\u0002\u24f1\u24f2\u0007\u0324",
    "\u0002\u0002\u24f2\u24f3\u0007\u0329\u0002\u0002\u24f3\u2562\u0007\u0325",
    "\u0002\u0002\u24f4\u24f5\u0007\u01ae\u0002\u0002\u24f5\u24f6\u0007\u0324",
    "\u0002\u0002\u24f6\u24f7\u0005\u02c2\u0162\u0002\u24f7\u24f8\u0007\u000f",
    "\u0002\u0002\u24f8\u24f9\u0005\u03a4\u01d3\u0002\u24f9\u24fa\u0007\u0325",
    "\u0002\u0002\u24fa\u2562\u0003\u0002\u0002\u0002\u24fb\u24fc\u0007F",
    "\u0002\u0002\u24fc\u24fd\u0007\u0324\u0002\u0002\u24fd\u24fe\u0005\u03a4",
    "\u01d3\u0002\u24fe\u24ff\u0007\u0326\u0002\u0002\u24ff\u2502\u0005\u02c2",
    "\u0162\u0002\u2500\u2501\u0007\u0326\u0002\u0002\u2501\u2503\u0005\u02c2",
    "\u0162\u0002\u2502\u2500\u0003\u0002\u0002\u0002\u2502\u2503\u0003\u0002",
    "\u0002\u0002\u2503\u2504\u0003\u0002\u0002\u0002\u2504\u2505\u0007\u0325",
    "\u0002\u0002\u2505\u2562\u0003\u0002\u0002\u0002\u2506\u2507\u0007\u01b4",
    "\u0002\u0002\u2507\u2508\u0007\u0324\u0002\u0002\u2508\u2509\u0007\u0329",
    "\u0002\u0002\u2509\u2562\u0007\u0325\u0002\u0002\u250a\u250b\u00075",
    "\u0002\u0002\u250b\u250c\u0007\u0324\u0002\u0002\u250c\u250d\u0005\u0350",
    "\u01a9\u0002\u250d\u250e\u0007\u0325\u0002\u0002\u250e\u2562\u0003\u0002",
    "\u0002\u0002\u250f\u2562\u0007M\u0002\u0002\u2510\u2562\u0007N\u0002",
    "\u0002\u2511\u2512\u0007\u01ca\u0002\u0002\u2512\u2513\u0007\u0324\u0002",
    "\u0002\u2513\u2514\u0007\u030c\u0002\u0002\u2514\u2515\u0007\u0326\u0002",
    "\u0002\u2515\u2516\u0005\u02c2\u0162\u0002\u2516\u2517\u0007\u0326\u0002",
    "\u0002\u2517\u2518\u0005\u02c2\u0162\u0002\u2518\u2519\u0007\u0325\u0002",
    "\u0002\u2519\u2562\u0003\u0002\u0002\u0002\u251a\u251b\u0007\u01cb\u0002",
    "\u0002\u251b\u251c\u0007\u0324\u0002\u0002\u251c\u251d\u0007\u030c\u0002",
    "\u0002\u251d\u251e\u0007\u0326\u0002\u0002\u251e\u251f\u0005\u02c2\u0162",
    "\u0002\u251f\u2520\u0007\u0326\u0002\u0002\u2520\u2521\u0005\u02c2\u0162",
    "\u0002\u2521\u2522\u0007\u0325\u0002\u0002\u2522\u2562\u0003\u0002\u0002",
    "\u0002\u2523\u2524\u0007\u01cc\u0002\u0002\u2524\u2525\u0007\u0324\u0002",
    "\u0002\u2525\u2526\u0007\u030c\u0002\u0002\u2526\u2527\u0007\u0326\u0002",
    "\u0002\u2527\u2528\u0005\u02c2\u0162\u0002\u2528\u2529\u0007\u0325\u0002",
    "\u0002\u2529\u2562\u0003\u0002\u0002\u0002\u252a\u252b\u0007\u01cd\u0002",
    "\u0002\u252b\u252c\u0007\u0324\u0002\u0002\u252c\u252d\u0007\u030c\u0002",
    "\u0002\u252d\u252e\u0007\u0326\u0002\u0002\u252e\u252f\u0005\u02c2\u0162",
    "\u0002\u252f\u2530\u0007\u0325\u0002\u0002\u2530\u2562\u0003\u0002\u0002",
    "\u0002\u2531\u2532\u0007\u020a\u0002\u0002\u2532\u2533\u0007\u0324\u0002",
    "\u0002\u2533\u2562\u0007\u0325\u0002\u0002\u2534\u2535\u0007\u020b\u0002",
    "\u0002\u2535\u2536\u0007\u0324\u0002\u0002\u2536\u2562\u0007\u0325\u0002",
    "\u0002\u2537\u2538\u0007\u0096\u0002\u0002\u2538\u2539\u0007\u0324\u0002",
    "\u0002\u2539\u253c\u0005\u03a4\u01d3\u0002\u253a\u253b\u0007\u0326\u0002",
    "\u0002\u253b\u253d\u0007\u030b\u0002\u0002\u253c\u253a\u0003\u0002\u0002",
    "\u0002\u253c\u253d\u0003\u0002\u0002\u0002\u253d\u2540\u0003\u0002\u0002",
    "\u0002\u253e\u253f\u0007\u0326\u0002\u0002\u253f\u2541\u0007\u030b\u0002",
    "\u0002\u2540\u253e\u0003\u0002\u0002\u0002\u2540\u2541\u0003\u0002\u0002",
    "\u0002\u2541\u2542\u0003\u0002\u0002\u0002\u2542\u2543\u0007\u0325\u0002",
    "\u0002\u2543\u2562\u0003\u0002\u0002\u0002\u2544\u2562\u0007\u0251\u0002",
    "\u0002\u2545\u2546\u0007\u00df\u0002\u0002\u2546\u2547\u0007\u0324\u0002",
    "\u0002\u2547\u2548\u0005\u02c2\u0162\u0002\u2548\u2549\u0007\u0326\u0002",
    "\u0002\u2549\u254a\u0005\u02c2\u0162\u0002\u254a\u254b\u0007\u0325\u0002",
    "\u0002\u254b\u2562\u0003\u0002\u0002\u0002\u254c\u254d\u0007\u02d9\u0002",
    "\u0002\u254d\u254e\u0007\u0324\u0002\u0002\u254e\u254f\u0005\u02c2\u0162",
    "\u0002\u254f\u2550\u0007\u0326\u0002\u0002\u2550\u2551\u0007\u030b\u0002",
    "\u0002\u2551\u2552\u0007\u0326\u0002\u0002\u2552\u2553\u0007\u030b\u0002",
    "\u0002\u2553\u2554\u0007\u0326\u0002\u0002\u2554\u2555\u0005\u02c2\u0162",
    "\u0002\u2555\u2556\u0007\u0325\u0002\u0002\u2556\u2562\u0003\u0002\u0002",
    "\u0002\u2557\u2562\u0007\u013b\u0002\u0002\u2558\u2562\u0007\u0154\u0002",
    "\u0002\u2559\u255a\u0007\u00a8\u0002\u0002\u255a\u255b\u0007\u0324\u0002",
    "\u0002\u255b\u255c\u0005\u02c2\u0162\u0002\u255c\u255d\u0007\u0326\u0002",
    "\u0002\u255d\u255e\u0005\u02c2\u0162\u0002\u255e\u255f\u0007\u0325\u0002",
    "\u0002\u255f\u2562\u0003\u0002\u0002\u0002\u2560\u2562\u0005\u032c\u0197",
    "\u0002\u2561\u24e6\u0003\u0002\u0002\u0002\u2561\u24e7\u0003\u0002\u0002",
    "\u0002\u2561\u24e8\u0003\u0002\u0002\u0002\u2561\u24e9\u0003\u0002\u0002",
    "\u0002\u2561\u24f0\u0003\u0002\u0002\u0002\u2561\u24f4\u0003\u0002\u0002",
    "\u0002\u2561\u24fb\u0003\u0002\u0002\u0002\u2561\u2506\u0003\u0002\u0002",
    "\u0002\u2561\u250a\u0003\u0002\u0002\u0002\u2561\u250f\u0003\u0002\u0002",
    "\u0002\u2561\u2510\u0003\u0002\u0002\u0002\u2561\u2511\u0003\u0002\u0002",
    "\u0002\u2561\u251a\u0003\u0002\u0002\u0002\u2561\u2523\u0003\u0002\u0002",
    "\u0002\u2561\u252a\u0003\u0002\u0002\u0002\u2561\u2531\u0003\u0002\u0002",
    "\u0002\u2561\u2534\u0003\u0002\u0002\u0002\u2561\u2537\u0003\u0002\u0002",
    "\u0002\u2561\u2544\u0003\u0002\u0002\u0002\u2561\u2545\u0003\u0002\u0002",
    "\u0002\u2561\u254c\u0003\u0002\u0002\u0002\u2561\u2557\u0003\u0002\u0002",
    "\u0002\u2561\u2558\u0003\u0002\u0002\u0002\u2561\u2559\u0003\u0002\u0002",
    "\u0002\u2561\u2560\u0003\u0002\u0002\u0002\u2562\u032b\u0003\u0002\u0002",
    "\u0002\u2563\u2569\u0005\u032e\u0198\u0002\u2564\u2569\u0005\u0330\u0199",
    "\u0002\u2565\u2569\u0005\u0332\u019a\u0002\u2566\u2569\u0005\u0334\u019b",
    "\u0002\u2567\u2569\u0005\u0336\u019c\u0002\u2568\u2563\u0003\u0002\u0002",
    "\u0002\u2568\u2564\u0003\u0002\u0002\u0002\u2568\u2565\u0003\u0002\u0002",
    "\u0002\u2568\u2566\u0003\u0002\u0002\u0002\u2568\u2567\u0003\u0002\u0002",
    "\u0002\u2569\u032d\u0003\u0002\u0002\u0002\u256a\u256f\u0007\u030a\u0002",
    "\u0002\u256b\u256f\u0007\u030c\u0002\u0002\u256c\u256f\u0007r\u0002",
    "\u0002\u256d\u256f\u0005\u0330\u0199\u0002\u256e\u256a\u0003\u0002\u0002",
    "\u0002\u256e\u256b\u0003\u0002\u0002\u0002\u256e\u256c\u0003\u0002\u0002",
    "\u0002\u256e\u256d\u0003\u0002\u0002\u0002\u256f\u2570\u0003\u0002\u0002",
    "\u0002\u2570\u2571\u0007\u031f\u0002\u0002\u2571\u2572\u0007\u02f9\u0002",
    "\u0002\u2572\u2573\u0007\u0324\u0002\u0002\u2573\u2574\u0007\u030f\u0002",
    "\u0002\u2574\u2575\u0007\u0326\u0002\u0002\u2575\u2576\u0007\u030f\u0002",
    "\u0002\u2576\u2596\u0007\u0325\u0002\u0002\u2577\u257c\u0007\u030a\u0002",
    "\u0002\u2578\u257c\u0007\u030c\u0002\u0002\u2579\u257c\u0007r\u0002",
    "\u0002\u257a\u257c\u0005\u0330\u0199\u0002\u257b\u2577\u0003\u0002\u0002",
    "\u0002\u257b\u2578\u0003\u0002\u0002\u0002\u257b\u2579\u0003\u0002\u0002",
    "\u0002\u257b\u257a\u0003\u0002\u0002\u0002\u257c\u257d\u0003\u0002\u0002",
    "\u0002\u257d\u257e\u0007\u031f\u0002\u0002\u257e\u257f\u0007\u02b0\u0002",
    "\u0002\u257f\u2580\u0007\u031f\u0002\u0002\u2580\u2581\u0007\u02f9\u0002",
    "\u0002\u2581\u2582\u0007\u0324\u0002\u0002\u2582\u2583\u0007\u030f\u0002",
    "\u0002\u2583\u2584\u0007\u0326\u0002\u0002\u2584\u2585\u0007\u030f\u0002",
    "\u0002\u2585\u2596\u0007\u0325\u0002\u0002\u2586\u258b\u0007\u030a\u0002",
    "\u0002\u2587\u258b\u0007\u030c\u0002\u0002\u2588\u258b\u0007r\u0002",
    "\u0002\u2589\u258b\u0005\u0330\u0199\u0002\u258a\u2586\u0003\u0002\u0002",
    "\u0002\u258a\u2587\u0003\u0002\u0002\u0002\u258a\u2588\u0003\u0002\u0002",
    "\u0002\u258a\u2589\u0003\u0002\u0002\u0002\u258b\u258c\u0003\u0002\u0002",
    "\u0002\u258c\u258d\u0007\u031f\u0002\u0002\u258d\u258e\u0007\u00f1\u0002",
    "\u0002\u258e\u258f\u0007\u031f\u0002\u0002\u258f\u2590\u0007\u02f9\u0002",
    "\u0002\u2590\u2591\u0007\u0324\u0002\u0002\u2591\u2592\u0007\u030f\u0002",
    "\u0002\u2592\u2593\u0007\u0326\u0002\u0002\u2593\u2594\u0007\u030f\u0002",
    "\u0002\u2594\u2596\u0007\u0325\u0002\u0002\u2595\u256e\u0003\u0002\u0002",
    "\u0002\u2595\u257b\u0003\u0002\u0002\u0002\u2595\u258a\u0003\u0002\u0002",
    "\u0002\u2596\u032f\u0003\u0002\u0002\u0002\u2597\u259b\u0007\u030a\u0002",
    "\u0002\u2598\u259b\u0007\u030c\u0002\u0002\u2599\u259b\u0005\u0376\u01bc",
    "\u0002\u259a\u2597\u0003\u0002\u0002\u0002\u259a\u2598\u0003\u0002\u0002",
    "\u0002\u259a\u2599\u0003\u0002\u0002\u0002\u259b\u259c\u0003\u0002\u0002",
    "\u0002\u259c\u259d\u0007\u031f\u0002\u0002\u259d\u259e\u0007\u028c\u0002",
    "\u0002\u259e\u259f\u0007\u0324\u0002\u0002\u259f\u25a0\u0007\u030f\u0002",
    "\u0002\u25a0\u25ae\u0007\u0325\u0002\u0002\u25a1\u25a5\u0007\u030a\u0002",
    "\u0002\u25a2\u25a5\u0007\u030c\u0002\u0002\u25a3\u25a5\u0005\u0376\u01bc",
    "\u0002\u25a4\u25a1\u0003\u0002\u0002\u0002\u25a4\u25a2\u0003\u0002\u0002",
    "\u0002\u25a4\u25a3\u0003\u0002\u0002\u0002\u25a5\u25a6\u0003\u0002\u0002",
    "\u0002\u25a6\u25a7\u0007\u031f\u0002\u0002\u25a7\u25a8\u0007\u02b0\u0002",
    "\u0002\u25a8\u25a9\u0007\u031f\u0002\u0002\u25a9\u25aa\u0007\u028c\u0002",
    "\u0002\u25aa\u25ab\u0007\u0324\u0002\u0002\u25ab\u25ac\u0007\u030f\u0002",
    "\u0002\u25ac\u25ae\u0007\u0325\u0002\u0002\u25ad\u259a\u0003\u0002\u0002",
    "\u0002\u25ad\u25a4\u0003\u0002\u0002\u0002\u25ae\u0331\u0003\u0002\u0002",
    "\u0002\u25af\u25b0\tw\u0002\u0002\u25b0\u25b1\u0007\u031f\u0002\u0002",
    "\u25b1\u25b2\u0007\u01f0\u0002\u0002\u25b2\u25b3\u0007\u0324\u0002\u0002",
    "\u25b3\u25b4\u0007\u030f\u0002\u0002\u25b4\u25b5\u0007\u0325\u0002\u0002",
    "\u25b5\u0333\u0003\u0002\u0002\u0002\u25b6\u25b7\tw\u0002\u0002\u25b7",
    "\u25b8\u0007\u031f\u0002\u0002\u25b8\u25b9\u0007\u0253\u0002\u0002\u25b9",
    "\u25ba\u0007\u0324\u0002\u0002\u25ba\u25bb\u0007\u030f\u0002\u0002\u25bb",
    "\u25bc\u0007\u0325\u0002\u0002\u25bc\u0335\u0003\u0002\u0002\u0002\u25bd",
    "\u25be\tw\u0002\u0002\u25be\u25bf\u0007\u031f\u0002\u0002\u25bf\u25c0",
    "\u0007\u025e\u0002\u0002\u25c0\u25c1\u0007\u0324\u0002\u0002\u25c1\u25c2",
    "\u0007\u030f\u0002\u0002\u25c2\u25c3\u0007\u0325\u0002\u0002\u25c3\u0337",
    "\u0003\u0002\u0002\u0002\u25c4\u25c5\u0007\u0177\u0002\u0002\u25c5\u25c6",
    "\u0005\u02c2\u0162\u0002\u25c6\u25c7\u0007\u015b\u0002\u0002\u25c7\u25c8",
    "\u0005\u02c2\u0162\u0002\u25c8\u0339\u0003\u0002\u0002\u0002\u25c9\u25ca",
    "\u0007\u0177\u0002\u0002\u25ca\u25cb\u0005\u02d8\u016d\u0002\u25cb\u25cc",
    "\u0007\u015b\u0002\u0002\u25cc\u25cd\u0005\u02c2\u0162\u0002\u25cd\u033b",
    "\u0003\u0002\u0002\u0002\u25ce\u25d0\u0007\u000f\u0002\u0002\u25cf\u25ce",
    "\u0003\u0002\u0002\u0002\u25cf\u25d0\u0003\u0002\u0002\u0002\u25d0\u25d1",
    "\u0003\u0002\u0002\u0002\u25d1\u25d2\u0005\u034c\u01a7\u0002\u25d2\u033d",
    "\u0003\u0002\u0002\u0002\u25d3\u25d5\u0007\u000f\u0002\u0002\u25d4\u25d3",
    "\u0003\u0002\u0002\u0002\u25d4\u25d5\u0003\u0002\u0002\u0002\u25d5\u25d6",
    "\u0003\u0002\u0002\u0002\u25d6\u25d7\u0005\u0340\u01a1\u0002\u25d7\u033f",
    "\u0003\u0002\u0002\u0002\u25d8\u25da\u0005\u03ac\u01d7\u0002\u25d9\u25db",
    "\u0005\u0342\u01a2\u0002\u25da\u25d9\u0003\u0002\u0002\u0002\u25da\u25db",
    "\u0003\u0002\u0002\u0002\u25db\u0341\u0003\u0002\u0002\u0002\u25dc\u25de",
    "\u0007\u017b\u0002\u0002\u25dd\u25dc\u0003\u0002\u0002\u0002\u25dd\u25de",
    "\u0003\u0002\u0002\u0002\u25de\u25df\u0003\u0002\u0002\u0002\u25df\u25e0",
    "\u0007\u0324\u0002\u0002\u25e0\u25e7\u0005\u0346\u01a4\u0002\u25e1\u25e3",
    "\u0007\u0326\u0002\u0002\u25e2\u25e1\u0003\u0002\u0002\u0002\u25e2\u25e3",
    "\u0003\u0002\u0002\u0002\u25e3\u25e4\u0003\u0002\u0002\u0002\u25e4\u25e6",
    "\u0005\u0346\u01a4\u0002\u25e5\u25e2\u0003\u0002\u0002\u0002\u25e6\u25e9",
    "\u0003\u0002\u0002\u0002\u25e7\u25e5\u0003\u0002\u0002\u0002\u25e7\u25e8",
    "\u0003\u0002\u0002\u0002\u25e8\u25ea\u0003\u0002\u0002\u0002\u25e9\u25e7",
    "\u0003\u0002\u0002\u0002\u25ea\u25eb\u0007\u0325\u0002\u0002\u25eb\u0343",
    "\u0003\u0002\u0002\u0002\u25ec\u25ed\u0007\u017b\u0002\u0002\u25ed\u25ee",
    "\u0007\u0324\u0002\u0002\u25ee\u25f5\u0005\u0346\u01a4\u0002\u25ef\u25f1",
    "\u0007\u0326\u0002\u0002\u25f0\u25ef\u0003\u0002\u0002\u0002\u25f0\u25f1",
    "\u0003\u0002\u0002\u0002\u25f1\u25f2\u0003\u0002\u0002\u0002\u25f2\u25f4",
    "\u0005\u0346\u01a4\u0002\u25f3\u25f0\u0003\u0002\u0002\u0002\u25f4\u25f7",
    "\u0003\u0002\u0002\u0002\u25f5\u25f3\u0003\u0002\u0002\u0002\u25f5\u25f6",
    "\u0003\u0002\u0002\u0002\u25f6\u25f8\u0003\u0002\u0002\u0002\u25f7\u25f5",
    "\u0003\u0002\u0002\u0002\u25f8\u25f9\u0007\u0325\u0002\u0002\u25f9\u0345",
    "\u0003\u0002\u0002\u0002\u25fa\u25fc\u0007\u025d\u0002\u0002\u25fb\u25fa",
    "\u0003\u0002\u0002\u0002\u25fb\u25fc\u0003\u0002\u0002\u0002\u25fc\u2623",
    "\u0003\u0002\u0002\u0002\u25fd\u25fe\u0007\u009d\u0002\u0002\u25fe\u25ff",
    "\u0007\u0324\u0002\u0002\u25ff\u2604\u0005\u0348\u01a5\u0002\u2600\u2601",
    "\u0007\u0326\u0002\u0002\u2601\u2603\u0005\u0348\u01a5\u0002\u2602\u2600",
    "\u0003\u0002\u0002\u0002\u2603\u2606\u0003\u0002\u0002\u0002\u2604\u2602",
    "\u0003\u0002\u0002\u0002\u2604\u2605\u0003\u0002\u0002\u0002\u2605\u2607",
    "\u0003\u0002\u0002\u0002\u2606\u2604\u0003\u0002\u0002\u0002\u2607\u2608",
    "\u0007\u0325\u0002\u0002\u2608\u2624\u0003\u0002\u0002\u0002\u2609\u260a",
    "\u0007\u009d\u0002\u0002\u260a\u260b\u0007\u0313\u0002\u0002\u260b\u2624",
    "\u0005\u0348\u01a5\u0002\u260c\u261b\u0007\u0086\u0002\u0002\u260d\u260e",
    "\u0007\u0324\u0002\u0002\u260e\u260f\u0005\u0348\u01a5\u0002\u260f\u2610",
    "\u0007\u0324\u0002\u0002\u2610\u2615\u0007\u030c\u0002\u0002\u2611\u2612",
    "\u0007\u0326\u0002\u0002\u2612\u2614\u0007\u030c\u0002\u0002\u2613\u2611",
    "\u0003\u0002\u0002\u0002\u2614\u2617\u0003\u0002\u0002\u0002\u2615\u2613",
    "\u0003\u0002\u0002\u0002\u2615\u2616\u0003\u0002\u0002\u0002\u2616\u2618",
    "\u0003\u0002\u0002\u0002\u2617\u2615\u0003\u0002\u0002\u0002\u2618\u2619",
    "\u0007\u0325\u0002\u0002\u2619\u261a\u0007\u0325\u0002\u0002\u261a\u261c",
    "\u0003\u0002\u0002\u0002\u261b\u260d\u0003\u0002\u0002\u0002\u261b\u261c",
    "\u0003\u0002\u0002\u0002\u261c\u2624\u0003\u0002\u0002\u0002\u261d\u2624",
    "\u0007\u02c4\u0002\u0002\u261e\u2624\u0007\u02cd\u0002\u0002\u261f\u2620",
    "\u0007\u02ce\u0002\u0002\u2620\u2621\u0007\u0313\u0002\u0002\u2621\u2624",
    "\u0007\u030b\u0002\u0002\u2622\u2624\u0007\u030c\u0002\u0002\u2623\u25fd",
    "\u0003\u0002\u0002\u0002\u2623\u2609\u0003\u0002\u0002\u0002\u2623\u260c",
    "\u0003\u0002\u0002\u0002\u2623\u261d\u0003\u0002\u0002\u0002\u2623\u261e",
    "\u0003\u0002\u0002\u0002\u2623\u261f\u0003\u0002\u0002\u0002\u2623\u2622",
    "\u0003\u0002\u0002\u0002\u2624\u0347\u0003\u0002\u0002\u0002\u2625\u2628",
    "\u0005\u03ac\u01d7\u0002\u2626\u2628\u0007\u030b\u0002\u0002\u2627\u2625",
    "\u0003\u0002\u0002\u0002\u2627\u2626\u0003\u0002\u0002\u0002\u2628\u0349",
    "\u0003\u0002\u0002\u0002\u2629\u262a\u0007\u0324\u0002\u0002\u262a\u262f",
    "\u0005\u034c\u01a7\u0002\u262b\u262c\u0007\u0326\u0002\u0002\u262c\u262e",
    "\u0005\u034c\u01a7\u0002\u262d\u262b\u0003\u0002\u0002\u0002\u262e\u2631",
    "\u0003\u0002\u0002\u0002\u262f\u262d\u0003\u0002\u0002\u0002\u262f\u2630",
    "\u0003\u0002\u0002\u0002\u2630\u2632\u0003\u0002\u0002\u0002\u2631\u262f",
    "\u0003\u0002\u0002\u0002\u2632\u2633\u0007\u0325\u0002\u0002\u2633\u034b",
    "\u0003\u0002\u0002\u0002\u2634\u2637\u0005\u03ac\u01d7\u0002\u2635\u2637",
    "\u0007\u030f\u0002\u0002\u2636\u2634\u0003\u0002\u0002\u0002\u2636\u2635",
    "\u0003\u0002\u0002\u0002\u2637\u034d\u0003\u0002\u0002\u0002\u2638\u2639",
    "\u0007\u0171\u0002\u0002\u2639\u263a\u0007\u0324\u0002\u0002\u263a\u263b",
    "\u0005\u0350\u01a9\u0002\u263b\u2643\u0007\u0325\u0002\u0002\u263c\u263d",
    "\u0007\u0326\u0002\u0002\u263d\u263e\u0007\u0324\u0002\u0002\u263e\u263f",
    "\u0005\u0350\u01a9\u0002\u263f\u2640\u0007\u0325\u0002\u0002\u2640\u2642",
    "\u0003\u0002\u0002\u0002\u2641\u263c\u0003\u0002\u0002\u0002\u2642\u2645",
    "\u0003\u0002\u0002\u0002\u2643\u2641\u0003\u0002\u0002\u0002\u2643\u2644",
    "\u0003\u0002\u0002\u0002\u2644\u034f\u0003\u0002\u0002\u0002\u2645\u2643",
    "\u0003\u0002\u0002\u0002\u2646\u264b\u0005\u02c2\u0162\u0002\u2647\u2648",
    "\u0007\u0326\u0002\u0002\u2648\u264a\u0005\u02c2\u0162\u0002\u2649\u2647",
    "\u0003\u0002\u0002\u0002\u264a\u264d\u0003\u0002\u0002\u0002\u264b\u2649",
    "\u0003\u0002\u0002\u0002\u264b\u264c\u0003\u0002\u0002\u0002\u264c\u0351",
    "\u0003\u0002\u0002\u0002\u264d\u264b\u0003\u0002\u0002\u0002\u264e\u264f",
    "\tx\u0002\u0002\u264f\u2650\u0007\u0324\u0002\u0002\u2650\u2651\u0007",
    "\u0325\u0002\u0002\u2651\u2659\u0005\u035a\u01ae\u0002\u2652\u2653\u0007",
    "\u0265\u0002\u0002\u2653\u2654\u0007\u0324\u0002\u0002\u2654\u2655\u0005",
    "\u02c2\u0162\u0002\u2655\u2656\u0007\u0325\u0002\u0002\u2656\u2657\u0005",
    "\u035a\u01ae\u0002\u2657\u2659\u0003\u0002\u0002\u0002\u2658\u264e\u0003",
    "\u0002\u0002\u0002\u2658\u2652\u0003\u0002\u0002\u0002\u2659\u0353\u0003",
    "\u0002\u0002\u0002\u265a\u265b\ty\u0002\u0002\u265b\u265c\u0007\u0324",
    "\u0002\u0002\u265c\u265d\u0005\u0358\u01ad\u0002\u265d\u265f\u0007\u0325",
    "\u0002\u0002\u265e\u2660\u0005\u035a\u01ae\u0002\u265f\u265e\u0003\u0002",
    "\u0002\u0002\u265f\u2660\u0003\u0002\u0002\u0002\u2660\u267b\u0003\u0002",
    "\u0002\u0002\u2661\u2662\tz\u0002\u0002\u2662\u2665\u0007\u0324\u0002",
    "\u0002\u2663\u2666\u0007\u0329\u0002\u0002\u2664\u2666\u0005\u0358\u01ad",
    "\u0002\u2665\u2663\u0003\u0002\u0002\u0002\u2665\u2664\u0003\u0002\u0002",
    "\u0002\u2666\u2667\u0003\u0002\u0002\u0002\u2667\u2669\u0007\u0325\u0002",
    "\u0002\u2668\u266a\u0005\u035a\u01ae\u0002\u2669\u2668\u0003\u0002\u0002",
    "\u0002\u2669\u266a\u0003\u0002\u0002\u0002\u266a\u267b\u0003\u0002\u0002",
    "\u0002\u266b\u266c\u0007\u01b5\u0002\u0002\u266c\u266d\u0007\u0324\u0002",
    "\u0002\u266d\u266e\u0005\u0358\u01ad\u0002\u266e\u266f\u0007\u0325\u0002",
    "\u0002\u266f\u267b\u0003\u0002\u0002\u0002\u2670\u2671\u0007\u020e\u0002",
    "\u0002\u2671\u2672\u0007\u0324\u0002\u0002\u2672\u2673\u0005\u02c2\u0162",
    "\u0002\u2673\u2674\u0007\u0325\u0002\u0002\u2674\u267b\u0003\u0002\u0002",
    "\u0002\u2675\u2676\u0007\u020f\u0002\u0002\u2676\u2677\u0007\u0324\u0002",
    "\u0002\u2677\u2678\u0005\u0350\u01a9\u0002\u2678\u2679\u0007\u0325\u0002",
    "\u0002\u2679\u267b\u0003\u0002\u0002\u0002\u267a\u265a\u0003\u0002\u0002",
    "\u0002\u267a\u2661\u0003\u0002\u0002\u0002\u267a\u266b\u0003\u0002\u0002",
    "\u0002\u267a\u2670\u0003\u0002\u0002\u0002\u267a\u2675\u0003\u0002\u0002",
    "\u0002\u267b\u0355\u0003\u0002\u0002\u0002\u267c\u267d\t{\u0002\u0002",
    "\u267d\u267e\u0007\u0324\u0002\u0002\u267e\u267f\u0005\u02c2\u0162\u0002",
    "\u267f\u2680\u0007\u0325\u0002\u0002\u2680\u2681\u0005\u035a\u01ae\u0002",
    "\u2681\u2691\u0003\u0002\u0002\u0002\u2682\u2683\t|\u0002\u0002\u2683",
    "\u2684\u0007\u0324\u0002\u0002\u2684\u268b\u0005\u02c2\u0162\u0002\u2685",
    "\u2686\u0007\u0326\u0002\u0002\u2686\u2689\u0005\u02c2\u0162\u0002\u2687",
    "\u2688\u0007\u0326\u0002\u0002\u2688\u268a\u0005\u02c2\u0162\u0002\u2689",
    "\u2687\u0003\u0002\u0002\u0002\u2689\u268a\u0003\u0002\u0002\u0002\u268a",
    "\u268c\u0003\u0002\u0002\u0002\u268b\u2685\u0003\u0002\u0002\u0002\u268b",
    "\u268c\u0003\u0002\u0002\u0002\u268c\u268d\u0003\u0002\u0002\u0002\u268d",
    "\u268e\u0007\u0325\u0002\u0002\u268e\u268f\u0005\u035a\u01ae\u0002\u268f",
    "\u2691\u0003\u0002\u0002\u0002\u2690\u267c\u0003\u0002\u0002\u0002\u2690",
    "\u2682\u0003\u0002\u0002\u0002\u2691\u0357\u0003\u0002\u0002\u0002\u2692",
    "\u2694\tj\u0002\u0002\u2693\u2692\u0003\u0002\u0002\u0002\u2693\u2694",
    "\u0003\u0002\u0002\u0002\u2694\u2695\u0003\u0002\u0002\u0002\u2695\u2696",
    "\u0005\u02c2\u0162\u0002\u2696\u0359\u0003\u0002\u0002\u0002\u2697\u2698",
    "\u0007\u00ef\u0002\u0002\u2698\u269c\u0007\u0324\u0002\u0002\u2699\u269a",
    "\u0007\u0277\u0002\u0002\u269a\u269b\u0007%\u0002\u0002\u269b\u269d",
    "\u0005\u0350\u01a9\u0002\u269c\u2699\u0003\u0002\u0002\u0002\u269c\u269d",
    "\u0003\u0002\u0002\u0002\u269d\u269f\u0003\u0002\u0002\u0002\u269e\u26a0",
    "\u0005\u02ec\u0177\u0002\u269f\u269e\u0003\u0002\u0002\u0002\u269f\u26a0",
    "\u0003\u0002\u0002\u0002\u26a0\u26a2\u0003\u0002\u0002\u0002\u26a1\u26a3",
    "\u0005\u035c\u01af\u0002\u26a2\u26a1\u0003\u0002\u0002\u0002\u26a2\u26a3",
    "\u0003\u0002\u0002\u0002\u26a3\u26a4\u0003\u0002\u0002\u0002\u26a4\u26a5",
    "\u0007\u0325\u0002\u0002\u26a5\u035b\u0003\u0002\u0002\u0002\u26a6\u26a7",
    "\t}\u0002\u0002\u26a7\u26a8\u0005\u035e\u01b0\u0002\u26a8\u035d\u0003",
    "\u0002\u0002\u0002\u26a9\u26b0\u0005\u0362\u01b2\u0002\u26aa\u26ab\u0007",
    "\u001c\u0002\u0002\u26ab\u26ac\u0005\u0360\u01b1\u0002\u26ac\u26ad\u0007",
    "\n\u0002\u0002\u26ad\u26ae\u0005\u0360\u01b1\u0002\u26ae\u26b0\u0003",
    "\u0002\u0002\u0002\u26af\u26a9\u0003\u0002\u0002\u0002\u26af\u26aa\u0003",
    "\u0002\u0002\u0002\u26b0\u035f\u0003\u0002\u0002\u0002\u26b1\u26b4\u0005",
    "\u0362\u01b2\u0002\u26b2\u26b4\u0005\u0364\u01b3\u0002\u26b3\u26b1\u0003",
    "\u0002\u0002\u0002\u26b3\u26b2\u0003\u0002\u0002\u0002\u26b4\u0361\u0003",
    "\u0002\u0002\u0002\u26b5\u26b6\u0007\u02f2\u0002\u0002\u26b6\u26bc\u0007",
    "\u027e\u0002\u0002\u26b7\u26b8\u0007\u030b\u0002\u0002\u26b8\u26bc\u0007",
    "\u027e\u0002\u0002\u26b9\u26ba\u0007J\u0002\u0002\u26ba\u26bc\u0007",
    "\u02b0\u0002\u0002\u26bb\u26b5\u0003\u0002\u0002\u0002\u26bb\u26b7\u0003",
    "\u0002\u0002\u0002\u26bb\u26b9\u0003\u0002\u0002\u0002\u26bc\u0363\u0003",
    "\u0002\u0002\u0002\u26bd\u26be\u0007\u02f2\u0002\u0002\u26be\u26c2\u0007",
    "\u0201\u0002\u0002\u26bf\u26c0\u0007\u030b\u0002\u0002\u26c0\u26c2\u0007",
    "\u0201\u0002\u0002\u26c1\u26bd\u0003\u0002\u0002\u0002\u26c1\u26bf\u0003",
    "\u0002\u0002\u0002\u26c2\u0365\u0003\u0002\u0002\u0002\u26c3\u26c4\u0007",
    "\u01fd\u0002\u0002\u26c4\u26c9\u0005\u0368\u01b5\u0002\u26c5\u26c6\u0007",
    "\u0326\u0002\u0002\u26c6\u26c8\u0005\u0368\u01b5\u0002\u26c7\u26c5\u0003",
    "\u0002\u0002\u0002\u26c8\u26cb\u0003\u0002\u0002\u0002\u26c9\u26c7\u0003",
    "\u0002\u0002\u0002\u26c9\u26ca\u0003\u0002\u0002\u0002\u26ca\u26e6\u0003",
    "\u0002\u0002\u0002\u26cb\u26c9\u0003\u0002\u0002\u0002\u26cc\u26cd\u0007",
    "\u01d5\u0002\u0002\u26cd\u26d0\u0007\u0313\u0002\u0002\u26ce\u26d1\u0005",
    "\u03ac\u01d7\u0002\u26cf\u26d1\u0007\u030f\u0002\u0002\u26d0\u26ce\u0003",
    "\u0002\u0002\u0002\u26d0\u26cf\u0003\u0002\u0002\u0002\u26d1\u26e6\u0003",
    "\u0002\u0002\u0002\u26d2\u26d3\u0007\u01d4\u0002\u0002\u26d3\u26d6\u0007",
    "\u0313\u0002\u0002\u26d4\u26d7\u0005\u03ac\u01d7\u0002\u26d5\u26d7\u0007",
    "\u030f\u0002\u0002\u26d6\u26d4\u0003\u0002\u0002\u0002\u26d6\u26d5\u0003",
    "\u0002\u0002\u0002\u26d7\u26e6\u0003\u0002\u0002\u0002\u26d8\u26d9\u0007",
    "\u0257\u0002\u0002\u26d9\u26da\u0007\u0313\u0002\u0002\u26da\u26e6\t",
    "\b\u0002\u0002\u26db\u26dc\u0007\u02e9\u0002\u0002\u26dc\u26dd\u0007",
    "\u0313\u0002\u0002\u26dd\u26e6\t\b\u0002\u0002\u26de\u26df\u0007\u02ef",
    "\u0002\u0002\u26df\u26e0\u0007\u0313\u0002\u0002\u26e0\u26e6\u0007\u030b",
    "\u0002\u0002\u26e1\u26e2\u0007\u01d0\u0002\u0002\u26e2\u26e6\t\b\u0002",
    "\u0002\u26e3\u26e4\u0007\u02ec\u0002\u0002\u26e4\u26e6\t\b\u0002\u0002",
    "\u26e5\u26c3\u0003\u0002\u0002\u0002\u26e5\u26cc\u0003\u0002\u0002\u0002",
    "\u26e5\u26d2\u0003\u0002\u0002\u0002\u26e5\u26d8\u0003\u0002\u0002\u0002",
    "\u26e5\u26db\u0003\u0002\u0002\u0002\u26e5\u26de\u0003\u0002\u0002\u0002",
    "\u26e5\u26e1\u0003\u0002\u0002\u0002\u26e5\u26e3\u0003\u0002\u0002\u0002",
    "\u26e6\u0367\u0003\u0002\u0002\u0002\u26e7\u26ee\u0007\u0324\u0002\u0002",
    "\u26e8\u26e9\u0007\u025f\u0002\u0002\u26e9\u26ea\u0007\u0313\u0002\u0002",
    "\u26ea\u26ef\t~\u0002\u0002\u26eb\u26ec\u0007\u01e0\u0002\u0002\u26ec",
    "\u26ed\u0007\u0313\u0002\u0002\u26ed\u26ef\u0007\u030f\u0002\u0002\u26ee",
    "\u26e8\u0003\u0002\u0002\u0002\u26ee\u26eb\u0003\u0002\u0002\u0002\u26ef",
    "\u26f0\u0003\u0002\u0002\u0002\u26f0\u26f1\u0007\u0325\u0002\u0002\u26f1",
    "\u0369\u0003\u0002\u0002\u0002\u26f2\u26f5\u0005\u036c\u01b7\u0002\u26f3",
    "\u26f5\u0005\u036e\u01b8\u0002\u26f4\u26f2\u0003\u0002\u0002\u0002\u26f4",
    "\u26f3\u0003\u0002\u0002\u0002\u26f5\u036b\u0003\u0002\u0002\u0002\u26f6",
    "\u26f7\u0007\u01fa\u0002\u0002\u26f7\u26fa\u0005\u03ac\u01d7\u0002\u26f8",
    "\u26f9\u0007>\u0002\u0002\u26f9\u26fb\u0007\u01fd\u0002\u0002\u26fa",
    "\u26f8\u0003\u0002\u0002\u0002\u26fa\u26fb\u0003\u0002\u0002\u0002\u26fb",
    "\u26fd\u0003\u0002\u0002\u0002\u26fc\u26fe\u0007Y\u0002\u0002\u26fd",
    "\u26fc\u0003\u0002\u0002\u0002\u26fd\u26fe\u0003\u0002\u0002\u0002\u26fe",
    "\u2701\u0003\u0002\u0002\u0002\u26ff\u2700\u0007>\u0002\u0002\u2700",
    "\u2702\u0007\u024d\u0002\u0002\u2701\u26ff\u0003\u0002\u0002\u0002\u2701",
    "\u2702\u0003\u0002\u0002\u0002\u2702\u2703\u0003\u0002\u0002\u0002\u2703",
    "\u2708\u0005\u036e\u01b8\u0002\u2704\u2705\u0007\u0326\u0002\u0002\u2705",
    "\u2707\u0005\u036e\u01b8\u0002\u2706\u2704\u0003\u0002\u0002\u0002\u2707",
    "\u270a\u0003\u0002\u0002\u0002\u2708\u2706\u0003\u0002\u0002\u0002\u2708",
    "\u2709\u0003\u0002\u0002\u0002\u2709\u036d\u0003\u0002\u0002\u0002\u270a",
    "\u2708\u0003\u0002\u0002\u0002\u270b\u270c\u0007\u0324\u0002\u0002\u270c",
    "\u270d\u0007\u0256\u0002\u0002\u270d\u2710\u0007\u0313\u0002\u0002\u270e",
    "\u2711\u0005\u03ac\u01d7\u0002\u270f\u2711\u0007\u030f\u0002\u0002\u2710",
    "\u270e\u0003\u0002\u0002\u0002\u2710\u270f\u0003\u0002\u0002\u0002\u2711",
    "\u2713\u0003\u0002\u0002\u0002\u2712\u2714\u0007\u0326\u0002\u0002\u2713",
    "\u2712\u0003\u0002\u0002\u0002\u2713\u2714\u0003\u0002\u0002\u0002\u2714",
    "\u2715\u0003\u0002\u0002\u0002\u2715\u2716\u0007\u0082\u0002\u0002\u2716",
    "\u2717\u0007\u0313\u0002\u0002\u2717\u2719\u0007\u030f\u0002\u0002\u2718",
    "\u271a\u0007\u0326\u0002\u0002\u2719\u2718\u0003\u0002\u0002\u0002\u2719",
    "\u271a\u0003\u0002\u0002\u0002\u271a\u2721\u0003\u0002\u0002\u0002\u271b",
    "\u271c\u0007\u02cb\u0002\u0002\u271c\u271d\u0007\u0313\u0002\u0002\u271d",
    "\u271f\u0005\u03b4\u01db\u0002\u271e\u2720\u0007\u0326\u0002\u0002\u271f",
    "\u271e\u0003\u0002\u0002\u0002\u271f\u2720\u0003\u0002\u0002\u0002\u2720",
    "\u2722\u0003\u0002\u0002\u0002\u2721\u271b\u0003\u0002\u0002\u0002\u2721",
    "\u2722\u0003\u0002\u0002\u0002\u2722\u272c\u0003\u0002\u0002\u0002\u2723",
    "\u2724\u0007\u0249\u0002\u0002\u2724\u2727\u0007\u0313\u0002\u0002\u2725",
    "\u2728\u0005\u03b4\u01db\u0002\u2726\u2728\u0007\u02f5\u0002\u0002\u2727",
    "\u2725\u0003\u0002\u0002\u0002\u2727\u2726\u0003\u0002\u0002\u0002\u2728",
    "\u272a\u0003\u0002\u0002\u0002\u2729\u272b\u0007\u0326\u0002\u0002\u272a",
    "\u2729\u0003\u0002\u0002\u0002\u272a\u272b\u0003\u0002\u0002\u0002\u272b",
    "\u272d\u0003\u0002\u0002\u0002\u272c\u2723\u0003\u0002\u0002\u0002\u272c",
    "\u272d\u0003\u0002\u0002\u0002\u272d\u2734\u0003\u0002\u0002\u0002\u272e",
    "\u272f\u0007\u01fb\u0002\u0002\u272f\u2730\u0007\u0313\u0002\u0002\u2730",
    "\u2732\u0005\u03b4\u01db\u0002\u2731\u2733\u0007\u0326\u0002\u0002\u2732",
    "\u2731\u0003\u0002\u0002\u0002\u2732\u2733\u0003\u0002\u0002\u0002\u2733",
    "\u2735\u0003\u0002\u0002\u0002\u2734\u272e\u0003\u0002\u0002\u0002\u2734",
    "\u2735\u0003\u0002\u0002\u0002\u2735\u2736\u0003\u0002\u0002\u0002\u2736",
    "\u2737\u0007\u0325\u0002\u0002\u2737\u036f\u0003\u0002\u0002\u0002\u2738",
    "\u2739\u0005\u03ac\u01d7\u0002\u2739\u273a\u0007\u031f\u0002\u0002\u273a",
    "\u273b\u0005\u03ac\u01d7\u0002\u273b\u273c\u0007\u031f\u0002\u0002\u273c",
    "\u273d\u0005\u03ac\u01d7\u0002\u273d\u273e\u0007\u031f\u0002\u0002\u273e",
    "\u274a\u0003\u0002\u0002\u0002\u273f\u2740\u0005\u03ac\u01d7\u0002\u2740",
    "\u2742\u0007\u031f\u0002\u0002\u2741\u2743\u0005\u03ac\u01d7\u0002\u2742",
    "\u2741\u0003\u0002\u0002\u0002\u2742\u2743\u0003\u0002\u0002\u0002\u2743",
    "\u2744\u0003\u0002\u0002\u0002\u2744\u2745\u0007\u031f\u0002\u0002\u2745",
    "\u274a\u0003\u0002\u0002\u0002\u2746\u2747\u0005\u03ac\u01d7\u0002\u2747",
    "\u2748\u0007\u031f\u0002\u0002\u2748\u274a\u0003\u0002\u0002\u0002\u2749",
    "\u2738\u0003\u0002\u0002\u0002\u2749\u273f\u0003\u0002\u0002\u0002\u2749",
    "\u2746\u0003\u0002\u0002\u0002\u2749\u274a\u0003\u0002\u0002\u0002\u274a",
    "\u274b\u0003\u0002\u0002\u0002\u274b\u274c\u0005\u03ac\u01d7\u0002\u274c",
    "\u0371\u0003\u0002\u0002\u0002\u274d\u2753\u0005\u03ac\u01d7\u0002\u274e",
    "\u274f\u0005\u03ac\u01d7\u0002\u274f\u2750\u0007\u031f\u0002\u0002\u2750",
    "\u2751\u0005\u03ac\u01d7\u0002\u2751\u2753\u0003\u0002\u0002\u0002\u2752",
    "\u274d\u0003\u0002\u0002\u0002\u2752\u274e\u0003\u0002\u0002\u0002\u2753",
    "\u0373\u0003\u0002\u0002\u0002\u2754\u275a\u0005\u03ac\u01d7\u0002\u2755",
    "\u2756\u0005\u03ac\u01d7\u0002\u2756\u2757\u0007\u031f\u0002\u0002\u2757",
    "\u2758\u0005\u03ac\u01d7\u0002\u2758\u275a\u0003\u0002\u0002\u0002\u2759",
    "\u2754\u0003\u0002\u0002\u0002\u2759\u2755\u0003\u0002\u0002\u0002\u275a",
    "\u0375\u0003\u0002\u0002\u0002\u275b\u275c\u0005\u03ac\u01d7\u0002\u275c",
    "\u275d\u0007\u031f\u0002\u0002\u275d\u275e\u0005\u03ac\u01d7\u0002\u275e",
    "\u275f\u0007\u031f\u0002\u0002\u275f\u2760\u0005\u03ac\u01d7\u0002\u2760",
    "\u2761\u0007\u031f\u0002\u0002\u2761\u276d\u0003\u0002\u0002\u0002\u2762",
    "\u2763\u0005\u03ac\u01d7\u0002\u2763\u2765\u0007\u031f\u0002\u0002\u2764",
    "\u2766\u0005\u03ac\u01d7\u0002\u2765\u2764\u0003\u0002\u0002\u0002\u2765",
    "\u2766\u0003\u0002\u0002\u0002\u2766\u2767\u0003\u0002\u0002\u0002\u2767",
    "\u2768\u0007\u031f\u0002\u0002\u2768\u276d\u0003\u0002\u0002\u0002\u2769",
    "\u276a\u0005\u03ac\u01d7\u0002\u276a\u276b\u0007\u031f\u0002\u0002\u276b",
    "\u276d\u0003\u0002\u0002\u0002\u276c\u275b\u0003\u0002\u0002\u0002\u276c",
    "\u2762\u0003\u0002\u0002\u0002\u276c\u2769\u0003\u0002\u0002\u0002\u276c",
    "\u276d\u0003\u0002\u0002\u0002\u276d\u276e\u0003\u0002\u0002\u0002\u276e",
    "\u276f\u0005\u03ac\u01d7\u0002\u276f\u0377\u0003\u0002\u0002\u0002\u2770",
    "\u2771\u0005\u03ac\u01d7\u0002\u2771\u2773\u0007\u031f\u0002\u0002\u2772",
    "\u2774\u0005\u03ac\u01d7\u0002\u2773\u2772\u0003\u0002\u0002\u0002\u2773",
    "\u2774\u0003\u0002\u0002\u0002\u2774\u2775\u0003\u0002\u0002\u0002\u2775",
    "\u2776\u0007\u031f\u0002\u0002\u2776\u277b\u0003\u0002\u0002\u0002\u2777",
    "\u2778\u0005\u03ac\u01d7\u0002\u2778\u2779\u0007\u031f\u0002\u0002\u2779",
    "\u277b\u0003\u0002\u0002\u0002\u277a\u2770\u0003\u0002\u0002\u0002\u277a",
    "\u2777\u0003\u0002\u0002\u0002\u277a\u277b\u0003\u0002\u0002\u0002\u277b",
    "\u277c\u0003\u0002\u0002\u0002\u277c\u278b\u0005\u03ac\u01d7\u0002\u277d",
    "\u277e\u0005\u03ac\u01d7\u0002\u277e\u2780\u0007\u031f\u0002\u0002\u277f",
    "\u2781\u0005\u03ac\u01d7\u0002\u2780\u277f\u0003\u0002\u0002\u0002\u2780",
    "\u2781\u0003\u0002\u0002\u0002\u2781\u2782\u0003\u0002\u0002\u0002\u2782",
    "\u2783\u0007\u031f\u0002\u0002\u2783\u2788\u0003\u0002\u0002\u0002\u2784",
    "\u2785\u0005\u03ac\u01d7\u0002\u2785\u2786\u0007\u031f\u0002\u0002\u2786",
    "\u2788\u0003\u0002\u0002\u0002\u2787\u277d\u0003\u0002\u0002\u0002\u2787",
    "\u2784\u0003\u0002\u0002\u0002\u2787\u2788\u0003\u0002\u0002\u0002\u2788",
    "\u2789\u0003\u0002\u0002\u0002\u2789\u278b\u0007\u001f\u0002\u0002\u278a",
    "\u277a\u0003\u0002\u0002\u0002\u278a\u2787\u0003\u0002\u0002\u0002\u278b",
    "\u0379\u0003\u0002\u0002\u0002\u278c\u278d\u0005\u03ac\u01d7\u0002\u278d",
    "\u278e\u0007\u031f\u0002\u0002\u278e\u2790\u0003\u0002\u0002\u0002\u278f",
    "\u278c\u0003\u0002\u0002\u0002\u278f\u2790\u0003\u0002\u0002\u0002\u2790",
    "\u2791\u0003\u0002\u0002\u0002\u2791\u2792\u0005\u03ac\u01d7\u0002\u2792",
    "\u037b\u0003\u0002\u0002\u0002\u2793\u2794\u0005\u03ac\u01d7\u0002\u2794",
    "\u2796\u0007\u031f\u0002\u0002\u2795\u2797\u0005\u03ac\u01d7\u0002\u2796",
    "\u2795\u0003\u0002\u0002\u0002\u2796\u2797\u0003\u0002\u0002\u0002\u2797",
    "\u2798\u0003\u0002\u0002\u0002\u2798\u2799\u0007\u031f\u0002\u0002\u2799",
    "\u279e\u0003\u0002\u0002\u0002\u279a\u279b\u0005\u03ac\u01d7\u0002\u279b",
    "\u279c\u0007\u031f\u0002\u0002\u279c\u279e\u0003\u0002\u0002\u0002\u279d",
    "\u2793\u0003\u0002\u0002\u0002\u279d\u279a\u0003\u0002\u0002\u0002\u279d",
    "\u279e\u0003\u0002\u0002\u0002\u279e\u279f\u0003\u0002\u0002\u0002\u279f",
    "\u27a0\u0005\u03ac\u01d7\u0002\u27a0\u037d\u0003\u0002\u0002\u0002\u27a1",
    "\u27a4\u0005\u0376\u01bc\u0002\u27a2\u27a4\u0007\u030a\u0002\u0002\u27a3",
    "\u27a1\u0003\u0002\u0002\u0002\u27a3\u27a2\u0003\u0002\u0002\u0002\u27a4",
    "\u037f\u0003\u0002\u0002\u0002\u27a5\u27a6\u0005\u0378\u01bd\u0002\u27a6",
    "\u27a7\u0007\u031f\u0002\u0002\u27a7\u27a9\u0003\u0002\u0002\u0002\u27a8",
    "\u27a5\u0003\u0002\u0002\u0002\u27a8\u27a9\u0003\u0002\u0002\u0002\u27a9",
    "\u27aa\u0003\u0002\u0002\u0002\u27aa\u27d6\u0005\u03ac\u01d7\u0002\u27ab",
    "\u27ac\u0005\u0378\u01bd\u0002\u27ac\u27ad\u0007\u031f\u0002\u0002\u27ad",
    "\u27af\u0003\u0002\u0002\u0002\u27ae\u27ab\u0003\u0002\u0002\u0002\u27ae",
    "\u27af\u0003\u0002\u0002\u0002\u27af\u27b0\u0003\u0002\u0002\u0002\u27b0",
    "\u27d6\u0007\u01ba\u0002\u0002\u27b1\u27b2\u0005\u0378\u01bd\u0002\u27b2",
    "\u27b3\u0007\u031f\u0002\u0002\u27b3\u27b5\u0003\u0002\u0002\u0002\u27b4",
    "\u27b1\u0003\u0002\u0002\u0002\u27b4\u27b5\u0003\u0002\u0002\u0002\u27b5",
    "\u27b6\u0003\u0002\u0002\u0002\u27b6\u27d6\u0007\u02d2\u0002\u0002\u27b7",
    "\u27b8\u0005\u0378\u01bd\u0002\u27b8\u27b9\u0007\u031f\u0002\u0002\u27b9",
    "\u27bb\u0003\u0002\u0002\u0002\u27ba\u27b7\u0003\u0002\u0002\u0002\u27ba",
    "\u27bb\u0003\u0002\u0002\u0002\u27bb\u27bc\u0003\u0002\u0002\u0002\u27bc",
    "\u27d6\u0007\u028d\u0002\u0002\u27bd\u27be\u0005\u0378\u01bd\u0002\u27be",
    "\u27bf\u0007\u031f\u0002\u0002\u27bf\u27c1\u0003\u0002\u0002\u0002\u27c0",
    "\u27bd\u0003\u0002\u0002\u0002\u27c0\u27c1\u0003\u0002\u0002\u0002\u27c1",
    "\u27c2\u0003\u0002\u0002\u0002\u27c2\u27d6\u0007\u0196\u0002\u0002\u27c3",
    "\u27c4\u0005\u0378\u01bd\u0002\u27c4\u27c5\u0007\u031f\u0002\u0002\u27c5",
    "\u27c7\u0003\u0002\u0002\u0002\u27c6\u27c3\u0003\u0002\u0002\u0002\u27c6",
    "\u27c7\u0003\u0002\u0002\u0002\u27c7\u27c8\u0003\u0002\u0002\u0002\u27c8",
    "\u27d6\u0007\u0193\u0002\u0002\u27c9\u27ca\u0005\u0378\u01bd\u0002\u27ca",
    "\u27cb\u0007\u031f\u0002\u0002\u27cb\u27cd\u0003\u0002\u0002\u0002\u27cc",
    "\u27c9\u0003\u0002\u0002\u0002\u27cc\u27cd\u0003\u0002\u0002\u0002\u27cd",
    "\u27ce\u0003\u0002\u0002\u0002\u27ce\u27d6\u0007\u0192\u0002\u0002\u27cf",
    "\u27d0\u0005\u0378\u01bd\u0002\u27d0\u27d1\u0007\u031f\u0002\u0002\u27d1",
    "\u27d3\u0003\u0002\u0002\u0002\u27d2\u27cf\u0003\u0002\u0002\u0002\u27d2",
    "\u27d3\u0003\u0002\u0002\u0002\u27d3\u27d4\u0003\u0002\u0002\u0002\u27d4",
    "\u27d6\u0007\u0190\u0002\u0002\u27d5\u27a8\u0003\u0002\u0002\u0002\u27d5",
    "\u27ae\u0003\u0002\u0002\u0002\u27d5\u27b4\u0003\u0002\u0002\u0002\u27d5",
    "\u27ba\u0003\u0002\u0002\u0002\u27d5\u27c0\u0003\u0002\u0002\u0002\u27d5",
    "\u27c6\u0003\u0002\u0002\u0002\u27d5\u27cc\u0003\u0002\u0002\u0002\u27d5",
    "\u27d2\u0003\u0002\u0002\u0002\u27d6\u0381\u0003\u0002\u0002\u0002\u27d7",
    "\u27d9\u0005\u03ac\u01d7\u0002\u27d8\u27da\tp\u0002\u0002\u27d9\u27d8",
    "\u0003\u0002\u0002\u0002\u27d9\u27da\u0003\u0002\u0002\u0002\u27da\u27e2",
    "\u0003\u0002\u0002\u0002\u27db\u27dc\u0007\u0326\u0002\u0002\u27dc\u27de",
    "\u0005\u03ac\u01d7\u0002\u27dd\u27df\tp\u0002\u0002\u27de\u27dd\u0003",
    "\u0002\u0002\u0002\u27de\u27df\u0003\u0002\u0002\u0002\u27df\u27e1\u0003",
    "\u0002\u0002\u0002\u27e0\u27db\u0003\u0002\u0002\u0002\u27e1\u27e4\u0003",
    "\u0002\u0002\u0002\u27e2\u27e0\u0003\u0002\u0002\u0002\u27e2\u27e3\u0003",
    "\u0002\u0002\u0002\u27e3\u0383\u0003\u0002\u0002\u0002\u27e4\u27e2\u0003",
    "\u0002\u0002\u0002\u27e5\u27ea\u0005\u03ac\u01d7\u0002\u27e6\u27e7\u0007",
    "\u0326\u0002\u0002\u27e7\u27e9\u0005\u03ac\u01d7\u0002\u27e8\u27e6\u0003",
    "\u0002\u0002\u0002\u27e9\u27ec\u0003\u0002\u0002\u0002\u27ea\u27e8\u0003",
    "\u0002\u0002\u0002\u27ea\u27eb\u0003\u0002\u0002\u0002\u27eb\u0385\u0003",
    "\u0002\u0002\u0002\u27ec\u27ea\u0003\u0002\u0002\u0002\u27ed\u27f0\u0005",
    "\u03ac\u01d7\u0002\u27ee\u27f0\u0007\u030a\u0002\u0002\u27ef\u27ed\u0003",
    "\u0002\u0002\u0002\u27ef\u27ee\u0003\u0002\u0002\u0002\u27f0\u0387\u0003",
    "\u0002\u0002\u0002\u27f1\u27f2\t\b\u0002\u0002\u27f2\u0389\u0003\u0002",
    "\u0002\u0002\u27f3\u27f4\t\u007f\u0002\u0002\u27f4\u038b\u0003\u0002",
    "\u0002\u0002\u27f5\u27f7\u0007\u00db\u0002\u0002\u27f6\u27f5\u0003\u0002",
    "\u0002\u0002\u27f6\u27f7\u0003\u0002\u0002\u0002\u27f7\u27f8\u0003\u0002",
    "\u0002\u0002\u27f8\u27f9\u0007\u00de\u0002\u0002\u27f9\u038d\u0003\u0002",
    "\u0002\u0002\u27fa\u2802\u0005\u038c\u01c7\u0002\u27fb\u27fc\u0007Y",
    "\u0002\u0002\u27fc\u27ff\u0005\u02cc\u0167\u0002\u27fd\u27fe\u0007\u017b",
    "\u0002\u0002\u27fe\u2800\u0007\u0171\u0002\u0002\u27ff\u27fd\u0003\u0002",
    "\u0002\u0002\u27ff\u2800\u0003\u0002\u0002\u0002\u2800\u2802\u0003\u0002",
    "\u0002\u0002\u2801\u27fa\u0003\u0002\u0002\u0002\u2801\u27fb\u0003\u0002",
    "\u0002\u0002\u2802\u038f\u0003\u0002\u0002\u0002\u2803\u2809\u0005\u037c",
    "\u01bf\u0002\u2804\u2809\u0007\u011e\u0002\u0002\u2805\u2809\u0007\u00b0",
    "\u0002\u0002\u2806\u2809\u0007\u01a7\u0002\u0002\u2807\u2809\u0007\u01b4",
    "\u0002\u0002\u2808\u2803\u0003\u0002\u0002\u0002\u2808\u2804\u0003\u0002",
    "\u0002\u0002\u2808\u2805\u0003\u0002\u0002\u0002\u2808\u2806\u0003\u0002",
    "\u0002\u0002\u2808\u2807\u0003\u0002\u0002\u0002\u2809\u0391\u0003\u0002",
    "\u0002\u0002\u280a\u280b\u0007\u001b\u0002\u0002\u280b\u280c\u0007E",
    "\u0002\u0002\u280c\u280d\u0007\u02e5\u0002\u0002\u280d\u280e\u0007\u0324",
    "\u0002\u0002\u280e\u280f\u0007\u030a\u0002\u0002\u280f\u2810\u0007\u0325",
    "\u0002\u0002\u2810\u2811\u0007\u02e7\u0002\u0002\u2811\u2812\u0007\u0313",
    "\u0002\u0002\u2812\u2814\u0005\u01be\u00e0\u0002\u2813\u2815\u0007\u0327",
    "\u0002\u0002\u2814\u2813\u0003\u0002\u0002\u0002\u2814\u2815\u0003\u0002",
    "\u0002\u0002\u2815\u0393\u0003\u0002\u0002\u0002\u2816\u2817\u0007\u001b",
    "\u0002\u0002\u2817\u2819\u0007\u01df\u0002\u0002\u2818\u281a\u0007E",
    "\u0002\u0002\u2819\u2818\u0003\u0002\u0002\u0002\u2819\u281a\u0003\u0002",
    "\u0002\u0002\u281a\u281b\u0003\u0002\u0002\u0002\u281b\u281c\u0007\u030a",
    "\u0002\u0002\u281c\u281d\u0007\u008b\u0002\u0002\u281d\u281e\u0007\u0137",
    "\u0002\u0002\u281e\u281f\u0005\u0398\u01cd\u0002\u281f\u2820\u0007\u015c",
    "\u0002\u0002\u2820\u2821\u0007\u0137\u0002\u0002\u2821\u2824\u0005\u0398",
    "\u01cd\u0002\u2822\u2823\u0007\u0326\u0002\u0002\u2823\u2825\u0007\u030f",
    "\u0002\u0002\u2824\u2822\u0003\u0002\u0002\u0002\u2824\u2825\u0003\u0002",
    "\u0002\u0002\u2825\u2826\u0003\u0002\u0002\u0002\u2826\u2827\u0007\u00e4",
    "\u0002\u0002\u2827\u2828\u0007C\u0002\u0002\u2828\u283f\u0005\u0396",
    "\u01cc\u0002\u2829\u2830\u0007\u017b\u0002\u0002\u282a\u282b\t\u0080",
    "\u0002\u0002\u282b\u282c\u0007\u0313\u0002\u0002\u282c\u282e\u0007\u030a",
    "\u0002\u0002\u282d\u282f\u0007\u0326\u0002\u0002\u282e\u282d\u0003\u0002",
    "\u0002\u0002\u282e\u282f\u0003\u0002\u0002\u0002\u282f\u2831\u0003\u0002",
    "\u0002\u0002\u2830\u282a\u0003\u0002\u0002\u0002\u2830\u2831\u0003\u0002",
    "\u0002\u0002\u2831\u2838\u0003\u0002\u0002\u0002\u2832\u2833\u0007\u00b2",
    "\u0002\u0002\u2833\u2834\u0007\u0313\u0002\u0002\u2834\u2836\t\u0002",
    "\u0002\u0002\u2835\u2837\u0007\u0326\u0002\u0002\u2836\u2835\u0003\u0002",
    "\u0002\u0002\u2836\u2837\u0003\u0002\u0002\u0002\u2837\u2839\u0003\u0002",
    "\u0002\u0002\u2838\u2832\u0003\u0002\u0002\u0002\u2838\u2839\u0003\u0002",
    "\u0002\u0002\u2839\u283d\u0003\u0002\u0002\u0002\u283a\u283b\u0007\u01ec",
    "\u0002\u0002\u283b\u283c\u0007\u0313\u0002\u0002\u283c\u283e\t\b\u0002",
    "\u0002\u283d\u283a\u0003\u0002\u0002\u0002\u283d\u283e\u0003\u0002\u0002",
    "\u0002\u283e\u2840\u0003\u0002\u0002\u0002\u283f\u2829\u0003\u0002\u0002",
    "\u0002\u283f\u2840\u0003\u0002\u0002\u0002\u2840\u2842\u0003\u0002\u0002",
    "\u0002\u2841\u2843\u0007\u0327\u0002\u0002\u2842\u2841\u0003\u0002\u0002",
    "\u0002\u2842\u2843\u0003\u0002\u0002\u0002\u2843\u0395\u0003\u0002\u0002",
    "\u0002\u2844\u2847\u0005\u03ac\u01d7\u0002\u2845\u2847\u0005\u02c2\u0162",
    "\u0002\u2846\u2844\u0003\u0002\u0002\u0002\u2846\u2845\u0003\u0002\u0002",
    "\u0002\u2847\u0397\u0003\u0002\u0002\u0002\u2848\u284b\u0005\u03ac\u01d7",
    "\u0002\u2849\u284b\u0005\u02c2\u0162\u0002\u284a\u2848\u0003\u0002\u0002",
    "\u0002\u284a\u2849\u0003\u0002\u0002\u0002\u284b\u0399\u0003\u0002\u0002",
    "\u0002\u284c\u284d\u0007l\u0002\u0002\u284d\u284e\u0007E\u0002\u0002",
    "\u284e\u2850\u0007\u030a\u0002\u0002\u284f\u2851\u0007\u0327\u0002\u0002",
    "\u2850\u284f\u0003\u0002\u0002\u0002\u2850\u2851\u0003\u0002\u0002\u0002",
    "\u2851\u285e\u0003\u0002\u0002\u0002\u2852\u2859\u0007\u017b\u0002\u0002",
    "\u2853\u2854\u0007p\u0002\u0002\u2854\u2855\u0007\u0313\u0002\u0002",
    "\u2855\u2856\t\u0003\u0002\u0002\u2856\u2857\u0007\u01dd\u0002\u0002",
    "\u2857\u2858\u0007\u0313\u0002\u0002\u2858\u285a\t\u0003\u0002\u0002",
    "\u2859\u2853\u0003\u0002\u0002\u0002\u2859\u285a\u0003\u0002\u0002\u0002",
    "\u285a\u285c\u0003\u0002\u0002\u0002\u285b\u285d\u0007\u01b6\u0002\u0002",
    "\u285c\u285b\u0003\u0002\u0002\u0002\u285c\u285d\u0003\u0002\u0002\u0002",
    "\u285d\u285f\u0003\u0002\u0002\u0002\u285e\u2852\u0003\u0002\u0002\u0002",
    "\u285e\u285f\u0003\u0002\u0002\u0002\u285f\u039b\u0003\u0002\u0002\u0002",
    "\u2860\u2862\u0007\u0176\u0002\u0002\u2861\u2860\u0003\u0002\u0002\u0002",
    "\u2861\u2862\u0003\u0002\u0002\u0002\u2862\u2863\u0003\u0002\u0002\u0002",
    "\u2863\u2864\u0007\u0324\u0002\u0002\u2864\u2865\u0005\u039e\u01d0\u0002",
    "\u2865\u286b\u0007\u0325\u0002\u0002\u2866\u2868\u0007\u0326\u0002\u0002",
    "\u2867\u2866\u0003\u0002\u0002\u0002\u2867\u2868\u0003\u0002\u0002\u0002",
    "\u2868\u2869\u0003\u0002\u0002\u0002\u2869\u286a\u0007\u02e7\u0002\u0002",
    "\u286a\u286c\u0005\u01be\u00e0\u0002\u286b\u2867\u0003\u0002\u0002\u0002",
    "\u286b\u286c\u0003\u0002\u0002\u0002\u286c\u286e\u0003\u0002\u0002\u0002",
    "\u286d\u286f\u0007\u0327\u0002\u0002\u286e\u286d\u0003\u0002\u0002\u0002",
    "\u286e\u286f\u0003\u0002\u0002\u0002\u286f\u039d\u0003\u0002\u0002\u0002",
    "\u2870\u2871\u0007\u008e\u0002\u0002\u2871\u2872\u0007E\u0002\u0002",
    "\u2872\u2873\u0007\u0092\u0002\u0002\u2873\u2874\t\u0003\u0002\u0002",
    "\u2874\u2875\u0007\u008b\u0002\u0002\u2875\u2877\u0005\u03a0\u01d1\u0002",
    "\u2876\u2878\u0007\u0327\u0002\u0002\u2877\u2876\u0003\u0002\u0002\u0002",
    "\u2877\u2878\u0003\u0002\u0002\u0002\u2878\u039f\u0003\u0002\u0002\u0002",
    "\u2879\u287a\u0005\u03ac\u01d7\u0002\u287a\u287b\u0007\u031f\u0002\u0002",
    "\u287b\u287c\u0005\u03ac\u01d7\u0002\u287c\u287d\u0007\u031f\u0002\u0002",
    "\u287d\u287e\u0005\u03ac\u01d7\u0002\u287e\u2881\u0003\u0002\u0002\u0002",
    "\u287f\u2881\u0005\u03ac\u01d7\u0002\u2880\u2879\u0003\u0002\u0002\u0002",
    "\u2880\u287f\u0003\u0002\u0002\u0002\u2881\u03a1\u0003\u0002\u0002\u0002",
    "\u2882\u2883\u0007\u02c2\u0002\u0002\u2883\u2884\u0007\u00e4\u0002\u0002",
    "\u2884\u2885\u0007E\u0002\u0002\u2885\u2886\t\u0003\u0002\u0002\u2886",
    "\u2887\u0007\u024b\u0002\u0002\u2887\u2888\u0007\u02f0\u0002\u0002\u2888",
    "\u288c\u0005\u02c2\u0162\u0002\u2889\u288a\u0007\u0324\u0002\u0002\u288a",
    "\u288b\t\u0003\u0002\u0002\u288b\u288d\u0007\u0325\u0002\u0002\u288c",
    "\u2889\u0003\u0002\u0002\u0002\u288c\u288d\u0003\u0002\u0002\u0002\u288d",
    "\u288f\u0003\u0002\u0002\u0002\u288e\u2890\u0007\u0327\u0002\u0002\u288f",
    "\u288e\u0003\u0002\u0002\u0002\u288f\u2890\u0003\u0002\u0002\u0002\u2890",
    "\u03a3\u0003\u0002\u0002\u0002\u2891\u2893\u0005\u03ac\u01d7\u0002\u2892",
    "\u2894\u0007\u0096\u0002\u0002\u2893\u2892\u0003\u0002\u0002\u0002\u2893",
    "\u2894\u0003\u0002\u0002\u0002\u2894\u289c\u0003\u0002\u0002\u0002\u2895",
    "\u2896\u0007\u0324\u0002\u0002\u2896\u2899\t\u0081\u0002\u0002\u2897",
    "\u2898\u0007\u0326\u0002\u0002\u2898\u289a\u0007\u030b\u0002\u0002\u2899",
    "\u2897\u0003\u0002\u0002\u0002\u2899\u289a\u0003\u0002\u0002\u0002\u289a",
    "\u289b\u0003\u0002\u0002\u0002\u289b\u289d\u0007\u0325\u0002\u0002\u289c",
    "\u2895\u0003\u0002\u0002\u0002\u289c\u289d\u0003\u0002\u0002\u0002\u289d",
    "\u28a3\u0003\u0002\u0002\u0002\u289e\u28a3\u0007\u0221\u0002\u0002\u289f",
    "\u28a3\u0007\u02e6\u0002\u0002\u28a0\u28a3\u0007\u02cc\u0002\u0002\u28a1",
    "\u28a3\u0007\u01a5\u0002\u0002\u28a2\u2891\u0003\u0002\u0002\u0002\u28a2",
    "\u289e\u0003\u0002\u0002\u0002\u28a2\u289f\u0003\u0002\u0002\u0002\u28a2",
    "\u28a0\u0003\u0002\u0002\u0002\u28a2\u28a1\u0003\u0002\u0002\u0002\u28a3",
    "\u03a5\u0003\u0002\u0002\u0002\u28a4\u28a8\u0007\u00de\u0002\u0002\u28a5",
    "\u28a8\u0007Y\u0002\u0002\u28a6\u28a8\u0005\u03a8\u01d5\u0002\u28a7",
    "\u28a4\u0003\u0002\u0002\u0002\u28a7\u28a5\u0003\u0002\u0002\u0002\u28a7",
    "\u28a6\u0003\u0002\u0002\u0002\u28a8\u03a7\u0003\u0002\u0002\u0002\u28a9",
    "\u28b9\u0007\u030f\u0002\u0002\u28aa\u28b9\u0007\u0310\u0002\u0002\u28ab",
    "\u28ad\u0005\u03aa\u01d6\u0002\u28ac\u28ab\u0003\u0002\u0002\u0002\u28ac",
    "\u28ad\u0003\u0002\u0002\u0002\u28ad\u28ae\u0003\u0002\u0002\u0002\u28ae",
    "\u28b9\u0007\u030b\u0002\u0002\u28af\u28b1\u0005\u03aa\u01d6\u0002\u28b0",
    "\u28af\u0003\u0002\u0002\u0002\u28b0\u28b1\u0003\u0002\u0002\u0002\u28b1",
    "\u28b2\u0003\u0002\u0002\u0002\u28b2\u28b9\tk\u0002\u0002\u28b3\u28b5",
    "\u0005\u03aa\u01d6\u0002\u28b4\u28b3\u0003\u0002\u0002\u0002\u28b4\u28b5",
    "\u0003\u0002\u0002\u0002\u28b5\u28b6\u0003\u0002\u0002\u0002\u28b6\u28b7",
    "\u0007\u0323\u0002\u0002\u28b7\u28b9\t\u0082\u0002\u0002\u28b8\u28a9",
    "\u0003\u0002\u0002\u0002\u28b8\u28aa\u0003\u0002\u0002\u0002\u28b8\u28ac",
    "\u0003\u0002\u0002\u0002\u28b8\u28b0\u0003\u0002\u0002\u0002\u28b8\u28b4",
    "\u0003\u0002\u0002\u0002\u28b9\u03a9\u0003\u0002\u0002\u0002\u28ba\u28bb",
    "\th\u0002\u0002\u28bb\u03ab\u0003\u0002\u0002\u0002\u28bc\u28c0\u0005",
    "\u03ae\u01d8\u0002\u28bd\u28c0\u0007\u0307\u0002\u0002\u28be\u28c0\u0007",
    "\u0309\u0002\u0002\u28bf\u28bc\u0003\u0002\u0002\u0002\u28bf\u28bd\u0003",
    "\u0002\u0002\u0002\u28bf\u28be\u0003\u0002\u0002\u0002\u28c0\u03ad\u0003",
    "\u0002\u0002\u0002\u28c1\u28c2\t\u0083\u0002\u0002\u28c2\u03af\u0003",
    "\u0002\u0002\u0002\u28c3\u28d3\u0007\u0313\u0002\u0002\u28c4\u28d3\u0007",
    "\u0314\u0002\u0002\u28c5\u28d3\u0007\u0315\u0002\u0002\u28c6\u28c7\u0007",
    "\u0315\u0002\u0002\u28c7\u28d3\u0007\u0313\u0002\u0002\u28c8\u28c9\u0007",
    "\u0314\u0002\u0002\u28c9\u28d3\u0007\u0313\u0002\u0002\u28ca\u28cb\u0007",
    "\u0315\u0002\u0002\u28cb\u28d3\u0007\u0314\u0002\u0002\u28cc\u28cd\u0007",
    "\u0316\u0002\u0002\u28cd\u28d3\u0007\u0313\u0002\u0002\u28ce\u28cf\u0007",
    "\u0316\u0002\u0002\u28cf\u28d3\u0007\u0314\u0002\u0002\u28d0\u28d1\u0007",
    "\u0316\u0002\u0002\u28d1\u28d3\u0007\u0315\u0002\u0002\u28d2\u28c3\u0003",
    "\u0002\u0002\u0002\u28d2\u28c4\u0003\u0002\u0002\u0002\u28d2\u28c5\u0003",
    "\u0002\u0002\u0002\u28d2\u28c6\u0003\u0002\u0002\u0002\u28d2\u28c8\u0003",
    "\u0002\u0002\u0002\u28d2\u28ca\u0003\u0002\u0002\u0002\u28d2\u28cc\u0003",
    "\u0002\u0002\u0002\u28d2\u28ce\u0003\u0002\u0002\u0002\u28d2\u28d0\u0003",
    "\u0002\u0002\u0002\u28d3\u03b1\u0003\u0002\u0002\u0002\u28d4\u28d5\t",
    "\u0084\u0002\u0002\u28d5\u03b3\u0003\u0002\u0002\u0002\u28d6\u28d8\u0007",
    "\u030b\u0002\u0002\u28d7\u28d9\t\u0085\u0002\u0002\u28d8\u28d7\u0003",
    "\u0002\u0002\u0002\u28d8\u28d9\u0003\u0002\u0002\u0002\u28d9\u03b5\u0003",
    "\u0002\u0002\u0002\u05c4\u03b9\u03c2\u03c7\u03cb\u03d4\u03db\u047a\u0481",
    "\u048f\u0493\u0496\u049a\u049e\u04a2\u04a7\u04ac\u04ae\u04b2\u04b5\u04bc",
    "\u04bf\u04c8\u04cb\u04d6\u04d9\u04de\u04e3\u04e6\u04eb\u04ef\u04f2\u04f6",
    "\u04f9\u04fc\u0503\u0507\u0509\u050e\u051b\u0521\u0524\u0534\u053c\u0541",
    "\u0544\u0549\u054c\u0551\u0559\u055e\u0561\u0566\u056c\u0571\u0582\u0585",
    "\u0588\u058b\u0590\u0599\u05a8\u05b9\u05c4\u05ca\u05d9\u05e8\u05f1\u05f5",
    "\u05fa\u0600\u0606\u0609\u060e\u0613\u061b\u0625\u0638\u0640\u064d\u064f",
    "\u065b\u065d\u0664\u066d\u0673\u067c\u068b\u0695\u069f\u06c7\u06de\u0702",
    "\u0714\u0717\u071c\u071f\u0724\u0727\u072c\u072f\u0734\u0737\u073f\u0742",
    "\u074a\u0757\u0762\u0767\u076b\u0771\u0788\u0794\u079f\u07a4\u07a8\u07ae",
    "\u07b0\u07bd\u07d4\u07db\u07e4\u07e9\u07ec\u07f1\u07f4\u07f9\u07fe\u081a",
    "\u0821\u0826\u082d\u082f\u083a\u0840\u084f\u085d\u0860\u0862\u0867\u086b",
    "\u086e\u0870\u0876\u0879\u087b\u0881\u0883\u0899\u08a1\u08a9\u08ab\u08ad",
    "\u08b6\u08cb\u08d8\u08e7\u08eb\u090e\u0911\u0916\u0928\u092b\u0930\u094a",
    "\u0958\u095d\u0965\u096a\u0971\u0986\u09ab\u09b0\u09c3\u09cf\u09d2\u09d7",
    "\u09da\u09e0\u09ef\u09f4\u09fc\u09ff\u0a04\u0a09\u0a0c\u0a24\u0a2b\u0a30",
    "\u0a35\u0a3a\u0a3c\u0a43\u0a50\u0a56\u0a5b\u0a63\u0a73\u0a7a\u0a7f\u0a84",
    "\u0a87\u0a8d\u0a93\u0a98\u0a9d\u0aa2\u0aa5\u0aab\u0ab1\u0ab8\u0abd\u0ac5",
    "\u0acb\u0acf\u0ad3\u0af0\u0afd\u0b03\u0b0d\u0b10\u0b24\u0b28\u0b2c\u0b31",
    "\u0b40\u0b47\u0b50\u0b58\u0b5b\u0b60\u0b65\u0b6d\u0b73\u0b77\u0b7d\u0b82",
    "\u0b86\u0b8d\u0b95\u0b9d\u0ba6\u0bab\u0baf\u0bb2\u0bb6\u0bbc\u0bc1\u0bc9",
    "\u0bd1\u0bd7\u0bdd\u0be0\u0be5\u0be8\u0bef\u0bf1\u0bf4\u0bfa\u0bfd\u0c02",
    "\u0c05\u0c0a\u0c0d\u0c12\u0c15\u0c1a\u0c1d\u0c20\u0c23\u0c2a\u0c2e\u0c35",
    "\u0c3c\u0c42\u0c4f\u0c53\u0c58\u0c62\u0c6b\u0c6f\u0c7b\u0c81\u0c86\u0c88",
    "\u0c9c\u0ca0\u0ca8\u0cb1\u0cb7\u0cbd\u0cc5\u0cc7\u0cd1\u0cd5\u0cd8\u0cdc",
    "\u0ce1\u0ce7\u0cea\u0cee\u0cf6\u0cf8\u0cfb\u0d03\u0d0b\u0d12\u0d19\u0d1b",
    "\u0d1d\u0d22\u0d28\u0d2b\u0d2d\u0d2f\u0d32\u0d37\u0d3a\u0d3f\u0d4e\u0d55",
    "\u0d5c\u0d5e\u0d60\u0d65\u0d6b\u0d6e\u0d70\u0d72\u0d75\u0d7a\u0d7d\u0d82",
    "\u0d8f\u0d94\u0d9d\u0da2\u0da8\u0dac\u0db0\u0dc1\u0dc3\u0dcd\u0dd2\u0dd4",
    "\u0dd8\u0dde\u0de6\u0deb\u0dee\u0df6\u0df9\u0dfe\u0e03\u0e08\u0e0d\u0e12",
    "\u0e17\u0e1b\u0e20\u0e2b\u0e30\u0e33\u0e36\u0e3b\u0e3e\u0e43\u0e46\u0e4b",
    "\u0e4e\u0e53\u0e56\u0e5b\u0e5e\u0e63\u0e69\u0e6e\u0e71\u0e76\u0e7d\u0e7f",
    "\u0e85\u0e8e\u0e93\u0e95\u0ea1\u0ea7\u0eb3\u0eb6\u0ebb\u0ebd\u0ec7\u0ecc",
    "\u0ece\u0ed2\u0ed8\u0eea\u0eec\u0efb\u0f0d\u0f15\u0f1f\u0f2f\u0f44\u0f4f",
    "\u0f55\u0f5e\u0f67\u0f6d\u0f76\u0f7b\u0f7e\u0f83\u0f86\u0f8b\u0f8e\u0f96",
    "\u0f9c\u0fa0\u0fa7\u0fad\u0fb1\u0fb4\u0fb6\u0fb9\u0fbe\u0fc1\u0fc6\u0fc9",
    "\u0fce\u0fd1\u0fd6\u0fd9\u0fe8\u0ff3\u0fff\u1006\u100d\u1011\u1016\u1019",
    "\u101e\u1021\u1026\u1029\u1032\u1039\u1048\u104c\u1051\u105c\u1066\u1072",
    "\u1078\u107a\u1082\u108b\u1090\u109b\u109e\u10a2\u10aa\u10ae\u10b2\u10ba",
    "\u10bf\u10c7\u10cc\u10d0\u10d2\u10d7\u10e0\u10e3\u10e8\u10ef\u10f5\u10f7",
    "\u10fc\u1102\u1108\u110d\u1113\u111a\u111f\u1124\u1129\u112c\u1130\u1134",
    "\u1138\u113c\u1141\u1145\u1149\u1153\u1159\u1160\u1163\u1169\u116f\u1174",
    "\u1176\u117c\u117e\u1183\u1189\u118f\u1194\u1196\u119a\u119e\u11a1\u11af",
    "\u11b4\u11b8\u11c5\u11c8\u11ca\u11d2\u11dc\u11e2\u11e9\u11ec\u11f2\u11f8",
    "\u11fd\u11ff\u1205\u1207\u120c\u1212\u1218\u121e\u1223\u1225\u1229\u122d",
    "\u1230\u123e\u1243\u1247\u1254\u1257\u1259\u1261\u126c\u1275\u127e\u1289",
    "\u1292\u129b\u12a7\u12ab\u12b0\u12b2\u12b4\u12b9\u12bd\u12c2\u12c4\u12c6",
    "\u12d4\u12d9\u12ef\u1305\u130a\u1317\u131f\u1333\u1336\u133c\u1344\u134b",
    "\u1350\u1354\u1358\u135b\u1362\u1374\u1376\u138a\u1392\u1397\u13a9\u13b8",
    "\u13ba\u13c1\u13c8\u13cd\u13d2\u13d8\u13dd\u13df\u13e6\u13ec\u13f2\u13f5",
    "\u13fb\u1405\u1408\u140f\u1412\u1417\u1419\u1421\u1425\u142b\u1430\u1432",
    "\u1435\u143c\u1442\u1449\u144c\u1452\u1457\u1459\u145c\u1464\u146a\u1471",
    "\u1474\u147a\u147f\u1481\u1489\u1491\u1497\u149c\u149e\u14a8\u14ad\u14b7",
    "\u14bd\u14c9\u14cb\u14d2\u14d8\u14de\u14e4\u14e9\u14eb\u14f2\u14fa\u1500",
    "\u150e\u1510\u1513\u1518\u151a\u1526\u152c\u153a\u153c\u153f\u1544\u1547",
    "\u154c\u154e\u1557\u155e\u1564\u1567\u156c\u1573\u1575\u157b\u157d\u1585",
    "\u1587\u158d\u158f\u1595\u1597\u159e\u15a1\u15a3\u15a6\u15aa\u15ac\u15b5",
    "\u15bb\u15bf\u15c7\u15ce\u15d4\u15d6\u15e1\u15e6\u15ec\u15f0\u15fa\u1602",
    "\u160e\u1611\u1619\u161b\u161e\u1622\u1625\u162f\u1635\u163d\u1641\u1645",
    "\u164e\u1654\u1658\u165b\u1666\u166a\u1671\u1676\u1679\u1681\u1683\u1686",
    "\u168a\u168d\u1691\u1698\u169c\u169e\u16a0\u16a3\u16a6\u16a9\u16af\u16b2",
    "\u16ba\u16bc\u16bf\u16c3\u16c6\u16cc\u16cf\u16d3\u16d6\u16d9\u16e0\u16e3",
    "\u16ea\u16f0\u16f4\u16fe\u1701\u1704\u1708\u170b\u170e\u1711\u1715\u1718",
    "\u1720\u1722\u1726\u1729\u1731\u1735\u1739\u1740\u1744\u1746\u1748\u174b",
    "\u174e\u1751\u1759\u175f\u1765\u1767\u176b\u176e\u1773\u1778\u177b\u1783",
    "\u1787\u178e\u1791\u179a\u179d\u17a1\u17a9\u17ac\u17b0\u17b3\u17c1\u17c5",
    "\u17c8\u17cc\u17cf\u17d4\u17d7\u17dd\u17e0\u17e7\u17eb\u17ed\u17f5\u17f8",
    "\u17fc\u1803\u1808\u180b\u1817\u181a\u1820\u1827\u182c\u1831\u1838\u183f",
    "\u1842\u184a\u1852\u1855\u185d\u1868\u186b\u1875\u187c\u1881\u1884\u188e",
    "\u1891\u1894\u189c\u18a7\u18aa\u18ad\u18b3\u18b8\u18bc\u18c6\u18c9\u18cc",
    "\u18d2\u18d8\u18e0\u18e3\u18e7\u18eb\u18ee\u18f3\u1901\u1911\u1915\u191b",
    "\u191d\u1920\u1928\u192e\u1934\u1939\u193c\u1945\u1951\u1959\u195c\u1963",
    "\u1966\u1993\u1996\u199c\u19a8\u19aa\u19ad\u19c6\u19d1\u19d9\u19e4\u19e9",
    "\u19ec\u19f4\u19fe\u1a05\u1a0c\u1a0e\u1a1a\u1a25\u1a29\u1a2e\u1a31\u1a33",
    "\u1a36\u1a42\u1a44\u1a46\u1a49\u1a4e\u1a51\u1a56\u1a60\u1a64\u1a69\u1a6c",
    "\u1a6e\u1a71\u1a7d\u1a7f\u1a81\u1a84\u1a8a\u1a94\u1aa8\u1aae\u1ac7\u1ac9",
    "\u1ae3\u1ae9\u1af4\u1afc\u1aff\u1b0d\u1b15\u1b1c\u1b33\u1b40\u1b46\u1b4d",
    "\u1b55\u1b58\u1b5b\u1b64\u1b6e\u1b75\u1b79\u1b7d\u1b83\u1b8a\u1b8e\u1b94",
    "\u1b9b\u1ba2\u1ba5\u1bab\u1bb2\u1bb6\u1bbb\u1bc0\u1bc5\u1bcd\u1bd1\u1bd7",
    "\u1bde\u1be2\u1beb\u1bf3\u1bf9\u1bff\u1c10\u1c14\u1c1c\u1c20\u1c28\u1c2c",
    "\u1c31\u1c35\u1c3c\u1c42\u1c44\u1c48\u1c4c\u1c50\u1c54\u1c5a\u1c5e\u1c60",
    "\u1c67\u1c6e\u1c71\u1c74\u1c7b\u1c80\u1c85\u1c89\u1c8f\u1c93\u1c95\u1c9a",
    "\u1c9f\u1ca3\u1ca8\u1cae\u1cb2\u1cb6\u1cb8\u1cbc\u1cc0\u1cc4\u1cc8\u1cce",
    "\u1cd1\u1cd7\u1cdb\u1cdf\u1ce5\u1ceb\u1ced\u1cf0\u1cf4\u1cf8\u1cfc\u1d02",
    "\u1d05\u1d0b\u1d11\u1d14\u1d1a\u1d1d\u1d23\u1d26\u1d2a\u1d2e\u1d32\u1d37",
    "\u1d3a\u1d3e\u1d42\u1d53\u1d55\u1d57\u1d5a\u1d61\u1d66\u1d6a\u1d70\u1d74",
    "\u1d76\u1d7b\u1d80\u1d84\u1d89\u1d8f\u1d93\u1d97\u1d99\u1d9d\u1da1\u1da5",
    "\u1da9\u1daf\u1db2\u1db8\u1dbc\u1dc0\u1dc6\u1dcc\u1dce\u1dd1\u1dd5\u1dd9",
    "\u1ddd\u1de3\u1de6\u1dec\u1df2\u1df5\u1dfb\u1dfe\u1e04\u1e07\u1e0b\u1e0f",
    "\u1e13\u1e18\u1e1b\u1e1f\u1e23\u1e29\u1e2c\u1e30\u1e41\u1e43\u1e45\u1e48",
    "\u1e56\u1e5c\u1e64\u1e6b\u1e6d\u1e70\u1e90\u1e94\u1e9b\u1e9e\u1ea1\u1eaa",
    "\u1eaf\u1eb4\u1eb7\u1eb9\u1ebd\u1ec1\u1ec4\u1ec8\u1ece\u1ed3\u1eda\u1edc",
    "\u1ee0\u1ee8\u1eee\u1ef2\u1ef5\u1efe\u1f01\u1f07\u1f0e\u1f13\u1f1b\u1f20",
    "\u1f2c\u1f2e\u1f39\u1f40\u1f4a\u1f61\u1f6e\u1f7e\u1f83\u1f8a\u1f8d\u1f91",
    "\u1f93\u1fa4\u1fb3\u1fbb\u1fc4\u1fcc\u1fd5\u1fe0\u1fe4\u1fe6\u1fe8\u1fee",
    "\u1ff3\u1ffa\u2007\u2009\u200b\u200e\u2011\u2018\u201b\u2021\u2026\u2028",
    "\u202b\u2031\u2039\u203b\u203e\u2042\u2045\u204b\u204e\u2052\u2055\u205b",
    "\u205e\u2060\u2064\u2069\u2071\u2075\u2078\u207d\u2085\u208a\u2094\u209f",
    "\u20a4\u20a9\u20af\u20b3\u20b6\u20ba\u20be\u20c6\u20cb\u20cd\u20d0\u20d5",
    "\u20da\u20df\u20e2\u20e5\u20eb\u20f3\u20fb\u20fe\u2101\u2105\u210a\u210d",
    "\u2113\u2117\u211d\u2125\u212b\u212d\u2130\u213f\u2142\u2144\u214f\u215a",
    "\u2163\u216d\u2177\u2179\u217b\u217e\u2181\u218c\u218e\u2190\u2193\u2198",
    "\u21a3\u21ac\u21af\u21b2\u21bb\u21be\u21c1\u21c8\u21cb\u21d9\u21dc\u21e3",
    "\u21f3\u21f7\u2201\u2214\u2216\u221d\u2224\u2228\u2230\u2234\u2238\u223e",
    "\u2248\u2252\u2259\u2260\u2269\u2270\u2277\u2280\u2284\u228e\u2295\u229d",
    "\u22a5\u22a9\u22bf\u22c8\u22ce\u22d4\u22da\u22e4\u22eb\u22f0\u22f5\u22f9",
    "\u2300\u2304\u2307\u230c\u2310\u2314\u2319\u2320\u2323\u2327\u232c\u2330",
    "\u2339\u2340\u2349\u2355\u2357\u235e\u2364\u2369\u236e\u2371\u2378\u2383",
    "\u23a5\u23b5\u23bc\u23be\u23c5\u23ce\u23d8\u23dd\u23e4\u23e7\u23ee\u23f5",
    "\u23f8\u23fa\u2402\u2404\u240a\u2411\u2419\u241f\u2424\u2428\u242c\u2431",
    "\u2433\u243a\u243e\u2445\u2447\u244e\u2450\u2459\u2461\u2468\u246e\u2479",
    "\u247d\u247f\u2482\u249a\u24b3\u24b8\u24cc\u24d0\u24d4\u24e4\u24ec\u2502",
    "\u253c\u2540\u2561\u2568\u256e\u257b\u258a\u2595\u259a\u25a4\u25ad\u25cf",
    "\u25d4\u25da\u25dd\u25e2\u25e7\u25f0\u25f5\u25fb\u2604\u2615\u261b\u2623",
    "\u2627\u262f\u2636\u2643\u264b\u2658\u265f\u2665\u2669\u267a\u2689\u268b",
    "\u2690\u2693\u269c\u269f\u26a2\u26af\u26b3\u26bb\u26c1\u26c9\u26d0\u26d6",
    "\u26e5\u26ee\u26f4\u26fa\u26fd\u2701\u2708\u2710\u2713\u2719\u271f\u2721",
    "\u2727\u272a\u272c\u2732\u2734\u2742\u2749\u2752\u2759\u2765\u276c\u2773",
    "\u277a\u2780\u2787\u278a\u278f\u2796\u279d\u27a3\u27a8\u27ae\u27b4\u27ba",
    "\u27c0\u27c6\u27cc\u27d2\u27d5\u27d9\u27de\u27e2\u27ea\u27ef\u27f6\u27ff",
    "\u2801\u2808\u2814\u2819\u2824\u282e\u2830\u2836\u2838\u283d\u283f\u2842",
    "\u2846\u284a\u2850\u2859\u285c\u285e\u2861\u2867\u286b\u286e\u2877\u2880",
    "\u288c\u288f\u2893\u2899\u289c\u28a2\u28a7\u28ac\u28b0\u28b4\u28b8\u28bf",
    "\u28d2\u28d8"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'ADD'", "'AES'", "'ALL'", "'ALLOW_CONNECTIONS'", 
                     "'ALLOW_MULTIPLE_EVENT_LOSS'", "'ALLOW_SINGLE_EVENT_LOSS'", 
                     "'ALTER'", "'AND'", "'ANONYMOUS'", "'ANY'", "'APPEND'", 
                     "'APPLICATION'", "'AS'", "'ASC'", "'ASYMMETRIC'", "'ASYNCHRONOUS_COMMIT'", 
                     "'AUTHORIZATION'", "'AUTHENTICATION'", "'AUTOMATED_BACKUP_PREFERENCE'", 
                     "'AUTOMATIC'", "'AVAILABILITY_MODE'", "'\\'", "'BACKUP'", 
                     "'BEFORE'", "'BEGIN'", "'BETWEEN'", "'BLOCK'", "'BLOCKSIZE'", 
                     "'BLOCKING_HIERARCHY'", "'BREAK'", "'BROWSE'", "'BUFFER'", 
                     "'BUFFERCOUNT'", "'BULK'", "'BY'", "'CACHE'", "'CALLED'", 
                     "'CASCADE'", "'CASE'", "'CERTIFICATE'", "'CHANGETABLE'", 
                     "'CHANGES'", "'CHECK'", "'CHECKPOINT'", "'CHECK_POLICY'", 
                     "'CHECK_EXPIRATION'", "'CLASSIFIER_FUNCTION'", "'CLOSE'", 
                     "'CLUSTER'", "'CLUSTERED'", "'COALESCE'", "'COLLATE'", 
                     "'COLUMN'", "'COMPRESSION'", "'COMMIT'", "'COMPUTE'", 
                     "'CONFIGURATION'", "'CONSTRAINT'", "'CONTAINMENT'", 
                     "'CONTAINS'", "'CONTAINSTABLE'", "'CONTEXT'", "'CONTINUE'", 
                     "'CONTINUE_AFTER_ERROR'", "'CONTRACT'", "'CONTRACT_NAME'", 
                     "'CONVERSATION'", null, "'COPY_ONLY'", "'CREATE'", 
                     "'CROSS'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
                     "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'CURSOR'", 
                     "'CYCLE'", "'DATA'", "'DATA_COMPRESSION'", "'DATA_SOURCE'", 
                     "'DATABASE'", "'DATABASE_MIRRORING'", "'DBCC'", "'DEALLOCATE'", 
                     "'DECLARE'", "'DEFAULT'", "'DEFAULT_DATABASE'", "'DEFAULT_SCHEMA'", 
                     "'DELETE'", "'DENY'", "'DESC'", "'DIAGNOSTICS'", "'DIFFERENTIAL'", 
                     "'DISK'", "'DISTINCT'", "'DISTRIBUTED'", "'DOUBLE'", 
                     "'\\\\'", "'//'", "'DROP'", "'DTC_SUPPORT'", "'DUMP'", 
                     "'ELSE'", "'ENABLED'", "'END'", "'ENDPOINT'", "'ERRLVL'", 
                     "'ESCAPE'", "'ERROR'", "'EVENT'", null, "'EVENT_RETENTION_MODE'", 
                     "'EXCEPT'", "'EXECUTABLE_FILE'", null, "'EXISTS'", 
                     "'EXPIREDATE'", "'EXIT'", "'EXTENSION'", "'EXTERNAL'", 
                     "'EXTERNAL_ACCESS'", "'FAILOVER'", "'FAILURECONDITIONLEVEL'", 
                     "'FAN_IN'", "'FETCH'", "'FILE'", "'FILENAME'", "'FILLFACTOR'", 
                     "'FILE_SNAPSHOT'", "'FOR'", "'FORCESEEK'", "'FORCE_SERVICE_ALLOW_DATA_LOSS'", 
                     "'FOREIGN'", "'FREETEXT'", "'FREETEXTTABLE'", "'FROM'", 
                     "'FULL'", "'FUNCTION'", "'GET'", "'GOTO'", "'GOVERNOR'", 
                     "'GRANT'", "'GROUP'", "'HAVING'", "'HASHED'", "'HEALTHCHECKTIMEOUT'", 
                     "'IDENTITY'", "'IDENTITYCOL'", "'IDENTITY_INSERT'", 
                     "'IF'", "'IN'", "'INCLUDE'", "'INCREMENT'", "'INDEX'", 
                     "'INFINITE'", "'INIT'", "'INNER'", "'INSERT'", "'INSTEAD'", 
                     "'INTERSECT'", "'INTO'", null, null, "'IS'", "'ISNULL'", 
                     "'JOIN'", "'KERBEROS'", "'KEY'", "'KEY_PATH'", "'KEY_STORE_PROVIDER_NAME'", 
                     "'KILL'", "'LANGUAGE'", "'LEFT'", "'LIBRARY'", "'LIFETIME'", 
                     "'LIKE'", "'LINENO'", "'LINUX'", "'LISTENER_IP'", "'LISTENER_PORT'", 
                     "'LOAD'", "'LOCAL_SERVICE_NAME'", "'LOG'", "'MATCHED'", 
                     "'MASTER'", "'MAX_MEMORY'", "'MAXTRANSFER'", "'MAXVALUE'", 
                     "'MAX_DISPATCH_LATENCY'", "'MAX_EVENT_SIZE'", "'MAX_SIZE'", 
                     "'MAX_OUTSTANDING_IO_PER_VOLUME'", "'MEDIADESCRIPTION'", 
                     "'MEDIANAME'", "'MEMBER'", "'MEMORY_PARTITION_MODE'", 
                     "'MERGE'", "'MESSAGE_FORWARDING'", "'MESSAGE_FORWARD_SIZE'", 
                     "'MINVALUE'", "'MIRROR'", "'MUST_CHANGE'", "'NATIONAL'", 
                     "'NEGOTIATE'", "'NOCHECK'", "'NOFORMAT'", "'NOINIT'", 
                     "'NONCLUSTERED'", "'NONE'", "'NOREWIND'", "'NOSKIP'", 
                     "'NOUNLOAD'", "'NO_CHECKSUM'", "'NO_COMPRESSION'", 
                     "'NO_EVENT_LOSS'", "'NOT'", "'NOTIFICATION'", "'NTLM'", 
                     "'NULL'", "'NULLIF'", "'OF'", "'OFF'", "'OFFSETS'", 
                     "'OLD_PASSWORD'", "'ON'", "'ON_FAILURE'", "'OPEN'", 
                     "'OPENDATASOURCE'", "'OPENQUERY'", "'OPENROWSET'", 
                     "'OPENXML'", "'OPTION'", "'OR'", "'ORDER'", "'OUTER'", 
                     "'OVER'", "'PAGE'", "'PARAM_NODE'", "'PARTIAL'", "'PASSWORD'", 
                     "'PERCENT'", "'PERMISSION_SET'", "'PER_CPU'", "'PER_DB'", 
                     "'PER_NODE'", "'PIVOT'", "'PLAN'", "'PLATFORM'", "'POLICY'", 
                     "'PRECISION'", "'PREDICATE'", "'PRIMARY'", "'PRINT'", 
                     "'PROC'", "'PROCEDURE'", "'PROCESS'", "'PUBLIC'", "'PYTHON'", 
                     "'R'", "'RAISERROR'", "'RAW'", "'READ'", "'READTEXT'", 
                     "'READ_WRITE_FILEGROUPS'", "'RECONFIGURE'", "'REFERENCES'", 
                     "'REGENERATE'", "'RELATED_CONVERSATION'", "'RELATED_CONVERSATION_GROUP'", 
                     "'REPLICATION'", "'REQUIRED'", "'RESET'", "'RESTART'", 
                     "'RESTORE'", "'RESTRICT'", "'RESUME'", "'RETAINDAYS'", 
                     "'RETURN'", "'RETURNS'", "'REVERT'", "'REVOKE'", "'REWIND'", 
                     "'RIGHT'", "'ROLLBACK'", "'ROLE'", "'ROWCOUNT'", "'ROWGUIDCOL'", 
                     "'RSA_512'", "'RSA_1024'", "'RSA_2048'", "'RSA_3072'", 
                     "'RSA_4096'", "'SAFETY'", "'RULE'", "'SAFE'", "'SAVE'", 
                     "'SCHEDULER'", "'SCHEMA'", "'SCHEME'", "'SECURITY'", 
                     "'SECURITYAUDIT'", "'SELECT'", "'SEMANTICKEYPHRASETABLE'", 
                     "'SEMANTICSIMILARITYDETAILSTABLE'", "'SEMANTICSIMILARITYTABLE'", 
                     "'SEQUENCE'", "'SERVER'", "'SERVICE'", "'SERVICE_BROKER'", 
                     "'SERVICE_NAME'", "'SESSION'", "'SESSION_USER'", "'SET'", 
                     "'SETUSER'", "'SHUTDOWN'", "'SID'", "'SKIP'", "'SOFTNUMA'", 
                     "'SOME'", "'SOURCE'", "'SPECIFICATION'", "'SPLIT'", 
                     "'SQLDUMPERFLAGS'", "'SQLDUMPERPATH'", "'SQLDUMPERTIMEOUTS'", 
                     "'STATISTICS'", "'STATE'", "'STATS'", "'START'", "'STARTED'", 
                     "'STARTUP_STATE'", "'STOP'", "'STOPPED'", "'STOP_ON_ERROR'", 
                     "'SUPPORTED'", "'SYSTEM'", "'SYSTEM_USER'", "'TABLE'", 
                     "'TABLESAMPLE'", "'TAPE'", "'TARGET'", "'TCP'", "'TEXTSIZE'", 
                     "'THEN'", "'TO'", "'TOP'", "'TRACK_CAUSALITY'", "'TRAN'", 
                     "'TRANSACTION'", "'TRANSFER'", "'TRIGGER'", "'TRUNCATE'", 
                     "'TSEQUAL'", "'UNCHECKED'", "'UNION'", "'UNIQUE'", 
                     "'UNLOCK'", "'UNPIVOT'", "'UNSAFE'", "'UPDATE'", "'UPDATETEXT'", 
                     "'URL'", "'USE'", "'USED'", "'USER'", "'VALUES'", "'VARYING'", 
                     "'VERBOSELOGGING'", "'VIEW'", "'VISIBILITY'", "'WAITFOR'", 
                     "'WHEN'", "'WHERE'", "'WHILE'", "'WINDOWS'", "'WITH'", 
                     "'WITHIN'", "'WITHOUT'", "'WITNESS'", "'WRITETEXT'", 
                     "'ABSOLUTE'", "'ACCENT_SENSITIVITY'", "'ACTION'", "'ACTIVE'", 
                     "'ACTIVATION'", "'ADDRESS'", "'AES_128'", "'AES_192'", 
                     "'AES_256'", "'AFFINITY'", "'AFTER'", "'AGGREGATE'", 
                     "'ALGORITHM'", "'ALLOWED'", "'ALLOW_ENCRYPTED_VALUE_MODIFICATIONS'", 
                     "'ALLOW_SNAPSHOT_ISOLATION'", "'ANSI_NULLS'", "'ANSI_NULL_DEFAULT'", 
                     "'ANSI_PADDING'", "'ANSI_WARNINGS'", "'APPLICATION_LOG'", 
                     "'APPLY'", "'ARITHABORT'", "'ASSEMBLY'", "'AUDIT'", 
                     "'AUDIT_GUID'", "'AUTO'", "'AUTO_CLEANUP'", "'AUTO_CLOSE'", 
                     "'AUTO_CREATE_STATISTICS'", "'AUTO_SHRINK'", "'AUTO_UPDATE_STATISTICS'", 
                     "'AUTO_UPDATE_STATISTICS_ASYNC'", "'AVAILABILITY'", 
                     "'AVG'", "'BACKUP_PRIORITY'", "'BEGIN_DIALOG'", "'BIGINT'", 
                     "'BINARY BASE64'", "'BINARY_CHECKSUM'", "'BINDING'", 
                     "'BLOB_STORAGE'", "'BROKER'", "'BROKER_INSTANCE'", 
                     "'BULK_LOGGED'", "'CALLER'", null, "'CAP_CPU_PERCENT'", 
                     "'CATALOG'", "'CATCH'", "'CHANGE_RETENTION'", "'CHANGE_TRACKING'", 
                     "'CHECKSUM'", "'CHECKSUM_AGG'", "'CLEANUP'", "'COLLECTION'", 
                     "'COLUMN_MASTER_KEY'", "'COMMITTED'", "'COMPATIBILITY_LEVEL'", 
                     "'CONCAT'", "'CONCAT_NULL_YIELDS_NULL'", "'CONTENT'", 
                     "'CONTROL'", "'COOKIE'", "'COUNT'", "'COUNTER'", "'COUNT_BIG'", 
                     "'CPU'", "'CREATE_NEW'", "'CREATION_DISPOSITION'", 
                     "'CREDENTIAL'", "'CRYPTOGRAPHIC'", "'CURSOR_CLOSE_ON_COMMIT'", 
                     "'CURSOR_DEFAULT'", "'DATEADD'", "'DATEDIFF'", "'DATENAME'", 
                     "'DATEPART'", "'DATE_CORRELATION_OPTIMIZATION'", "'DAYS'", 
                     "'DB_CHAINING'", "'DB_FAILOVER'", "'DECRYPTION'", null, 
                     "'DEFAULT_FULLTEXT_LANGUAGE'", "'DEFAULT_LANGUAGE'", 
                     "'DELAY'", "'DELAYED_DURABILITY'", "'DELETED'", "'DENSE_RANK'", 
                     "'DEPENDENTS'", "'DES'", "'DESX'", "'DESCRIPTION'", 
                     "'DHCP'", "'DIALOG'", "'DIRECTORY_NAME'", "'DISABLE'", 
                     "'DISABLED'", "'DISABLE_BROKER'", null, "'DOCUMENT'", 
                     "'DYNAMIC'", "'EMERGENCY'", "'EMPTY'", "'ENABLE'", 
                     "'ENABLE_BROKER'", "'ENCRYPTED_VALUE'", "'ENCRYPTION'", 
                     "'ENDPOINT_URL'", "'ERROR_BROKER_CONVERSATIONS'", "'EXECUTABLE'", 
                     "'EXIST'", "'EXPAND'", "'EXPIRY_DATE'", "'EXPLICIT'", 
                     "'FAILOVER_MODE'", "'FAILURE'", "'FAILURE_CONDITION_LEVEL'", 
                     "'FAIL_OPERATION'", "'FAST'", "'FAST_FORWARD'", "'FILEGROUP'", 
                     "'FILEGROWTH'", "'FILEPATH'", "'FILESTREAM'", "'FILTER'", 
                     "'FIRST'", "'FIRST_VALUE'", "'FOLLOWING'", "'FORCE'", 
                     "'FORCED'", "'FORCE_FAILOVER_ALLOW_DATA_LOSS'", "'FORMAT'", 
                     "'FORWARD_ONLY'", "'FULLSCAN'", "'FULLTEXT'", "'GB'", 
                     "'GETDATE'", "'GETUTCDATE'", "'GLOBAL'", "'GO'", "'GROUPING'", 
                     "'GROUPING_ID'", "'GROUP_MAX_REQUESTS'", "'HADR'", 
                     "'HASH'", "'HEALTH_CHECK_TIMEOUT'", "'HIGH'", "'HONOR_BROKER_PRIORITY'", 
                     "'HOURS'", "'IDENTITY_VALUE'", "'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX'", 
                     "'IMMEDIATE'", "'IMPERSONATE'", "'IMPORTANCE'", "'INCREMENTAL'", 
                     "'INITIATOR'", "'INPUT'", "'INSENSITIVE'", "'INSERTED'", 
                     "'INT'", "'IP'", "'ISOLATION'", "'KB'", "'KEEP'", "'KEEPFIXED'", 
                     "'KEYSET'", "'KEYS'", "'KEY_SOURCE'", "'LAG'", "'LAST'", 
                     "'LAST_VALUE'", "'LEAD'", "'LEVEL'", "'LIST'", "'LISTENER'", 
                     "'LISTENER_URL'", "'LOB_COMPACTION'", "'LOCAL'", "'LOCATION'", 
                     "'LOCK_ESCALATION'", "'LOGIN'", "'LOOP'", "'LOW'", 
                     "'MANUAL'", "'MARK'", "'MAX'", "'MAX_CPU_PERCENT'", 
                     "'MIN_CPU_PERCENT'", "'MAX_FILES'", "'MAX_IOPS_PER_VOLUME'", 
                     "'MIN_IOPS_PER_VOLUME'", "'MAX_MEMORY_PERCENT'", "'MIN_MEMORY_PERCENT'", 
                     "'MAX_PROCESSES'", "'MAX_QUEUE_READERS'", "'MAX_ROLLOVER_FILES'", 
                     "'MAXDOP'", "'MAX_DOP'", "'MAXRECURSION'", "'MAXSIZE'", 
                     "'MEDIUM'", "'MESSAGE'", "'MB'", "'MEMORY_OPTIMIZED_DATA'", 
                     "'MIN'", "'MINUTES'", "'MIRROR_ADDRESS'", "'MIN_ACTIVE_ROWVERSION'", 
                     "'MIXED_PAGE_ALLOCATION'", "'MODIFY'", "'MOVE'", "'MULTI_USER'", 
                     "'NAME'", "'NESTED_TRIGGERS'", "'NEW_ACCOUNT'", "'NEW_BROKER'", 
                     "'NEW_PASSWORD'", "'NEXT'", "'NOCOUNT'", "'NOEXPAND'", 
                     "'NODES'", "'NON_TRANSACTED_ACCESS'", "'NORECOMPUTE'", 
                     "'NO'", "'NORECOVERY'", "'NO_TRUNCATE'", "'NO_WAIT'", 
                     "'NTILE'", "'NUMANODE'", "'NUMBER'", "'NUMERIC_ROUNDABORT'", 
                     "'OBJECT'", "'OFFLINE'", "'OFFSET'", "'OLD_ACCOUNT'", 
                     "'ONLINE'", "'ONLY'", "'OPEN_EXISTING'", "'OPTIMISTIC'", 
                     "'OPTIMIZE'", "'OUT'", "'OUTPUT'", "'OWNER'", "'PAGE_VERIFY'", 
                     "'PARAMETERIZATION'", "'PARTITION'", "'PARTITIONS'", 
                     "'PARTNER'", "'PATH'", "'POOL'", "'POISON_MESSAGE_HANDLING'", 
                     "'PORT'", "'PRECEDING'", "'PRIMARY_ROLE'", "'PRIOR'", 
                     "'PRIORITY'", "'PRIORITY_LEVEL'", "'PRIVATE'", "'PRIVATE_KEY'", 
                     "'PRIVILEGES'", "'PROCEDURE_NAME'", "'PROPERTY'", "'PROVIDER'", 
                     "'PROVIDER_KEY_NAME'", "'QUEUE'", "'QUEUE_DELAY'", 
                     "'QUERY'", "'QUOTED_IDENTIFIER'", "'RANGE'", "'RANK'", 
                     "'RC2'", "'RC4'", "'RC4_128'", "'READONLY'", "'READ_COMMITTED_SNAPSHOT'", 
                     "'READ_ONLY'", "'READ_ONLY_ROUTING_LIST'", "'READ_WRITE'", 
                     "'REBUILD'", "'RECOMPILE'", "'RECEIVE'", "'RECOVERY'", 
                     "'RECURSIVE_TRIGGERS'", "'RELATIVE'", "'REMOVE'", "'REORGANIZE'", 
                     "'REPLICA'", "'REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT'", 
                     "'REMOTE'", "'REMOTE_SERVICE_NAME'", "'REPEATABLE'", 
                     "'REQUEST_MAX_MEMORY_GRANT_PERCENT'", "'REQUEST_MAX_CPU_TIME_SEC'", 
                     "'REQUEST_MEMORY_GRANT_TIMEOUT_SEC'", "'RESERVE_DISK_SPACE'", 
                     "'RESOURCE'", "'RESOURCE_MANAGER_LOCATION'", "'RESTRICTED_USER'", 
                     "'RETENTION'", "'ROBUST'", "'ROOT'", "'ROUTE'", "'ROW'", 
                     "'ROWGUID'", "'ROWS'", "'ROW_NUMBER'", "'SAMPLE'", 
                     "'SCHEMABINDING'", "'SCOPED'", "'SCROLL'", "'SCROLL_LOCKS'", 
                     "'SEARCH'", "'SECONDARY'", "'SECONDARY_ONLY'", "'SECONDARY_ROLE'", 
                     "'SECONDS'", "'SECRET'", "'SECURITY_LOG'", "'SEEDING_MODE'", 
                     "'SELF'", "'SEND'", "'SENT'", "'SERIALIZABLE'", "'SESSION_TIMEOUT'", 
                     "'SETERROR'", "'SHOWPLAN'", "'SIGNATURE'", "'SIMPLE'", 
                     "'SINGLE_USER'", "'SIZE'", "'SMALLINT'", "'SNAPSHOT'", 
                     "'SPATIAL_WINDOW_MAX_CELLS'", "'START_DATE'", "'STATIC'", 
                     "'STATS_STREAM'", "'STATUS'", "'STDEV'", "'STDEVP'", 
                     "'STOPLIST'", "'SUBJECT'", "'SUSPEND'", "'STANDBY'", 
                     "'STUFF'", "'SUM'", "'SYMMETRIC'", "'SYNCHRONOUS_COMMIT'", 
                     "'SYNONYM'", "'TAKE'", "'TARGET_RECOVERY_TIME'", "'TB'", 
                     "'TEXTIMAGE_ON'", "'THROW'", "'TIES'", "'TIME'", "'TIMER'", 
                     "'TINYINT'", "'TIMEOUT'", "'TORN_PAGE_DETECTION'", 
                     "'TRANSFORM_NOISE_WORDS'", "'TRIPLE_DES'", "'TRIPLE_DES_3KEY'", 
                     "'TRUSTWORTHY'", "'TRY'", "'TSQL'", "'TWO_DIGIT_YEAR_CUTOFF'", 
                     "'TYPE'", "'TYPE_WARNING'", "'UNBOUNDED'", "'UNCOMMITTED'", 
                     "'UNKNOWN'", "'UNLIMITED'", "'USING'", "'VALIDATION'", 
                     "'VALID_XML'", "'VALUE'", "'VAR'", "'VARP'", "'VIEWS'", 
                     "'VIEW_METADATA'", "'WELL_FORMED_XML'", "'WORK'", "'WORKLOAD'", 
                     "'XML'", "'XMLNAMESPACES'", "'$ACTION'", null, null, 
                     null, null, "'''", null, null, null, null, null, null, 
                     null, null, null, null, "'='", "'>'", "'<'", "'!'", 
                     "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", 
                     "'|='", "'.'", "'_'", "'@'", "'#'", "'$'", "'('", "')'", 
                     "','", "';'", "':'", "'*'", "'/'", "'%'", "'+'", "'-'", 
                     "'~'", "'|'", "'&'", "'^'" ];

var symbolicNames = [ null, "ADD", "AES", "ALL", "ALLOW_CONNECTIONS", "ALLOW_MULTIPLE_EVENT_LOSS", 
                      "ALLOW_SINGLE_EVENT_LOSS", "ALTER", "AND", "ANONYMOUS", 
                      "ANY", "APPEND", "APPLICATION", "AS", "ASC", "ASYMMETRIC", 
                      "ASYNCHRONOUS_COMMIT", "AUTHORIZATION", "AUTHENTICATION", 
                      "AUTOMATED_BACKUP_PREFERENCE", "AUTOMATIC", "AVAILABILITY_MODE", 
                      "BACKSLASH", "BACKUP", "BEFORE", "BEGIN", "BETWEEN", 
                      "BLOCK", "BLOCKSIZE", "BLOCKING_HIERARCHY", "BREAK", 
                      "BROWSE", "BUFFER", "BUFFERCOUNT", "BULK", "BY", "CACHE", 
                      "CALLED", "CASCADE", "CASE", "CERTIFICATE", "CHANGETABLE", 
                      "CHANGES", "CHECK", "CHECKPOINT", "CHECK_POLICY", 
                      "CHECK_EXPIRATION", "CLASSIFIER_FUNCTION", "CLOSE", 
                      "CLUSTER", "CLUSTERED", "COALESCE", "COLLATE", "COLUMN", 
                      "COMPRESSION", "COMMIT", "COMPUTE", "CONFIGURATION", 
                      "CONSTRAINT", "CONTAINMENT", "CONTAINS", "CONTAINSTABLE", 
                      "CONTEXT", "CONTINUE", "CONTINUE_AFTER_ERROR", "CONTRACT", 
                      "CONTRACT_NAME", "CONVERSATION", "CONVERT", "COPY_ONLY", 
                      "CREATE", "CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "CYCLE", 
                      "DATA", "DATA_COMPRESSION", "DATA_SOURCE", "DATABASE", 
                      "DATABASE_MIRRORING", "DBCC", "DEALLOCATE", "DECLARE", 
                      "DEFAULT", "DEFAULT_DATABASE", "DEFAULT_SCHEMA", "DELETE", 
                      "DENY", "DESC", "DIAGNOSTICS", "DIFFERENTIAL", "DISK", 
                      "DISTINCT", "DISTRIBUTED", "DOUBLE", "DOUBLE_BACK_SLASH", 
                      "DOUBLE_FORWARD_SLASH", "DROP", "DTC_SUPPORT", "DUMP", 
                      "ELSE", "ENABLED", "END", "ENDPOINT", "ERRLVL", "ESCAPE", 
                      "ERROR", "EVENT", "EVENTDATA", "EVENT_RETENTION_MODE", 
                      "EXCEPT", "EXECUTABLE_FILE", "EXECUTE", "EXISTS", 
                      "EXPIREDATE", "EXIT", "EXTENSION", "EXTERNAL", "EXTERNAL_ACCESS", 
                      "FAILOVER", "FAILURECONDITIONLEVEL", "FAN_IN", "FETCH", 
                      "FILE", "FILENAME", "FILLFACTOR", "FILE_SNAPSHOT", 
                      "FOR", "FORCESEEK", "FORCE_SERVICE_ALLOW_DATA_LOSS", 
                      "FOREIGN", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", 
                      "FUNCTION", "GET", "GOTO", "GOVERNOR", "GRANT", "GROUP", 
                      "HAVING", "HASHED", "HEALTHCHECKTIMEOUT", "IDENTITY", 
                      "IDENTITYCOL", "IDENTITY_INSERT", "IF", "IN", "INCLUDE", 
                      "INCREMENT", "INDEX", "INFINITE", "INIT", "INNER", 
                      "INSERT", "INSTEAD", "INTERSECT", "INTO", "IPV4_ADDR", 
                      "IPV6_ADDR", "IS", "ISNULL", "JOIN", "KERBEROS", "KEY", 
                      "KEY_PATH", "KEY_STORE_PROVIDER_NAME", "KILL", "LANGUAGE", 
                      "LEFT", "LIBRARY", "LIFETIME", "LIKE", "LINENO", "LINUX", 
                      "LISTENER_IP", "LISTENER_PORT", "LOAD", "LOCAL_SERVICE_NAME", 
                      "LOG", "MATCHED", "MASTER", "MAX_MEMORY", "MAXTRANSFER", 
                      "MAXVALUE", "MAX_DISPATCH_LATENCY", "MAX_EVENT_SIZE", 
                      "MAX_SIZE", "MAX_OUTSTANDING_IO_PER_VOLUME", "MEDIADESCRIPTION", 
                      "MEDIANAME", "MEMBER", "MEMORY_PARTITION_MODE", "MERGE", 
                      "MESSAGE_FORWARDING", "MESSAGE_FORWARD_SIZE", "MINVALUE", 
                      "MIRROR", "MUST_CHANGE", "NATIONAL", "NEGOTIATE", 
                      "NOCHECK", "NOFORMAT", "NOINIT", "NONCLUSTERED", "NONE", 
                      "NOREWIND", "NOSKIP", "NOUNLOAD", "NO_CHECKSUM", "NO_COMPRESSION", 
                      "NO_EVENT_LOSS", "NOT", "NOTIFICATION", "NTLM", "NULL", 
                      "NULLIF", "OF", "OFF", "OFFSETS", "OLD_PASSWORD", 
                      "ON", "ON_FAILURE", "OPEN", "OPENDATASOURCE", "OPENQUERY", 
                      "OPENROWSET", "OPENXML", "OPTION", "OR", "ORDER", 
                      "OUTER", "OVER", "PAGE", "PARAM_NODE", "PARTIAL", 
                      "PASSWORD", "PERCENT", "PERMISSION_SET", "PER_CPU", 
                      "PER_DB", "PER_NODE", "PIVOT", "PLAN", "PLATFORM", 
                      "POLICY", "PRECISION", "PREDICATE", "PRIMARY", "PRINT", 
                      "PROC", "PROCEDURE", "PROCESS", "PUBLIC", "PYTHON", 
                      "R", "RAISERROR", "RAW", "READ", "READTEXT", "READ_WRITE_FILEGROUPS", 
                      "RECONFIGURE", "REFERENCES", "REGENERATE", "RELATED_CONVERSATION", 
                      "RELATED_CONVERSATION_GROUP", "REPLICATION", "REQUIRED", 
                      "RESET", "RESTART", "RESTORE", "RESTRICT", "RESUME", 
                      "RETAINDAYS", "RETURN", "RETURNS", "REVERT", "REVOKE", 
                      "REWIND", "RIGHT", "ROLLBACK", "ROLE", "ROWCOUNT", 
                      "ROWGUIDCOL", "RSA_512", "RSA_1024", "RSA_2048", "RSA_3072", 
                      "RSA_4096", "SAFETY", "RULE", "SAFE", "SAVE", "SCHEDULER", 
                      "SCHEMA", "SCHEME", "SECURITY", "SECURITYAUDIT", "SELECT", 
                      "SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", 
                      "SEMANTICSIMILARITYTABLE", "SEQUENCE", "SERVER", "SERVICE", 
                      "SERVICE_BROKER", "SERVICE_NAME", "SESSION", "SESSION_USER", 
                      "SET", "SETUSER", "SHUTDOWN", "SID", "SKIP_KEYWORD", 
                      "SOFTNUMA", "SOME", "SOURCE", "SPECIFICATION", "SPLIT", 
                      "SQLDUMPERFLAGS", "SQLDUMPERPATH", "SQLDUMPERTIMEOUT", 
                      "STATISTICS", "STATE", "STATS", "START", "STARTED", 
                      "STARTUP_STATE", "STOP", "STOPPED", "STOP_ON_ERROR", 
                      "SUPPORTED", "SYSTEM", "SYSTEM_USER", "TABLE", "TABLESAMPLE", 
                      "TAPE", "TARGET", "TCP", "TEXTSIZE", "THEN", "TO", 
                      "TOP", "TRACK_CAUSALITY", "TRAN", "TRANSACTION", "TRANSFER", 
                      "TRIGGER", "TRUNCATE", "TSEQUAL", "UNCHECKED", "UNION", 
                      "UNIQUE", "UNLOCK", "UNPIVOT", "UNSAFE", "UPDATE", 
                      "UPDATETEXT", "URL", "USE", "USED", "USER", "VALUES", 
                      "VARYING", "VERBOSELOGGING", "VIEW", "VISIBILITY", 
                      "WAITFOR", "WHEN", "WHERE", "WHILE", "WINDOWS", "WITH", 
                      "WITHIN", "WITHOUT", "WITNESS", "WRITETEXT", "ABSOLUTE", 
                      "ACCENT_SENSITIVITY", "ACTION", "ACTIVE", "ACTIVATION", 
                      "ADDRESS", "AES_128", "AES_192", "AES_256", "AFFINITY", 
                      "AFTER", "AGGREGATE", "ALGORITHM", "ALLOWED", "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", 
                      "ALLOW_SNAPSHOT_ISOLATION", "ANSI_NULLS", "ANSI_NULL_DEFAULT", 
                      "ANSI_PADDING", "ANSI_WARNINGS", "APPLICATION_LOG", 
                      "APPLY", "ARITHABORT", "ASSEMBLY", "AUDIT", "AUDIT_GUID", 
                      "AUTO", "AUTO_CLEANUP", "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", 
                      "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", 
                      "AVAILABILITY", "AVG", "BACKUP_PRIORITY", "BEGIN_DIALOG", 
                      "BIGINT", "BINARY_BASE64", "BINARY_CHECKSUM", "BINDING", 
                      "BLOB_STORAGE", "BROKER", "BROKER_INSTANCE", "BULK_LOGGED", 
                      "CALLER", "CAST", "CAP_CPU_PERCENT", "CATALOG", "CATCH", 
                      "CHANGE_RETENTION", "CHANGE_TRACKING", "CHECKSUM", 
                      "CHECKSUM_AGG", "CLEANUP", "COLLECTION", "COLUMN_MASTER_KEY", 
                      "COMMITTED", "COMPATIBILITY_LEVEL", "CONCAT", "CONCAT_NULL_YIELDS_NULL", 
                      "CONTENT", "CONTROL", "COOKIE", "COUNT", "COUNTER", 
                      "COUNT_BIG", "CPU", "CREATE_NEW", "CREATION_DISPOSITION", 
                      "CREDENTIAL", "CRYPTOGRAPHIC", "CURSOR_CLOSE_ON_COMMIT", 
                      "CURSOR_DEFAULT", "DATEADD", "DATEDIFF", "DATENAME", 
                      "DATEPART", "DATE_CORRELATION_OPTIMIZATION", "DAYS", 
                      "DB_CHAINING", "DB_FAILOVER", "DECRYPTION", "DEFAULT_DOUBLE_QUOTE", 
                      "DEFAULT_FULLTEXT_LANGUAGE", "DEFAULT_LANGUAGE", "DELAY", 
                      "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", "DEPENDENTS", 
                      "DES", "DESX", "DESCRIPTION", "DHCP", "DIALOG", "DIRECTORY_NAME", 
                      "DISABLE", "DISABLED", "DISABLE_BROKER", "DISK_DRIVE", 
                      "DOCUMENT", "DYNAMIC", "EMERGENCY", "EMPTY", "ENABLE", 
                      "ENABLE_BROKER", "ENCRYPTED_VALUE", "ENCRYPTION", 
                      "ENDPOINT_URL", "ERROR_BROKER_CONVERSATIONS", "EXECUTABLE", 
                      "EXIST", "EXPAND", "EXPIRY_DATE", "EXPLICIT", "FAILOVER_MODE", 
                      "FAILURE", "FAILURE_CONDITION_LEVEL", "FAIL_OPERATION", 
                      "FAST", "FAST_FORWARD", "FILEGROUP", "FILEGROWTH", 
                      "FILEPATH", "FILESTREAM", "FILTER", "FIRST", "FIRST_VALUE", 
                      "FOLLOWING", "FORCE", "FORCED", "FORCE_FAILOVER_ALLOW_DATA_LOSS", 
                      "FORMAT", "FORWARD_ONLY", "FULLSCAN", "FULLTEXT", 
                      "GB", "GETDATE", "GETUTCDATE", "GLOBAL", "GO", "GROUPING", 
                      "GROUPING_ID", "GROUP_MAX_REQUESTS", "HADR", "HASH", 
                      "HEALTH_CHECK_TIMEOUT", "HIGH", "HONOR_BROKER_PRIORITY", 
                      "HOURS", "IDENTITY_VALUE", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", 
                      "IMMEDIATE", "IMPERSONATE", "IMPORTANCE", "INCREMENTAL", 
                      "INITIATOR", "INPUT", "INSENSITIVE", "INSERTED", "INT", 
                      "IP", "ISOLATION", "KB", "KEEP", "KEEPFIXED", "KEYSET", 
                      "KEYS", "KEY_SOURCE", "LAG", "LAST", "LAST_VALUE", 
                      "LEAD", "LEVEL", "LIST", "LISTENER", "LISTENER_URL", 
                      "LOB_COMPACTION", "LOCAL", "LOCATION", "LOCK_ESCALATION", 
                      "LOGIN", "LOOP", "LOW", "MANUAL", "MARK", "MAX", "MAX_CPU_PERCENT", 
                      "MIN_CPU_PERCENT", "MAX_FILES", "MAX_IOPS_PER_VOLUME", 
                      "MIN_IOPS_PER_VOLUME", "MAX_MEMORY_PERCENT", "MIN_MEMORY_PERCENT", 
                      "MAX_PROCESSES", "MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES", 
                      "MAXDOP", "MAX_DOP", "MAXRECURSION", "MAXSIZE", "MEDIUM", 
                      "MESSAGE", "MB", "MEMORY_OPTIMIZED_DATA", "MIN", "MINUTES", 
                      "MIRROR_ADDRESS", "MIN_ACTIVE_ROWVERSION", "MIXED_PAGE_ALLOCATION", 
                      "MODIFY", "MOVE", "MULTI_USER", "NAME", "NESTED_TRIGGERS", 
                      "NEW_ACCOUNT", "NEW_BROKER", "NEW_PASSWORD", "NEXT", 
                      "NOCOUNT", "NOEXPAND", "NODES", "NON_TRANSACTED_ACCESS", 
                      "NORECOMPUTE", "NO", "NORECOVERY", "NO_TRUNCATE", 
                      "NO_WAIT", "NTILE", "NUMANODE", "NUMBER", "NUMERIC_ROUNDABORT", 
                      "OBJECT", "OFFLINE", "OFFSET", "OLD_ACCOUNT", "ONLINE", 
                      "ONLY", "OPEN_EXISTING", "OPTIMISTIC", "OPTIMIZE", 
                      "OUT", "OUTPUT", "OWNER", "PAGE_VERIFY", "PARAMETERIZATION", 
                      "PARTITION", "PARTITIONS", "PARTNER", "PATH", "POOL", 
                      "POISON_MESSAGE_HANDLING", "PORT", "PRECEDING", "PRIMARY_ROLE", 
                      "PRIOR", "PRIORITY", "PRIORITY_LEVEL", "PRIVATE", 
                      "PRIVATE_KEY", "PRIVILEGES", "PROCEDURE_NAME", "PROPERTY", 
                      "PROVIDER", "PROVIDER_KEY_NAME", "QUEUE", "QUEUE_DELAY", 
                      "QUERY", "QUOTED_IDENTIFIER", "RANGE", "RANK", "RC2", 
                      "RC4", "RC4_128", "READONLY", "READ_COMMITTED_SNAPSHOT", 
                      "READ_ONLY", "READ_ONLY_ROUTING_LIST", "READ_WRITE", 
                      "REBUILD", "RECOMPILE", "RECEIVE", "RECOVERY", "RECURSIVE_TRIGGERS", 
                      "RELATIVE", "REMOVE", "REORGANIZE", "REPLICA", "REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", 
                      "REMOTE", "REMOTE_SERVICE_NAME", "REPEATABLE", "REQUEST_MAX_MEMORY_GRANT_PERCENT", 
                      "REQUEST_MAX_CPU_TIME_SEC", "REQUEST_MEMORY_GRANT_TIMEOUT_SEC", 
                      "RESERVE_DISK_SPACE", "RESOURCE", "RESOURCE_MANAGER_LOCATION", 
                      "RESTRICTED_USER", "RETENTION", "ROBUST", "ROOT", 
                      "ROUTE", "ROW", "ROWGUID", "ROWS", "ROW_NUMBER", "SAMPLE", 
                      "SCHEMABINDING", "SCOPED", "SCROLL", "SCROLL_LOCKS", 
                      "SEARCH", "SECONDARY", "SECONDARY_ONLY", "SECONDARY_ROLE", 
                      "SECONDS", "SECRET", "SECURITY_LOG", "SEEDING_MODE", 
                      "SELF", "SEND", "SENT", "SERIALIZABLE", "SESSION_TIMEOUT", 
                      "SETERROR", "SHOWPLAN", "SIGNATURE", "SIMPLE", "SINGLE_USER", 
                      "SIZE", "SMALLINT", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", 
                      "START_DATE", "STATIC", "STATS_STREAM", "STATUS", 
                      "STDEV", "STDEVP", "STOPLIST", "SUBJECT", "SUSPEND", 
                      "STANDBY", "STUFF", "SUM", "SYMMETRIC", "SYNCHRONOUS_COMMIT", 
                      "SYNONYM", "TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", 
                      "THROW", "TIES", "TIME", "TIMER", "TINYINT", "TIMEOUT", 
                      "TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS", "TRIPLE_DES", 
                      "TRIPLE_DES_3KEY", "TRUSTWORTHY", "TRY", "TSQL", "TWO_DIGIT_YEAR_CUTOFF", 
                      "TYPE", "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED", 
                      "UNKNOWN", "UNLIMITED", "USING", "VALIDATION", "VALID_XML", 
                      "VALUE", "VAR", "VARP", "VIEWS", "VIEW_METADATA", 
                      "WELL_FORMED_XML", "WORK", "WORKLOAD", "XML", "XMLNAMESPACES", 
                      "DOLLAR_ACTION", "SPACE", "COMMENT", "LINE_COMMENT", 
                      "DOUBLE_QUOTE_ID", "SINGLE_QUOTE", "SQUARE_BRACKET_ID", 
                      "LOCAL_ID", "DECIMAL", "ID", "QUOTED_URL", "QUOTED_HOST_AND_PORT", 
                      "STRING", "BINARY", "FLOAT", "REAL", "EQUAL", "GREATER", 
                      "LESS", "EXCLAMATION", "PLUS_ASSIGN", "MINUS_ASSIGN", 
                      "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
                      "XOR_ASSIGN", "OR_ASSIGN", "DOT", "UNDERLINE", "AT", 
                      "SHARP", "DOLLAR", "LR_BRACKET", "RR_BRACKET", "COMMA", 
                      "SEMI", "COLON", "STAR", "DIVIDE", "MODULE", "PLUS", 
                      "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR", 
                      "IPV4_OCTECT" ];

var ruleNames =  [ "tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", 
                   "ddl_clause", "backup_statement", "cfl_statement", "block_statement", 
                   "break_statement", "continue_statement", "goto_statement", 
                   "return_statement", "if_statement", "throw_statement", 
                   "throw_error_number", "throw_message", "throw_state", 
                   "try_catch_statement", "waitfor_statement", "while_statement", 
                   "print_statement", "raiseerror_statement", "empty_statement", 
                   "another_statement", "alter_application_role", "create_application_role", 
                   "drop_aggregate", "drop_application_role", "alter_assembly", 
                   "alter_assembly_start", "alter_assembly_clause", "alter_assembly_from_clause", 
                   "alter_assembly_from_clause_start", "alter_assembly_drop_clause", 
                   "alter_assembly_drop_multiple_files", "alter_assembly_drop", 
                   "alter_assembly_add_clause", "alter_asssembly_add_clause_start", 
                   "alter_assembly_client_file_clause", "alter_assembly_file_name", 
                   "alter_assembly_file_bits", "alter_assembly_as", "alter_assembly_with_clause", 
                   "alter_assembly_with", "client_assembly_specifier", "assembly_option", 
                   "network_file_share", "network_computer", "network_file_start", 
                   "file_path", "file_directory_path_separator", "local_file", 
                   "local_drive", "multiple_local_files", "multiple_local_file_start", 
                   "create_assembly", "drop_assembly", "alter_asymmetric_key", 
                   "alter_asymmetric_key_start", "asymmetric_key_option", 
                   "asymmetric_key_option_start", "asymmetric_key_password_change_option", 
                   "create_asymmetric_key", "drop_asymmetric_key", "alter_authorization", 
                   "authorization_grantee", "entity_to", "colon_colon", 
                   "alter_authorization_start", "alter_authorization_for_sql_database", 
                   "alter_authorization_for_azure_dw", "alter_authorization_for_parallel_dw", 
                   "class_type", "class_type_for_sql_database", "class_type_for_azure_dw", 
                   "class_type_for_parallel_dw", "drop_availability_group", 
                   "alter_availability_group", "alter_availability_group_start", 
                   "alter_availability_group_options", "create_or_alter_broker_priority", 
                   "drop_broker_priority", "alter_certificate", "alter_column_encryption_key", 
                   "create_column_encryption_key", "drop_certificate", "drop_column_encryption_key", 
                   "drop_column_master_key", "drop_contract", "drop_credential", 
                   "drop_cryptograhic_provider", "drop_database", "drop_database_audit_specification", 
                   "drop_database_scoped_credential", "drop_default", "drop_endpoint", 
                   "drop_external_data_source", "drop_external_file_format", 
                   "drop_external_library", "drop_external_resource_pool", 
                   "drop_external_table", "drop_event_notifications", "drop_event_session", 
                   "drop_fulltext_catalog", "drop_fulltext_index", "drop_fulltext_stoplist", 
                   "drop_login", "drop_master_key", "drop_message_type", 
                   "drop_partition_function", "drop_partition_scheme", "drop_queue", 
                   "drop_remote_service_binding", "drop_resource_pool", 
                   "drop_db_role", "drop_route", "drop_rule", "drop_schema", 
                   "drop_search_property_list", "drop_security_policy", 
                   "drop_sequence", "drop_server_audit", "drop_server_audit_specification", 
                   "drop_server_role", "drop_service", "drop_signature", 
                   "drop_statistics_name_azure_dw_and_pdw", "drop_symmetric_key", 
                   "drop_synonym", "drop_user", "drop_workload_group", "drop_xml_schema_collection", 
                   "disable_trigger", "enable_trigger", "truncate_table", 
                   "create_column_master_key", "alter_credential", "create_credential", 
                   "alter_cryptographic_provider", "create_cryptographic_provider", 
                   "create_event_notification", "create_or_alter_event_session", 
                   "event_session_predicate_expression", "event_session_predicate_factor", 
                   "event_session_predicate_leaf", "alter_external_data_source", 
                   "alter_external_library", "create_external_library", 
                   "alter_external_resource_pool", "create_external_resource_pool", 
                   "alter_fulltext_catalog", "create_fulltext_catalog", 
                   "alter_fulltext_stoplist", "create_fulltext_stoplist", 
                   "alter_login_sql_server", "create_login_sql_server", 
                   "alter_login_azure_sql", "create_login_azure_sql", "alter_login_azure_sql_dw_and_pdw", 
                   "create_login_pdw", "alter_master_key_sql_server", "create_master_key_sql_server", 
                   "alter_master_key_azure_sql", "create_master_key_azure_sql", 
                   "alter_message_type", "alter_partition_function", "alter_partition_scheme", 
                   "alter_remote_service_binding", "create_remote_service_binding", 
                   "create_resource_pool", "alter_resource_governor", "alter_db_role", 
                   "create_db_role", "create_route", "create_rule", "alter_schema_sql", 
                   "create_schema", "create_schema_azure_sql_dw_and_pdw", 
                   "alter_schema_azure_sql_dw_and_pdw", "create_search_property_list", 
                   "create_security_policy", "alter_sequence", "create_sequence", 
                   "alter_server_audit", "create_server_audit", "alter_server_audit_specification", 
                   "create_server_audit_specification", "alter_server_configuration", 
                   "alter_server_role", "create_server_role", "alter_server_role_pdw", 
                   "alter_service", "create_service", "alter_service_master_key", 
                   "alter_symmetric_key", "create_symmetric_key", "create_synonym", 
                   "alter_user", "create_user", "create_user_azure_sql_dw", 
                   "alter_user_azure_sql", "alter_workload_group", "create_workload_group", 
                   "create_xml_schema_collection", "create_queue", "queue_settings", 
                   "alter_queue", "queue_action", "queue_rebuild_options", 
                   "create_contract", "conversation_statement", "message_statement", 
                   "merge_statement", "merge_matched", "merge_not_matched", 
                   "delete_statement", "delete_statement_from", "insert_statement", 
                   "insert_statement_value", "receive_statement", "select_statement", 
                   "time", "update_statement", "output_clause", "output_dml_list_elem", 
                   "output_column_name", "create_database", "create_index", 
                   "create_or_alter_procedure", "create_or_alter_trigger", 
                   "create_or_alter_dml_trigger", "dml_trigger_option", 
                   "dml_trigger_operation", "create_or_alter_ddl_trigger", 
                   "ddl_trigger_operation", "create_or_alter_function", 
                   "func_body_returns_select", "func_body_returns_table", 
                   "func_body_returns_scalar", "procedure_param", "procedure_option", 
                   "function_option", "create_statistics", "create_table", 
                   "table_options", "create_view", "view_attribute", "alter_table", 
                   "alter_database", "database_optionspec", "auto_option", 
                   "change_tracking_option", "change_tracking_option_list", 
                   "containment_option", "cursor_option", "alter_endpoint", 
                   "database_mirroring_option", "mirroring_set_option", 
                   "mirroring_partner", "mirroring_witness", "witness_partner_equal", 
                   "partner_option", "witness_option", "witness_server", 
                   "partner_server", "mirroring_host_port_seperator", "partner_server_tcp_prefix", 
                   "port_number", "host", "date_correlation_optimization_option", 
                   "db_encryption_option", "db_state_option", "db_update_option", 
                   "db_user_access_option", "delayed_durability_option", 
                   "external_access_option", "hadr_options", "mixed_page_allocation_option", 
                   "parameterization_option", "recovery_option", "service_broker_option", 
                   "snapshot_option", "sql_option", "target_recovery_time_option", 
                   "termination", "drop_index", "drop_relational_or_xml_or_spatial_index", 
                   "drop_backward_compatible_index", "drop_procedure", "drop_trigger", 
                   "drop_dml_trigger", "drop_ddl_trigger", "drop_function", 
                   "drop_statistics", "drop_table", "drop_view", "create_type", 
                   "drop_type", "rowset_function_limited", "openquery", 
                   "opendatasource", "declare_statement", "cursor_statement", 
                   "backup_database", "backup_log", "backup_certificate", 
                   "backup_master_key", "backup_service_master_key", "execute_statement", 
                   "execute_statement_arg", "execute_var_string", "security_statement", 
                   "create_certificate", "existing_keys", "private_key_options", 
                   "generate_new_keys", "date_options", "open_key", "close_key", 
                   "create_key", "key_options", "algorithm", "encryption_mechanism", 
                   "decryption_mechanism", "grant_permission", "set_statement", 
                   "transaction_statement", "go_statement", "use_statement", 
                   "dbcc_clause", "dbcc_options", "execute_clause", "declare_local", 
                   "table_type_definition", "xml_type_definition", "xml_schema_collection", 
                   "column_def_table_constraints", "column_def_table_constraint", 
                   "column_definition", "column_constraint", "table_constraint", 
                   "on_delete", "on_update", "index_options", "index_option", 
                   "declare_cursor", "declare_set_cursor_common", "declare_set_cursor_common_partial", 
                   "fetch_cursor", "set_special", "constant_LOCAL_ID", "expression", 
                   "primitive_expression", "case_expression", "unary_operator_expression", 
                   "bracket_expression", "constant_expression", "subquery", 
                   "with_expression", "common_table_expression", "update_elem", 
                   "search_condition_list", "search_condition", "search_condition_and", 
                   "search_condition_not", "predicate", "query_expression", 
                   "sql_union", "query_specification", "top_clause", "top_percent", 
                   "top_count", "order_by_clause", "for_clause", "xml_common_directives", 
                   "order_by_expression", "group_by_item", "option_clause", 
                   "option", "optimize_for_arg", "select_list", "udt_method_arguments", 
                   "asterisk", "column_elem", "udt_elem", "expression_elem", 
                   "select_list_elem", "table_sources", "table_source", 
                   "table_source_item_joined", "table_source_item", "open_xml", 
                   "schema_declaration", "column_declaration", "change_table", 
                   "join_part", "pivot_clause", "unpivot_clause", "full_column_name_list", 
                   "table_name_with_hint", "rowset_function", "bulk_option", 
                   "derived_table", "function_call", "xml_data_type_methods", 
                   "value_method", "query_method", "exist_method", "modify_method", 
                   "nodes_method", "switch_section", "switch_search_condition_section", 
                   "as_column_alias", "as_table_alias", "table_alias", "with_table_hints", 
                   "insert_with_table_hints", "table_hint", "index_value", 
                   "column_alias_list", "column_alias", "table_value_constructor", 
                   "expression_list", "ranking_windowed_function", "aggregate_windowed_function", 
                   "analytic_windowed_function", "all_distinct_expression", 
                   "over_clause", "row_or_range_clause", "window_frame_extent", 
                   "window_frame_bound", "window_frame_preceding", "window_frame_following", 
                   "create_database_option", "database_filestream_option", 
                   "database_file_spec", "file_group", "file_spec", "entity_name", 
                   "entity_name_for_azure_dw", "entity_name_for_parallel_dw", 
                   "full_table_name", "table_name", "simple_name", "func_proc_name", 
                   "ddl_object", "full_column_name", "column_name_list_with_order", 
                   "column_name_list", "cursor_name", "on_off", "clustered", 
                   "null_notnull", "null_or_default", "scalar_function_name", 
                   "begin_conversation_timer", "begin_conversation_dialog", 
                   "contract_name", "service_name", "end_conversation", 
                   "waitfor_conversation", "get_conversation", "queue_id", 
                   "send_conversation", "data_type", "default_value", "constant", 
                   "sign", "id", "simple_id", "comparison_operator", "assignment_operator", 
                   "file_size" ];

function TSqlParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

TSqlParser.prototype = Object.create(antlr4.Parser.prototype);
TSqlParser.prototype.constructor = TSqlParser;

Object.defineProperty(TSqlParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

TSqlParser.EOF = antlr4.Token.EOF;
TSqlParser.ADD = 1;
TSqlParser.AES = 2;
TSqlParser.ALL = 3;
TSqlParser.ALLOW_CONNECTIONS = 4;
TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS = 5;
TSqlParser.ALLOW_SINGLE_EVENT_LOSS = 6;
TSqlParser.ALTER = 7;
TSqlParser.AND = 8;
TSqlParser.ANONYMOUS = 9;
TSqlParser.ANY = 10;
TSqlParser.APPEND = 11;
TSqlParser.APPLICATION = 12;
TSqlParser.AS = 13;
TSqlParser.ASC = 14;
TSqlParser.ASYMMETRIC = 15;
TSqlParser.ASYNCHRONOUS_COMMIT = 16;
TSqlParser.AUTHORIZATION = 17;
TSqlParser.AUTHENTICATION = 18;
TSqlParser.AUTOMATED_BACKUP_PREFERENCE = 19;
TSqlParser.AUTOMATIC = 20;
TSqlParser.AVAILABILITY_MODE = 21;
TSqlParser.BACKSLASH = 22;
TSqlParser.BACKUP = 23;
TSqlParser.BEFORE = 24;
TSqlParser.BEGIN = 25;
TSqlParser.BETWEEN = 26;
TSqlParser.BLOCK = 27;
TSqlParser.BLOCKSIZE = 28;
TSqlParser.BLOCKING_HIERARCHY = 29;
TSqlParser.BREAK = 30;
TSqlParser.BROWSE = 31;
TSqlParser.BUFFER = 32;
TSqlParser.BUFFERCOUNT = 33;
TSqlParser.BULK = 34;
TSqlParser.BY = 35;
TSqlParser.CACHE = 36;
TSqlParser.CALLED = 37;
TSqlParser.CASCADE = 38;
TSqlParser.CASE = 39;
TSqlParser.CERTIFICATE = 40;
TSqlParser.CHANGETABLE = 41;
TSqlParser.CHANGES = 42;
TSqlParser.CHECK = 43;
TSqlParser.CHECKPOINT = 44;
TSqlParser.CHECK_POLICY = 45;
TSqlParser.CHECK_EXPIRATION = 46;
TSqlParser.CLASSIFIER_FUNCTION = 47;
TSqlParser.CLOSE = 48;
TSqlParser.CLUSTER = 49;
TSqlParser.CLUSTERED = 50;
TSqlParser.COALESCE = 51;
TSqlParser.COLLATE = 52;
TSqlParser.COLUMN = 53;
TSqlParser.COMPRESSION = 54;
TSqlParser.COMMIT = 55;
TSqlParser.COMPUTE = 56;
TSqlParser.CONFIGURATION = 57;
TSqlParser.CONSTRAINT = 58;
TSqlParser.CONTAINMENT = 59;
TSqlParser.CONTAINS = 60;
TSqlParser.CONTAINSTABLE = 61;
TSqlParser.CONTEXT = 62;
TSqlParser.CONTINUE = 63;
TSqlParser.CONTINUE_AFTER_ERROR = 64;
TSqlParser.CONTRACT = 65;
TSqlParser.CONTRACT_NAME = 66;
TSqlParser.CONVERSATION = 67;
TSqlParser.CONVERT = 68;
TSqlParser.COPY_ONLY = 69;
TSqlParser.CREATE = 70;
TSqlParser.CROSS = 71;
TSqlParser.CURRENT = 72;
TSqlParser.CURRENT_DATE = 73;
TSqlParser.CURRENT_TIME = 74;
TSqlParser.CURRENT_TIMESTAMP = 75;
TSqlParser.CURRENT_USER = 76;
TSqlParser.CURSOR = 77;
TSqlParser.CYCLE = 78;
TSqlParser.DATA = 79;
TSqlParser.DATA_COMPRESSION = 80;
TSqlParser.DATA_SOURCE = 81;
TSqlParser.DATABASE = 82;
TSqlParser.DATABASE_MIRRORING = 83;
TSqlParser.DBCC = 84;
TSqlParser.DEALLOCATE = 85;
TSqlParser.DECLARE = 86;
TSqlParser.DEFAULT = 87;
TSqlParser.DEFAULT_DATABASE = 88;
TSqlParser.DEFAULT_SCHEMA = 89;
TSqlParser.DELETE = 90;
TSqlParser.DENY = 91;
TSqlParser.DESC = 92;
TSqlParser.DIAGNOSTICS = 93;
TSqlParser.DIFFERENTIAL = 94;
TSqlParser.DISK = 95;
TSqlParser.DISTINCT = 96;
TSqlParser.DISTRIBUTED = 97;
TSqlParser.DOUBLE = 98;
TSqlParser.DOUBLE_BACK_SLASH = 99;
TSqlParser.DOUBLE_FORWARD_SLASH = 100;
TSqlParser.DROP = 101;
TSqlParser.DTC_SUPPORT = 102;
TSqlParser.DUMP = 103;
TSqlParser.ELSE = 104;
TSqlParser.ENABLED = 105;
TSqlParser.END = 106;
TSqlParser.ENDPOINT = 107;
TSqlParser.ERRLVL = 108;
TSqlParser.ESCAPE = 109;
TSqlParser.ERROR = 110;
TSqlParser.EVENT = 111;
TSqlParser.EVENTDATA = 112;
TSqlParser.EVENT_RETENTION_MODE = 113;
TSqlParser.EXCEPT = 114;
TSqlParser.EXECUTABLE_FILE = 115;
TSqlParser.EXECUTE = 116;
TSqlParser.EXISTS = 117;
TSqlParser.EXPIREDATE = 118;
TSqlParser.EXIT = 119;
TSqlParser.EXTENSION = 120;
TSqlParser.EXTERNAL = 121;
TSqlParser.EXTERNAL_ACCESS = 122;
TSqlParser.FAILOVER = 123;
TSqlParser.FAILURECONDITIONLEVEL = 124;
TSqlParser.FAN_IN = 125;
TSqlParser.FETCH = 126;
TSqlParser.FILE = 127;
TSqlParser.FILENAME = 128;
TSqlParser.FILLFACTOR = 129;
TSqlParser.FILE_SNAPSHOT = 130;
TSqlParser.FOR = 131;
TSqlParser.FORCESEEK = 132;
TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS = 133;
TSqlParser.FOREIGN = 134;
TSqlParser.FREETEXT = 135;
TSqlParser.FREETEXTTABLE = 136;
TSqlParser.FROM = 137;
TSqlParser.FULL = 138;
TSqlParser.FUNCTION = 139;
TSqlParser.GET = 140;
TSqlParser.GOTO = 141;
TSqlParser.GOVERNOR = 142;
TSqlParser.GRANT = 143;
TSqlParser.GROUP = 144;
TSqlParser.HAVING = 145;
TSqlParser.HASHED = 146;
TSqlParser.HEALTHCHECKTIMEOUT = 147;
TSqlParser.IDENTITY = 148;
TSqlParser.IDENTITYCOL = 149;
TSqlParser.IDENTITY_INSERT = 150;
TSqlParser.IF = 151;
TSqlParser.IN = 152;
TSqlParser.INCLUDE = 153;
TSqlParser.INCREMENT = 154;
TSqlParser.INDEX = 155;
TSqlParser.INFINITE = 156;
TSqlParser.INIT = 157;
TSqlParser.INNER = 158;
TSqlParser.INSERT = 159;
TSqlParser.INSTEAD = 160;
TSqlParser.INTERSECT = 161;
TSqlParser.INTO = 162;
TSqlParser.IPV4_ADDR = 163;
TSqlParser.IPV6_ADDR = 164;
TSqlParser.IS = 165;
TSqlParser.ISNULL = 166;
TSqlParser.JOIN = 167;
TSqlParser.KERBEROS = 168;
TSqlParser.KEY = 169;
TSqlParser.KEY_PATH = 170;
TSqlParser.KEY_STORE_PROVIDER_NAME = 171;
TSqlParser.KILL = 172;
TSqlParser.LANGUAGE = 173;
TSqlParser.LEFT = 174;
TSqlParser.LIBRARY = 175;
TSqlParser.LIFETIME = 176;
TSqlParser.LIKE = 177;
TSqlParser.LINENO = 178;
TSqlParser.LINUX = 179;
TSqlParser.LISTENER_IP = 180;
TSqlParser.LISTENER_PORT = 181;
TSqlParser.LOAD = 182;
TSqlParser.LOCAL_SERVICE_NAME = 183;
TSqlParser.LOG = 184;
TSqlParser.MATCHED = 185;
TSqlParser.MASTER = 186;
TSqlParser.MAX_MEMORY = 187;
TSqlParser.MAXTRANSFER = 188;
TSqlParser.MAXVALUE = 189;
TSqlParser.MAX_DISPATCH_LATENCY = 190;
TSqlParser.MAX_EVENT_SIZE = 191;
TSqlParser.MAX_SIZE = 192;
TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME = 193;
TSqlParser.MEDIADESCRIPTION = 194;
TSqlParser.MEDIANAME = 195;
TSqlParser.MEMBER = 196;
TSqlParser.MEMORY_PARTITION_MODE = 197;
TSqlParser.MERGE = 198;
TSqlParser.MESSAGE_FORWARDING = 199;
TSqlParser.MESSAGE_FORWARD_SIZE = 200;
TSqlParser.MINVALUE = 201;
TSqlParser.MIRROR = 202;
TSqlParser.MUST_CHANGE = 203;
TSqlParser.NATIONAL = 204;
TSqlParser.NEGOTIATE = 205;
TSqlParser.NOCHECK = 206;
TSqlParser.NOFORMAT = 207;
TSqlParser.NOINIT = 208;
TSqlParser.NONCLUSTERED = 209;
TSqlParser.NONE = 210;
TSqlParser.NOREWIND = 211;
TSqlParser.NOSKIP = 212;
TSqlParser.NOUNLOAD = 213;
TSqlParser.NO_CHECKSUM = 214;
TSqlParser.NO_COMPRESSION = 215;
TSqlParser.NO_EVENT_LOSS = 216;
TSqlParser.NOT = 217;
TSqlParser.NOTIFICATION = 218;
TSqlParser.NTLM = 219;
TSqlParser.NULL = 220;
TSqlParser.NULLIF = 221;
TSqlParser.OF = 222;
TSqlParser.OFF = 223;
TSqlParser.OFFSETS = 224;
TSqlParser.OLD_PASSWORD = 225;
TSqlParser.ON = 226;
TSqlParser.ON_FAILURE = 227;
TSqlParser.OPEN = 228;
TSqlParser.OPENDATASOURCE = 229;
TSqlParser.OPENQUERY = 230;
TSqlParser.OPENROWSET = 231;
TSqlParser.OPENXML = 232;
TSqlParser.OPTION = 233;
TSqlParser.OR = 234;
TSqlParser.ORDER = 235;
TSqlParser.OUTER = 236;
TSqlParser.OVER = 237;
TSqlParser.PAGE = 238;
TSqlParser.PARAM_NODE = 239;
TSqlParser.PARTIAL = 240;
TSqlParser.PASSWORD = 241;
TSqlParser.PERCENT = 242;
TSqlParser.PERMISSION_SET = 243;
TSqlParser.PER_CPU = 244;
TSqlParser.PER_DB = 245;
TSqlParser.PER_NODE = 246;
TSqlParser.PIVOT = 247;
TSqlParser.PLAN = 248;
TSqlParser.PLATFORM = 249;
TSqlParser.POLICY = 250;
TSqlParser.PRECISION = 251;
TSqlParser.PREDICATE = 252;
TSqlParser.PRIMARY = 253;
TSqlParser.PRINT = 254;
TSqlParser.PROC = 255;
TSqlParser.PROCEDURE = 256;
TSqlParser.PROCESS = 257;
TSqlParser.PUBLIC = 258;
TSqlParser.PYTHON = 259;
TSqlParser.R = 260;
TSqlParser.RAISERROR = 261;
TSqlParser.RAW = 262;
TSqlParser.READ = 263;
TSqlParser.READTEXT = 264;
TSqlParser.READ_WRITE_FILEGROUPS = 265;
TSqlParser.RECONFIGURE = 266;
TSqlParser.REFERENCES = 267;
TSqlParser.REGENERATE = 268;
TSqlParser.RELATED_CONVERSATION = 269;
TSqlParser.RELATED_CONVERSATION_GROUP = 270;
TSqlParser.REPLICATION = 271;
TSqlParser.REQUIRED = 272;
TSqlParser.RESET = 273;
TSqlParser.RESTART = 274;
TSqlParser.RESTORE = 275;
TSqlParser.RESTRICT = 276;
TSqlParser.RESUME = 277;
TSqlParser.RETAINDAYS = 278;
TSqlParser.RETURN = 279;
TSqlParser.RETURNS = 280;
TSqlParser.REVERT = 281;
TSqlParser.REVOKE = 282;
TSqlParser.REWIND = 283;
TSqlParser.RIGHT = 284;
TSqlParser.ROLLBACK = 285;
TSqlParser.ROLE = 286;
TSqlParser.ROWCOUNT = 287;
TSqlParser.ROWGUIDCOL = 288;
TSqlParser.RSA_512 = 289;
TSqlParser.RSA_1024 = 290;
TSqlParser.RSA_2048 = 291;
TSqlParser.RSA_3072 = 292;
TSqlParser.RSA_4096 = 293;
TSqlParser.SAFETY = 294;
TSqlParser.RULE = 295;
TSqlParser.SAFE = 296;
TSqlParser.SAVE = 297;
TSqlParser.SCHEDULER = 298;
TSqlParser.SCHEMA = 299;
TSqlParser.SCHEME = 300;
TSqlParser.SECURITY = 301;
TSqlParser.SECURITYAUDIT = 302;
TSqlParser.SELECT = 303;
TSqlParser.SEMANTICKEYPHRASETABLE = 304;
TSqlParser.SEMANTICSIMILARITYDETAILSTABLE = 305;
TSqlParser.SEMANTICSIMILARITYTABLE = 306;
TSqlParser.SEQUENCE = 307;
TSqlParser.SERVER = 308;
TSqlParser.SERVICE = 309;
TSqlParser.SERVICE_BROKER = 310;
TSqlParser.SERVICE_NAME = 311;
TSqlParser.SESSION = 312;
TSqlParser.SESSION_USER = 313;
TSqlParser.SET = 314;
TSqlParser.SETUSER = 315;
TSqlParser.SHUTDOWN = 316;
TSqlParser.SID = 317;
TSqlParser.SKIP_KEYWORD = 318;
TSqlParser.SOFTNUMA = 319;
TSqlParser.SOME = 320;
TSqlParser.SOURCE = 321;
TSqlParser.SPECIFICATION = 322;
TSqlParser.SPLIT = 323;
TSqlParser.SQLDUMPERFLAGS = 324;
TSqlParser.SQLDUMPERPATH = 325;
TSqlParser.SQLDUMPERTIMEOUT = 326;
TSqlParser.STATISTICS = 327;
TSqlParser.STATE = 328;
TSqlParser.STATS = 329;
TSqlParser.START = 330;
TSqlParser.STARTED = 331;
TSqlParser.STARTUP_STATE = 332;
TSqlParser.STOP = 333;
TSqlParser.STOPPED = 334;
TSqlParser.STOP_ON_ERROR = 335;
TSqlParser.SUPPORTED = 336;
TSqlParser.SYSTEM = 337;
TSqlParser.SYSTEM_USER = 338;
TSqlParser.TABLE = 339;
TSqlParser.TABLESAMPLE = 340;
TSqlParser.TAPE = 341;
TSqlParser.TARGET = 342;
TSqlParser.TCP = 343;
TSqlParser.TEXTSIZE = 344;
TSqlParser.THEN = 345;
TSqlParser.TO = 346;
TSqlParser.TOP = 347;
TSqlParser.TRACK_CAUSALITY = 348;
TSqlParser.TRAN = 349;
TSqlParser.TRANSACTION = 350;
TSqlParser.TRANSFER = 351;
TSqlParser.TRIGGER = 352;
TSqlParser.TRUNCATE = 353;
TSqlParser.TSEQUAL = 354;
TSqlParser.UNCHECKED = 355;
TSqlParser.UNION = 356;
TSqlParser.UNIQUE = 357;
TSqlParser.UNLOCK = 358;
TSqlParser.UNPIVOT = 359;
TSqlParser.UNSAFE = 360;
TSqlParser.UPDATE = 361;
TSqlParser.UPDATETEXT = 362;
TSqlParser.URL = 363;
TSqlParser.USE = 364;
TSqlParser.USED = 365;
TSqlParser.USER = 366;
TSqlParser.VALUES = 367;
TSqlParser.VARYING = 368;
TSqlParser.VERBOSELOGGING = 369;
TSqlParser.VIEW = 370;
TSqlParser.VISIBILITY = 371;
TSqlParser.WAITFOR = 372;
TSqlParser.WHEN = 373;
TSqlParser.WHERE = 374;
TSqlParser.WHILE = 375;
TSqlParser.WINDOWS = 376;
TSqlParser.WITH = 377;
TSqlParser.WITHIN = 378;
TSqlParser.WITHOUT = 379;
TSqlParser.WITNESS = 380;
TSqlParser.WRITETEXT = 381;
TSqlParser.ABSOLUTE = 382;
TSqlParser.ACCENT_SENSITIVITY = 383;
TSqlParser.ACTION = 384;
TSqlParser.ACTIVE = 385;
TSqlParser.ACTIVATION = 386;
TSqlParser.ADDRESS = 387;
TSqlParser.AES_128 = 388;
TSqlParser.AES_192 = 389;
TSqlParser.AES_256 = 390;
TSqlParser.AFFINITY = 391;
TSqlParser.AFTER = 392;
TSqlParser.AGGREGATE = 393;
TSqlParser.ALGORITHM = 394;
TSqlParser.ALLOWED = 395;
TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS = 396;
TSqlParser.ALLOW_SNAPSHOT_ISOLATION = 397;
TSqlParser.ANSI_NULLS = 398;
TSqlParser.ANSI_NULL_DEFAULT = 399;
TSqlParser.ANSI_PADDING = 400;
TSqlParser.ANSI_WARNINGS = 401;
TSqlParser.APPLICATION_LOG = 402;
TSqlParser.APPLY = 403;
TSqlParser.ARITHABORT = 404;
TSqlParser.ASSEMBLY = 405;
TSqlParser.AUDIT = 406;
TSqlParser.AUDIT_GUID = 407;
TSqlParser.AUTO = 408;
TSqlParser.AUTO_CLEANUP = 409;
TSqlParser.AUTO_CLOSE = 410;
TSqlParser.AUTO_CREATE_STATISTICS = 411;
TSqlParser.AUTO_SHRINK = 412;
TSqlParser.AUTO_UPDATE_STATISTICS = 413;
TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC = 414;
TSqlParser.AVAILABILITY = 415;
TSqlParser.AVG = 416;
TSqlParser.BACKUP_PRIORITY = 417;
TSqlParser.BEGIN_DIALOG = 418;
TSqlParser.BIGINT = 419;
TSqlParser.BINARY_BASE64 = 420;
TSqlParser.BINARY_CHECKSUM = 421;
TSqlParser.BINDING = 422;
TSqlParser.BLOB_STORAGE = 423;
TSqlParser.BROKER = 424;
TSqlParser.BROKER_INSTANCE = 425;
TSqlParser.BULK_LOGGED = 426;
TSqlParser.CALLER = 427;
TSqlParser.CAST = 428;
TSqlParser.CAP_CPU_PERCENT = 429;
TSqlParser.CATALOG = 430;
TSqlParser.CATCH = 431;
TSqlParser.CHANGE_RETENTION = 432;
TSqlParser.CHANGE_TRACKING = 433;
TSqlParser.CHECKSUM = 434;
TSqlParser.CHECKSUM_AGG = 435;
TSqlParser.CLEANUP = 436;
TSqlParser.COLLECTION = 437;
TSqlParser.COLUMN_MASTER_KEY = 438;
TSqlParser.COMMITTED = 439;
TSqlParser.COMPATIBILITY_LEVEL = 440;
TSqlParser.CONCAT = 441;
TSqlParser.CONCAT_NULL_YIELDS_NULL = 442;
TSqlParser.CONTENT = 443;
TSqlParser.CONTROL = 444;
TSqlParser.COOKIE = 445;
TSqlParser.COUNT = 446;
TSqlParser.COUNTER = 447;
TSqlParser.COUNT_BIG = 448;
TSqlParser.CPU = 449;
TSqlParser.CREATE_NEW = 450;
TSqlParser.CREATION_DISPOSITION = 451;
TSqlParser.CREDENTIAL = 452;
TSqlParser.CRYPTOGRAPHIC = 453;
TSqlParser.CURSOR_CLOSE_ON_COMMIT = 454;
TSqlParser.CURSOR_DEFAULT = 455;
TSqlParser.DATEADD = 456;
TSqlParser.DATEDIFF = 457;
TSqlParser.DATENAME = 458;
TSqlParser.DATEPART = 459;
TSqlParser.DATE_CORRELATION_OPTIMIZATION = 460;
TSqlParser.DAYS = 461;
TSqlParser.DB_CHAINING = 462;
TSqlParser.DB_FAILOVER = 463;
TSqlParser.DECRYPTION = 464;
TSqlParser.DEFAULT_DOUBLE_QUOTE = 465;
TSqlParser.DEFAULT_FULLTEXT_LANGUAGE = 466;
TSqlParser.DEFAULT_LANGUAGE = 467;
TSqlParser.DELAY = 468;
TSqlParser.DELAYED_DURABILITY = 469;
TSqlParser.DELETED = 470;
TSqlParser.DENSE_RANK = 471;
TSqlParser.DEPENDENTS = 472;
TSqlParser.DES = 473;
TSqlParser.DESX = 474;
TSqlParser.DESCRIPTION = 475;
TSqlParser.DHCP = 476;
TSqlParser.DIALOG = 477;
TSqlParser.DIRECTORY_NAME = 478;
TSqlParser.DISABLE = 479;
TSqlParser.DISABLED = 480;
TSqlParser.DISABLE_BROKER = 481;
TSqlParser.DISK_DRIVE = 482;
TSqlParser.DOCUMENT = 483;
TSqlParser.DYNAMIC = 484;
TSqlParser.EMERGENCY = 485;
TSqlParser.EMPTY = 486;
TSqlParser.ENABLE = 487;
TSqlParser.ENABLE_BROKER = 488;
TSqlParser.ENCRYPTED_VALUE = 489;
TSqlParser.ENCRYPTION = 490;
TSqlParser.ENDPOINT_URL = 491;
TSqlParser.ERROR_BROKER_CONVERSATIONS = 492;
TSqlParser.EXECUTABLE = 493;
TSqlParser.EXIST = 494;
TSqlParser.EXPAND = 495;
TSqlParser.EXPIRY_DATE = 496;
TSqlParser.EXPLICIT = 497;
TSqlParser.FAILOVER_MODE = 498;
TSqlParser.FAILURE = 499;
TSqlParser.FAILURE_CONDITION_LEVEL = 500;
TSqlParser.FAIL_OPERATION = 501;
TSqlParser.FAST = 502;
TSqlParser.FAST_FORWARD = 503;
TSqlParser.FILEGROUP = 504;
TSqlParser.FILEGROWTH = 505;
TSqlParser.FILEPATH = 506;
TSqlParser.FILESTREAM = 507;
TSqlParser.FILTER = 508;
TSqlParser.FIRST = 509;
TSqlParser.FIRST_VALUE = 510;
TSqlParser.FOLLOWING = 511;
TSqlParser.FORCE = 512;
TSqlParser.FORCED = 513;
TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS = 514;
TSqlParser.FORMAT = 515;
TSqlParser.FORWARD_ONLY = 516;
TSqlParser.FULLSCAN = 517;
TSqlParser.FULLTEXT = 518;
TSqlParser.GB = 519;
TSqlParser.GETDATE = 520;
TSqlParser.GETUTCDATE = 521;
TSqlParser.GLOBAL = 522;
TSqlParser.GO = 523;
TSqlParser.GROUPING = 524;
TSqlParser.GROUPING_ID = 525;
TSqlParser.GROUP_MAX_REQUESTS = 526;
TSqlParser.HADR = 527;
TSqlParser.HASH = 528;
TSqlParser.HEALTH_CHECK_TIMEOUT = 529;
TSqlParser.HIGH = 530;
TSqlParser.HONOR_BROKER_PRIORITY = 531;
TSqlParser.HOURS = 532;
TSqlParser.IDENTITY_VALUE = 533;
TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX = 534;
TSqlParser.IMMEDIATE = 535;
TSqlParser.IMPERSONATE = 536;
TSqlParser.IMPORTANCE = 537;
TSqlParser.INCREMENTAL = 538;
TSqlParser.INITIATOR = 539;
TSqlParser.INPUT = 540;
TSqlParser.INSENSITIVE = 541;
TSqlParser.INSERTED = 542;
TSqlParser.INT = 543;
TSqlParser.IP = 544;
TSqlParser.ISOLATION = 545;
TSqlParser.KB = 546;
TSqlParser.KEEP = 547;
TSqlParser.KEEPFIXED = 548;
TSqlParser.KEYSET = 549;
TSqlParser.KEYS = 550;
TSqlParser.KEY_SOURCE = 551;
TSqlParser.LAG = 552;
TSqlParser.LAST = 553;
TSqlParser.LAST_VALUE = 554;
TSqlParser.LEAD = 555;
TSqlParser.LEVEL = 556;
TSqlParser.LIST = 557;
TSqlParser.LISTENER = 558;
TSqlParser.LISTENER_URL = 559;
TSqlParser.LOB_COMPACTION = 560;
TSqlParser.LOCAL = 561;
TSqlParser.LOCATION = 562;
TSqlParser.LOCK_ESCALATION = 563;
TSqlParser.LOGIN = 564;
TSqlParser.LOOP = 565;
TSqlParser.LOW = 566;
TSqlParser.MANUAL = 567;
TSqlParser.MARK = 568;
TSqlParser.MAX = 569;
TSqlParser.MAX_CPU_PERCENT = 570;
TSqlParser.MIN_CPU_PERCENT = 571;
TSqlParser.MAX_FILES = 572;
TSqlParser.MAX_IOPS_PER_VOLUME = 573;
TSqlParser.MIN_IOPS_PER_VOLUME = 574;
TSqlParser.MAX_MEMORY_PERCENT = 575;
TSqlParser.MIN_MEMORY_PERCENT = 576;
TSqlParser.MAX_PROCESSES = 577;
TSqlParser.MAX_QUEUE_READERS = 578;
TSqlParser.MAX_ROLLOVER_FILES = 579;
TSqlParser.MAXDOP = 580;
TSqlParser.MAX_DOP = 581;
TSqlParser.MAXRECURSION = 582;
TSqlParser.MAXSIZE = 583;
TSqlParser.MEDIUM = 584;
TSqlParser.MESSAGE = 585;
TSqlParser.MB = 586;
TSqlParser.MEMORY_OPTIMIZED_DATA = 587;
TSqlParser.MIN = 588;
TSqlParser.MINUTES = 589;
TSqlParser.MIRROR_ADDRESS = 590;
TSqlParser.MIN_ACTIVE_ROWVERSION = 591;
TSqlParser.MIXED_PAGE_ALLOCATION = 592;
TSqlParser.MODIFY = 593;
TSqlParser.MOVE = 594;
TSqlParser.MULTI_USER = 595;
TSqlParser.NAME = 596;
TSqlParser.NESTED_TRIGGERS = 597;
TSqlParser.NEW_ACCOUNT = 598;
TSqlParser.NEW_BROKER = 599;
TSqlParser.NEW_PASSWORD = 600;
TSqlParser.NEXT = 601;
TSqlParser.NOCOUNT = 602;
TSqlParser.NOEXPAND = 603;
TSqlParser.NODES = 604;
TSqlParser.NON_TRANSACTED_ACCESS = 605;
TSqlParser.NORECOMPUTE = 606;
TSqlParser.NO = 607;
TSqlParser.NORECOVERY = 608;
TSqlParser.NO_TRUNCATE = 609;
TSqlParser.NO_WAIT = 610;
TSqlParser.NTILE = 611;
TSqlParser.NUMANODE = 612;
TSqlParser.NUMBER = 613;
TSqlParser.NUMERIC_ROUNDABORT = 614;
TSqlParser.OBJECT = 615;
TSqlParser.OFFLINE = 616;
TSqlParser.OFFSET = 617;
TSqlParser.OLD_ACCOUNT = 618;
TSqlParser.ONLINE = 619;
TSqlParser.ONLY = 620;
TSqlParser.OPEN_EXISTING = 621;
TSqlParser.OPTIMISTIC = 622;
TSqlParser.OPTIMIZE = 623;
TSqlParser.OUT = 624;
TSqlParser.OUTPUT = 625;
TSqlParser.OWNER = 626;
TSqlParser.PAGE_VERIFY = 627;
TSqlParser.PARAMETERIZATION = 628;
TSqlParser.PARTITION = 629;
TSqlParser.PARTITIONS = 630;
TSqlParser.PARTNER = 631;
TSqlParser.PATH = 632;
TSqlParser.POOL = 633;
TSqlParser.POISON_MESSAGE_HANDLING = 634;
TSqlParser.PORT = 635;
TSqlParser.PRECEDING = 636;
TSqlParser.PRIMARY_ROLE = 637;
TSqlParser.PRIOR = 638;
TSqlParser.PRIORITY = 639;
TSqlParser.PRIORITY_LEVEL = 640;
TSqlParser.PRIVATE = 641;
TSqlParser.PRIVATE_KEY = 642;
TSqlParser.PRIVILEGES = 643;
TSqlParser.PROCEDURE_NAME = 644;
TSqlParser.PROPERTY = 645;
TSqlParser.PROVIDER = 646;
TSqlParser.PROVIDER_KEY_NAME = 647;
TSqlParser.QUEUE = 648;
TSqlParser.QUEUE_DELAY = 649;
TSqlParser.QUERY = 650;
TSqlParser.QUOTED_IDENTIFIER = 651;
TSqlParser.RANGE = 652;
TSqlParser.RANK = 653;
TSqlParser.RC2 = 654;
TSqlParser.RC4 = 655;
TSqlParser.RC4_128 = 656;
TSqlParser.READONLY = 657;
TSqlParser.READ_COMMITTED_SNAPSHOT = 658;
TSqlParser.READ_ONLY = 659;
TSqlParser.READ_ONLY_ROUTING_LIST = 660;
TSqlParser.READ_WRITE = 661;
TSqlParser.REBUILD = 662;
TSqlParser.RECOMPILE = 663;
TSqlParser.RECEIVE = 664;
TSqlParser.RECOVERY = 665;
TSqlParser.RECURSIVE_TRIGGERS = 666;
TSqlParser.RELATIVE = 667;
TSqlParser.REMOVE = 668;
TSqlParser.REORGANIZE = 669;
TSqlParser.REPLICA = 670;
TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT = 671;
TSqlParser.REMOTE = 672;
TSqlParser.REMOTE_SERVICE_NAME = 673;
TSqlParser.REPEATABLE = 674;
TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT = 675;
TSqlParser.REQUEST_MAX_CPU_TIME_SEC = 676;
TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC = 677;
TSqlParser.RESERVE_DISK_SPACE = 678;
TSqlParser.RESOURCE = 679;
TSqlParser.RESOURCE_MANAGER_LOCATION = 680;
TSqlParser.RESTRICTED_USER = 681;
TSqlParser.RETENTION = 682;
TSqlParser.ROBUST = 683;
TSqlParser.ROOT = 684;
TSqlParser.ROUTE = 685;
TSqlParser.ROW = 686;
TSqlParser.ROWGUID = 687;
TSqlParser.ROWS = 688;
TSqlParser.ROW_NUMBER = 689;
TSqlParser.SAMPLE = 690;
TSqlParser.SCHEMABINDING = 691;
TSqlParser.SCOPED = 692;
TSqlParser.SCROLL = 693;
TSqlParser.SCROLL_LOCKS = 694;
TSqlParser.SEARCH = 695;
TSqlParser.SECONDARY = 696;
TSqlParser.SECONDARY_ONLY = 697;
TSqlParser.SECONDARY_ROLE = 698;
TSqlParser.SECONDS = 699;
TSqlParser.SECRET = 700;
TSqlParser.SECURITY_LOG = 701;
TSqlParser.SEEDING_MODE = 702;
TSqlParser.SELF = 703;
TSqlParser.SEND = 704;
TSqlParser.SENT = 705;
TSqlParser.SERIALIZABLE = 706;
TSqlParser.SESSION_TIMEOUT = 707;
TSqlParser.SETERROR = 708;
TSqlParser.SHOWPLAN = 709;
TSqlParser.SIGNATURE = 710;
TSqlParser.SIMPLE = 711;
TSqlParser.SINGLE_USER = 712;
TSqlParser.SIZE = 713;
TSqlParser.SMALLINT = 714;
TSqlParser.SNAPSHOT = 715;
TSqlParser.SPATIAL_WINDOW_MAX_CELLS = 716;
TSqlParser.START_DATE = 717;
TSqlParser.STATIC = 718;
TSqlParser.STATS_STREAM = 719;
TSqlParser.STATUS = 720;
TSqlParser.STDEV = 721;
TSqlParser.STDEVP = 722;
TSqlParser.STOPLIST = 723;
TSqlParser.SUBJECT = 724;
TSqlParser.SUSPEND = 725;
TSqlParser.STANDBY = 726;
TSqlParser.STUFF = 727;
TSqlParser.SUM = 728;
TSqlParser.SYMMETRIC = 729;
TSqlParser.SYNCHRONOUS_COMMIT = 730;
TSqlParser.SYNONYM = 731;
TSqlParser.TAKE = 732;
TSqlParser.TARGET_RECOVERY_TIME = 733;
TSqlParser.TB = 734;
TSqlParser.TEXTIMAGE_ON = 735;
TSqlParser.THROW = 736;
TSqlParser.TIES = 737;
TSqlParser.TIME = 738;
TSqlParser.TIMER = 739;
TSqlParser.TINYINT = 740;
TSqlParser.TIMEOUT = 741;
TSqlParser.TORN_PAGE_DETECTION = 742;
TSqlParser.TRANSFORM_NOISE_WORDS = 743;
TSqlParser.TRIPLE_DES = 744;
TSqlParser.TRIPLE_DES_3KEY = 745;
TSqlParser.TRUSTWORTHY = 746;
TSqlParser.TRY = 747;
TSqlParser.TSQL = 748;
TSqlParser.TWO_DIGIT_YEAR_CUTOFF = 749;
TSqlParser.TYPE = 750;
TSqlParser.TYPE_WARNING = 751;
TSqlParser.UNBOUNDED = 752;
TSqlParser.UNCOMMITTED = 753;
TSqlParser.UNKNOWN = 754;
TSqlParser.UNLIMITED = 755;
TSqlParser.USING = 756;
TSqlParser.VALIDATION = 757;
TSqlParser.VALID_XML = 758;
TSqlParser.VALUE = 759;
TSqlParser.VAR = 760;
TSqlParser.VARP = 761;
TSqlParser.VIEWS = 762;
TSqlParser.VIEW_METADATA = 763;
TSqlParser.WELL_FORMED_XML = 764;
TSqlParser.WORK = 765;
TSqlParser.WORKLOAD = 766;
TSqlParser.XML = 767;
TSqlParser.XMLNAMESPACES = 768;
TSqlParser.DOLLAR_ACTION = 769;
TSqlParser.SPACE = 770;
TSqlParser.COMMENT = 771;
TSqlParser.LINE_COMMENT = 772;
TSqlParser.DOUBLE_QUOTE_ID = 773;
TSqlParser.SINGLE_QUOTE = 774;
TSqlParser.SQUARE_BRACKET_ID = 775;
TSqlParser.LOCAL_ID = 776;
TSqlParser.DECIMAL = 777;
TSqlParser.ID = 778;
TSqlParser.QUOTED_URL = 779;
TSqlParser.QUOTED_HOST_AND_PORT = 780;
TSqlParser.STRING = 781;
TSqlParser.BINARY = 782;
TSqlParser.FLOAT = 783;
TSqlParser.REAL = 784;
TSqlParser.EQUAL = 785;
TSqlParser.GREATER = 786;
TSqlParser.LESS = 787;
TSqlParser.EXCLAMATION = 788;
TSqlParser.PLUS_ASSIGN = 789;
TSqlParser.MINUS_ASSIGN = 790;
TSqlParser.MULT_ASSIGN = 791;
TSqlParser.DIV_ASSIGN = 792;
TSqlParser.MOD_ASSIGN = 793;
TSqlParser.AND_ASSIGN = 794;
TSqlParser.XOR_ASSIGN = 795;
TSqlParser.OR_ASSIGN = 796;
TSqlParser.DOT = 797;
TSqlParser.UNDERLINE = 798;
TSqlParser.AT = 799;
TSqlParser.SHARP = 800;
TSqlParser.DOLLAR = 801;
TSqlParser.LR_BRACKET = 802;
TSqlParser.RR_BRACKET = 803;
TSqlParser.COMMA = 804;
TSqlParser.SEMI = 805;
TSqlParser.COLON = 806;
TSqlParser.STAR = 807;
TSqlParser.DIVIDE = 808;
TSqlParser.MODULE = 809;
TSqlParser.PLUS = 810;
TSqlParser.MINUS = 811;
TSqlParser.BIT_NOT = 812;
TSqlParser.BIT_OR = 813;
TSqlParser.BIT_AND = 814;
TSqlParser.BIT_XOR = 815;
TSqlParser.IPV4_OCTECT = 816;

TSqlParser.RULE_tsql_file = 0;
TSqlParser.RULE_batch = 1;
TSqlParser.RULE_sql_clauses = 2;
TSqlParser.RULE_sql_clause = 3;
TSqlParser.RULE_dml_clause = 4;
TSqlParser.RULE_ddl_clause = 5;
TSqlParser.RULE_backup_statement = 6;
TSqlParser.RULE_cfl_statement = 7;
TSqlParser.RULE_block_statement = 8;
TSqlParser.RULE_break_statement = 9;
TSqlParser.RULE_continue_statement = 10;
TSqlParser.RULE_goto_statement = 11;
TSqlParser.RULE_return_statement = 12;
TSqlParser.RULE_if_statement = 13;
TSqlParser.RULE_throw_statement = 14;
TSqlParser.RULE_throw_error_number = 15;
TSqlParser.RULE_throw_message = 16;
TSqlParser.RULE_throw_state = 17;
TSqlParser.RULE_try_catch_statement = 18;
TSqlParser.RULE_waitfor_statement = 19;
TSqlParser.RULE_while_statement = 20;
TSqlParser.RULE_print_statement = 21;
TSqlParser.RULE_raiseerror_statement = 22;
TSqlParser.RULE_empty_statement = 23;
TSqlParser.RULE_another_statement = 24;
TSqlParser.RULE_alter_application_role = 25;
TSqlParser.RULE_create_application_role = 26;
TSqlParser.RULE_drop_aggregate = 27;
TSqlParser.RULE_drop_application_role = 28;
TSqlParser.RULE_alter_assembly = 29;
TSqlParser.RULE_alter_assembly_start = 30;
TSqlParser.RULE_alter_assembly_clause = 31;
TSqlParser.RULE_alter_assembly_from_clause = 32;
TSqlParser.RULE_alter_assembly_from_clause_start = 33;
TSqlParser.RULE_alter_assembly_drop_clause = 34;
TSqlParser.RULE_alter_assembly_drop_multiple_files = 35;
TSqlParser.RULE_alter_assembly_drop = 36;
TSqlParser.RULE_alter_assembly_add_clause = 37;
TSqlParser.RULE_alter_asssembly_add_clause_start = 38;
TSqlParser.RULE_alter_assembly_client_file_clause = 39;
TSqlParser.RULE_alter_assembly_file_name = 40;
TSqlParser.RULE_alter_assembly_file_bits = 41;
TSqlParser.RULE_alter_assembly_as = 42;
TSqlParser.RULE_alter_assembly_with_clause = 43;
TSqlParser.RULE_alter_assembly_with = 44;
TSqlParser.RULE_client_assembly_specifier = 45;
TSqlParser.RULE_assembly_option = 46;
TSqlParser.RULE_network_file_share = 47;
TSqlParser.RULE_network_computer = 48;
TSqlParser.RULE_network_file_start = 49;
TSqlParser.RULE_file_path = 50;
TSqlParser.RULE_file_directory_path_separator = 51;
TSqlParser.RULE_local_file = 52;
TSqlParser.RULE_local_drive = 53;
TSqlParser.RULE_multiple_local_files = 54;
TSqlParser.RULE_multiple_local_file_start = 55;
TSqlParser.RULE_create_assembly = 56;
TSqlParser.RULE_drop_assembly = 57;
TSqlParser.RULE_alter_asymmetric_key = 58;
TSqlParser.RULE_alter_asymmetric_key_start = 59;
TSqlParser.RULE_asymmetric_key_option = 60;
TSqlParser.RULE_asymmetric_key_option_start = 61;
TSqlParser.RULE_asymmetric_key_password_change_option = 62;
TSqlParser.RULE_create_asymmetric_key = 63;
TSqlParser.RULE_drop_asymmetric_key = 64;
TSqlParser.RULE_alter_authorization = 65;
TSqlParser.RULE_authorization_grantee = 66;
TSqlParser.RULE_entity_to = 67;
TSqlParser.RULE_colon_colon = 68;
TSqlParser.RULE_alter_authorization_start = 69;
TSqlParser.RULE_alter_authorization_for_sql_database = 70;
TSqlParser.RULE_alter_authorization_for_azure_dw = 71;
TSqlParser.RULE_alter_authorization_for_parallel_dw = 72;
TSqlParser.RULE_class_type = 73;
TSqlParser.RULE_class_type_for_sql_database = 74;
TSqlParser.RULE_class_type_for_azure_dw = 75;
TSqlParser.RULE_class_type_for_parallel_dw = 76;
TSqlParser.RULE_drop_availability_group = 77;
TSqlParser.RULE_alter_availability_group = 78;
TSqlParser.RULE_alter_availability_group_start = 79;
TSqlParser.RULE_alter_availability_group_options = 80;
TSqlParser.RULE_create_or_alter_broker_priority = 81;
TSqlParser.RULE_drop_broker_priority = 82;
TSqlParser.RULE_alter_certificate = 83;
TSqlParser.RULE_alter_column_encryption_key = 84;
TSqlParser.RULE_create_column_encryption_key = 85;
TSqlParser.RULE_drop_certificate = 86;
TSqlParser.RULE_drop_column_encryption_key = 87;
TSqlParser.RULE_drop_column_master_key = 88;
TSqlParser.RULE_drop_contract = 89;
TSqlParser.RULE_drop_credential = 90;
TSqlParser.RULE_drop_cryptograhic_provider = 91;
TSqlParser.RULE_drop_database = 92;
TSqlParser.RULE_drop_database_audit_specification = 93;
TSqlParser.RULE_drop_database_scoped_credential = 94;
TSqlParser.RULE_drop_default = 95;
TSqlParser.RULE_drop_endpoint = 96;
TSqlParser.RULE_drop_external_data_source = 97;
TSqlParser.RULE_drop_external_file_format = 98;
TSqlParser.RULE_drop_external_library = 99;
TSqlParser.RULE_drop_external_resource_pool = 100;
TSqlParser.RULE_drop_external_table = 101;
TSqlParser.RULE_drop_event_notifications = 102;
TSqlParser.RULE_drop_event_session = 103;
TSqlParser.RULE_drop_fulltext_catalog = 104;
TSqlParser.RULE_drop_fulltext_index = 105;
TSqlParser.RULE_drop_fulltext_stoplist = 106;
TSqlParser.RULE_drop_login = 107;
TSqlParser.RULE_drop_master_key = 108;
TSqlParser.RULE_drop_message_type = 109;
TSqlParser.RULE_drop_partition_function = 110;
TSqlParser.RULE_drop_partition_scheme = 111;
TSqlParser.RULE_drop_queue = 112;
TSqlParser.RULE_drop_remote_service_binding = 113;
TSqlParser.RULE_drop_resource_pool = 114;
TSqlParser.RULE_drop_db_role = 115;
TSqlParser.RULE_drop_route = 116;
TSqlParser.RULE_drop_rule = 117;
TSqlParser.RULE_drop_schema = 118;
TSqlParser.RULE_drop_search_property_list = 119;
TSqlParser.RULE_drop_security_policy = 120;
TSqlParser.RULE_drop_sequence = 121;
TSqlParser.RULE_drop_server_audit = 122;
TSqlParser.RULE_drop_server_audit_specification = 123;
TSqlParser.RULE_drop_server_role = 124;
TSqlParser.RULE_drop_service = 125;
TSqlParser.RULE_drop_signature = 126;
TSqlParser.RULE_drop_statistics_name_azure_dw_and_pdw = 127;
TSqlParser.RULE_drop_symmetric_key = 128;
TSqlParser.RULE_drop_synonym = 129;
TSqlParser.RULE_drop_user = 130;
TSqlParser.RULE_drop_workload_group = 131;
TSqlParser.RULE_drop_xml_schema_collection = 132;
TSqlParser.RULE_disable_trigger = 133;
TSqlParser.RULE_enable_trigger = 134;
TSqlParser.RULE_truncate_table = 135;
TSqlParser.RULE_create_column_master_key = 136;
TSqlParser.RULE_alter_credential = 137;
TSqlParser.RULE_create_credential = 138;
TSqlParser.RULE_alter_cryptographic_provider = 139;
TSqlParser.RULE_create_cryptographic_provider = 140;
TSqlParser.RULE_create_event_notification = 141;
TSqlParser.RULE_create_or_alter_event_session = 142;
TSqlParser.RULE_event_session_predicate_expression = 143;
TSqlParser.RULE_event_session_predicate_factor = 144;
TSqlParser.RULE_event_session_predicate_leaf = 145;
TSqlParser.RULE_alter_external_data_source = 146;
TSqlParser.RULE_alter_external_library = 147;
TSqlParser.RULE_create_external_library = 148;
TSqlParser.RULE_alter_external_resource_pool = 149;
TSqlParser.RULE_create_external_resource_pool = 150;
TSqlParser.RULE_alter_fulltext_catalog = 151;
TSqlParser.RULE_create_fulltext_catalog = 152;
TSqlParser.RULE_alter_fulltext_stoplist = 153;
TSqlParser.RULE_create_fulltext_stoplist = 154;
TSqlParser.RULE_alter_login_sql_server = 155;
TSqlParser.RULE_create_login_sql_server = 156;
TSqlParser.RULE_alter_login_azure_sql = 157;
TSqlParser.RULE_create_login_azure_sql = 158;
TSqlParser.RULE_alter_login_azure_sql_dw_and_pdw = 159;
TSqlParser.RULE_create_login_pdw = 160;
TSqlParser.RULE_alter_master_key_sql_server = 161;
TSqlParser.RULE_create_master_key_sql_server = 162;
TSqlParser.RULE_alter_master_key_azure_sql = 163;
TSqlParser.RULE_create_master_key_azure_sql = 164;
TSqlParser.RULE_alter_message_type = 165;
TSqlParser.RULE_alter_partition_function = 166;
TSqlParser.RULE_alter_partition_scheme = 167;
TSqlParser.RULE_alter_remote_service_binding = 168;
TSqlParser.RULE_create_remote_service_binding = 169;
TSqlParser.RULE_create_resource_pool = 170;
TSqlParser.RULE_alter_resource_governor = 171;
TSqlParser.RULE_alter_db_role = 172;
TSqlParser.RULE_create_db_role = 173;
TSqlParser.RULE_create_route = 174;
TSqlParser.RULE_create_rule = 175;
TSqlParser.RULE_alter_schema_sql = 176;
TSqlParser.RULE_create_schema = 177;
TSqlParser.RULE_create_schema_azure_sql_dw_and_pdw = 178;
TSqlParser.RULE_alter_schema_azure_sql_dw_and_pdw = 179;
TSqlParser.RULE_create_search_property_list = 180;
TSqlParser.RULE_create_security_policy = 181;
TSqlParser.RULE_alter_sequence = 182;
TSqlParser.RULE_create_sequence = 183;
TSqlParser.RULE_alter_server_audit = 184;
TSqlParser.RULE_create_server_audit = 185;
TSqlParser.RULE_alter_server_audit_specification = 186;
TSqlParser.RULE_create_server_audit_specification = 187;
TSqlParser.RULE_alter_server_configuration = 188;
TSqlParser.RULE_alter_server_role = 189;
TSqlParser.RULE_create_server_role = 190;
TSqlParser.RULE_alter_server_role_pdw = 191;
TSqlParser.RULE_alter_service = 192;
TSqlParser.RULE_create_service = 193;
TSqlParser.RULE_alter_service_master_key = 194;
TSqlParser.RULE_alter_symmetric_key = 195;
TSqlParser.RULE_create_symmetric_key = 196;
TSqlParser.RULE_create_synonym = 197;
TSqlParser.RULE_alter_user = 198;
TSqlParser.RULE_create_user = 199;
TSqlParser.RULE_create_user_azure_sql_dw = 200;
TSqlParser.RULE_alter_user_azure_sql = 201;
TSqlParser.RULE_alter_workload_group = 202;
TSqlParser.RULE_create_workload_group = 203;
TSqlParser.RULE_create_xml_schema_collection = 204;
TSqlParser.RULE_create_queue = 205;
TSqlParser.RULE_queue_settings = 206;
TSqlParser.RULE_alter_queue = 207;
TSqlParser.RULE_queue_action = 208;
TSqlParser.RULE_queue_rebuild_options = 209;
TSqlParser.RULE_create_contract = 210;
TSqlParser.RULE_conversation_statement = 211;
TSqlParser.RULE_message_statement = 212;
TSqlParser.RULE_merge_statement = 213;
TSqlParser.RULE_merge_matched = 214;
TSqlParser.RULE_merge_not_matched = 215;
TSqlParser.RULE_delete_statement = 216;
TSqlParser.RULE_delete_statement_from = 217;
TSqlParser.RULE_insert_statement = 218;
TSqlParser.RULE_insert_statement_value = 219;
TSqlParser.RULE_receive_statement = 220;
TSqlParser.RULE_select_statement = 221;
TSqlParser.RULE_time = 222;
TSqlParser.RULE_update_statement = 223;
TSqlParser.RULE_output_clause = 224;
TSqlParser.RULE_output_dml_list_elem = 225;
TSqlParser.RULE_output_column_name = 226;
TSqlParser.RULE_create_database = 227;
TSqlParser.RULE_create_index = 228;
TSqlParser.RULE_create_or_alter_procedure = 229;
TSqlParser.RULE_create_or_alter_trigger = 230;
TSqlParser.RULE_create_or_alter_dml_trigger = 231;
TSqlParser.RULE_dml_trigger_option = 232;
TSqlParser.RULE_dml_trigger_operation = 233;
TSqlParser.RULE_create_or_alter_ddl_trigger = 234;
TSqlParser.RULE_ddl_trigger_operation = 235;
TSqlParser.RULE_create_or_alter_function = 236;
TSqlParser.RULE_func_body_returns_select = 237;
TSqlParser.RULE_func_body_returns_table = 238;
TSqlParser.RULE_func_body_returns_scalar = 239;
TSqlParser.RULE_procedure_param = 240;
TSqlParser.RULE_procedure_option = 241;
TSqlParser.RULE_function_option = 242;
TSqlParser.RULE_create_statistics = 243;
TSqlParser.RULE_create_table = 244;
TSqlParser.RULE_table_options = 245;
TSqlParser.RULE_create_view = 246;
TSqlParser.RULE_view_attribute = 247;
TSqlParser.RULE_alter_table = 248;
TSqlParser.RULE_alter_database = 249;
TSqlParser.RULE_database_optionspec = 250;
TSqlParser.RULE_auto_option = 251;
TSqlParser.RULE_change_tracking_option = 252;
TSqlParser.RULE_change_tracking_option_list = 253;
TSqlParser.RULE_containment_option = 254;
TSqlParser.RULE_cursor_option = 255;
TSqlParser.RULE_alter_endpoint = 256;
TSqlParser.RULE_database_mirroring_option = 257;
TSqlParser.RULE_mirroring_set_option = 258;
TSqlParser.RULE_mirroring_partner = 259;
TSqlParser.RULE_mirroring_witness = 260;
TSqlParser.RULE_witness_partner_equal = 261;
TSqlParser.RULE_partner_option = 262;
TSqlParser.RULE_witness_option = 263;
TSqlParser.RULE_witness_server = 264;
TSqlParser.RULE_partner_server = 265;
TSqlParser.RULE_mirroring_host_port_seperator = 266;
TSqlParser.RULE_partner_server_tcp_prefix = 267;
TSqlParser.RULE_port_number = 268;
TSqlParser.RULE_host = 269;
TSqlParser.RULE_date_correlation_optimization_option = 270;
TSqlParser.RULE_db_encryption_option = 271;
TSqlParser.RULE_db_state_option = 272;
TSqlParser.RULE_db_update_option = 273;
TSqlParser.RULE_db_user_access_option = 274;
TSqlParser.RULE_delayed_durability_option = 275;
TSqlParser.RULE_external_access_option = 276;
TSqlParser.RULE_hadr_options = 277;
TSqlParser.RULE_mixed_page_allocation_option = 278;
TSqlParser.RULE_parameterization_option = 279;
TSqlParser.RULE_recovery_option = 280;
TSqlParser.RULE_service_broker_option = 281;
TSqlParser.RULE_snapshot_option = 282;
TSqlParser.RULE_sql_option = 283;
TSqlParser.RULE_target_recovery_time_option = 284;
TSqlParser.RULE_termination = 285;
TSqlParser.RULE_drop_index = 286;
TSqlParser.RULE_drop_relational_or_xml_or_spatial_index = 287;
TSqlParser.RULE_drop_backward_compatible_index = 288;
TSqlParser.RULE_drop_procedure = 289;
TSqlParser.RULE_drop_trigger = 290;
TSqlParser.RULE_drop_dml_trigger = 291;
TSqlParser.RULE_drop_ddl_trigger = 292;
TSqlParser.RULE_drop_function = 293;
TSqlParser.RULE_drop_statistics = 294;
TSqlParser.RULE_drop_table = 295;
TSqlParser.RULE_drop_view = 296;
TSqlParser.RULE_create_type = 297;
TSqlParser.RULE_drop_type = 298;
TSqlParser.RULE_rowset_function_limited = 299;
TSqlParser.RULE_openquery = 300;
TSqlParser.RULE_opendatasource = 301;
TSqlParser.RULE_declare_statement = 302;
TSqlParser.RULE_cursor_statement = 303;
TSqlParser.RULE_backup_database = 304;
TSqlParser.RULE_backup_log = 305;
TSqlParser.RULE_backup_certificate = 306;
TSqlParser.RULE_backup_master_key = 307;
TSqlParser.RULE_backup_service_master_key = 308;
TSqlParser.RULE_execute_statement = 309;
TSqlParser.RULE_execute_statement_arg = 310;
TSqlParser.RULE_execute_var_string = 311;
TSqlParser.RULE_security_statement = 312;
TSqlParser.RULE_create_certificate = 313;
TSqlParser.RULE_existing_keys = 314;
TSqlParser.RULE_private_key_options = 315;
TSqlParser.RULE_generate_new_keys = 316;
TSqlParser.RULE_date_options = 317;
TSqlParser.RULE_open_key = 318;
TSqlParser.RULE_close_key = 319;
TSqlParser.RULE_create_key = 320;
TSqlParser.RULE_key_options = 321;
TSqlParser.RULE_algorithm = 322;
TSqlParser.RULE_encryption_mechanism = 323;
TSqlParser.RULE_decryption_mechanism = 324;
TSqlParser.RULE_grant_permission = 325;
TSqlParser.RULE_set_statement = 326;
TSqlParser.RULE_transaction_statement = 327;
TSqlParser.RULE_go_statement = 328;
TSqlParser.RULE_use_statement = 329;
TSqlParser.RULE_dbcc_clause = 330;
TSqlParser.RULE_dbcc_options = 331;
TSqlParser.RULE_execute_clause = 332;
TSqlParser.RULE_declare_local = 333;
TSqlParser.RULE_table_type_definition = 334;
TSqlParser.RULE_xml_type_definition = 335;
TSqlParser.RULE_xml_schema_collection = 336;
TSqlParser.RULE_column_def_table_constraints = 337;
TSqlParser.RULE_column_def_table_constraint = 338;
TSqlParser.RULE_column_definition = 339;
TSqlParser.RULE_column_constraint = 340;
TSqlParser.RULE_table_constraint = 341;
TSqlParser.RULE_on_delete = 342;
TSqlParser.RULE_on_update = 343;
TSqlParser.RULE_index_options = 344;
TSqlParser.RULE_index_option = 345;
TSqlParser.RULE_declare_cursor = 346;
TSqlParser.RULE_declare_set_cursor_common = 347;
TSqlParser.RULE_declare_set_cursor_common_partial = 348;
TSqlParser.RULE_fetch_cursor = 349;
TSqlParser.RULE_set_special = 350;
TSqlParser.RULE_constant_LOCAL_ID = 351;
TSqlParser.RULE_expression = 352;
TSqlParser.RULE_primitive_expression = 353;
TSqlParser.RULE_case_expression = 354;
TSqlParser.RULE_unary_operator_expression = 355;
TSqlParser.RULE_bracket_expression = 356;
TSqlParser.RULE_constant_expression = 357;
TSqlParser.RULE_subquery = 358;
TSqlParser.RULE_with_expression = 359;
TSqlParser.RULE_common_table_expression = 360;
TSqlParser.RULE_update_elem = 361;
TSqlParser.RULE_search_condition_list = 362;
TSqlParser.RULE_search_condition = 363;
TSqlParser.RULE_search_condition_and = 364;
TSqlParser.RULE_search_condition_not = 365;
TSqlParser.RULE_predicate = 366;
TSqlParser.RULE_query_expression = 367;
TSqlParser.RULE_sql_union = 368;
TSqlParser.RULE_query_specification = 369;
TSqlParser.RULE_top_clause = 370;
TSqlParser.RULE_top_percent = 371;
TSqlParser.RULE_top_count = 372;
TSqlParser.RULE_order_by_clause = 373;
TSqlParser.RULE_for_clause = 374;
TSqlParser.RULE_xml_common_directives = 375;
TSqlParser.RULE_order_by_expression = 376;
TSqlParser.RULE_group_by_item = 377;
TSqlParser.RULE_option_clause = 378;
TSqlParser.RULE_option = 379;
TSqlParser.RULE_optimize_for_arg = 380;
TSqlParser.RULE_select_list = 381;
TSqlParser.RULE_udt_method_arguments = 382;
TSqlParser.RULE_asterisk = 383;
TSqlParser.RULE_column_elem = 384;
TSqlParser.RULE_udt_elem = 385;
TSqlParser.RULE_expression_elem = 386;
TSqlParser.RULE_select_list_elem = 387;
TSqlParser.RULE_table_sources = 388;
TSqlParser.RULE_table_source = 389;
TSqlParser.RULE_table_source_item_joined = 390;
TSqlParser.RULE_table_source_item = 391;
TSqlParser.RULE_open_xml = 392;
TSqlParser.RULE_schema_declaration = 393;
TSqlParser.RULE_column_declaration = 394;
TSqlParser.RULE_change_table = 395;
TSqlParser.RULE_join_part = 396;
TSqlParser.RULE_pivot_clause = 397;
TSqlParser.RULE_unpivot_clause = 398;
TSqlParser.RULE_full_column_name_list = 399;
TSqlParser.RULE_table_name_with_hint = 400;
TSqlParser.RULE_rowset_function = 401;
TSqlParser.RULE_bulk_option = 402;
TSqlParser.RULE_derived_table = 403;
TSqlParser.RULE_function_call = 404;
TSqlParser.RULE_xml_data_type_methods = 405;
TSqlParser.RULE_value_method = 406;
TSqlParser.RULE_query_method = 407;
TSqlParser.RULE_exist_method = 408;
TSqlParser.RULE_modify_method = 409;
TSqlParser.RULE_nodes_method = 410;
TSqlParser.RULE_switch_section = 411;
TSqlParser.RULE_switch_search_condition_section = 412;
TSqlParser.RULE_as_column_alias = 413;
TSqlParser.RULE_as_table_alias = 414;
TSqlParser.RULE_table_alias = 415;
TSqlParser.RULE_with_table_hints = 416;
TSqlParser.RULE_insert_with_table_hints = 417;
TSqlParser.RULE_table_hint = 418;
TSqlParser.RULE_index_value = 419;
TSqlParser.RULE_column_alias_list = 420;
TSqlParser.RULE_column_alias = 421;
TSqlParser.RULE_table_value_constructor = 422;
TSqlParser.RULE_expression_list = 423;
TSqlParser.RULE_ranking_windowed_function = 424;
TSqlParser.RULE_aggregate_windowed_function = 425;
TSqlParser.RULE_analytic_windowed_function = 426;
TSqlParser.RULE_all_distinct_expression = 427;
TSqlParser.RULE_over_clause = 428;
TSqlParser.RULE_row_or_range_clause = 429;
TSqlParser.RULE_window_frame_extent = 430;
TSqlParser.RULE_window_frame_bound = 431;
TSqlParser.RULE_window_frame_preceding = 432;
TSqlParser.RULE_window_frame_following = 433;
TSqlParser.RULE_create_database_option = 434;
TSqlParser.RULE_database_filestream_option = 435;
TSqlParser.RULE_database_file_spec = 436;
TSqlParser.RULE_file_group = 437;
TSqlParser.RULE_file_spec = 438;
TSqlParser.RULE_entity_name = 439;
TSqlParser.RULE_entity_name_for_azure_dw = 440;
TSqlParser.RULE_entity_name_for_parallel_dw = 441;
TSqlParser.RULE_full_table_name = 442;
TSqlParser.RULE_table_name = 443;
TSqlParser.RULE_simple_name = 444;
TSqlParser.RULE_func_proc_name = 445;
TSqlParser.RULE_ddl_object = 446;
TSqlParser.RULE_full_column_name = 447;
TSqlParser.RULE_column_name_list_with_order = 448;
TSqlParser.RULE_column_name_list = 449;
TSqlParser.RULE_cursor_name = 450;
TSqlParser.RULE_on_off = 451;
TSqlParser.RULE_clustered = 452;
TSqlParser.RULE_null_notnull = 453;
TSqlParser.RULE_null_or_default = 454;
TSqlParser.RULE_scalar_function_name = 455;
TSqlParser.RULE_begin_conversation_timer = 456;
TSqlParser.RULE_begin_conversation_dialog = 457;
TSqlParser.RULE_contract_name = 458;
TSqlParser.RULE_service_name = 459;
TSqlParser.RULE_end_conversation = 460;
TSqlParser.RULE_waitfor_conversation = 461;
TSqlParser.RULE_get_conversation = 462;
TSqlParser.RULE_queue_id = 463;
TSqlParser.RULE_send_conversation = 464;
TSqlParser.RULE_data_type = 465;
TSqlParser.RULE_default_value = 466;
TSqlParser.RULE_constant = 467;
TSqlParser.RULE_sign = 468;
TSqlParser.RULE_id = 469;
TSqlParser.RULE_simple_id = 470;
TSqlParser.RULE_comparison_operator = 471;
TSqlParser.RULE_assignment_operator = 472;
TSqlParser.RULE_file_size = 473;

function Tsql_fileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_tsql_file;
    return this;
}

Tsql_fileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Tsql_fileContext.prototype.constructor = Tsql_fileContext;

Tsql_fileContext.prototype.EOF = function() {
    return this.getToken(TSqlParser.EOF, 0);
};

Tsql_fileContext.prototype.batch = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BatchContext);
    } else {
        return this.getTypedRuleContext(BatchContext,i);
    }
};

Tsql_fileContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTsql_file(this);
	}
};

Tsql_fileContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTsql_file(this);
	}
};




TSqlParser.Tsql_fileContext = Tsql_fileContext;

TSqlParser.prototype.tsql_file = function() {

    var localctx = new Tsql_fileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, TSqlParser.RULE_tsql_file);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 951;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << TSqlParser.ALTER) | (1 << TSqlParser.BACKUP) | (1 << TSqlParser.BEGIN) | (1 << TSqlParser.BREAK))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (TSqlParser.CALLED - 37)) | (1 << (TSqlParser.CLOSE - 37)) | (1 << (TSqlParser.COMMIT - 37)) | (1 << (TSqlParser.CONTINUE - 37)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (TSqlParser.CREATE - 70)) | (1 << (TSqlParser.DATA_COMPRESSION - 70)) | (1 << (TSqlParser.DBCC - 70)) | (1 << (TSqlParser.DEALLOCATE - 70)) | (1 << (TSqlParser.DECLARE - 70)) | (1 << (TSqlParser.DELETE - 70)) | (1 << (TSqlParser.DROP - 70)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (TSqlParser.END - 106)) | (1 << (TSqlParser.EVENTDATA - 106)) | (1 << (TSqlParser.EXECUTE - 106)) | (1 << (TSqlParser.FETCH - 106)) | (1 << (TSqlParser.FILENAME - 106)) | (1 << (TSqlParser.FILLFACTOR - 106)) | (1 << (TSqlParser.FORCESEEK - 106)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (TSqlParser.GET - 140)) | (1 << (TSqlParser.GOTO - 140)) | (1 << (TSqlParser.GRANT - 140)) | (1 << (TSqlParser.IF - 140)) | (1 << (TSqlParser.INSERT - 140)) | (1 << (TSqlParser.KEY - 140)))) !== 0) || ((((_la - 186)) & ~0x1f) == 0 && ((1 << (_la - 186)) & ((1 << (TSqlParser.MASTER - 186)) | (1 << (TSqlParser.MAX_MEMORY - 186)) | (1 << (TSqlParser.MERGE - 186)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (TSqlParser.OFFSETS - 224)) | (1 << (TSqlParser.OPEN - 224)) | (1 << (TSqlParser.PAGE - 224)) | (1 << (TSqlParser.PRINT - 224)))) !== 0) || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAISERROR - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.REVERT - 258)) | (1 << (TSqlParser.ROLLBACK - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SAVE - 294)) | (1 << (TSqlParser.SELECT - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SET - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || ((((_la - 328)) & ~0x1f) == 0 && ((1 << (_la - 328)) & ((1 << (TSqlParser.STATE - 328)) | (1 << (TSqlParser.TARGET - 328)) | (1 << (TSqlParser.TRUNCATE - 328)))) !== 0) || ((((_la - 361)) & ~0x1f) == 0 && ((1 << (_la - 361)) & ((1 << (TSqlParser.UPDATE - 361)) | (1 << (TSqlParser.USE - 361)) | (1 << (TSqlParser.WAITFOR - 361)) | (1 << (TSqlParser.WHILE - 361)) | (1 << (TSqlParser.WITH - 361)) | (1 << (TSqlParser.ABSOLUTE - 361)) | (1 << (TSqlParser.ACTIVE - 361)) | (1 << (TSqlParser.ADDRESS - 361)))) !== 0) || ((((_la - 403)) & ~0x1f) == 0 && ((1 << (_la - 403)) & ((1 << (TSqlParser.APPLY - 403)) | (1 << (TSqlParser.AUTO - 403)) | (1 << (TSqlParser.AVAILABILITY - 403)) | (1 << (TSqlParser.AVG - 403)) | (1 << (TSqlParser.CALLER - 403)) | (1 << (TSqlParser.CAST - 403)) | (1 << (TSqlParser.CATCH - 403)))) !== 0) || ((((_la - 435)) & ~0x1f) == 0 && ((1 << (_la - 435)) & ((1 << (TSqlParser.CHECKSUM_AGG - 435)) | (1 << (TSqlParser.COMMITTED - 435)) | (1 << (TSqlParser.CONCAT - 435)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 435)) | (1 << (TSqlParser.CONTROL - 435)) | (1 << (TSqlParser.COOKIE - 435)) | (1 << (TSqlParser.COUNT - 435)) | (1 << (TSqlParser.COUNTER - 435)) | (1 << (TSqlParser.COUNT_BIG - 435)))) !== 0) || ((((_la - 468)) & ~0x1f) == 0 && ((1 << (_la - 468)) & ((1 << (TSqlParser.DELAY - 468)) | (1 << (TSqlParser.DELETED - 468)) | (1 << (TSqlParser.DENSE_RANK - 468)) | (1 << (TSqlParser.DISABLE - 468)) | (1 << (TSqlParser.DYNAMIC - 468)) | (1 << (TSqlParser.ENABLE - 468)) | (1 << (TSqlParser.ENCRYPTION - 468)) | (1 << (TSqlParser.EXPAND - 468)))) !== 0) || ((((_la - 502)) & ~0x1f) == 0 && ((1 << (_la - 502)) & ((1 << (TSqlParser.FAST - 502)) | (1 << (TSqlParser.FAST_FORWARD - 502)) | (1 << (TSqlParser.FIRST - 502)) | (1 << (TSqlParser.FOLLOWING - 502)) | (1 << (TSqlParser.FORCE - 502)) | (1 << (TSqlParser.FORCED - 502)) | (1 << (TSqlParser.FORWARD_ONLY - 502)) | (1 << (TSqlParser.FULLSCAN - 502)) | (1 << (TSqlParser.GLOBAL - 502)) | (1 << (TSqlParser.GROUPING - 502)) | (1 << (TSqlParser.GROUPING_ID - 502)) | (1 << (TSqlParser.HASH - 502)))) !== 0) || ((((_la - 534)) & ~0x1f) == 0 && ((1 << (_la - 534)) & ((1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 534)) | (1 << (TSqlParser.IMPERSONATE - 534)) | (1 << (TSqlParser.INPUT - 534)) | (1 << (TSqlParser.INSENSITIVE - 534)) | (1 << (TSqlParser.INSERTED - 534)) | (1 << (TSqlParser.ISOLATION - 534)) | (1 << (TSqlParser.KEEP - 534)) | (1 << (TSqlParser.KEEPFIXED - 534)) | (1 << (TSqlParser.KEYSET - 534)) | (1 << (TSqlParser.LAST - 534)) | (1 << (TSqlParser.LEVEL - 534)) | (1 << (TSqlParser.LOCAL - 534)) | (1 << (TSqlParser.LOCATION - 534)) | (1 << (TSqlParser.LOCK_ESCALATION - 534)) | (1 << (TSqlParser.LOGIN - 534)) | (1 << (TSqlParser.LOOP - 534)))) !== 0) || ((((_la - 568)) & ~0x1f) == 0 && ((1 << (_la - 568)) & ((1 << (TSqlParser.MARK - 568)) | (1 << (TSqlParser.MAX - 568)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 568)) | (1 << (TSqlParser.MAXDOP - 568)) | (1 << (TSqlParser.MAXRECURSION - 568)) | (1 << (TSqlParser.MIN - 568)) | (1 << (TSqlParser.MODIFY - 568)) | (1 << (TSqlParser.NAME - 568)))) !== 0) || ((((_la - 601)) & ~0x1f) == 0 && ((1 << (_la - 601)) & ((1 << (TSqlParser.NEXT - 601)) | (1 << (TSqlParser.NOCOUNT - 601)) | (1 << (TSqlParser.NOEXPAND - 601)) | (1 << (TSqlParser.NORECOMPUTE - 601)) | (1 << (TSqlParser.NTILE - 601)) | (1 << (TSqlParser.NUMBER - 601)) | (1 << (TSqlParser.OFFSET - 601)) | (1 << (TSqlParser.ONLINE - 601)) | (1 << (TSqlParser.ONLY - 601)) | (1 << (TSqlParser.OPTIMISTIC - 601)) | (1 << (TSqlParser.OPTIMIZE - 601)) | (1 << (TSqlParser.OUT - 601)) | (1 << (TSqlParser.OUTPUT - 601)) | (1 << (TSqlParser.OWNER - 601)) | (1 << (TSqlParser.PARAMETERIZATION - 601)) | (1 << (TSqlParser.PARTITION - 601)) | (1 << (TSqlParser.PATH - 601)))) !== 0) || ((((_la - 636)) & ~0x1f) == 0 && ((1 << (_la - 636)) & ((1 << (TSqlParser.PRECEDING - 636)) | (1 << (TSqlParser.PRIOR - 636)) | (1 << (TSqlParser.PRIVILEGES - 636)) | (1 << (TSqlParser.RANGE - 636)) | (1 << (TSqlParser.RANK - 636)) | (1 << (TSqlParser.READONLY - 636)) | (1 << (TSqlParser.READ_ONLY - 636)) | (1 << (TSqlParser.RECOMPILE - 636)) | (1 << (TSqlParser.RELATIVE - 636)))) !== 0) || ((((_la - 672)) & ~0x1f) == 0 && ((1 << (_la - 672)) & ((1 << (TSqlParser.REMOTE - 672)) | (1 << (TSqlParser.REPEATABLE - 672)) | (1 << (TSqlParser.ROBUST - 672)) | (1 << (TSqlParser.ROOT - 672)) | (1 << (TSqlParser.ROW - 672)) | (1 << (TSqlParser.ROWGUID - 672)) | (1 << (TSqlParser.ROWS - 672)) | (1 << (TSqlParser.ROW_NUMBER - 672)) | (1 << (TSqlParser.SAMPLE - 672)) | (1 << (TSqlParser.SCHEMABINDING - 672)) | (1 << (TSqlParser.SCROLL - 672)) | (1 << (TSqlParser.SCROLL_LOCKS - 672)) | (1 << (TSqlParser.SELF - 672)))) !== 0) || ((((_la - 704)) & ~0x1f) == 0 && ((1 << (_la - 704)) & ((1 << (TSqlParser.SEND - 704)) | (1 << (TSqlParser.SERIALIZABLE - 704)) | (1 << (TSqlParser.SIMPLE - 704)) | (1 << (TSqlParser.SIZE - 704)) | (1 << (TSqlParser.SNAPSHOT - 704)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 704)) | (1 << (TSqlParser.STATIC - 704)) | (1 << (TSqlParser.STATS_STREAM - 704)) | (1 << (TSqlParser.STDEV - 704)) | (1 << (TSqlParser.STDEVP - 704)) | (1 << (TSqlParser.SUM - 704)) | (1 << (TSqlParser.TEXTIMAGE_ON - 704)))) !== 0) || ((((_la - 736)) & ~0x1f) == 0 && ((1 << (_la - 736)) & ((1 << (TSqlParser.THROW - 736)) | (1 << (TSqlParser.TIES - 736)) | (1 << (TSqlParser.TIME - 736)) | (1 << (TSqlParser.TRY - 736)) | (1 << (TSqlParser.TYPE - 736)) | (1 << (TSqlParser.TYPE_WARNING - 736)) | (1 << (TSqlParser.UNBOUNDED - 736)) | (1 << (TSqlParser.UNCOMMITTED - 736)) | (1 << (TSqlParser.UNKNOWN - 736)) | (1 << (TSqlParser.USING - 736)) | (1 << (TSqlParser.VALUE - 736)) | (1 << (TSqlParser.VAR - 736)) | (1 << (TSqlParser.VARP - 736)) | (1 << (TSqlParser.VIEWS - 736)) | (1 << (TSqlParser.VIEW_METADATA - 736)) | (1 << (TSqlParser.WORK - 736)) | (1 << (TSqlParser.XML - 736)))) !== 0) || ((((_la - 768)) & ~0x1f) == 0 && ((1 << (_la - 768)) & ((1 << (TSqlParser.XMLNAMESPACES - 768)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 768)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 768)) | (1 << (TSqlParser.ID - 768)))) !== 0) || _la===TSqlParser.LR_BRACKET || _la===TSqlParser.SEMI) {
            this.state = 948;
            this.batch();
            this.state = 953;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 954;
        this.match(TSqlParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BatchContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_batch;
    return this;
}

BatchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BatchContext.prototype.constructor = BatchContext;

BatchContext.prototype.sql_clauses = function() {
    return this.getTypedRuleContext(Sql_clausesContext,0);
};

BatchContext.prototype.go_statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Go_statementContext);
    } else {
        return this.getTypedRuleContext(Go_statementContext,i);
    }
};

BatchContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterBatch(this);
	}
};

BatchContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitBatch(this);
	}
};




TSqlParser.BatchContext = BatchContext;

TSqlParser.prototype.batch = function() {

    var localctx = new BatchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, TSqlParser.RULE_batch);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 956;
        this.sql_clauses();
        this.state = 960;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.GO) {
            this.state = 957;
            this.go_statement();
            this.state = 962;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_clausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_sql_clauses;
    return this;
}

Sql_clausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_clausesContext.prototype.constructor = Sql_clausesContext;

Sql_clausesContext.prototype.sql_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sql_clauseContext);
    } else {
        return this.getTypedRuleContext(Sql_clauseContext,i);
    }
};

Sql_clausesContext.prototype.SEMI = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SEMI);
    } else {
        return this.getToken(TSqlParser.SEMI, i);
    }
};


Sql_clausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSql_clauses(this);
	}
};

Sql_clausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSql_clauses(this);
	}
};




TSqlParser.Sql_clausesContext = Sql_clausesContext;

TSqlParser.prototype.sql_clauses = function() {

    var localctx = new Sql_clausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, TSqlParser.RULE_sql_clauses);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 967; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 963;
        		this.sql_clause();
        		this.state = 965;
        		this._errHandler.sync(this);
        		var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        		if(la_===1) {
        		    this.state = 964;
        		    this.match(TSqlParser.SEMI);

        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 969; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,3, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_sql_clause;
    return this;
}

Sql_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_clauseContext.prototype.constructor = Sql_clauseContext;

Sql_clauseContext.prototype.dml_clause = function() {
    return this.getTypedRuleContext(Dml_clauseContext,0);
};

Sql_clauseContext.prototype.ddl_clause = function() {
    return this.getTypedRuleContext(Ddl_clauseContext,0);
};

Sql_clauseContext.prototype.cfl_statement = function() {
    return this.getTypedRuleContext(Cfl_statementContext,0);
};

Sql_clauseContext.prototype.dbcc_clause = function() {
    return this.getTypedRuleContext(Dbcc_clauseContext,0);
};

Sql_clauseContext.prototype.empty_statement = function() {
    return this.getTypedRuleContext(Empty_statementContext,0);
};

Sql_clauseContext.prototype.another_statement = function() {
    return this.getTypedRuleContext(Another_statementContext,0);
};

Sql_clauseContext.prototype.backup_statement = function() {
    return this.getTypedRuleContext(Backup_statementContext,0);
};

Sql_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSql_clause(this);
	}
};

Sql_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSql_clause(this);
	}
};




TSqlParser.Sql_clauseContext = Sql_clauseContext;

TSqlParser.prototype.sql_clause = function() {

    var localctx = new Sql_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, TSqlParser.RULE_sql_clause);
    try {
        this.state = 978;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 971;
            this.dml_clause();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 972;
            this.ddl_clause();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 973;
            this.cfl_statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 974;
            this.dbcc_clause();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 975;
            this.empty_statement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 976;
            this.another_statement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 977;
            this.backup_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dml_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_dml_clause;
    return this;
}

Dml_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dml_clauseContext.prototype.constructor = Dml_clauseContext;

Dml_clauseContext.prototype.merge_statement = function() {
    return this.getTypedRuleContext(Merge_statementContext,0);
};

Dml_clauseContext.prototype.delete_statement = function() {
    return this.getTypedRuleContext(Delete_statementContext,0);
};

Dml_clauseContext.prototype.insert_statement = function() {
    return this.getTypedRuleContext(Insert_statementContext,0);
};

Dml_clauseContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Dml_clauseContext.prototype.update_statement = function() {
    return this.getTypedRuleContext(Update_statementContext,0);
};

Dml_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDml_clause(this);
	}
};

Dml_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDml_clause(this);
	}
};




TSqlParser.Dml_clauseContext = Dml_clauseContext;

TSqlParser.prototype.dml_clause = function() {

    var localctx = new Dml_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, TSqlParser.RULE_dml_clause);
    try {
        this.state = 985;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 980;
            this.merge_statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 981;
            this.delete_statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 982;
            this.insert_statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 983;
            this.select_statement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 984;
            this.update_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ddl_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_ddl_clause;
    return this;
}

Ddl_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ddl_clauseContext.prototype.constructor = Ddl_clauseContext;

Ddl_clauseContext.prototype.alter_application_role = function() {
    return this.getTypedRuleContext(Alter_application_roleContext,0);
};

Ddl_clauseContext.prototype.alter_assembly = function() {
    return this.getTypedRuleContext(Alter_assemblyContext,0);
};

Ddl_clauseContext.prototype.alter_asymmetric_key = function() {
    return this.getTypedRuleContext(Alter_asymmetric_keyContext,0);
};

Ddl_clauseContext.prototype.alter_authorization = function() {
    return this.getTypedRuleContext(Alter_authorizationContext,0);
};

Ddl_clauseContext.prototype.alter_authorization_for_azure_dw = function() {
    return this.getTypedRuleContext(Alter_authorization_for_azure_dwContext,0);
};

Ddl_clauseContext.prototype.alter_authorization_for_parallel_dw = function() {
    return this.getTypedRuleContext(Alter_authorization_for_parallel_dwContext,0);
};

Ddl_clauseContext.prototype.alter_authorization_for_sql_database = function() {
    return this.getTypedRuleContext(Alter_authorization_for_sql_databaseContext,0);
};

Ddl_clauseContext.prototype.alter_availability_group = function() {
    return this.getTypedRuleContext(Alter_availability_groupContext,0);
};

Ddl_clauseContext.prototype.alter_certificate = function() {
    return this.getTypedRuleContext(Alter_certificateContext,0);
};

Ddl_clauseContext.prototype.alter_column_encryption_key = function() {
    return this.getTypedRuleContext(Alter_column_encryption_keyContext,0);
};

Ddl_clauseContext.prototype.alter_credential = function() {
    return this.getTypedRuleContext(Alter_credentialContext,0);
};

Ddl_clauseContext.prototype.alter_cryptographic_provider = function() {
    return this.getTypedRuleContext(Alter_cryptographic_providerContext,0);
};

Ddl_clauseContext.prototype.alter_database = function() {
    return this.getTypedRuleContext(Alter_databaseContext,0);
};

Ddl_clauseContext.prototype.alter_db_role = function() {
    return this.getTypedRuleContext(Alter_db_roleContext,0);
};

Ddl_clauseContext.prototype.alter_endpoint = function() {
    return this.getTypedRuleContext(Alter_endpointContext,0);
};

Ddl_clauseContext.prototype.create_or_alter_event_session = function() {
    return this.getTypedRuleContext(Create_or_alter_event_sessionContext,0);
};

Ddl_clauseContext.prototype.alter_external_data_source = function() {
    return this.getTypedRuleContext(Alter_external_data_sourceContext,0);
};

Ddl_clauseContext.prototype.alter_external_library = function() {
    return this.getTypedRuleContext(Alter_external_libraryContext,0);
};

Ddl_clauseContext.prototype.alter_external_resource_pool = function() {
    return this.getTypedRuleContext(Alter_external_resource_poolContext,0);
};

Ddl_clauseContext.prototype.alter_fulltext_catalog = function() {
    return this.getTypedRuleContext(Alter_fulltext_catalogContext,0);
};

Ddl_clauseContext.prototype.alter_fulltext_stoplist = function() {
    return this.getTypedRuleContext(Alter_fulltext_stoplistContext,0);
};

Ddl_clauseContext.prototype.alter_login_azure_sql = function() {
    return this.getTypedRuleContext(Alter_login_azure_sqlContext,0);
};

Ddl_clauseContext.prototype.alter_login_azure_sql_dw_and_pdw = function() {
    return this.getTypedRuleContext(Alter_login_azure_sql_dw_and_pdwContext,0);
};

Ddl_clauseContext.prototype.alter_login_sql_server = function() {
    return this.getTypedRuleContext(Alter_login_sql_serverContext,0);
};

Ddl_clauseContext.prototype.alter_master_key_azure_sql = function() {
    return this.getTypedRuleContext(Alter_master_key_azure_sqlContext,0);
};

Ddl_clauseContext.prototype.alter_master_key_sql_server = function() {
    return this.getTypedRuleContext(Alter_master_key_sql_serverContext,0);
};

Ddl_clauseContext.prototype.alter_message_type = function() {
    return this.getTypedRuleContext(Alter_message_typeContext,0);
};

Ddl_clauseContext.prototype.alter_partition_function = function() {
    return this.getTypedRuleContext(Alter_partition_functionContext,0);
};

Ddl_clauseContext.prototype.alter_partition_scheme = function() {
    return this.getTypedRuleContext(Alter_partition_schemeContext,0);
};

Ddl_clauseContext.prototype.alter_remote_service_binding = function() {
    return this.getTypedRuleContext(Alter_remote_service_bindingContext,0);
};

Ddl_clauseContext.prototype.alter_resource_governor = function() {
    return this.getTypedRuleContext(Alter_resource_governorContext,0);
};

Ddl_clauseContext.prototype.alter_schema_azure_sql_dw_and_pdw = function() {
    return this.getTypedRuleContext(Alter_schema_azure_sql_dw_and_pdwContext,0);
};

Ddl_clauseContext.prototype.alter_schema_sql = function() {
    return this.getTypedRuleContext(Alter_schema_sqlContext,0);
};

Ddl_clauseContext.prototype.alter_sequence = function() {
    return this.getTypedRuleContext(Alter_sequenceContext,0);
};

Ddl_clauseContext.prototype.alter_server_audit = function() {
    return this.getTypedRuleContext(Alter_server_auditContext,0);
};

Ddl_clauseContext.prototype.alter_server_audit_specification = function() {
    return this.getTypedRuleContext(Alter_server_audit_specificationContext,0);
};

Ddl_clauseContext.prototype.alter_server_configuration = function() {
    return this.getTypedRuleContext(Alter_server_configurationContext,0);
};

Ddl_clauseContext.prototype.alter_server_role = function() {
    return this.getTypedRuleContext(Alter_server_roleContext,0);
};

Ddl_clauseContext.prototype.alter_server_role_pdw = function() {
    return this.getTypedRuleContext(Alter_server_role_pdwContext,0);
};

Ddl_clauseContext.prototype.alter_service = function() {
    return this.getTypedRuleContext(Alter_serviceContext,0);
};

Ddl_clauseContext.prototype.alter_service_master_key = function() {
    return this.getTypedRuleContext(Alter_service_master_keyContext,0);
};

Ddl_clauseContext.prototype.alter_symmetric_key = function() {
    return this.getTypedRuleContext(Alter_symmetric_keyContext,0);
};

Ddl_clauseContext.prototype.alter_table = function() {
    return this.getTypedRuleContext(Alter_tableContext,0);
};

Ddl_clauseContext.prototype.alter_user = function() {
    return this.getTypedRuleContext(Alter_userContext,0);
};

Ddl_clauseContext.prototype.alter_user_azure_sql = function() {
    return this.getTypedRuleContext(Alter_user_azure_sqlContext,0);
};

Ddl_clauseContext.prototype.alter_workload_group = function() {
    return this.getTypedRuleContext(Alter_workload_groupContext,0);
};

Ddl_clauseContext.prototype.create_application_role = function() {
    return this.getTypedRuleContext(Create_application_roleContext,0);
};

Ddl_clauseContext.prototype.create_assembly = function() {
    return this.getTypedRuleContext(Create_assemblyContext,0);
};

Ddl_clauseContext.prototype.create_asymmetric_key = function() {
    return this.getTypedRuleContext(Create_asymmetric_keyContext,0);
};

Ddl_clauseContext.prototype.create_column_encryption_key = function() {
    return this.getTypedRuleContext(Create_column_encryption_keyContext,0);
};

Ddl_clauseContext.prototype.create_column_master_key = function() {
    return this.getTypedRuleContext(Create_column_master_keyContext,0);
};

Ddl_clauseContext.prototype.create_credential = function() {
    return this.getTypedRuleContext(Create_credentialContext,0);
};

Ddl_clauseContext.prototype.create_cryptographic_provider = function() {
    return this.getTypedRuleContext(Create_cryptographic_providerContext,0);
};

Ddl_clauseContext.prototype.create_database = function() {
    return this.getTypedRuleContext(Create_databaseContext,0);
};

Ddl_clauseContext.prototype.create_db_role = function() {
    return this.getTypedRuleContext(Create_db_roleContext,0);
};

Ddl_clauseContext.prototype.create_event_notification = function() {
    return this.getTypedRuleContext(Create_event_notificationContext,0);
};

Ddl_clauseContext.prototype.create_external_library = function() {
    return this.getTypedRuleContext(Create_external_libraryContext,0);
};

Ddl_clauseContext.prototype.create_external_resource_pool = function() {
    return this.getTypedRuleContext(Create_external_resource_poolContext,0);
};

Ddl_clauseContext.prototype.create_fulltext_catalog = function() {
    return this.getTypedRuleContext(Create_fulltext_catalogContext,0);
};

Ddl_clauseContext.prototype.create_fulltext_stoplist = function() {
    return this.getTypedRuleContext(Create_fulltext_stoplistContext,0);
};

Ddl_clauseContext.prototype.create_index = function() {
    return this.getTypedRuleContext(Create_indexContext,0);
};

Ddl_clauseContext.prototype.create_login_azure_sql = function() {
    return this.getTypedRuleContext(Create_login_azure_sqlContext,0);
};

Ddl_clauseContext.prototype.create_login_pdw = function() {
    return this.getTypedRuleContext(Create_login_pdwContext,0);
};

Ddl_clauseContext.prototype.create_login_sql_server = function() {
    return this.getTypedRuleContext(Create_login_sql_serverContext,0);
};

Ddl_clauseContext.prototype.create_master_key_azure_sql = function() {
    return this.getTypedRuleContext(Create_master_key_azure_sqlContext,0);
};

Ddl_clauseContext.prototype.create_master_key_sql_server = function() {
    return this.getTypedRuleContext(Create_master_key_sql_serverContext,0);
};

Ddl_clauseContext.prototype.create_or_alter_broker_priority = function() {
    return this.getTypedRuleContext(Create_or_alter_broker_priorityContext,0);
};

Ddl_clauseContext.prototype.create_or_alter_function = function() {
    return this.getTypedRuleContext(Create_or_alter_functionContext,0);
};

Ddl_clauseContext.prototype.create_or_alter_procedure = function() {
    return this.getTypedRuleContext(Create_or_alter_procedureContext,0);
};

Ddl_clauseContext.prototype.create_or_alter_trigger = function() {
    return this.getTypedRuleContext(Create_or_alter_triggerContext,0);
};

Ddl_clauseContext.prototype.create_remote_service_binding = function() {
    return this.getTypedRuleContext(Create_remote_service_bindingContext,0);
};

Ddl_clauseContext.prototype.create_resource_pool = function() {
    return this.getTypedRuleContext(Create_resource_poolContext,0);
};

Ddl_clauseContext.prototype.create_route = function() {
    return this.getTypedRuleContext(Create_routeContext,0);
};

Ddl_clauseContext.prototype.create_rule = function() {
    return this.getTypedRuleContext(Create_ruleContext,0);
};

Ddl_clauseContext.prototype.create_schema = function() {
    return this.getTypedRuleContext(Create_schemaContext,0);
};

Ddl_clauseContext.prototype.create_schema_azure_sql_dw_and_pdw = function() {
    return this.getTypedRuleContext(Create_schema_azure_sql_dw_and_pdwContext,0);
};

Ddl_clauseContext.prototype.create_search_property_list = function() {
    return this.getTypedRuleContext(Create_search_property_listContext,0);
};

Ddl_clauseContext.prototype.create_security_policy = function() {
    return this.getTypedRuleContext(Create_security_policyContext,0);
};

Ddl_clauseContext.prototype.create_sequence = function() {
    return this.getTypedRuleContext(Create_sequenceContext,0);
};

Ddl_clauseContext.prototype.create_server_audit = function() {
    return this.getTypedRuleContext(Create_server_auditContext,0);
};

Ddl_clauseContext.prototype.create_server_audit_specification = function() {
    return this.getTypedRuleContext(Create_server_audit_specificationContext,0);
};

Ddl_clauseContext.prototype.create_server_role = function() {
    return this.getTypedRuleContext(Create_server_roleContext,0);
};

Ddl_clauseContext.prototype.create_service = function() {
    return this.getTypedRuleContext(Create_serviceContext,0);
};

Ddl_clauseContext.prototype.create_statistics = function() {
    return this.getTypedRuleContext(Create_statisticsContext,0);
};

Ddl_clauseContext.prototype.create_symmetric_key = function() {
    return this.getTypedRuleContext(Create_symmetric_keyContext,0);
};

Ddl_clauseContext.prototype.create_synonym = function() {
    return this.getTypedRuleContext(Create_synonymContext,0);
};

Ddl_clauseContext.prototype.create_table = function() {
    return this.getTypedRuleContext(Create_tableContext,0);
};

Ddl_clauseContext.prototype.create_type = function() {
    return this.getTypedRuleContext(Create_typeContext,0);
};

Ddl_clauseContext.prototype.create_user = function() {
    return this.getTypedRuleContext(Create_userContext,0);
};

Ddl_clauseContext.prototype.create_user_azure_sql_dw = function() {
    return this.getTypedRuleContext(Create_user_azure_sql_dwContext,0);
};

Ddl_clauseContext.prototype.create_view = function() {
    return this.getTypedRuleContext(Create_viewContext,0);
};

Ddl_clauseContext.prototype.create_workload_group = function() {
    return this.getTypedRuleContext(Create_workload_groupContext,0);
};

Ddl_clauseContext.prototype.create_xml_schema_collection = function() {
    return this.getTypedRuleContext(Create_xml_schema_collectionContext,0);
};

Ddl_clauseContext.prototype.drop_aggregate = function() {
    return this.getTypedRuleContext(Drop_aggregateContext,0);
};

Ddl_clauseContext.prototype.drop_application_role = function() {
    return this.getTypedRuleContext(Drop_application_roleContext,0);
};

Ddl_clauseContext.prototype.drop_assembly = function() {
    return this.getTypedRuleContext(Drop_assemblyContext,0);
};

Ddl_clauseContext.prototype.drop_asymmetric_key = function() {
    return this.getTypedRuleContext(Drop_asymmetric_keyContext,0);
};

Ddl_clauseContext.prototype.drop_availability_group = function() {
    return this.getTypedRuleContext(Drop_availability_groupContext,0);
};

Ddl_clauseContext.prototype.drop_broker_priority = function() {
    return this.getTypedRuleContext(Drop_broker_priorityContext,0);
};

Ddl_clauseContext.prototype.drop_certificate = function() {
    return this.getTypedRuleContext(Drop_certificateContext,0);
};

Ddl_clauseContext.prototype.drop_column_encryption_key = function() {
    return this.getTypedRuleContext(Drop_column_encryption_keyContext,0);
};

Ddl_clauseContext.prototype.drop_column_master_key = function() {
    return this.getTypedRuleContext(Drop_column_master_keyContext,0);
};

Ddl_clauseContext.prototype.drop_contract = function() {
    return this.getTypedRuleContext(Drop_contractContext,0);
};

Ddl_clauseContext.prototype.drop_credential = function() {
    return this.getTypedRuleContext(Drop_credentialContext,0);
};

Ddl_clauseContext.prototype.drop_cryptograhic_provider = function() {
    return this.getTypedRuleContext(Drop_cryptograhic_providerContext,0);
};

Ddl_clauseContext.prototype.drop_database = function() {
    return this.getTypedRuleContext(Drop_databaseContext,0);
};

Ddl_clauseContext.prototype.drop_database_audit_specification = function() {
    return this.getTypedRuleContext(Drop_database_audit_specificationContext,0);
};

Ddl_clauseContext.prototype.drop_database_scoped_credential = function() {
    return this.getTypedRuleContext(Drop_database_scoped_credentialContext,0);
};

Ddl_clauseContext.prototype.drop_db_role = function() {
    return this.getTypedRuleContext(Drop_db_roleContext,0);
};

Ddl_clauseContext.prototype.drop_default = function() {
    return this.getTypedRuleContext(Drop_defaultContext,0);
};

Ddl_clauseContext.prototype.drop_endpoint = function() {
    return this.getTypedRuleContext(Drop_endpointContext,0);
};

Ddl_clauseContext.prototype.drop_event_notifications = function() {
    return this.getTypedRuleContext(Drop_event_notificationsContext,0);
};

Ddl_clauseContext.prototype.drop_event_session = function() {
    return this.getTypedRuleContext(Drop_event_sessionContext,0);
};

Ddl_clauseContext.prototype.drop_external_data_source = function() {
    return this.getTypedRuleContext(Drop_external_data_sourceContext,0);
};

Ddl_clauseContext.prototype.drop_external_file_format = function() {
    return this.getTypedRuleContext(Drop_external_file_formatContext,0);
};

Ddl_clauseContext.prototype.drop_external_library = function() {
    return this.getTypedRuleContext(Drop_external_libraryContext,0);
};

Ddl_clauseContext.prototype.drop_external_resource_pool = function() {
    return this.getTypedRuleContext(Drop_external_resource_poolContext,0);
};

Ddl_clauseContext.prototype.drop_external_table = function() {
    return this.getTypedRuleContext(Drop_external_tableContext,0);
};

Ddl_clauseContext.prototype.drop_fulltext_catalog = function() {
    return this.getTypedRuleContext(Drop_fulltext_catalogContext,0);
};

Ddl_clauseContext.prototype.drop_fulltext_index = function() {
    return this.getTypedRuleContext(Drop_fulltext_indexContext,0);
};

Ddl_clauseContext.prototype.drop_fulltext_stoplist = function() {
    return this.getTypedRuleContext(Drop_fulltext_stoplistContext,0);
};

Ddl_clauseContext.prototype.drop_function = function() {
    return this.getTypedRuleContext(Drop_functionContext,0);
};

Ddl_clauseContext.prototype.drop_index = function() {
    return this.getTypedRuleContext(Drop_indexContext,0);
};

Ddl_clauseContext.prototype.drop_login = function() {
    return this.getTypedRuleContext(Drop_loginContext,0);
};

Ddl_clauseContext.prototype.drop_master_key = function() {
    return this.getTypedRuleContext(Drop_master_keyContext,0);
};

Ddl_clauseContext.prototype.drop_message_type = function() {
    return this.getTypedRuleContext(Drop_message_typeContext,0);
};

Ddl_clauseContext.prototype.drop_partition_function = function() {
    return this.getTypedRuleContext(Drop_partition_functionContext,0);
};

Ddl_clauseContext.prototype.drop_partition_scheme = function() {
    return this.getTypedRuleContext(Drop_partition_schemeContext,0);
};

Ddl_clauseContext.prototype.drop_procedure = function() {
    return this.getTypedRuleContext(Drop_procedureContext,0);
};

Ddl_clauseContext.prototype.drop_queue = function() {
    return this.getTypedRuleContext(Drop_queueContext,0);
};

Ddl_clauseContext.prototype.drop_remote_service_binding = function() {
    return this.getTypedRuleContext(Drop_remote_service_bindingContext,0);
};

Ddl_clauseContext.prototype.drop_resource_pool = function() {
    return this.getTypedRuleContext(Drop_resource_poolContext,0);
};

Ddl_clauseContext.prototype.drop_route = function() {
    return this.getTypedRuleContext(Drop_routeContext,0);
};

Ddl_clauseContext.prototype.drop_rule = function() {
    return this.getTypedRuleContext(Drop_ruleContext,0);
};

Ddl_clauseContext.prototype.drop_schema = function() {
    return this.getTypedRuleContext(Drop_schemaContext,0);
};

Ddl_clauseContext.prototype.drop_search_property_list = function() {
    return this.getTypedRuleContext(Drop_search_property_listContext,0);
};

Ddl_clauseContext.prototype.drop_security_policy = function() {
    return this.getTypedRuleContext(Drop_security_policyContext,0);
};

Ddl_clauseContext.prototype.drop_sequence = function() {
    return this.getTypedRuleContext(Drop_sequenceContext,0);
};

Ddl_clauseContext.prototype.drop_server_audit = function() {
    return this.getTypedRuleContext(Drop_server_auditContext,0);
};

Ddl_clauseContext.prototype.drop_server_audit_specification = function() {
    return this.getTypedRuleContext(Drop_server_audit_specificationContext,0);
};

Ddl_clauseContext.prototype.drop_server_role = function() {
    return this.getTypedRuleContext(Drop_server_roleContext,0);
};

Ddl_clauseContext.prototype.drop_service = function() {
    return this.getTypedRuleContext(Drop_serviceContext,0);
};

Ddl_clauseContext.prototype.drop_signature = function() {
    return this.getTypedRuleContext(Drop_signatureContext,0);
};

Ddl_clauseContext.prototype.drop_statistics = function() {
    return this.getTypedRuleContext(Drop_statisticsContext,0);
};

Ddl_clauseContext.prototype.drop_statistics_name_azure_dw_and_pdw = function() {
    return this.getTypedRuleContext(Drop_statistics_name_azure_dw_and_pdwContext,0);
};

Ddl_clauseContext.prototype.drop_symmetric_key = function() {
    return this.getTypedRuleContext(Drop_symmetric_keyContext,0);
};

Ddl_clauseContext.prototype.drop_synonym = function() {
    return this.getTypedRuleContext(Drop_synonymContext,0);
};

Ddl_clauseContext.prototype.drop_table = function() {
    return this.getTypedRuleContext(Drop_tableContext,0);
};

Ddl_clauseContext.prototype.drop_trigger = function() {
    return this.getTypedRuleContext(Drop_triggerContext,0);
};

Ddl_clauseContext.prototype.drop_type = function() {
    return this.getTypedRuleContext(Drop_typeContext,0);
};

Ddl_clauseContext.prototype.drop_user = function() {
    return this.getTypedRuleContext(Drop_userContext,0);
};

Ddl_clauseContext.prototype.drop_view = function() {
    return this.getTypedRuleContext(Drop_viewContext,0);
};

Ddl_clauseContext.prototype.drop_workload_group = function() {
    return this.getTypedRuleContext(Drop_workload_groupContext,0);
};

Ddl_clauseContext.prototype.drop_xml_schema_collection = function() {
    return this.getTypedRuleContext(Drop_xml_schema_collectionContext,0);
};

Ddl_clauseContext.prototype.disable_trigger = function() {
    return this.getTypedRuleContext(Disable_triggerContext,0);
};

Ddl_clauseContext.prototype.enable_trigger = function() {
    return this.getTypedRuleContext(Enable_triggerContext,0);
};

Ddl_clauseContext.prototype.truncate_table = function() {
    return this.getTypedRuleContext(Truncate_tableContext,0);
};

Ddl_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDdl_clause(this);
	}
};

Ddl_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDdl_clause(this);
	}
};




TSqlParser.Ddl_clauseContext = Ddl_clauseContext;

TSqlParser.prototype.ddl_clause = function() {

    var localctx = new Ddl_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, TSqlParser.RULE_ddl_clause);
    try {
        this.state = 1144;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 987;
            this.alter_application_role();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 988;
            this.alter_assembly();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 989;
            this.alter_asymmetric_key();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 990;
            this.alter_authorization();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 991;
            this.alter_authorization_for_azure_dw();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 992;
            this.alter_authorization_for_parallel_dw();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 993;
            this.alter_authorization_for_sql_database();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 994;
            this.alter_availability_group();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 995;
            this.alter_certificate();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 996;
            this.alter_column_encryption_key();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 997;
            this.alter_credential();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 998;
            this.alter_cryptographic_provider();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 999;
            this.alter_database();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 1000;
            this.alter_db_role();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 1001;
            this.alter_endpoint();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 1002;
            this.create_or_alter_event_session();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 1003;
            this.alter_external_data_source();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 1004;
            this.alter_external_library();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 1005;
            this.alter_external_resource_pool();
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 1006;
            this.alter_fulltext_catalog();
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 1007;
            this.alter_fulltext_stoplist();
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 1008;
            this.alter_login_azure_sql();
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 1009;
            this.alter_login_azure_sql_dw_and_pdw();
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 1010;
            this.alter_login_sql_server();
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 1011;
            this.alter_master_key_azure_sql();
            break;

        case 26:
            this.enterOuterAlt(localctx, 26);
            this.state = 1012;
            this.alter_master_key_sql_server();
            break;

        case 27:
            this.enterOuterAlt(localctx, 27);
            this.state = 1013;
            this.alter_message_type();
            break;

        case 28:
            this.enterOuterAlt(localctx, 28);
            this.state = 1014;
            this.alter_partition_function();
            break;

        case 29:
            this.enterOuterAlt(localctx, 29);
            this.state = 1015;
            this.alter_partition_scheme();
            break;

        case 30:
            this.enterOuterAlt(localctx, 30);
            this.state = 1016;
            this.alter_remote_service_binding();
            break;

        case 31:
            this.enterOuterAlt(localctx, 31);
            this.state = 1017;
            this.alter_resource_governor();
            break;

        case 32:
            this.enterOuterAlt(localctx, 32);
            this.state = 1018;
            this.alter_schema_azure_sql_dw_and_pdw();
            break;

        case 33:
            this.enterOuterAlt(localctx, 33);
            this.state = 1019;
            this.alter_schema_sql();
            break;

        case 34:
            this.enterOuterAlt(localctx, 34);
            this.state = 1020;
            this.alter_sequence();
            break;

        case 35:
            this.enterOuterAlt(localctx, 35);
            this.state = 1021;
            this.alter_server_audit();
            break;

        case 36:
            this.enterOuterAlt(localctx, 36);
            this.state = 1022;
            this.alter_server_audit_specification();
            break;

        case 37:
            this.enterOuterAlt(localctx, 37);
            this.state = 1023;
            this.alter_server_configuration();
            break;

        case 38:
            this.enterOuterAlt(localctx, 38);
            this.state = 1024;
            this.alter_server_role();
            break;

        case 39:
            this.enterOuterAlt(localctx, 39);
            this.state = 1025;
            this.alter_server_role_pdw();
            break;

        case 40:
            this.enterOuterAlt(localctx, 40);
            this.state = 1026;
            this.alter_service();
            break;

        case 41:
            this.enterOuterAlt(localctx, 41);
            this.state = 1027;
            this.alter_service_master_key();
            break;

        case 42:
            this.enterOuterAlt(localctx, 42);
            this.state = 1028;
            this.alter_symmetric_key();
            break;

        case 43:
            this.enterOuterAlt(localctx, 43);
            this.state = 1029;
            this.alter_table();
            break;

        case 44:
            this.enterOuterAlt(localctx, 44);
            this.state = 1030;
            this.alter_user();
            break;

        case 45:
            this.enterOuterAlt(localctx, 45);
            this.state = 1031;
            this.alter_user_azure_sql();
            break;

        case 46:
            this.enterOuterAlt(localctx, 46);
            this.state = 1032;
            this.alter_workload_group();
            break;

        case 47:
            this.enterOuterAlt(localctx, 47);
            this.state = 1033;
            this.create_application_role();
            break;

        case 48:
            this.enterOuterAlt(localctx, 48);
            this.state = 1034;
            this.create_assembly();
            break;

        case 49:
            this.enterOuterAlt(localctx, 49);
            this.state = 1035;
            this.create_asymmetric_key();
            break;

        case 50:
            this.enterOuterAlt(localctx, 50);
            this.state = 1036;
            this.create_column_encryption_key();
            break;

        case 51:
            this.enterOuterAlt(localctx, 51);
            this.state = 1037;
            this.create_column_master_key();
            break;

        case 52:
            this.enterOuterAlt(localctx, 52);
            this.state = 1038;
            this.create_credential();
            break;

        case 53:
            this.enterOuterAlt(localctx, 53);
            this.state = 1039;
            this.create_cryptographic_provider();
            break;

        case 54:
            this.enterOuterAlt(localctx, 54);
            this.state = 1040;
            this.create_database();
            break;

        case 55:
            this.enterOuterAlt(localctx, 55);
            this.state = 1041;
            this.create_db_role();
            break;

        case 56:
            this.enterOuterAlt(localctx, 56);
            this.state = 1042;
            this.create_event_notification();
            break;

        case 57:
            this.enterOuterAlt(localctx, 57);
            this.state = 1043;
            this.create_external_library();
            break;

        case 58:
            this.enterOuterAlt(localctx, 58);
            this.state = 1044;
            this.create_external_resource_pool();
            break;

        case 59:
            this.enterOuterAlt(localctx, 59);
            this.state = 1045;
            this.create_fulltext_catalog();
            break;

        case 60:
            this.enterOuterAlt(localctx, 60);
            this.state = 1046;
            this.create_fulltext_stoplist();
            break;

        case 61:
            this.enterOuterAlt(localctx, 61);
            this.state = 1047;
            this.create_index();
            break;

        case 62:
            this.enterOuterAlt(localctx, 62);
            this.state = 1048;
            this.create_login_azure_sql();
            break;

        case 63:
            this.enterOuterAlt(localctx, 63);
            this.state = 1049;
            this.create_login_pdw();
            break;

        case 64:
            this.enterOuterAlt(localctx, 64);
            this.state = 1050;
            this.create_login_sql_server();
            break;

        case 65:
            this.enterOuterAlt(localctx, 65);
            this.state = 1051;
            this.create_master_key_azure_sql();
            break;

        case 66:
            this.enterOuterAlt(localctx, 66);
            this.state = 1052;
            this.create_master_key_sql_server();
            break;

        case 67:
            this.enterOuterAlt(localctx, 67);
            this.state = 1053;
            this.create_or_alter_broker_priority();
            break;

        case 68:
            this.enterOuterAlt(localctx, 68);
            this.state = 1054;
            this.create_or_alter_function();
            break;

        case 69:
            this.enterOuterAlt(localctx, 69);
            this.state = 1055;
            this.create_or_alter_procedure();
            break;

        case 70:
            this.enterOuterAlt(localctx, 70);
            this.state = 1056;
            this.create_or_alter_trigger();
            break;

        case 71:
            this.enterOuterAlt(localctx, 71);
            this.state = 1057;
            this.create_remote_service_binding();
            break;

        case 72:
            this.enterOuterAlt(localctx, 72);
            this.state = 1058;
            this.create_resource_pool();
            break;

        case 73:
            this.enterOuterAlt(localctx, 73);
            this.state = 1059;
            this.create_route();
            break;

        case 74:
            this.enterOuterAlt(localctx, 74);
            this.state = 1060;
            this.create_rule();
            break;

        case 75:
            this.enterOuterAlt(localctx, 75);
            this.state = 1061;
            this.create_schema();
            break;

        case 76:
            this.enterOuterAlt(localctx, 76);
            this.state = 1062;
            this.create_schema_azure_sql_dw_and_pdw();
            break;

        case 77:
            this.enterOuterAlt(localctx, 77);
            this.state = 1063;
            this.create_search_property_list();
            break;

        case 78:
            this.enterOuterAlt(localctx, 78);
            this.state = 1064;
            this.create_security_policy();
            break;

        case 79:
            this.enterOuterAlt(localctx, 79);
            this.state = 1065;
            this.create_sequence();
            break;

        case 80:
            this.enterOuterAlt(localctx, 80);
            this.state = 1066;
            this.create_server_audit();
            break;

        case 81:
            this.enterOuterAlt(localctx, 81);
            this.state = 1067;
            this.create_server_audit_specification();
            break;

        case 82:
            this.enterOuterAlt(localctx, 82);
            this.state = 1068;
            this.create_server_role();
            break;

        case 83:
            this.enterOuterAlt(localctx, 83);
            this.state = 1069;
            this.create_service();
            break;

        case 84:
            this.enterOuterAlt(localctx, 84);
            this.state = 1070;
            this.create_statistics();
            break;

        case 85:
            this.enterOuterAlt(localctx, 85);
            this.state = 1071;
            this.create_symmetric_key();
            break;

        case 86:
            this.enterOuterAlt(localctx, 86);
            this.state = 1072;
            this.create_synonym();
            break;

        case 87:
            this.enterOuterAlt(localctx, 87);
            this.state = 1073;
            this.create_table();
            break;

        case 88:
            this.enterOuterAlt(localctx, 88);
            this.state = 1074;
            this.create_type();
            break;

        case 89:
            this.enterOuterAlt(localctx, 89);
            this.state = 1075;
            this.create_user();
            break;

        case 90:
            this.enterOuterAlt(localctx, 90);
            this.state = 1076;
            this.create_user_azure_sql_dw();
            break;

        case 91:
            this.enterOuterAlt(localctx, 91);
            this.state = 1077;
            this.create_view();
            break;

        case 92:
            this.enterOuterAlt(localctx, 92);
            this.state = 1078;
            this.create_workload_group();
            break;

        case 93:
            this.enterOuterAlt(localctx, 93);
            this.state = 1079;
            this.create_xml_schema_collection();
            break;

        case 94:
            this.enterOuterAlt(localctx, 94);
            this.state = 1080;
            this.drop_aggregate();
            break;

        case 95:
            this.enterOuterAlt(localctx, 95);
            this.state = 1081;
            this.drop_application_role();
            break;

        case 96:
            this.enterOuterAlt(localctx, 96);
            this.state = 1082;
            this.drop_assembly();
            break;

        case 97:
            this.enterOuterAlt(localctx, 97);
            this.state = 1083;
            this.drop_asymmetric_key();
            break;

        case 98:
            this.enterOuterAlt(localctx, 98);
            this.state = 1084;
            this.drop_availability_group();
            break;

        case 99:
            this.enterOuterAlt(localctx, 99);
            this.state = 1085;
            this.drop_broker_priority();
            break;

        case 100:
            this.enterOuterAlt(localctx, 100);
            this.state = 1086;
            this.drop_certificate();
            break;

        case 101:
            this.enterOuterAlt(localctx, 101);
            this.state = 1087;
            this.drop_column_encryption_key();
            break;

        case 102:
            this.enterOuterAlt(localctx, 102);
            this.state = 1088;
            this.drop_column_master_key();
            break;

        case 103:
            this.enterOuterAlt(localctx, 103);
            this.state = 1089;
            this.drop_contract();
            break;

        case 104:
            this.enterOuterAlt(localctx, 104);
            this.state = 1090;
            this.drop_credential();
            break;

        case 105:
            this.enterOuterAlt(localctx, 105);
            this.state = 1091;
            this.drop_cryptograhic_provider();
            break;

        case 106:
            this.enterOuterAlt(localctx, 106);
            this.state = 1092;
            this.drop_database();
            break;

        case 107:
            this.enterOuterAlt(localctx, 107);
            this.state = 1093;
            this.drop_database_audit_specification();
            break;

        case 108:
            this.enterOuterAlt(localctx, 108);
            this.state = 1094;
            this.drop_database_scoped_credential();
            break;

        case 109:
            this.enterOuterAlt(localctx, 109);
            this.state = 1095;
            this.drop_db_role();
            break;

        case 110:
            this.enterOuterAlt(localctx, 110);
            this.state = 1096;
            this.drop_default();
            break;

        case 111:
            this.enterOuterAlt(localctx, 111);
            this.state = 1097;
            this.drop_endpoint();
            break;

        case 112:
            this.enterOuterAlt(localctx, 112);
            this.state = 1098;
            this.drop_event_notifications();
            break;

        case 113:
            this.enterOuterAlt(localctx, 113);
            this.state = 1099;
            this.drop_event_session();
            break;

        case 114:
            this.enterOuterAlt(localctx, 114);
            this.state = 1100;
            this.drop_external_data_source();
            break;

        case 115:
            this.enterOuterAlt(localctx, 115);
            this.state = 1101;
            this.drop_external_file_format();
            break;

        case 116:
            this.enterOuterAlt(localctx, 116);
            this.state = 1102;
            this.drop_external_library();
            break;

        case 117:
            this.enterOuterAlt(localctx, 117);
            this.state = 1103;
            this.drop_external_resource_pool();
            break;

        case 118:
            this.enterOuterAlt(localctx, 118);
            this.state = 1104;
            this.drop_external_table();
            break;

        case 119:
            this.enterOuterAlt(localctx, 119);
            this.state = 1105;
            this.drop_fulltext_catalog();
            break;

        case 120:
            this.enterOuterAlt(localctx, 120);
            this.state = 1106;
            this.drop_fulltext_index();
            break;

        case 121:
            this.enterOuterAlt(localctx, 121);
            this.state = 1107;
            this.drop_fulltext_stoplist();
            break;

        case 122:
            this.enterOuterAlt(localctx, 122);
            this.state = 1108;
            this.drop_function();
            break;

        case 123:
            this.enterOuterAlt(localctx, 123);
            this.state = 1109;
            this.drop_index();
            break;

        case 124:
            this.enterOuterAlt(localctx, 124);
            this.state = 1110;
            this.drop_login();
            break;

        case 125:
            this.enterOuterAlt(localctx, 125);
            this.state = 1111;
            this.drop_master_key();
            break;

        case 126:
            this.enterOuterAlt(localctx, 126);
            this.state = 1112;
            this.drop_message_type();
            break;

        case 127:
            this.enterOuterAlt(localctx, 127);
            this.state = 1113;
            this.drop_partition_function();
            break;

        case 128:
            this.enterOuterAlt(localctx, 128);
            this.state = 1114;
            this.drop_partition_scheme();
            break;

        case 129:
            this.enterOuterAlt(localctx, 129);
            this.state = 1115;
            this.drop_procedure();
            break;

        case 130:
            this.enterOuterAlt(localctx, 130);
            this.state = 1116;
            this.drop_queue();
            break;

        case 131:
            this.enterOuterAlt(localctx, 131);
            this.state = 1117;
            this.drop_remote_service_binding();
            break;

        case 132:
            this.enterOuterAlt(localctx, 132);
            this.state = 1118;
            this.drop_resource_pool();
            break;

        case 133:
            this.enterOuterAlt(localctx, 133);
            this.state = 1119;
            this.drop_route();
            break;

        case 134:
            this.enterOuterAlt(localctx, 134);
            this.state = 1120;
            this.drop_rule();
            break;

        case 135:
            this.enterOuterAlt(localctx, 135);
            this.state = 1121;
            this.drop_schema();
            break;

        case 136:
            this.enterOuterAlt(localctx, 136);
            this.state = 1122;
            this.drop_search_property_list();
            break;

        case 137:
            this.enterOuterAlt(localctx, 137);
            this.state = 1123;
            this.drop_security_policy();
            break;

        case 138:
            this.enterOuterAlt(localctx, 138);
            this.state = 1124;
            this.drop_sequence();
            break;

        case 139:
            this.enterOuterAlt(localctx, 139);
            this.state = 1125;
            this.drop_server_audit();
            break;

        case 140:
            this.enterOuterAlt(localctx, 140);
            this.state = 1126;
            this.drop_server_audit_specification();
            break;

        case 141:
            this.enterOuterAlt(localctx, 141);
            this.state = 1127;
            this.drop_server_role();
            break;

        case 142:
            this.enterOuterAlt(localctx, 142);
            this.state = 1128;
            this.drop_service();
            break;

        case 143:
            this.enterOuterAlt(localctx, 143);
            this.state = 1129;
            this.drop_signature();
            break;

        case 144:
            this.enterOuterAlt(localctx, 144);
            this.state = 1130;
            this.drop_statistics();
            break;

        case 145:
            this.enterOuterAlt(localctx, 145);
            this.state = 1131;
            this.drop_statistics_name_azure_dw_and_pdw();
            break;

        case 146:
            this.enterOuterAlt(localctx, 146);
            this.state = 1132;
            this.drop_symmetric_key();
            break;

        case 147:
            this.enterOuterAlt(localctx, 147);
            this.state = 1133;
            this.drop_synonym();
            break;

        case 148:
            this.enterOuterAlt(localctx, 148);
            this.state = 1134;
            this.drop_table();
            break;

        case 149:
            this.enterOuterAlt(localctx, 149);
            this.state = 1135;
            this.drop_trigger();
            break;

        case 150:
            this.enterOuterAlt(localctx, 150);
            this.state = 1136;
            this.drop_type();
            break;

        case 151:
            this.enterOuterAlt(localctx, 151);
            this.state = 1137;
            this.drop_user();
            break;

        case 152:
            this.enterOuterAlt(localctx, 152);
            this.state = 1138;
            this.drop_view();
            break;

        case 153:
            this.enterOuterAlt(localctx, 153);
            this.state = 1139;
            this.drop_workload_group();
            break;

        case 154:
            this.enterOuterAlt(localctx, 154);
            this.state = 1140;
            this.drop_xml_schema_collection();
            break;

        case 155:
            this.enterOuterAlt(localctx, 155);
            this.state = 1141;
            this.disable_trigger();
            break;

        case 156:
            this.enterOuterAlt(localctx, 156);
            this.state = 1142;
            this.enable_trigger();
            break;

        case 157:
            this.enterOuterAlt(localctx, 157);
            this.state = 1143;
            this.truncate_table();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Backup_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_backup_statement;
    return this;
}

Backup_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Backup_statementContext.prototype.constructor = Backup_statementContext;

Backup_statementContext.prototype.backup_database = function() {
    return this.getTypedRuleContext(Backup_databaseContext,0);
};

Backup_statementContext.prototype.backup_log = function() {
    return this.getTypedRuleContext(Backup_logContext,0);
};

Backup_statementContext.prototype.backup_certificate = function() {
    return this.getTypedRuleContext(Backup_certificateContext,0);
};

Backup_statementContext.prototype.backup_master_key = function() {
    return this.getTypedRuleContext(Backup_master_keyContext,0);
};

Backup_statementContext.prototype.backup_service_master_key = function() {
    return this.getTypedRuleContext(Backup_service_master_keyContext,0);
};

Backup_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterBackup_statement(this);
	}
};

Backup_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitBackup_statement(this);
	}
};




TSqlParser.Backup_statementContext = Backup_statementContext;

TSqlParser.prototype.backup_statement = function() {

    var localctx = new Backup_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, TSqlParser.RULE_backup_statement);
    try {
        this.state = 1151;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1146;
            this.backup_database();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1147;
            this.backup_log();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1148;
            this.backup_certificate();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1149;
            this.backup_master_key();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1150;
            this.backup_service_master_key();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cfl_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_cfl_statement;
    return this;
}

Cfl_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cfl_statementContext.prototype.constructor = Cfl_statementContext;

Cfl_statementContext.prototype.block_statement = function() {
    return this.getTypedRuleContext(Block_statementContext,0);
};

Cfl_statementContext.prototype.break_statement = function() {
    return this.getTypedRuleContext(Break_statementContext,0);
};

Cfl_statementContext.prototype.continue_statement = function() {
    return this.getTypedRuleContext(Continue_statementContext,0);
};

Cfl_statementContext.prototype.goto_statement = function() {
    return this.getTypedRuleContext(Goto_statementContext,0);
};

Cfl_statementContext.prototype.if_statement = function() {
    return this.getTypedRuleContext(If_statementContext,0);
};

Cfl_statementContext.prototype.return_statement = function() {
    return this.getTypedRuleContext(Return_statementContext,0);
};

Cfl_statementContext.prototype.throw_statement = function() {
    return this.getTypedRuleContext(Throw_statementContext,0);
};

Cfl_statementContext.prototype.try_catch_statement = function() {
    return this.getTypedRuleContext(Try_catch_statementContext,0);
};

Cfl_statementContext.prototype.waitfor_statement = function() {
    return this.getTypedRuleContext(Waitfor_statementContext,0);
};

Cfl_statementContext.prototype.while_statement = function() {
    return this.getTypedRuleContext(While_statementContext,0);
};

Cfl_statementContext.prototype.print_statement = function() {
    return this.getTypedRuleContext(Print_statementContext,0);
};

Cfl_statementContext.prototype.raiseerror_statement = function() {
    return this.getTypedRuleContext(Raiseerror_statementContext,0);
};

Cfl_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCfl_statement(this);
	}
};

Cfl_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCfl_statement(this);
	}
};




TSqlParser.Cfl_statementContext = Cfl_statementContext;

TSqlParser.prototype.cfl_statement = function() {

    var localctx = new Cfl_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, TSqlParser.RULE_cfl_statement);
    try {
        this.state = 1165;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1153;
            this.block_statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1154;
            this.break_statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1155;
            this.continue_statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1156;
            this.goto_statement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1157;
            this.if_statement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1158;
            this.return_statement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1159;
            this.throw_statement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1160;
            this.try_catch_statement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1161;
            this.waitfor_statement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1162;
            this.while_statement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1163;
            this.print_statement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1164;
            this.raiseerror_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Block_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_block_statement;
    return this;
}

Block_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Block_statementContext.prototype.constructor = Block_statementContext;

Block_statementContext.prototype.BEGIN = function() {
    return this.getToken(TSqlParser.BEGIN, 0);
};

Block_statementContext.prototype.END = function() {
    return this.getToken(TSqlParser.END, 0);
};

Block_statementContext.prototype.sql_clauses = function() {
    return this.getTypedRuleContext(Sql_clausesContext,0);
};

Block_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterBlock_statement(this);
	}
};

Block_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitBlock_statement(this);
	}
};




TSqlParser.Block_statementContext = Block_statementContext;

TSqlParser.prototype.block_statement = function() {

    var localctx = new Block_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, TSqlParser.RULE_block_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1167;
        this.match(TSqlParser.BEGIN);
        this.state = 1169;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        if(la_===1) {
            this.state = 1168;
            this.match(TSqlParser.SEMI);

        }
        this.state = 1172;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        if(la_===1) {
            this.state = 1171;
            this.sql_clauses();

        }
        this.state = 1174;
        this.match(TSqlParser.END);
        this.state = 1176;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        if(la_===1) {
            this.state = 1175;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Break_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_break_statement;
    return this;
}

Break_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Break_statementContext.prototype.constructor = Break_statementContext;

Break_statementContext.prototype.BREAK = function() {
    return this.getToken(TSqlParser.BREAK, 0);
};

Break_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterBreak_statement(this);
	}
};

Break_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitBreak_statement(this);
	}
};




TSqlParser.Break_statementContext = Break_statementContext;

TSqlParser.prototype.break_statement = function() {

    var localctx = new Break_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, TSqlParser.RULE_break_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1178;
        this.match(TSqlParser.BREAK);
        this.state = 1180;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        if(la_===1) {
            this.state = 1179;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Continue_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_continue_statement;
    return this;
}

Continue_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Continue_statementContext.prototype.constructor = Continue_statementContext;

Continue_statementContext.prototype.CONTINUE = function() {
    return this.getToken(TSqlParser.CONTINUE, 0);
};

Continue_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterContinue_statement(this);
	}
};

Continue_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitContinue_statement(this);
	}
};




TSqlParser.Continue_statementContext = Continue_statementContext;

TSqlParser.prototype.continue_statement = function() {

    var localctx = new Continue_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, TSqlParser.RULE_continue_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1182;
        this.match(TSqlParser.CONTINUE);
        this.state = 1184;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        if(la_===1) {
            this.state = 1183;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Goto_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_goto_statement;
    return this;
}

Goto_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Goto_statementContext.prototype.constructor = Goto_statementContext;

Goto_statementContext.prototype.GOTO = function() {
    return this.getToken(TSqlParser.GOTO, 0);
};

Goto_statementContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Goto_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterGoto_statement(this);
	}
};

Goto_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitGoto_statement(this);
	}
};




TSqlParser.Goto_statementContext = Goto_statementContext;

TSqlParser.prototype.goto_statement = function() {

    var localctx = new Goto_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, TSqlParser.RULE_goto_statement);
    try {
        this.state = 1196;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.GOTO:
            this.enterOuterAlt(localctx, 1);
            this.state = 1186;
            this.match(TSqlParser.GOTO);
            this.state = 1187;
            this.id();
            this.state = 1189;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
            if(la_===1) {
                this.state = 1188;
                this.match(TSqlParser.SEMI);

            }
            break;
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 1191;
            this.id();
            this.state = 1192;
            this.match(TSqlParser.COLON);
            this.state = 1194;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
            if(la_===1) {
                this.state = 1193;
                this.match(TSqlParser.SEMI);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Return_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_return_statement;
    return this;
}

Return_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_statementContext.prototype.constructor = Return_statementContext;

Return_statementContext.prototype.RETURN = function() {
    return this.getToken(TSqlParser.RETURN, 0);
};

Return_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Return_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterReturn_statement(this);
	}
};

Return_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitReturn_statement(this);
	}
};




TSqlParser.Return_statementContext = Return_statementContext;

TSqlParser.prototype.return_statement = function() {

    var localctx = new Return_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, TSqlParser.RULE_return_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1198;
        this.match(TSqlParser.RETURN);
        this.state = 1200;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        if(la_===1) {
            this.state = 1199;
            this.expression(0);

        }
        this.state = 1203;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        if(la_===1) {
            this.state = 1202;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function If_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_if_statement;
    return this;
}

If_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_statementContext.prototype.constructor = If_statementContext;

If_statementContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

If_statementContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

If_statementContext.prototype.sql_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sql_clauseContext);
    } else {
        return this.getTypedRuleContext(Sql_clauseContext,i);
    }
};

If_statementContext.prototype.ELSE = function() {
    return this.getToken(TSqlParser.ELSE, 0);
};

If_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterIf_statement(this);
	}
};

If_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitIf_statement(this);
	}
};




TSqlParser.If_statementContext = If_statementContext;

TSqlParser.prototype.if_statement = function() {

    var localctx = new If_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, TSqlParser.RULE_if_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1205;
        this.match(TSqlParser.IF);
        this.state = 1206;
        this.search_condition();
        this.state = 1207;
        this.sql_clause();
        this.state = 1210;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        if(la_===1) {
            this.state = 1208;
            this.match(TSqlParser.ELSE);
            this.state = 1209;
            this.sql_clause();

        }
        this.state = 1213;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        if(la_===1) {
            this.state = 1212;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Throw_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_throw_statement;
    return this;
}

Throw_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Throw_statementContext.prototype.constructor = Throw_statementContext;

Throw_statementContext.prototype.THROW = function() {
    return this.getToken(TSqlParser.THROW, 0);
};

Throw_statementContext.prototype.throw_error_number = function() {
    return this.getTypedRuleContext(Throw_error_numberContext,0);
};

Throw_statementContext.prototype.throw_message = function() {
    return this.getTypedRuleContext(Throw_messageContext,0);
};

Throw_statementContext.prototype.throw_state = function() {
    return this.getTypedRuleContext(Throw_stateContext,0);
};

Throw_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterThrow_statement(this);
	}
};

Throw_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitThrow_statement(this);
	}
};




TSqlParser.Throw_statementContext = Throw_statementContext;

TSqlParser.prototype.throw_statement = function() {

    var localctx = new Throw_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, TSqlParser.RULE_throw_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1215;
        this.match(TSqlParser.THROW);
        this.state = 1222;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.LOCAL_ID || _la===TSqlParser.DECIMAL) {
            this.state = 1216;
            this.throw_error_number();
            this.state = 1217;
            this.match(TSqlParser.COMMA);
            this.state = 1218;
            this.throw_message();
            this.state = 1219;
            this.match(TSqlParser.COMMA);
            this.state = 1220;
            this.throw_state();
        }

        this.state = 1225;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
        if(la_===1) {
            this.state = 1224;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Throw_error_numberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_throw_error_number;
    return this;
}

Throw_error_numberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Throw_error_numberContext.prototype.constructor = Throw_error_numberContext;

Throw_error_numberContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Throw_error_numberContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Throw_error_numberContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterThrow_error_number(this);
	}
};

Throw_error_numberContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitThrow_error_number(this);
	}
};




TSqlParser.Throw_error_numberContext = Throw_error_numberContext;

TSqlParser.prototype.throw_error_number = function() {

    var localctx = new Throw_error_numberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, TSqlParser.RULE_throw_error_number);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1227;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.LOCAL_ID || _la===TSqlParser.DECIMAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Throw_messageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_throw_message;
    return this;
}

Throw_messageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Throw_messageContext.prototype.constructor = Throw_messageContext;

Throw_messageContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Throw_messageContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Throw_messageContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterThrow_message(this);
	}
};

Throw_messageContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitThrow_message(this);
	}
};




TSqlParser.Throw_messageContext = Throw_messageContext;

TSqlParser.prototype.throw_message = function() {

    var localctx = new Throw_messageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, TSqlParser.RULE_throw_message);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1229;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.LOCAL_ID || _la===TSqlParser.STRING)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Throw_stateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_throw_state;
    return this;
}

Throw_stateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Throw_stateContext.prototype.constructor = Throw_stateContext;

Throw_stateContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Throw_stateContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Throw_stateContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterThrow_state(this);
	}
};

Throw_stateContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitThrow_state(this);
	}
};




TSqlParser.Throw_stateContext = Throw_stateContext;

TSqlParser.prototype.throw_state = function() {

    var localctx = new Throw_stateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, TSqlParser.RULE_throw_state);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1231;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.LOCAL_ID || _la===TSqlParser.DECIMAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Try_catch_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_try_catch_statement;
    this.try_clauses = null; // Sql_clausesContext
    this.catch_clauses = null; // Sql_clausesContext
    return this;
}

Try_catch_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Try_catch_statementContext.prototype.constructor = Try_catch_statementContext;

Try_catch_statementContext.prototype.BEGIN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.BEGIN);
    } else {
        return this.getToken(TSqlParser.BEGIN, i);
    }
};


Try_catch_statementContext.prototype.TRY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.TRY);
    } else {
        return this.getToken(TSqlParser.TRY, i);
    }
};


Try_catch_statementContext.prototype.END = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.END);
    } else {
        return this.getToken(TSqlParser.END, i);
    }
};


Try_catch_statementContext.prototype.CATCH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.CATCH);
    } else {
        return this.getToken(TSqlParser.CATCH, i);
    }
};


Try_catch_statementContext.prototype.sql_clauses = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sql_clausesContext);
    } else {
        return this.getTypedRuleContext(Sql_clausesContext,i);
    }
};

Try_catch_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTry_catch_statement(this);
	}
};

Try_catch_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTry_catch_statement(this);
	}
};




TSqlParser.Try_catch_statementContext = Try_catch_statementContext;

TSqlParser.prototype.try_catch_statement = function() {

    var localctx = new Try_catch_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, TSqlParser.RULE_try_catch_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1233;
        this.match(TSqlParser.BEGIN);
        this.state = 1234;
        this.match(TSqlParser.TRY);
        this.state = 1236;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        if(la_===1) {
            this.state = 1235;
            this.match(TSqlParser.SEMI);

        }
        this.state = 1239;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        if(la_===1) {
            this.state = 1238;
            localctx.try_clauses = this.sql_clauses();

        }
        this.state = 1241;
        this.match(TSqlParser.END);
        this.state = 1242;
        this.match(TSqlParser.TRY);
        this.state = 1244;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.SEMI) {
            this.state = 1243;
            this.match(TSqlParser.SEMI);
        }

        this.state = 1246;
        this.match(TSqlParser.BEGIN);
        this.state = 1247;
        this.match(TSqlParser.CATCH);
        this.state = 1249;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
        if(la_===1) {
            this.state = 1248;
            this.match(TSqlParser.SEMI);

        }
        this.state = 1252;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        if(la_===1) {
            this.state = 1251;
            localctx.catch_clauses = this.sql_clauses();

        }
        this.state = 1254;
        this.match(TSqlParser.END);
        this.state = 1255;
        this.match(TSqlParser.CATCH);
        this.state = 1257;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
        if(la_===1) {
            this.state = 1256;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Waitfor_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_waitfor_statement;
    return this;
}

Waitfor_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Waitfor_statementContext.prototype.constructor = Waitfor_statementContext;

Waitfor_statementContext.prototype.WAITFOR = function() {
    return this.getToken(TSqlParser.WAITFOR, 0);
};

Waitfor_statementContext.prototype.receive_statement = function() {
    return this.getTypedRuleContext(Receive_statementContext,0);
};

Waitfor_statementContext.prototype.time = function() {
    return this.getTypedRuleContext(TimeContext,0);
};

Waitfor_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Waitfor_statementContext.prototype.DELAY = function() {
    return this.getToken(TSqlParser.DELAY, 0);
};

Waitfor_statementContext.prototype.TIME = function() {
    return this.getToken(TSqlParser.TIME, 0);
};

Waitfor_statementContext.prototype.TIMEOUT = function() {
    return this.getToken(TSqlParser.TIMEOUT, 0);
};

Waitfor_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterWaitfor_statement(this);
	}
};

Waitfor_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitWaitfor_statement(this);
	}
};




TSqlParser.Waitfor_statementContext = Waitfor_statementContext;

TSqlParser.prototype.waitfor_statement = function() {

    var localctx = new Waitfor_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, TSqlParser.RULE_waitfor_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1259;
        this.match(TSqlParser.WAITFOR);
        this.state = 1261;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
        if(la_===1) {
            this.state = 1260;
            this.receive_statement();

        }
        this.state = 1264;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 1263;
            this.match(TSqlParser.COMMA);
        }

        this.state = 1268;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        if(la_===1) {
            this.state = 1266;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.DELAY || _la===TSqlParser.TIME || _la===TSqlParser.TIMEOUT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1267;
            this.time();

        }
        this.state = 1271;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        if(la_===1) {
            this.state = 1270;
            this.expression(0);

        }
        this.state = 1274;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        if(la_===1) {
            this.state = 1273;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function While_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_while_statement;
    return this;
}

While_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
While_statementContext.prototype.constructor = While_statementContext;

While_statementContext.prototype.WHILE = function() {
    return this.getToken(TSqlParser.WHILE, 0);
};

While_statementContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

While_statementContext.prototype.sql_clause = function() {
    return this.getTypedRuleContext(Sql_clauseContext,0);
};

While_statementContext.prototype.BREAK = function() {
    return this.getToken(TSqlParser.BREAK, 0);
};

While_statementContext.prototype.CONTINUE = function() {
    return this.getToken(TSqlParser.CONTINUE, 0);
};

While_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterWhile_statement(this);
	}
};

While_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitWhile_statement(this);
	}
};




TSqlParser.While_statementContext = While_statementContext;

TSqlParser.prototype.while_statement = function() {

    var localctx = new While_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, TSqlParser.RULE_while_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1276;
        this.match(TSqlParser.WHILE);
        this.state = 1277;
        this.search_condition();
        this.state = 1287;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1278;
            this.sql_clause();
            break;

        case 2:
            this.state = 1279;
            this.match(TSqlParser.BREAK);
            this.state = 1281;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
            if(la_===1) {
                this.state = 1280;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 3:
            this.state = 1283;
            this.match(TSqlParser.CONTINUE);
            this.state = 1285;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
            if(la_===1) {
                this.state = 1284;
                this.match(TSqlParser.SEMI);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Print_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_print_statement;
    return this;
}

Print_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Print_statementContext.prototype.constructor = Print_statementContext;

Print_statementContext.prototype.PRINT = function() {
    return this.getToken(TSqlParser.PRINT, 0);
};

Print_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Print_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterPrint_statement(this);
	}
};

Print_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitPrint_statement(this);
	}
};




TSqlParser.Print_statementContext = Print_statementContext;

TSqlParser.prototype.print_statement = function() {

    var localctx = new Print_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, TSqlParser.RULE_print_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1289;
        this.match(TSqlParser.PRINT);
        this.state = 1290;
        this.expression(0);
        this.state = 1292;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        if(la_===1) {
            this.state = 1291;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Raiseerror_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_raiseerror_statement;
    this.msg = null; // Token
    this.severity = null; // Constant_LOCAL_IDContext
    this.state = null; // Constant_LOCAL_IDContext
    return this;
}

Raiseerror_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raiseerror_statementContext.prototype.constructor = Raiseerror_statementContext;

Raiseerror_statementContext.prototype.RAISERROR = function() {
    return this.getToken(TSqlParser.RAISERROR, 0);
};

Raiseerror_statementContext.prototype.constant_LOCAL_ID = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Constant_LOCAL_IDContext);
    } else {
        return this.getTypedRuleContext(Constant_LOCAL_IDContext,i);
    }
};

Raiseerror_statementContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Raiseerror_statementContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Raiseerror_statementContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Raiseerror_statementContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Raiseerror_statementContext.prototype.LOG = function() {
    return this.getToken(TSqlParser.LOG, 0);
};

Raiseerror_statementContext.prototype.SETERROR = function() {
    return this.getToken(TSqlParser.SETERROR, 0);
};

Raiseerror_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterRaiseerror_statement(this);
	}
};

Raiseerror_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitRaiseerror_statement(this);
	}
};




TSqlParser.Raiseerror_statementContext = Raiseerror_statementContext;

TSqlParser.prototype.raiseerror_statement = function() {

    var localctx = new Raiseerror_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, TSqlParser.RULE_raiseerror_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1294;
        this.match(TSqlParser.RAISERROR);
        this.state = 1295;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 1296;
        localctx.msg = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(((((_la - 776)) & ~0x1f) == 0 && ((1 << (_la - 776)) & ((1 << (TSqlParser.LOCAL_ID - 776)) | (1 << (TSqlParser.DECIMAL - 776)) | (1 << (TSqlParser.STRING - 776)))) !== 0))) {
            localctx.msg = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1297;
        this.match(TSqlParser.COMMA);
        this.state = 1298;
        localctx.severity = this.constant_LOCAL_ID();
        this.state = 1299;
        this.match(TSqlParser.COMMA);
        this.state = 1300;
        localctx.state = this.constant_LOCAL_ID();
        this.state = 1305;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 1301;
            this.match(TSqlParser.COMMA);
            this.state = 1302;
            this.constant_LOCAL_ID();
            this.state = 1307;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1308;
        this.match(TSqlParser.RR_BRACKET);
        this.state = 1311;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
        if(la_===1) {
            this.state = 1309;
            this.match(TSqlParser.WITH);
            this.state = 1310;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.LOG || _la===TSqlParser.SETERROR)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 1314;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        if(la_===1) {
            this.state = 1313;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Empty_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_empty_statement;
    return this;
}

Empty_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Empty_statementContext.prototype.constructor = Empty_statementContext;


Empty_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterEmpty_statement(this);
	}
};

Empty_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitEmpty_statement(this);
	}
};




TSqlParser.Empty_statementContext = Empty_statementContext;

TSqlParser.prototype.empty_statement = function() {

    var localctx = new Empty_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, TSqlParser.RULE_empty_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1316;
        this.match(TSqlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Another_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_another_statement;
    return this;
}

Another_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Another_statementContext.prototype.constructor = Another_statementContext;

Another_statementContext.prototype.declare_statement = function() {
    return this.getTypedRuleContext(Declare_statementContext,0);
};

Another_statementContext.prototype.cursor_statement = function() {
    return this.getTypedRuleContext(Cursor_statementContext,0);
};

Another_statementContext.prototype.conversation_statement = function() {
    return this.getTypedRuleContext(Conversation_statementContext,0);
};

Another_statementContext.prototype.create_contract = function() {
    return this.getTypedRuleContext(Create_contractContext,0);
};

Another_statementContext.prototype.create_queue = function() {
    return this.getTypedRuleContext(Create_queueContext,0);
};

Another_statementContext.prototype.alter_queue = function() {
    return this.getTypedRuleContext(Alter_queueContext,0);
};

Another_statementContext.prototype.execute_statement = function() {
    return this.getTypedRuleContext(Execute_statementContext,0);
};

Another_statementContext.prototype.message_statement = function() {
    return this.getTypedRuleContext(Message_statementContext,0);
};

Another_statementContext.prototype.security_statement = function() {
    return this.getTypedRuleContext(Security_statementContext,0);
};

Another_statementContext.prototype.set_statement = function() {
    return this.getTypedRuleContext(Set_statementContext,0);
};

Another_statementContext.prototype.transaction_statement = function() {
    return this.getTypedRuleContext(Transaction_statementContext,0);
};

Another_statementContext.prototype.use_statement = function() {
    return this.getTypedRuleContext(Use_statementContext,0);
};

Another_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAnother_statement(this);
	}
};

Another_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAnother_statement(this);
	}
};




TSqlParser.Another_statementContext = Another_statementContext;

TSqlParser.prototype.another_statement = function() {

    var localctx = new Another_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, TSqlParser.RULE_another_statement);
    try {
        this.state = 1330;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1318;
            this.declare_statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1319;
            this.cursor_statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1320;
            this.conversation_statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1321;
            this.create_contract();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1322;
            this.create_queue();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1323;
            this.alter_queue();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1324;
            this.execute_statement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1325;
            this.message_statement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1326;
            this.security_statement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1327;
            this.set_statement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1328;
            this.transaction_statement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1329;
            this.use_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_application_roleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_application_role;
    this.appliction_role = null; // IdContext
    this.new_application_role_name = null; // IdContext
    this.application_role_password = null; // Token
    this.app_role_default_schema = null; // IdContext
    return this;
}

Alter_application_roleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_application_roleContext.prototype.constructor = Alter_application_roleContext;

Alter_application_roleContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_application_roleContext.prototype.APPLICATION = function() {
    return this.getToken(TSqlParser.APPLICATION, 0);
};

Alter_application_roleContext.prototype.ROLE = function() {
    return this.getToken(TSqlParser.ROLE, 0);
};

Alter_application_roleContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_application_roleContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_application_roleContext.prototype.NAME = function() {
    return this.getToken(TSqlParser.NAME, 0);
};

Alter_application_roleContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Alter_application_roleContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Alter_application_roleContext.prototype.DEFAULT_SCHEMA = function() {
    return this.getToken(TSqlParser.DEFAULT_SCHEMA, 0);
};

Alter_application_roleContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Alter_application_roleContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Alter_application_roleContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_application_role(this);
	}
};

Alter_application_roleContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_application_role(this);
	}
};




TSqlParser.Alter_application_roleContext = Alter_application_roleContext;

TSqlParser.prototype.alter_application_role = function() {

    var localctx = new Alter_application_roleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, TSqlParser.RULE_alter_application_role);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1332;
        this.match(TSqlParser.ALTER);
        this.state = 1333;
        this.match(TSqlParser.APPLICATION);
        this.state = 1334;
        this.match(TSqlParser.ROLE);
        this.state = 1335;
        localctx.appliction_role = this.id();
        this.state = 1336;
        this.match(TSqlParser.WITH);
        this.state = 1343;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        if(la_===1) {
            this.state = 1338;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 1337;
                this.match(TSqlParser.COMMA);
            }

            this.state = 1340;
            this.match(TSqlParser.NAME);
            this.state = 1341;
            this.match(TSqlParser.EQUAL);
            this.state = 1342;
            localctx.new_application_role_name = this.id();

        }
        this.state = 1351;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        if(la_===1) {
            this.state = 1346;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 1345;
                this.match(TSqlParser.COMMA);
            }

            this.state = 1348;
            this.match(TSqlParser.PASSWORD);
            this.state = 1349;
            this.match(TSqlParser.EQUAL);
            this.state = 1350;
            localctx.application_role_password = this.match(TSqlParser.STRING);

        }
        this.state = 1359;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.DEFAULT_SCHEMA || _la===TSqlParser.COMMA) {
            this.state = 1354;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 1353;
                this.match(TSqlParser.COMMA);
            }

            this.state = 1356;
            this.match(TSqlParser.DEFAULT_SCHEMA);
            this.state = 1357;
            this.match(TSqlParser.EQUAL);
            this.state = 1358;
            localctx.app_role_default_schema = this.id();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_application_roleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_application_role;
    this.appliction_role = null; // IdContext
    this.application_role_password = null; // Token
    this.app_role_default_schema = null; // IdContext
    return this;
}

Create_application_roleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_application_roleContext.prototype.constructor = Create_application_roleContext;

Create_application_roleContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_application_roleContext.prototype.APPLICATION = function() {
    return this.getToken(TSqlParser.APPLICATION, 0);
};

Create_application_roleContext.prototype.ROLE = function() {
    return this.getToken(TSqlParser.ROLE, 0);
};

Create_application_roleContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_application_roleContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_application_roleContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Create_application_roleContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Create_application_roleContext.prototype.DEFAULT_SCHEMA = function() {
    return this.getToken(TSqlParser.DEFAULT_SCHEMA, 0);
};

Create_application_roleContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Create_application_roleContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Create_application_roleContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_application_role(this);
	}
};

Create_application_roleContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_application_role(this);
	}
};




TSqlParser.Create_application_roleContext = Create_application_roleContext;

TSqlParser.prototype.create_application_role = function() {

    var localctx = new Create_application_roleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, TSqlParser.RULE_create_application_role);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1361;
        this.match(TSqlParser.CREATE);
        this.state = 1362;
        this.match(TSqlParser.APPLICATION);
        this.state = 1363;
        this.match(TSqlParser.ROLE);
        this.state = 1364;
        localctx.appliction_role = this.id();
        this.state = 1365;
        this.match(TSqlParser.WITH);
        this.state = 1372;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
        if(la_===1) {
            this.state = 1367;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 1366;
                this.match(TSqlParser.COMMA);
            }

            this.state = 1369;
            this.match(TSqlParser.PASSWORD);
            this.state = 1370;
            this.match(TSqlParser.EQUAL);
            this.state = 1371;
            localctx.application_role_password = this.match(TSqlParser.STRING);

        }
        this.state = 1380;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.DEFAULT_SCHEMA || _la===TSqlParser.COMMA) {
            this.state = 1375;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 1374;
                this.match(TSqlParser.COMMA);
            }

            this.state = 1377;
            this.match(TSqlParser.DEFAULT_SCHEMA);
            this.state = 1378;
            this.match(TSqlParser.EQUAL);
            this.state = 1379;
            localctx.app_role_default_schema = this.id();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_aggregateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_aggregate;
    this.schema_name = null; // IdContext
    this.aggregate_name = null; // IdContext
    return this;
}

Drop_aggregateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_aggregateContext.prototype.constructor = Drop_aggregateContext;

Drop_aggregateContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_aggregateContext.prototype.AGGREGATE = function() {
    return this.getToken(TSqlParser.AGGREGATE, 0);
};

Drop_aggregateContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Drop_aggregateContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

Drop_aggregateContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

Drop_aggregateContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

Drop_aggregateContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_aggregate(this);
	}
};

Drop_aggregateContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_aggregate(this);
	}
};




TSqlParser.Drop_aggregateContext = Drop_aggregateContext;

TSqlParser.prototype.drop_aggregate = function() {

    var localctx = new Drop_aggregateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, TSqlParser.RULE_drop_aggregate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1382;
        this.match(TSqlParser.DROP);
        this.state = 1383;
        this.match(TSqlParser.AGGREGATE);
        this.state = 1386;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.IF) {
            this.state = 1384;
            this.match(TSqlParser.IF);
            this.state = 1385;
            this.match(TSqlParser.EXISTS);
        }

        this.state = 1391;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
        if(la_===1) {
            this.state = 1388;
            localctx.schema_name = this.id();
            this.state = 1389;
            this.match(TSqlParser.DOT);

        }
        this.state = 1393;
        localctx.aggregate_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_application_roleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_application_role;
    this.rolename = null; // IdContext
    return this;
}

Drop_application_roleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_application_roleContext.prototype.constructor = Drop_application_roleContext;

Drop_application_roleContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_application_roleContext.prototype.APPLICATION = function() {
    return this.getToken(TSqlParser.APPLICATION, 0);
};

Drop_application_roleContext.prototype.ROLE = function() {
    return this.getToken(TSqlParser.ROLE, 0);
};

Drop_application_roleContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_application_roleContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_application_role(this);
	}
};

Drop_application_roleContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_application_role(this);
	}
};




TSqlParser.Drop_application_roleContext = Drop_application_roleContext;

TSqlParser.prototype.drop_application_role = function() {

    var localctx = new Drop_application_roleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, TSqlParser.RULE_drop_application_role);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1395;
        this.match(TSqlParser.DROP);
        this.state = 1396;
        this.match(TSqlParser.APPLICATION);
        this.state = 1397;
        this.match(TSqlParser.ROLE);
        this.state = 1398;
        localctx.rolename = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_assemblyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_assembly;
    this.assembly_name = null; // IdContext
    return this;
}

Alter_assemblyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_assemblyContext.prototype.constructor = Alter_assemblyContext;

Alter_assemblyContext.prototype.alter_assembly_start = function() {
    return this.getTypedRuleContext(Alter_assembly_startContext,0);
};

Alter_assemblyContext.prototype.alter_assembly_clause = function() {
    return this.getTypedRuleContext(Alter_assembly_clauseContext,0);
};

Alter_assemblyContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Alter_assemblyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_assembly(this);
	}
};

Alter_assemblyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_assembly(this);
	}
};




TSqlParser.Alter_assemblyContext = Alter_assemblyContext;

TSqlParser.prototype.alter_assembly = function() {

    var localctx = new Alter_assemblyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, TSqlParser.RULE_alter_assembly);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1400;
        this.alter_assembly_start();
        this.state = 1401;
        localctx.assembly_name = this.id();
        this.state = 1402;
        this.alter_assembly_clause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_assembly_startContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_assembly_start;
    return this;
}

Alter_assembly_startContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_assembly_startContext.prototype.constructor = Alter_assembly_startContext;

Alter_assembly_startContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_assembly_startContext.prototype.ASSEMBLY = function() {
    return this.getToken(TSqlParser.ASSEMBLY, 0);
};

Alter_assembly_startContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_assembly_start(this);
	}
};

Alter_assembly_startContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_assembly_start(this);
	}
};




TSqlParser.Alter_assembly_startContext = Alter_assembly_startContext;

TSqlParser.prototype.alter_assembly_start = function() {

    var localctx = new Alter_assembly_startContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, TSqlParser.RULE_alter_assembly_start);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1404;
        this.match(TSqlParser.ALTER);
        this.state = 1405;
        this.match(TSqlParser.ASSEMBLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_assembly_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_assembly_clause;
    return this;
}

Alter_assembly_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_assembly_clauseContext.prototype.constructor = Alter_assembly_clauseContext;

Alter_assembly_clauseContext.prototype.alter_assembly_from_clause = function() {
    return this.getTypedRuleContext(Alter_assembly_from_clauseContext,0);
};

Alter_assembly_clauseContext.prototype.alter_assembly_with_clause = function() {
    return this.getTypedRuleContext(Alter_assembly_with_clauseContext,0);
};

Alter_assembly_clauseContext.prototype.alter_assembly_drop_clause = function() {
    return this.getTypedRuleContext(Alter_assembly_drop_clauseContext,0);
};

Alter_assembly_clauseContext.prototype.alter_assembly_add_clause = function() {
    return this.getTypedRuleContext(Alter_assembly_add_clauseContext,0);
};

Alter_assembly_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_assembly_clause(this);
	}
};

Alter_assembly_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_assembly_clause(this);
	}
};




TSqlParser.Alter_assembly_clauseContext = Alter_assembly_clauseContext;

TSqlParser.prototype.alter_assembly_clause = function() {

    var localctx = new Alter_assembly_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, TSqlParser.RULE_alter_assembly_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1408;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.FROM) {
            this.state = 1407;
            this.alter_assembly_from_clause();
        }

        this.state = 1411;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        if(la_===1) {
            this.state = 1410;
            this.alter_assembly_with_clause();

        }
        this.state = 1414;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        if(la_===1) {
            this.state = 1413;
            this.alter_assembly_drop_clause();

        }
        this.state = 1417;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.ADD) {
            this.state = 1416;
            this.alter_assembly_add_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_assembly_from_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_assembly_from_clause;
    return this;
}

Alter_assembly_from_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_assembly_from_clauseContext.prototype.constructor = Alter_assembly_from_clauseContext;

Alter_assembly_from_clauseContext.prototype.alter_assembly_from_clause_start = function() {
    return this.getTypedRuleContext(Alter_assembly_from_clause_startContext,0);
};

Alter_assembly_from_clauseContext.prototype.client_assembly_specifier = function() {
    return this.getTypedRuleContext(Client_assembly_specifierContext,0);
};

Alter_assembly_from_clauseContext.prototype.alter_assembly_file_bits = function() {
    return this.getTypedRuleContext(Alter_assembly_file_bitsContext,0);
};

Alter_assembly_from_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_assembly_from_clause(this);
	}
};

Alter_assembly_from_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_assembly_from_clause(this);
	}
};




TSqlParser.Alter_assembly_from_clauseContext = Alter_assembly_from_clauseContext;

TSqlParser.prototype.alter_assembly_from_clause = function() {

    var localctx = new Alter_assembly_from_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, TSqlParser.RULE_alter_assembly_from_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1419;
        this.alter_assembly_from_clause_start();
        this.state = 1422;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.DOUBLE_BACK_SLASH:
        case TSqlParser.DISK_DRIVE:
        case TSqlParser.STRING:
            this.state = 1420;
            this.client_assembly_specifier();
            break;
        case TSqlParser.AS:
            this.state = 1421;
            this.alter_assembly_file_bits();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_assembly_from_clause_startContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_assembly_from_clause_start;
    return this;
}

Alter_assembly_from_clause_startContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_assembly_from_clause_startContext.prototype.constructor = Alter_assembly_from_clause_startContext;

Alter_assembly_from_clause_startContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Alter_assembly_from_clause_startContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_assembly_from_clause_start(this);
	}
};

Alter_assembly_from_clause_startContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_assembly_from_clause_start(this);
	}
};




TSqlParser.Alter_assembly_from_clause_startContext = Alter_assembly_from_clause_startContext;

TSqlParser.prototype.alter_assembly_from_clause_start = function() {

    var localctx = new Alter_assembly_from_clause_startContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, TSqlParser.RULE_alter_assembly_from_clause_start);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1424;
        this.match(TSqlParser.FROM);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_assembly_drop_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_assembly_drop_clause;
    return this;
}

Alter_assembly_drop_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_assembly_drop_clauseContext.prototype.constructor = Alter_assembly_drop_clauseContext;

Alter_assembly_drop_clauseContext.prototype.alter_assembly_drop = function() {
    return this.getTypedRuleContext(Alter_assembly_dropContext,0);
};

Alter_assembly_drop_clauseContext.prototype.alter_assembly_drop_multiple_files = function() {
    return this.getTypedRuleContext(Alter_assembly_drop_multiple_filesContext,0);
};

Alter_assembly_drop_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_assembly_drop_clause(this);
	}
};

Alter_assembly_drop_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_assembly_drop_clause(this);
	}
};




TSqlParser.Alter_assembly_drop_clauseContext = Alter_assembly_drop_clauseContext;

TSqlParser.prototype.alter_assembly_drop_clause = function() {

    var localctx = new Alter_assembly_drop_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, TSqlParser.RULE_alter_assembly_drop_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1426;
        this.alter_assembly_drop();
        this.state = 1427;
        this.alter_assembly_drop_multiple_files();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_assembly_drop_multiple_filesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_assembly_drop_multiple_files;
    return this;
}

Alter_assembly_drop_multiple_filesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_assembly_drop_multiple_filesContext.prototype.constructor = Alter_assembly_drop_multiple_filesContext;

Alter_assembly_drop_multiple_filesContext.prototype.ALL = function() {
    return this.getToken(TSqlParser.ALL, 0);
};

Alter_assembly_drop_multiple_filesContext.prototype.multiple_local_files = function() {
    return this.getTypedRuleContext(Multiple_local_filesContext,0);
};

Alter_assembly_drop_multiple_filesContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_assembly_drop_multiple_files(this);
	}
};

Alter_assembly_drop_multiple_filesContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_assembly_drop_multiple_files(this);
	}
};




TSqlParser.Alter_assembly_drop_multiple_filesContext = Alter_assembly_drop_multiple_filesContext;

TSqlParser.prototype.alter_assembly_drop_multiple_files = function() {

    var localctx = new Alter_assembly_drop_multiple_filesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, TSqlParser.RULE_alter_assembly_drop_multiple_files);
    try {
        this.state = 1431;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.ALL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1429;
            this.match(TSqlParser.ALL);
            break;
        case TSqlParser.DISK_DRIVE:
        case TSqlParser.SINGLE_QUOTE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1430;
            this.multiple_local_files();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_assembly_dropContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_assembly_drop;
    return this;
}

Alter_assembly_dropContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_assembly_dropContext.prototype.constructor = Alter_assembly_dropContext;

Alter_assembly_dropContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Alter_assembly_dropContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_assembly_drop(this);
	}
};

Alter_assembly_dropContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_assembly_drop(this);
	}
};




TSqlParser.Alter_assembly_dropContext = Alter_assembly_dropContext;

TSqlParser.prototype.alter_assembly_drop = function() {

    var localctx = new Alter_assembly_dropContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, TSqlParser.RULE_alter_assembly_drop);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1433;
        this.match(TSqlParser.DROP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_assembly_add_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_assembly_add_clause;
    return this;
}

Alter_assembly_add_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_assembly_add_clauseContext.prototype.constructor = Alter_assembly_add_clauseContext;

Alter_assembly_add_clauseContext.prototype.alter_asssembly_add_clause_start = function() {
    return this.getTypedRuleContext(Alter_asssembly_add_clause_startContext,0);
};

Alter_assembly_add_clauseContext.prototype.alter_assembly_client_file_clause = function() {
    return this.getTypedRuleContext(Alter_assembly_client_file_clauseContext,0);
};

Alter_assembly_add_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_assembly_add_clause(this);
	}
};

Alter_assembly_add_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_assembly_add_clause(this);
	}
};




TSqlParser.Alter_assembly_add_clauseContext = Alter_assembly_add_clauseContext;

TSqlParser.prototype.alter_assembly_add_clause = function() {

    var localctx = new Alter_assembly_add_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, TSqlParser.RULE_alter_assembly_add_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1435;
        this.alter_asssembly_add_clause_start();
        this.state = 1436;
        this.alter_assembly_client_file_clause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_asssembly_add_clause_startContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_asssembly_add_clause_start;
    return this;
}

Alter_asssembly_add_clause_startContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_asssembly_add_clause_startContext.prototype.constructor = Alter_asssembly_add_clause_startContext;

Alter_asssembly_add_clause_startContext.prototype.ADD = function() {
    return this.getToken(TSqlParser.ADD, 0);
};

Alter_asssembly_add_clause_startContext.prototype.FILE = function() {
    return this.getToken(TSqlParser.FILE, 0);
};

Alter_asssembly_add_clause_startContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Alter_asssembly_add_clause_startContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_asssembly_add_clause_start(this);
	}
};

Alter_asssembly_add_clause_startContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_asssembly_add_clause_start(this);
	}
};




TSqlParser.Alter_asssembly_add_clause_startContext = Alter_asssembly_add_clause_startContext;

TSqlParser.prototype.alter_asssembly_add_clause_start = function() {

    var localctx = new Alter_asssembly_add_clause_startContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, TSqlParser.RULE_alter_asssembly_add_clause_start);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1438;
        this.match(TSqlParser.ADD);
        this.state = 1439;
        this.match(TSqlParser.FILE);
        this.state = 1440;
        this.match(TSqlParser.FROM);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_assembly_client_file_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_assembly_client_file_clause;
    return this;
}

Alter_assembly_client_file_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_assembly_client_file_clauseContext.prototype.constructor = Alter_assembly_client_file_clauseContext;

Alter_assembly_client_file_clauseContext.prototype.alter_assembly_file_name = function() {
    return this.getTypedRuleContext(Alter_assembly_file_nameContext,0);
};

Alter_assembly_client_file_clauseContext.prototype.alter_assembly_as = function() {
    return this.getTypedRuleContext(Alter_assembly_asContext,0);
};

Alter_assembly_client_file_clauseContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Alter_assembly_client_file_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_assembly_client_file_clause(this);
	}
};

Alter_assembly_client_file_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_assembly_client_file_clause(this);
	}
};




TSqlParser.Alter_assembly_client_file_clauseContext = Alter_assembly_client_file_clauseContext;

TSqlParser.prototype.alter_assembly_client_file_clause = function() {

    var localctx = new Alter_assembly_client_file_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, TSqlParser.RULE_alter_assembly_client_file_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1442;
        this.alter_assembly_file_name();
        this.state = 1446;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AS) {
            this.state = 1443;
            this.alter_assembly_as();
            this.state = 1444;
            this.id();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_assembly_file_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_assembly_file_name;
    return this;
}

Alter_assembly_file_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_assembly_file_nameContext.prototype.constructor = Alter_assembly_file_nameContext;

Alter_assembly_file_nameContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Alter_assembly_file_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_assembly_file_name(this);
	}
};

Alter_assembly_file_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_assembly_file_name(this);
	}
};




TSqlParser.Alter_assembly_file_nameContext = Alter_assembly_file_nameContext;

TSqlParser.prototype.alter_assembly_file_name = function() {

    var localctx = new Alter_assembly_file_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, TSqlParser.RULE_alter_assembly_file_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1448;
        this.match(TSqlParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_assembly_file_bitsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_assembly_file_bits;
    return this;
}

Alter_assembly_file_bitsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_assembly_file_bitsContext.prototype.constructor = Alter_assembly_file_bitsContext;

Alter_assembly_file_bitsContext.prototype.alter_assembly_as = function() {
    return this.getTypedRuleContext(Alter_assembly_asContext,0);
};

Alter_assembly_file_bitsContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Alter_assembly_file_bitsContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_assembly_file_bits(this);
	}
};

Alter_assembly_file_bitsContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_assembly_file_bits(this);
	}
};




TSqlParser.Alter_assembly_file_bitsContext = Alter_assembly_file_bitsContext;

TSqlParser.prototype.alter_assembly_file_bits = function() {

    var localctx = new Alter_assembly_file_bitsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, TSqlParser.RULE_alter_assembly_file_bits);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1450;
        this.alter_assembly_as();
        this.state = 1451;
        this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_assembly_asContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_assembly_as;
    return this;
}

Alter_assembly_asContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_assembly_asContext.prototype.constructor = Alter_assembly_asContext;

Alter_assembly_asContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Alter_assembly_asContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_assembly_as(this);
	}
};

Alter_assembly_asContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_assembly_as(this);
	}
};




TSqlParser.Alter_assembly_asContext = Alter_assembly_asContext;

TSqlParser.prototype.alter_assembly_as = function() {

    var localctx = new Alter_assembly_asContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, TSqlParser.RULE_alter_assembly_as);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1453;
        this.match(TSqlParser.AS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_assembly_with_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_assembly_with_clause;
    return this;
}

Alter_assembly_with_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_assembly_with_clauseContext.prototype.constructor = Alter_assembly_with_clauseContext;

Alter_assembly_with_clauseContext.prototype.alter_assembly_with = function() {
    return this.getTypedRuleContext(Alter_assembly_withContext,0);
};

Alter_assembly_with_clauseContext.prototype.assembly_option = function() {
    return this.getTypedRuleContext(Assembly_optionContext,0);
};

Alter_assembly_with_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_assembly_with_clause(this);
	}
};

Alter_assembly_with_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_assembly_with_clause(this);
	}
};




TSqlParser.Alter_assembly_with_clauseContext = Alter_assembly_with_clauseContext;

TSqlParser.prototype.alter_assembly_with_clause = function() {

    var localctx = new Alter_assembly_with_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, TSqlParser.RULE_alter_assembly_with_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1455;
        this.alter_assembly_with();
        this.state = 1456;
        this.assembly_option(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_assembly_withContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_assembly_with;
    return this;
}

Alter_assembly_withContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_assembly_withContext.prototype.constructor = Alter_assembly_withContext;

Alter_assembly_withContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_assembly_withContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_assembly_with(this);
	}
};

Alter_assembly_withContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_assembly_with(this);
	}
};




TSqlParser.Alter_assembly_withContext = Alter_assembly_withContext;

TSqlParser.prototype.alter_assembly_with = function() {

    var localctx = new Alter_assembly_withContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, TSqlParser.RULE_alter_assembly_with);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1458;
        this.match(TSqlParser.WITH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Client_assembly_specifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_client_assembly_specifier;
    return this;
}

Client_assembly_specifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Client_assembly_specifierContext.prototype.constructor = Client_assembly_specifierContext;

Client_assembly_specifierContext.prototype.network_file_share = function() {
    return this.getTypedRuleContext(Network_file_shareContext,0);
};

Client_assembly_specifierContext.prototype.local_file = function() {
    return this.getTypedRuleContext(Local_fileContext,0);
};

Client_assembly_specifierContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Client_assembly_specifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterClient_assembly_specifier(this);
	}
};

Client_assembly_specifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitClient_assembly_specifier(this);
	}
};




TSqlParser.Client_assembly_specifierContext = Client_assembly_specifierContext;

TSqlParser.prototype.client_assembly_specifier = function() {

    var localctx = new Client_assembly_specifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, TSqlParser.RULE_client_assembly_specifier);
    try {
        this.state = 1463;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.DOUBLE_BACK_SLASH:
            this.enterOuterAlt(localctx, 1);
            this.state = 1460;
            this.network_file_share();
            break;
        case TSqlParser.DISK_DRIVE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1461;
            this.local_file();
            break;
        case TSqlParser.STRING:
            this.enterOuterAlt(localctx, 3);
            this.state = 1462;
            this.match(TSqlParser.STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assembly_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_assembly_option;
    return this;
}

Assembly_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assembly_optionContext.prototype.constructor = Assembly_optionContext;

Assembly_optionContext.prototype.PERMISSION_SET = function() {
    return this.getToken(TSqlParser.PERMISSION_SET, 0);
};

Assembly_optionContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Assembly_optionContext.prototype.SAFE = function() {
    return this.getToken(TSqlParser.SAFE, 0);
};

Assembly_optionContext.prototype.EXTERNAL_ACCESS = function() {
    return this.getToken(TSqlParser.EXTERNAL_ACCESS, 0);
};

Assembly_optionContext.prototype.UNSAFE = function() {
    return this.getToken(TSqlParser.UNSAFE, 0);
};

Assembly_optionContext.prototype.VISIBILITY = function() {
    return this.getToken(TSqlParser.VISIBILITY, 0);
};

Assembly_optionContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Assembly_optionContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Assembly_optionContext.prototype.UNCHECKED = function() {
    return this.getToken(TSqlParser.UNCHECKED, 0);
};

Assembly_optionContext.prototype.DATA = function() {
    return this.getToken(TSqlParser.DATA, 0);
};

Assembly_optionContext.prototype.assembly_option = function() {
    return this.getTypedRuleContext(Assembly_optionContext,0);
};

Assembly_optionContext.prototype.COMMA = function() {
    return this.getToken(TSqlParser.COMMA, 0);
};

Assembly_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAssembly_option(this);
	}
};

Assembly_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAssembly_option(this);
	}
};



TSqlParser.prototype.assembly_option = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Assembly_optionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 92;
    this.enterRecursionRule(localctx, 92, TSqlParser.RULE_assembly_option, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1474;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.PERMISSION_SET:
            this.state = 1466;
            this.match(TSqlParser.PERMISSION_SET);
            this.state = 1467;
            this.match(TSqlParser.EQUAL);
            this.state = 1468;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.EXTERNAL_ACCESS || _la===TSqlParser.SAFE || _la===TSqlParser.UNSAFE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case TSqlParser.VISIBILITY:
            this.state = 1469;
            this.match(TSqlParser.VISIBILITY);
            this.state = 1470;
            this.match(TSqlParser.EQUAL);
            this.state = 1471;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case TSqlParser.UNCHECKED:
            this.state = 1472;
            this.match(TSqlParser.UNCHECKED);
            this.state = 1473;
            this.match(TSqlParser.DATA);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1480;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Assembly_optionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, TSqlParser.RULE_assembly_option);
                this.state = 1476;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1477;
                this.match(TSqlParser.COMMA); 
            }
            this.state = 1482;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Network_file_shareContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_network_file_share;
    return this;
}

Network_file_shareContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Network_file_shareContext.prototype.constructor = Network_file_shareContext;

Network_file_shareContext.prototype.network_file_start = function() {
    return this.getTypedRuleContext(Network_file_startContext,0);
};

Network_file_shareContext.prototype.network_computer = function() {
    return this.getTypedRuleContext(Network_computerContext,0);
};

Network_file_shareContext.prototype.file_path = function() {
    return this.getTypedRuleContext(File_pathContext,0);
};

Network_file_shareContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterNetwork_file_share(this);
	}
};

Network_file_shareContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitNetwork_file_share(this);
	}
};




TSqlParser.Network_file_shareContext = Network_file_shareContext;

TSqlParser.prototype.network_file_share = function() {

    var localctx = new Network_file_shareContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, TSqlParser.RULE_network_file_share);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1483;
        this.network_file_start();
        this.state = 1484;
        this.network_computer();
        this.state = 1485;
        this.file_path();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Network_computerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_network_computer;
    this.computer_name = null; // IdContext
    return this;
}

Network_computerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Network_computerContext.prototype.constructor = Network_computerContext;

Network_computerContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Network_computerContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterNetwork_computer(this);
	}
};

Network_computerContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitNetwork_computer(this);
	}
};




TSqlParser.Network_computerContext = Network_computerContext;

TSqlParser.prototype.network_computer = function() {

    var localctx = new Network_computerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, TSqlParser.RULE_network_computer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1487;
        localctx.computer_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Network_file_startContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_network_file_start;
    return this;
}

Network_file_startContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Network_file_startContext.prototype.constructor = Network_file_startContext;

Network_file_startContext.prototype.DOUBLE_BACK_SLASH = function() {
    return this.getToken(TSqlParser.DOUBLE_BACK_SLASH, 0);
};

Network_file_startContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterNetwork_file_start(this);
	}
};

Network_file_startContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitNetwork_file_start(this);
	}
};




TSqlParser.Network_file_startContext = Network_file_startContext;

TSqlParser.prototype.network_file_start = function() {

    var localctx = new Network_file_startContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, TSqlParser.RULE_network_file_start);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1489;
        this.match(TSqlParser.DOUBLE_BACK_SLASH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function File_pathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_file_path;
    return this;
}

File_pathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_pathContext.prototype.constructor = File_pathContext;

File_pathContext.prototype.file_directory_path_separator = function() {
    return this.getTypedRuleContext(File_directory_path_separatorContext,0);
};

File_pathContext.prototype.file_path = function() {
    return this.getTypedRuleContext(File_pathContext,0);
};

File_pathContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

File_pathContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterFile_path(this);
	}
};

File_pathContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitFile_path(this);
	}
};




TSqlParser.File_pathContext = File_pathContext;

TSqlParser.prototype.file_path = function() {

    var localctx = new File_pathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, TSqlParser.RULE_file_path);
    try {
        this.state = 1495;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.BACKSLASH:
            this.enterOuterAlt(localctx, 1);
            this.state = 1491;
            this.file_directory_path_separator();
            this.state = 1492;
            this.file_path();
            break;
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 1494;
            this.id();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function File_directory_path_separatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_file_directory_path_separator;
    return this;
}

File_directory_path_separatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_directory_path_separatorContext.prototype.constructor = File_directory_path_separatorContext;


File_directory_path_separatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterFile_directory_path_separator(this);
	}
};

File_directory_path_separatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitFile_directory_path_separator(this);
	}
};




TSqlParser.File_directory_path_separatorContext = File_directory_path_separatorContext;

TSqlParser.prototype.file_directory_path_separator = function() {

    var localctx = new File_directory_path_separatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, TSqlParser.RULE_file_directory_path_separator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1497;
        this.match(TSqlParser.BACKSLASH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Local_fileContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_local_file;
    return this;
}

Local_fileContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Local_fileContext.prototype.constructor = Local_fileContext;

Local_fileContext.prototype.local_drive = function() {
    return this.getTypedRuleContext(Local_driveContext,0);
};

Local_fileContext.prototype.file_path = function() {
    return this.getTypedRuleContext(File_pathContext,0);
};

Local_fileContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterLocal_file(this);
	}
};

Local_fileContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitLocal_file(this);
	}
};




TSqlParser.Local_fileContext = Local_fileContext;

TSqlParser.prototype.local_file = function() {

    var localctx = new Local_fileContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, TSqlParser.RULE_local_file);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1499;
        this.local_drive();
        this.state = 1500;
        this.file_path();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Local_driveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_local_drive;
    return this;
}

Local_driveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Local_driveContext.prototype.constructor = Local_driveContext;

Local_driveContext.prototype.DISK_DRIVE = function() {
    return this.getToken(TSqlParser.DISK_DRIVE, 0);
};

Local_driveContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterLocal_drive(this);
	}
};

Local_driveContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitLocal_drive(this);
	}
};




TSqlParser.Local_driveContext = Local_driveContext;

TSqlParser.prototype.local_drive = function() {

    var localctx = new Local_driveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, TSqlParser.RULE_local_drive);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1502;
        this.match(TSqlParser.DISK_DRIVE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multiple_local_filesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_multiple_local_files;
    return this;
}

Multiple_local_filesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multiple_local_filesContext.prototype.constructor = Multiple_local_filesContext;

Multiple_local_filesContext.prototype.multiple_local_file_start = function() {
    return this.getTypedRuleContext(Multiple_local_file_startContext,0);
};

Multiple_local_filesContext.prototype.local_file = function() {
    return this.getTypedRuleContext(Local_fileContext,0);
};

Multiple_local_filesContext.prototype.SINGLE_QUOTE = function() {
    return this.getToken(TSqlParser.SINGLE_QUOTE, 0);
};

Multiple_local_filesContext.prototype.COMMA = function() {
    return this.getToken(TSqlParser.COMMA, 0);
};

Multiple_local_filesContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterMultiple_local_files(this);
	}
};

Multiple_local_filesContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitMultiple_local_files(this);
	}
};




TSqlParser.Multiple_local_filesContext = Multiple_local_filesContext;

TSqlParser.prototype.multiple_local_files = function() {

    var localctx = new Multiple_local_filesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, TSqlParser.RULE_multiple_local_files);
    try {
        this.state = 1510;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.SINGLE_QUOTE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1504;
            this.multiple_local_file_start();
            this.state = 1505;
            this.local_file();
            this.state = 1506;
            this.match(TSqlParser.SINGLE_QUOTE);
            this.state = 1507;
            this.match(TSqlParser.COMMA);
            break;
        case TSqlParser.DISK_DRIVE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1509;
            this.local_file();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multiple_local_file_startContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_multiple_local_file_start;
    return this;
}

Multiple_local_file_startContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multiple_local_file_startContext.prototype.constructor = Multiple_local_file_startContext;

Multiple_local_file_startContext.prototype.SINGLE_QUOTE = function() {
    return this.getToken(TSqlParser.SINGLE_QUOTE, 0);
};

Multiple_local_file_startContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterMultiple_local_file_start(this);
	}
};

Multiple_local_file_startContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitMultiple_local_file_start(this);
	}
};




TSqlParser.Multiple_local_file_startContext = Multiple_local_file_startContext;

TSqlParser.prototype.multiple_local_file_start = function() {

    var localctx = new Multiple_local_file_startContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, TSqlParser.RULE_multiple_local_file_start);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1512;
        this.match(TSqlParser.SINGLE_QUOTE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_assemblyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_assembly;
    this.assembly_name = null; // IdContext
    this.owner_name = null; // IdContext
    return this;
}

Create_assemblyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_assemblyContext.prototype.constructor = Create_assemblyContext;

Create_assemblyContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_assemblyContext.prototype.ASSEMBLY = function() {
    return this.getToken(TSqlParser.ASSEMBLY, 0);
};

Create_assemblyContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Create_assemblyContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_assemblyContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Create_assemblyContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_assemblyContext.prototype.PERMISSION_SET = function() {
    return this.getToken(TSqlParser.PERMISSION_SET, 0);
};

Create_assemblyContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Create_assemblyContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Create_assemblyContext.prototype.BINARY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.BINARY);
    } else {
        return this.getToken(TSqlParser.BINARY, i);
    }
};


Create_assemblyContext.prototype.SAFE = function() {
    return this.getToken(TSqlParser.SAFE, 0);
};

Create_assemblyContext.prototype.EXTERNAL_ACCESS = function() {
    return this.getToken(TSqlParser.EXTERNAL_ACCESS, 0);
};

Create_assemblyContext.prototype.UNSAFE = function() {
    return this.getToken(TSqlParser.UNSAFE, 0);
};

Create_assemblyContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Create_assemblyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_assembly(this);
	}
};

Create_assemblyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_assembly(this);
	}
};




TSqlParser.Create_assemblyContext = Create_assemblyContext;

TSqlParser.prototype.create_assembly = function() {

    var localctx = new Create_assemblyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, TSqlParser.RULE_create_assembly);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1514;
        this.match(TSqlParser.CREATE);
        this.state = 1515;
        this.match(TSqlParser.ASSEMBLY);
        this.state = 1516;
        localctx.assembly_name = this.id();
        this.state = 1519;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AUTHORIZATION) {
            this.state = 1517;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 1518;
            localctx.owner_name = this.id();
        }

        this.state = 1521;
        this.match(TSqlParser.FROM);
        this.state = 1526; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1523;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 1522;
                this.match(TSqlParser.COMMA);
            }

            this.state = 1525;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.STRING || _la===TSqlParser.BINARY)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1528; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 781)) & ~0x1f) == 0 && ((1 << (_la - 781)) & ((1 << (TSqlParser.STRING - 781)) | (1 << (TSqlParser.BINARY - 781)) | (1 << (TSqlParser.COMMA - 781)))) !== 0));
        this.state = 1534;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        if(la_===1) {
            this.state = 1530;
            this.match(TSqlParser.WITH);
            this.state = 1531;
            this.match(TSqlParser.PERMISSION_SET);
            this.state = 1532;
            this.match(TSqlParser.EQUAL);
            this.state = 1533;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.EXTERNAL_ACCESS || _la===TSqlParser.SAFE || _la===TSqlParser.UNSAFE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_assemblyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_assembly;
    this.assembly_name = null; // IdContext
    return this;
}

Drop_assemblyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_assemblyContext.prototype.constructor = Drop_assemblyContext;

Drop_assemblyContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_assemblyContext.prototype.ASSEMBLY = function() {
    return this.getToken(TSqlParser.ASSEMBLY, 0);
};

Drop_assemblyContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

Drop_assemblyContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

Drop_assemblyContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Drop_assemblyContext.prototype.NO = function() {
    return this.getToken(TSqlParser.NO, 0);
};

Drop_assemblyContext.prototype.DEPENDENTS = function() {
    return this.getToken(TSqlParser.DEPENDENTS, 0);
};

Drop_assemblyContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Drop_assemblyContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Drop_assemblyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_assembly(this);
	}
};

Drop_assemblyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_assembly(this);
	}
};




TSqlParser.Drop_assemblyContext = Drop_assemblyContext;

TSqlParser.prototype.drop_assembly = function() {

    var localctx = new Drop_assemblyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, TSqlParser.RULE_drop_assembly);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1536;
        this.match(TSqlParser.DROP);
        this.state = 1537;
        this.match(TSqlParser.ASSEMBLY);
        this.state = 1540;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.IF) {
            this.state = 1538;
            this.match(TSqlParser.IF);
            this.state = 1539;
            this.match(TSqlParser.EXISTS);
        }

        this.state = 1546; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1543;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		if(_la===TSqlParser.COMMA) {
        		    this.state = 1542;
        		    this.match(TSqlParser.COMMA);
        		}

        		this.state = 1545;
        		localctx.assembly_name = this.id();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1548; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,72, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 1553;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        if(la_===1) {
            this.state = 1550;
            this.match(TSqlParser.WITH);
            this.state = 1551;
            this.match(TSqlParser.NO);
            this.state = 1552;
            this.match(TSqlParser.DEPENDENTS);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_asymmetric_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_asymmetric_key;
    this.Asym_Key_Name = null; // IdContext
    return this;
}

Alter_asymmetric_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_asymmetric_keyContext.prototype.constructor = Alter_asymmetric_keyContext;

Alter_asymmetric_keyContext.prototype.alter_asymmetric_key_start = function() {
    return this.getTypedRuleContext(Alter_asymmetric_key_startContext,0);
};

Alter_asymmetric_keyContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Alter_asymmetric_keyContext.prototype.asymmetric_key_option = function() {
    return this.getTypedRuleContext(Asymmetric_key_optionContext,0);
};

Alter_asymmetric_keyContext.prototype.REMOVE = function() {
    return this.getToken(TSqlParser.REMOVE, 0);
};

Alter_asymmetric_keyContext.prototype.PRIVATE = function() {
    return this.getToken(TSqlParser.PRIVATE, 0);
};

Alter_asymmetric_keyContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Alter_asymmetric_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_asymmetric_key(this);
	}
};

Alter_asymmetric_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_asymmetric_key(this);
	}
};




TSqlParser.Alter_asymmetric_keyContext = Alter_asymmetric_keyContext;

TSqlParser.prototype.alter_asymmetric_key = function() {

    var localctx = new Alter_asymmetric_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, TSqlParser.RULE_alter_asymmetric_key);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1555;
        this.alter_asymmetric_key_start();
        this.state = 1556;
        localctx.Asym_Key_Name = this.id();
        this.state = 1561;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.WITH:
            this.state = 1557;
            this.asymmetric_key_option();
            break;
        case TSqlParser.REMOVE:
            this.state = 1558;
            this.match(TSqlParser.REMOVE);
            this.state = 1559;
            this.match(TSqlParser.PRIVATE);
            this.state = 1560;
            this.match(TSqlParser.KEY);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_asymmetric_key_startContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_asymmetric_key_start;
    return this;
}

Alter_asymmetric_key_startContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_asymmetric_key_startContext.prototype.constructor = Alter_asymmetric_key_startContext;

Alter_asymmetric_key_startContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_asymmetric_key_startContext.prototype.ASYMMETRIC = function() {
    return this.getToken(TSqlParser.ASYMMETRIC, 0);
};

Alter_asymmetric_key_startContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Alter_asymmetric_key_startContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_asymmetric_key_start(this);
	}
};

Alter_asymmetric_key_startContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_asymmetric_key_start(this);
	}
};




TSqlParser.Alter_asymmetric_key_startContext = Alter_asymmetric_key_startContext;

TSqlParser.prototype.alter_asymmetric_key_start = function() {

    var localctx = new Alter_asymmetric_key_startContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, TSqlParser.RULE_alter_asymmetric_key_start);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1563;
        this.match(TSqlParser.ALTER);
        this.state = 1564;
        this.match(TSqlParser.ASYMMETRIC);
        this.state = 1565;
        this.match(TSqlParser.KEY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Asymmetric_key_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_asymmetric_key_option;
    return this;
}

Asymmetric_key_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Asymmetric_key_optionContext.prototype.constructor = Asymmetric_key_optionContext;

Asymmetric_key_optionContext.prototype.asymmetric_key_option_start = function() {
    return this.getTypedRuleContext(Asymmetric_key_option_startContext,0);
};

Asymmetric_key_optionContext.prototype.asymmetric_key_password_change_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Asymmetric_key_password_change_optionContext);
    } else {
        return this.getTypedRuleContext(Asymmetric_key_password_change_optionContext,i);
    }
};

Asymmetric_key_optionContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Asymmetric_key_optionContext.prototype.COMMA = function() {
    return this.getToken(TSqlParser.COMMA, 0);
};

Asymmetric_key_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAsymmetric_key_option(this);
	}
};

Asymmetric_key_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAsymmetric_key_option(this);
	}
};




TSqlParser.Asymmetric_key_optionContext = Asymmetric_key_optionContext;

TSqlParser.prototype.asymmetric_key_option = function() {

    var localctx = new Asymmetric_key_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, TSqlParser.RULE_asymmetric_key_option);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1567;
        this.asymmetric_key_option_start();
        this.state = 1568;
        this.asymmetric_key_password_change_option();
        this.state = 1571;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 1569;
            this.match(TSqlParser.COMMA);
            this.state = 1570;
            this.asymmetric_key_password_change_option();
        }

        this.state = 1573;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Asymmetric_key_option_startContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_asymmetric_key_option_start;
    return this;
}

Asymmetric_key_option_startContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Asymmetric_key_option_startContext.prototype.constructor = Asymmetric_key_option_startContext;

Asymmetric_key_option_startContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Asymmetric_key_option_startContext.prototype.PRIVATE = function() {
    return this.getToken(TSqlParser.PRIVATE, 0);
};

Asymmetric_key_option_startContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Asymmetric_key_option_startContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Asymmetric_key_option_startContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAsymmetric_key_option_start(this);
	}
};

Asymmetric_key_option_startContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAsymmetric_key_option_start(this);
	}
};




TSqlParser.Asymmetric_key_option_startContext = Asymmetric_key_option_startContext;

TSqlParser.prototype.asymmetric_key_option_start = function() {

    var localctx = new Asymmetric_key_option_startContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, TSqlParser.RULE_asymmetric_key_option_start);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1575;
        this.match(TSqlParser.WITH);
        this.state = 1576;
        this.match(TSqlParser.PRIVATE);
        this.state = 1577;
        this.match(TSqlParser.KEY);
        this.state = 1578;
        this.match(TSqlParser.LR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Asymmetric_key_password_change_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_asymmetric_key_password_change_option;
    return this;
}

Asymmetric_key_password_change_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Asymmetric_key_password_change_optionContext.prototype.constructor = Asymmetric_key_password_change_optionContext;

Asymmetric_key_password_change_optionContext.prototype.DECRYPTION = function() {
    return this.getToken(TSqlParser.DECRYPTION, 0);
};

Asymmetric_key_password_change_optionContext.prototype.BY = function() {
    return this.getToken(TSqlParser.BY, 0);
};

Asymmetric_key_password_change_optionContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Asymmetric_key_password_change_optionContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Asymmetric_key_password_change_optionContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Asymmetric_key_password_change_optionContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Asymmetric_key_password_change_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAsymmetric_key_password_change_option(this);
	}
};

Asymmetric_key_password_change_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAsymmetric_key_password_change_option(this);
	}
};




TSqlParser.Asymmetric_key_password_change_optionContext = Asymmetric_key_password_change_optionContext;

TSqlParser.prototype.asymmetric_key_password_change_option = function() {

    var localctx = new Asymmetric_key_password_change_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, TSqlParser.RULE_asymmetric_key_password_change_option);
    try {
        this.state = 1590;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.DECRYPTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 1580;
            this.match(TSqlParser.DECRYPTION);
            this.state = 1581;
            this.match(TSqlParser.BY);
            this.state = 1582;
            this.match(TSqlParser.PASSWORD);
            this.state = 1583;
            this.match(TSqlParser.EQUAL);
            this.state = 1584;
            this.match(TSqlParser.STRING);
            break;
        case TSqlParser.ENCRYPTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 1585;
            this.match(TSqlParser.ENCRYPTION);
            this.state = 1586;
            this.match(TSqlParser.BY);
            this.state = 1587;
            this.match(TSqlParser.PASSWORD);
            this.state = 1588;
            this.match(TSqlParser.EQUAL);
            this.state = 1589;
            this.match(TSqlParser.STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_asymmetric_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_asymmetric_key;
    this.Asym_Key_Nam = null; // IdContext
    this.database_principal_name = null; // IdContext
    this.Assembly_Name = null; // IdContext
    this.Provider_Name = null; // IdContext
    this.provider_key_name = null; // Token
    this.asymmetric_key_password = null; // Token
    return this;
}

Create_asymmetric_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_asymmetric_keyContext.prototype.constructor = Create_asymmetric_keyContext;

Create_asymmetric_keyContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_asymmetric_keyContext.prototype.ASYMMETRIC = function() {
    return this.getToken(TSqlParser.ASYMMETRIC, 0);
};

Create_asymmetric_keyContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Create_asymmetric_keyContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_asymmetric_keyContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Create_asymmetric_keyContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Create_asymmetric_keyContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_asymmetric_keyContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Create_asymmetric_keyContext.prototype.BY = function() {
    return this.getToken(TSqlParser.BY, 0);
};

Create_asymmetric_keyContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Create_asymmetric_keyContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Create_asymmetric_keyContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Create_asymmetric_keyContext.prototype.FILE = function() {
    return this.getToken(TSqlParser.FILE, 0);
};

Create_asymmetric_keyContext.prototype.EXECUTABLE_FILE = function() {
    return this.getToken(TSqlParser.EXECUTABLE_FILE, 0);
};

Create_asymmetric_keyContext.prototype.ASSEMBLY = function() {
    return this.getToken(TSqlParser.ASSEMBLY, 0);
};

Create_asymmetric_keyContext.prototype.PROVIDER = function() {
    return this.getToken(TSqlParser.PROVIDER, 0);
};

Create_asymmetric_keyContext.prototype.ALGORITHM = function() {
    return this.getToken(TSqlParser.ALGORITHM, 0);
};

Create_asymmetric_keyContext.prototype.PROVIDER_KEY_NAME = function() {
    return this.getToken(TSqlParser.PROVIDER_KEY_NAME, 0);
};

Create_asymmetric_keyContext.prototype.CREATION_DISPOSITION = function() {
    return this.getToken(TSqlParser.CREATION_DISPOSITION, 0);
};

Create_asymmetric_keyContext.prototype.RSA_4096 = function() {
    return this.getToken(TSqlParser.RSA_4096, 0);
};

Create_asymmetric_keyContext.prototype.RSA_3072 = function() {
    return this.getToken(TSqlParser.RSA_3072, 0);
};

Create_asymmetric_keyContext.prototype.RSA_2048 = function() {
    return this.getToken(TSqlParser.RSA_2048, 0);
};

Create_asymmetric_keyContext.prototype.RSA_1024 = function() {
    return this.getToken(TSqlParser.RSA_1024, 0);
};

Create_asymmetric_keyContext.prototype.RSA_512 = function() {
    return this.getToken(TSqlParser.RSA_512, 0);
};

Create_asymmetric_keyContext.prototype.CREATE_NEW = function() {
    return this.getToken(TSqlParser.CREATE_NEW, 0);
};

Create_asymmetric_keyContext.prototype.OPEN_EXISTING = function() {
    return this.getToken(TSqlParser.OPEN_EXISTING, 0);
};

Create_asymmetric_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_asymmetric_key(this);
	}
};

Create_asymmetric_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_asymmetric_key(this);
	}
};




TSqlParser.Create_asymmetric_keyContext = Create_asymmetric_keyContext;

TSqlParser.prototype.create_asymmetric_key = function() {

    var localctx = new Create_asymmetric_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, TSqlParser.RULE_create_asymmetric_key);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1592;
        this.match(TSqlParser.CREATE);
        this.state = 1593;
        this.match(TSqlParser.ASYMMETRIC);
        this.state = 1594;
        this.match(TSqlParser.KEY);
        this.state = 1595;
        localctx.Asym_Key_Nam = this.id();
        this.state = 1598;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AUTHORIZATION) {
            this.state = 1596;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 1597;
            localctx.database_principal_name = this.id();
        }

        this.state = 1613;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.FROM) {
            this.state = 1600;
            this.match(TSqlParser.FROM);
            this.state = 1611;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.FILE:
                this.state = 1601;
                this.match(TSqlParser.FILE);
                this.state = 1602;
                this.match(TSqlParser.EQUAL);
                this.state = 1603;
                this.match(TSqlParser.STRING);
                break;
            case TSqlParser.EXECUTABLE_FILE:
                this.state = 1604;
                this.match(TSqlParser.EXECUTABLE_FILE);
                this.state = 1605;
                this.match(TSqlParser.EQUAL);
                this.state = 1606;
                this.match(TSqlParser.STRING);
                break;
            case TSqlParser.ASSEMBLY:
                this.state = 1607;
                this.match(TSqlParser.ASSEMBLY);
                this.state = 1608;
                localctx.Assembly_Name = this.id();
                break;
            case TSqlParser.PROVIDER:
                this.state = 1609;
                this.match(TSqlParser.PROVIDER);
                this.state = 1610;
                localctx.Provider_Name = this.id();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
        }

        this.state = 1627;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
        if(la_===1) {
            this.state = 1615;
            this.match(TSqlParser.WITH);
            this.state = 1625;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.ALGORITHM:
                this.state = 1616;
                this.match(TSqlParser.ALGORITHM);
                this.state = 1617;
                this.match(TSqlParser.EQUAL);
                this.state = 1618;
                _la = this._input.LA(1);
                if(!(((((_la - 289)) & ~0x1f) == 0 && ((1 << (_la - 289)) & ((1 << (TSqlParser.RSA_512 - 289)) | (1 << (TSqlParser.RSA_1024 - 289)) | (1 << (TSqlParser.RSA_2048 - 289)) | (1 << (TSqlParser.RSA_3072 - 289)) | (1 << (TSqlParser.RSA_4096 - 289)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            case TSqlParser.PROVIDER_KEY_NAME:
                this.state = 1619;
                this.match(TSqlParser.PROVIDER_KEY_NAME);
                this.state = 1620;
                this.match(TSqlParser.EQUAL);
                this.state = 1621;
                localctx.provider_key_name = this.match(TSqlParser.STRING);
                break;
            case TSqlParser.CREATION_DISPOSITION:
                this.state = 1622;
                this.match(TSqlParser.CREATION_DISPOSITION);
                this.state = 1623;
                this.match(TSqlParser.EQUAL);
                this.state = 1624;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.CREATE_NEW || _la===TSqlParser.OPEN_EXISTING)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

        }
        this.state = 1634;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        if(la_===1) {
            this.state = 1629;
            this.match(TSqlParser.ENCRYPTION);
            this.state = 1630;
            this.match(TSqlParser.BY);
            this.state = 1631;
            this.match(TSqlParser.PASSWORD);
            this.state = 1632;
            this.match(TSqlParser.EQUAL);
            this.state = 1633;
            localctx.asymmetric_key_password = this.match(TSqlParser.STRING);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_asymmetric_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_asymmetric_key;
    this.key_name = null; // IdContext
    return this;
}

Drop_asymmetric_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_asymmetric_keyContext.prototype.constructor = Drop_asymmetric_keyContext;

Drop_asymmetric_keyContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_asymmetric_keyContext.prototype.ASYMMETRIC = function() {
    return this.getToken(TSqlParser.ASYMMETRIC, 0);
};

Drop_asymmetric_keyContext.prototype.KEY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.KEY);
    } else {
        return this.getToken(TSqlParser.KEY, i);
    }
};


Drop_asymmetric_keyContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_asymmetric_keyContext.prototype.REMOVE = function() {
    return this.getToken(TSqlParser.REMOVE, 0);
};

Drop_asymmetric_keyContext.prototype.PROVIDER = function() {
    return this.getToken(TSqlParser.PROVIDER, 0);
};

Drop_asymmetric_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_asymmetric_key(this);
	}
};

Drop_asymmetric_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_asymmetric_key(this);
	}
};




TSqlParser.Drop_asymmetric_keyContext = Drop_asymmetric_keyContext;

TSqlParser.prototype.drop_asymmetric_key = function() {

    var localctx = new Drop_asymmetric_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, TSqlParser.RULE_drop_asymmetric_key);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1636;
        this.match(TSqlParser.DROP);
        this.state = 1637;
        this.match(TSqlParser.ASYMMETRIC);
        this.state = 1638;
        this.match(TSqlParser.KEY);
        this.state = 1639;
        localctx.key_name = this.id();
        this.state = 1643;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.REMOVE) {
            this.state = 1640;
            this.match(TSqlParser.REMOVE);
            this.state = 1641;
            this.match(TSqlParser.PROVIDER);
            this.state = 1642;
            this.match(TSqlParser.KEY);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_authorizationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_authorization;
    this.entity = null; // Entity_nameContext
    return this;
}

Alter_authorizationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_authorizationContext.prototype.constructor = Alter_authorizationContext;

Alter_authorizationContext.prototype.alter_authorization_start = function() {
    return this.getTypedRuleContext(Alter_authorization_startContext,0);
};

Alter_authorizationContext.prototype.entity_to = function() {
    return this.getTypedRuleContext(Entity_toContext,0);
};

Alter_authorizationContext.prototype.authorization_grantee = function() {
    return this.getTypedRuleContext(Authorization_granteeContext,0);
};

Alter_authorizationContext.prototype.entity_name = function() {
    return this.getTypedRuleContext(Entity_nameContext,0);
};

Alter_authorizationContext.prototype.class_type = function() {
    return this.getTypedRuleContext(Class_typeContext,0);
};

Alter_authorizationContext.prototype.colon_colon = function() {
    return this.getTypedRuleContext(Colon_colonContext,0);
};

Alter_authorizationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_authorization(this);
	}
};

Alter_authorizationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_authorization(this);
	}
};




TSqlParser.Alter_authorizationContext = Alter_authorizationContext;

TSqlParser.prototype.alter_authorization = function() {

    var localctx = new Alter_authorizationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, TSqlParser.RULE_alter_authorization);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1645;
        this.alter_authorization_start();
        this.state = 1649;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        if(la_===1) {
            this.state = 1646;
            this.class_type();
            this.state = 1647;
            this.colon_colon();

        }
        this.state = 1651;
        localctx.entity = this.entity_name();
        this.state = 1652;
        this.entity_to();
        this.state = 1653;
        this.authorization_grantee();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Authorization_granteeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_authorization_grantee;
    this.principal_name = null; // IdContext
    return this;
}

Authorization_granteeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Authorization_granteeContext.prototype.constructor = Authorization_granteeContext;

Authorization_granteeContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Authorization_granteeContext.prototype.SCHEMA = function() {
    return this.getToken(TSqlParser.SCHEMA, 0);
};

Authorization_granteeContext.prototype.OWNER = function() {
    return this.getToken(TSqlParser.OWNER, 0);
};

Authorization_granteeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAuthorization_grantee(this);
	}
};

Authorization_granteeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAuthorization_grantee(this);
	}
};




TSqlParser.Authorization_granteeContext = Authorization_granteeContext;

TSqlParser.prototype.authorization_grantee = function() {

    var localctx = new Authorization_granteeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, TSqlParser.RULE_authorization_grantee);
    try {
        this.state = 1658;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 1655;
            localctx.principal_name = this.id();
            break;
        case TSqlParser.SCHEMA:
            this.enterOuterAlt(localctx, 2);
            this.state = 1656;
            this.match(TSqlParser.SCHEMA);
            this.state = 1657;
            this.match(TSqlParser.OWNER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Entity_toContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_entity_to;
    return this;
}

Entity_toContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_toContext.prototype.constructor = Entity_toContext;

Entity_toContext.prototype.TO = function() {
    return this.getToken(TSqlParser.TO, 0);
};

Entity_toContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterEntity_to(this);
	}
};

Entity_toContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitEntity_to(this);
	}
};




TSqlParser.Entity_toContext = Entity_toContext;

TSqlParser.prototype.entity_to = function() {

    var localctx = new Entity_toContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, TSqlParser.RULE_entity_to);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1660;
        this.match(TSqlParser.TO);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Colon_colonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_colon_colon;
    return this;
}

Colon_colonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Colon_colonContext.prototype.constructor = Colon_colonContext;

Colon_colonContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COLON);
    } else {
        return this.getToken(TSqlParser.COLON, i);
    }
};


Colon_colonContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterColon_colon(this);
	}
};

Colon_colonContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitColon_colon(this);
	}
};




TSqlParser.Colon_colonContext = Colon_colonContext;

TSqlParser.prototype.colon_colon = function() {

    var localctx = new Colon_colonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, TSqlParser.RULE_colon_colon);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1662;
        this.match(TSqlParser.COLON);
        this.state = 1663;
        this.match(TSqlParser.COLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_authorization_startContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_authorization_start;
    return this;
}

Alter_authorization_startContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_authorization_startContext.prototype.constructor = Alter_authorization_startContext;

Alter_authorization_startContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_authorization_startContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Alter_authorization_startContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Alter_authorization_startContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_authorization_start(this);
	}
};

Alter_authorization_startContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_authorization_start(this);
	}
};




TSqlParser.Alter_authorization_startContext = Alter_authorization_startContext;

TSqlParser.prototype.alter_authorization_start = function() {

    var localctx = new Alter_authorization_startContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, TSqlParser.RULE_alter_authorization_start);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1665;
        this.match(TSqlParser.ALTER);
        this.state = 1666;
        this.match(TSqlParser.AUTHORIZATION);
        this.state = 1667;
        this.match(TSqlParser.ON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_authorization_for_sql_databaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_authorization_for_sql_database;
    this.entity = null; // Entity_nameContext
    return this;
}

Alter_authorization_for_sql_databaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_authorization_for_sql_databaseContext.prototype.constructor = Alter_authorization_for_sql_databaseContext;

Alter_authorization_for_sql_databaseContext.prototype.alter_authorization_start = function() {
    return this.getTypedRuleContext(Alter_authorization_startContext,0);
};

Alter_authorization_for_sql_databaseContext.prototype.entity_to = function() {
    return this.getTypedRuleContext(Entity_toContext,0);
};

Alter_authorization_for_sql_databaseContext.prototype.authorization_grantee = function() {
    return this.getTypedRuleContext(Authorization_granteeContext,0);
};

Alter_authorization_for_sql_databaseContext.prototype.entity_name = function() {
    return this.getTypedRuleContext(Entity_nameContext,0);
};

Alter_authorization_for_sql_databaseContext.prototype.class_type_for_sql_database = function() {
    return this.getTypedRuleContext(Class_type_for_sql_databaseContext,0);
};

Alter_authorization_for_sql_databaseContext.prototype.colon_colon = function() {
    return this.getTypedRuleContext(Colon_colonContext,0);
};

Alter_authorization_for_sql_databaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_authorization_for_sql_database(this);
	}
};

Alter_authorization_for_sql_databaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_authorization_for_sql_database(this);
	}
};




TSqlParser.Alter_authorization_for_sql_databaseContext = Alter_authorization_for_sql_databaseContext;

TSqlParser.prototype.alter_authorization_for_sql_database = function() {

    var localctx = new Alter_authorization_for_sql_databaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, TSqlParser.RULE_alter_authorization_for_sql_database);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1669;
        this.alter_authorization_start();
        this.state = 1673;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
        if(la_===1) {
            this.state = 1670;
            this.class_type_for_sql_database();
            this.state = 1671;
            this.colon_colon();

        }
        this.state = 1675;
        localctx.entity = this.entity_name();
        this.state = 1676;
        this.entity_to();
        this.state = 1677;
        this.authorization_grantee();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_authorization_for_azure_dwContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_authorization_for_azure_dw;
    this.entity = null; // Entity_name_for_azure_dwContext
    return this;
}

Alter_authorization_for_azure_dwContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_authorization_for_azure_dwContext.prototype.constructor = Alter_authorization_for_azure_dwContext;

Alter_authorization_for_azure_dwContext.prototype.alter_authorization_start = function() {
    return this.getTypedRuleContext(Alter_authorization_startContext,0);
};

Alter_authorization_for_azure_dwContext.prototype.entity_to = function() {
    return this.getTypedRuleContext(Entity_toContext,0);
};

Alter_authorization_for_azure_dwContext.prototype.authorization_grantee = function() {
    return this.getTypedRuleContext(Authorization_granteeContext,0);
};

Alter_authorization_for_azure_dwContext.prototype.entity_name_for_azure_dw = function() {
    return this.getTypedRuleContext(Entity_name_for_azure_dwContext,0);
};

Alter_authorization_for_azure_dwContext.prototype.class_type_for_azure_dw = function() {
    return this.getTypedRuleContext(Class_type_for_azure_dwContext,0);
};

Alter_authorization_for_azure_dwContext.prototype.colon_colon = function() {
    return this.getTypedRuleContext(Colon_colonContext,0);
};

Alter_authorization_for_azure_dwContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_authorization_for_azure_dw(this);
	}
};

Alter_authorization_for_azure_dwContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_authorization_for_azure_dw(this);
	}
};




TSqlParser.Alter_authorization_for_azure_dwContext = Alter_authorization_for_azure_dwContext;

TSqlParser.prototype.alter_authorization_for_azure_dw = function() {

    var localctx = new Alter_authorization_for_azure_dwContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, TSqlParser.RULE_alter_authorization_for_azure_dw);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1679;
        this.alter_authorization_start();
        this.state = 1683;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.SCHEMA || _la===TSqlParser.OBJECT) {
            this.state = 1680;
            this.class_type_for_azure_dw();
            this.state = 1681;
            this.colon_colon();
        }

        this.state = 1685;
        localctx.entity = this.entity_name_for_azure_dw();
        this.state = 1686;
        this.entity_to();
        this.state = 1687;
        this.authorization_grantee();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_authorization_for_parallel_dwContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_authorization_for_parallel_dw;
    this.entity = null; // Entity_name_for_parallel_dwContext
    return this;
}

Alter_authorization_for_parallel_dwContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_authorization_for_parallel_dwContext.prototype.constructor = Alter_authorization_for_parallel_dwContext;

Alter_authorization_for_parallel_dwContext.prototype.alter_authorization_start = function() {
    return this.getTypedRuleContext(Alter_authorization_startContext,0);
};

Alter_authorization_for_parallel_dwContext.prototype.entity_to = function() {
    return this.getTypedRuleContext(Entity_toContext,0);
};

Alter_authorization_for_parallel_dwContext.prototype.authorization_grantee = function() {
    return this.getTypedRuleContext(Authorization_granteeContext,0);
};

Alter_authorization_for_parallel_dwContext.prototype.entity_name_for_parallel_dw = function() {
    return this.getTypedRuleContext(Entity_name_for_parallel_dwContext,0);
};

Alter_authorization_for_parallel_dwContext.prototype.class_type_for_parallel_dw = function() {
    return this.getTypedRuleContext(Class_type_for_parallel_dwContext,0);
};

Alter_authorization_for_parallel_dwContext.prototype.colon_colon = function() {
    return this.getTypedRuleContext(Colon_colonContext,0);
};

Alter_authorization_for_parallel_dwContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_authorization_for_parallel_dw(this);
	}
};

Alter_authorization_for_parallel_dwContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_authorization_for_parallel_dw(this);
	}
};




TSqlParser.Alter_authorization_for_parallel_dwContext = Alter_authorization_for_parallel_dwContext;

TSqlParser.prototype.alter_authorization_for_parallel_dw = function() {

    var localctx = new Alter_authorization_for_parallel_dwContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, TSqlParser.RULE_alter_authorization_for_parallel_dw);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1689;
        this.alter_authorization_start();
        this.state = 1693;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.DATABASE || _la===TSqlParser.SCHEMA || _la===TSqlParser.OBJECT) {
            this.state = 1690;
            this.class_type_for_parallel_dw();
            this.state = 1691;
            this.colon_colon();
        }

        this.state = 1695;
        localctx.entity = this.entity_name_for_parallel_dw();
        this.state = 1696;
        this.entity_to();
        this.state = 1697;
        this.authorization_grantee();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Class_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_class_type;
    return this;
}

Class_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_typeContext.prototype.constructor = Class_typeContext;

Class_typeContext.prototype.OBJECT = function() {
    return this.getToken(TSqlParser.OBJECT, 0);
};

Class_typeContext.prototype.ASSEMBLY = function() {
    return this.getToken(TSqlParser.ASSEMBLY, 0);
};

Class_typeContext.prototype.ASYMMETRIC = function() {
    return this.getToken(TSqlParser.ASYMMETRIC, 0);
};

Class_typeContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Class_typeContext.prototype.AVAILABILITY = function() {
    return this.getToken(TSqlParser.AVAILABILITY, 0);
};

Class_typeContext.prototype.GROUP = function() {
    return this.getToken(TSqlParser.GROUP, 0);
};

Class_typeContext.prototype.CERTIFICATE = function() {
    return this.getToken(TSqlParser.CERTIFICATE, 0);
};

Class_typeContext.prototype.CONTRACT = function() {
    return this.getToken(TSqlParser.CONTRACT, 0);
};

Class_typeContext.prototype.TYPE = function() {
    return this.getToken(TSqlParser.TYPE, 0);
};

Class_typeContext.prototype.DATABASE = function() {
    return this.getToken(TSqlParser.DATABASE, 0);
};

Class_typeContext.prototype.ENDPOINT = function() {
    return this.getToken(TSqlParser.ENDPOINT, 0);
};

Class_typeContext.prototype.FULLTEXT = function() {
    return this.getToken(TSqlParser.FULLTEXT, 0);
};

Class_typeContext.prototype.CATALOG = function() {
    return this.getToken(TSqlParser.CATALOG, 0);
};

Class_typeContext.prototype.STOPLIST = function() {
    return this.getToken(TSqlParser.STOPLIST, 0);
};

Class_typeContext.prototype.MESSAGE = function() {
    return this.getToken(TSqlParser.MESSAGE, 0);
};

Class_typeContext.prototype.REMOTE = function() {
    return this.getToken(TSqlParser.REMOTE, 0);
};

Class_typeContext.prototype.SERVICE = function() {
    return this.getToken(TSqlParser.SERVICE, 0);
};

Class_typeContext.prototype.BINDING = function() {
    return this.getToken(TSqlParser.BINDING, 0);
};

Class_typeContext.prototype.ROLE = function() {
    return this.getToken(TSqlParser.ROLE, 0);
};

Class_typeContext.prototype.ROUTE = function() {
    return this.getToken(TSqlParser.ROUTE, 0);
};

Class_typeContext.prototype.SCHEMA = function() {
    return this.getToken(TSqlParser.SCHEMA, 0);
};

Class_typeContext.prototype.SEARCH = function() {
    return this.getToken(TSqlParser.SEARCH, 0);
};

Class_typeContext.prototype.PROPERTY = function() {
    return this.getToken(TSqlParser.PROPERTY, 0);
};

Class_typeContext.prototype.LIST = function() {
    return this.getToken(TSqlParser.LIST, 0);
};

Class_typeContext.prototype.SERVER = function() {
    return this.getToken(TSqlParser.SERVER, 0);
};

Class_typeContext.prototype.SYMMETRIC = function() {
    return this.getToken(TSqlParser.SYMMETRIC, 0);
};

Class_typeContext.prototype.XML = function() {
    return this.getToken(TSqlParser.XML, 0);
};

Class_typeContext.prototype.COLLECTION = function() {
    return this.getToken(TSqlParser.COLLECTION, 0);
};

Class_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterClass_type(this);
	}
};

Class_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitClass_type(this);
	}
};




TSqlParser.Class_typeContext = Class_typeContext;

TSqlParser.prototype.class_type = function() {

    var localctx = new Class_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, TSqlParser.RULE_class_type);
    try {
        this.state = 1733;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1699;
            this.match(TSqlParser.OBJECT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1700;
            this.match(TSqlParser.ASSEMBLY);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1701;
            this.match(TSqlParser.ASYMMETRIC);
            this.state = 1702;
            this.match(TSqlParser.KEY);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1703;
            this.match(TSqlParser.AVAILABILITY);
            this.state = 1704;
            this.match(TSqlParser.GROUP);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1705;
            this.match(TSqlParser.CERTIFICATE);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1706;
            this.match(TSqlParser.CONTRACT);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1707;
            this.match(TSqlParser.TYPE);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1708;
            this.match(TSqlParser.DATABASE);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1709;
            this.match(TSqlParser.ENDPOINT);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1710;
            this.match(TSqlParser.FULLTEXT);
            this.state = 1711;
            this.match(TSqlParser.CATALOG);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1712;
            this.match(TSqlParser.FULLTEXT);
            this.state = 1713;
            this.match(TSqlParser.STOPLIST);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1714;
            this.match(TSqlParser.MESSAGE);
            this.state = 1715;
            this.match(TSqlParser.TYPE);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 1716;
            this.match(TSqlParser.REMOTE);
            this.state = 1717;
            this.match(TSqlParser.SERVICE);
            this.state = 1718;
            this.match(TSqlParser.BINDING);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 1719;
            this.match(TSqlParser.ROLE);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 1720;
            this.match(TSqlParser.ROUTE);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 1721;
            this.match(TSqlParser.SCHEMA);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 1722;
            this.match(TSqlParser.SEARCH);
            this.state = 1723;
            this.match(TSqlParser.PROPERTY);
            this.state = 1724;
            this.match(TSqlParser.LIST);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 1725;
            this.match(TSqlParser.SERVER);
            this.state = 1726;
            this.match(TSqlParser.ROLE);
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 1727;
            this.match(TSqlParser.SERVICE);
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 1728;
            this.match(TSqlParser.SYMMETRIC);
            this.state = 1729;
            this.match(TSqlParser.KEY);
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 1730;
            this.match(TSqlParser.XML);
            this.state = 1731;
            this.match(TSqlParser.SCHEMA);
            this.state = 1732;
            this.match(TSqlParser.COLLECTION);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Class_type_for_sql_databaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_class_type_for_sql_database;
    return this;
}

Class_type_for_sql_databaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_type_for_sql_databaseContext.prototype.constructor = Class_type_for_sql_databaseContext;

Class_type_for_sql_databaseContext.prototype.OBJECT = function() {
    return this.getToken(TSqlParser.OBJECT, 0);
};

Class_type_for_sql_databaseContext.prototype.ASSEMBLY = function() {
    return this.getToken(TSqlParser.ASSEMBLY, 0);
};

Class_type_for_sql_databaseContext.prototype.ASYMMETRIC = function() {
    return this.getToken(TSqlParser.ASYMMETRIC, 0);
};

Class_type_for_sql_databaseContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Class_type_for_sql_databaseContext.prototype.CERTIFICATE = function() {
    return this.getToken(TSqlParser.CERTIFICATE, 0);
};

Class_type_for_sql_databaseContext.prototype.TYPE = function() {
    return this.getToken(TSqlParser.TYPE, 0);
};

Class_type_for_sql_databaseContext.prototype.DATABASE = function() {
    return this.getToken(TSqlParser.DATABASE, 0);
};

Class_type_for_sql_databaseContext.prototype.FULLTEXT = function() {
    return this.getToken(TSqlParser.FULLTEXT, 0);
};

Class_type_for_sql_databaseContext.prototype.CATALOG = function() {
    return this.getToken(TSqlParser.CATALOG, 0);
};

Class_type_for_sql_databaseContext.prototype.STOPLIST = function() {
    return this.getToken(TSqlParser.STOPLIST, 0);
};

Class_type_for_sql_databaseContext.prototype.ROLE = function() {
    return this.getToken(TSqlParser.ROLE, 0);
};

Class_type_for_sql_databaseContext.prototype.SCHEMA = function() {
    return this.getToken(TSqlParser.SCHEMA, 0);
};

Class_type_for_sql_databaseContext.prototype.SEARCH = function() {
    return this.getToken(TSqlParser.SEARCH, 0);
};

Class_type_for_sql_databaseContext.prototype.PROPERTY = function() {
    return this.getToken(TSqlParser.PROPERTY, 0);
};

Class_type_for_sql_databaseContext.prototype.LIST = function() {
    return this.getToken(TSqlParser.LIST, 0);
};

Class_type_for_sql_databaseContext.prototype.SYMMETRIC = function() {
    return this.getToken(TSqlParser.SYMMETRIC, 0);
};

Class_type_for_sql_databaseContext.prototype.XML = function() {
    return this.getToken(TSqlParser.XML, 0);
};

Class_type_for_sql_databaseContext.prototype.COLLECTION = function() {
    return this.getToken(TSqlParser.COLLECTION, 0);
};

Class_type_for_sql_databaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterClass_type_for_sql_database(this);
	}
};

Class_type_for_sql_databaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitClass_type_for_sql_database(this);
	}
};




TSqlParser.Class_type_for_sql_databaseContext = Class_type_for_sql_databaseContext;

TSqlParser.prototype.class_type_for_sql_database = function() {

    var localctx = new Class_type_for_sql_databaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, TSqlParser.RULE_class_type_for_sql_database);
    try {
        this.state = 1756;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1735;
            this.match(TSqlParser.OBJECT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1736;
            this.match(TSqlParser.ASSEMBLY);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1737;
            this.match(TSqlParser.ASYMMETRIC);
            this.state = 1738;
            this.match(TSqlParser.KEY);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1739;
            this.match(TSqlParser.CERTIFICATE);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1740;
            this.match(TSqlParser.TYPE);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1741;
            this.match(TSqlParser.DATABASE);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1742;
            this.match(TSqlParser.FULLTEXT);
            this.state = 1743;
            this.match(TSqlParser.CATALOG);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1744;
            this.match(TSqlParser.FULLTEXT);
            this.state = 1745;
            this.match(TSqlParser.STOPLIST);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1746;
            this.match(TSqlParser.ROLE);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1747;
            this.match(TSqlParser.SCHEMA);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1748;
            this.match(TSqlParser.SEARCH);
            this.state = 1749;
            this.match(TSqlParser.PROPERTY);
            this.state = 1750;
            this.match(TSqlParser.LIST);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1751;
            this.match(TSqlParser.SYMMETRIC);
            this.state = 1752;
            this.match(TSqlParser.KEY);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 1753;
            this.match(TSqlParser.XML);
            this.state = 1754;
            this.match(TSqlParser.SCHEMA);
            this.state = 1755;
            this.match(TSqlParser.COLLECTION);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Class_type_for_azure_dwContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_class_type_for_azure_dw;
    return this;
}

Class_type_for_azure_dwContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_type_for_azure_dwContext.prototype.constructor = Class_type_for_azure_dwContext;

Class_type_for_azure_dwContext.prototype.SCHEMA = function() {
    return this.getToken(TSqlParser.SCHEMA, 0);
};

Class_type_for_azure_dwContext.prototype.OBJECT = function() {
    return this.getToken(TSqlParser.OBJECT, 0);
};

Class_type_for_azure_dwContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterClass_type_for_azure_dw(this);
	}
};

Class_type_for_azure_dwContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitClass_type_for_azure_dw(this);
	}
};




TSqlParser.Class_type_for_azure_dwContext = Class_type_for_azure_dwContext;

TSqlParser.prototype.class_type_for_azure_dw = function() {

    var localctx = new Class_type_for_azure_dwContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, TSqlParser.RULE_class_type_for_azure_dw);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1758;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.SCHEMA || _la===TSqlParser.OBJECT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Class_type_for_parallel_dwContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_class_type_for_parallel_dw;
    return this;
}

Class_type_for_parallel_dwContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Class_type_for_parallel_dwContext.prototype.constructor = Class_type_for_parallel_dwContext;

Class_type_for_parallel_dwContext.prototype.DATABASE = function() {
    return this.getToken(TSqlParser.DATABASE, 0);
};

Class_type_for_parallel_dwContext.prototype.SCHEMA = function() {
    return this.getToken(TSqlParser.SCHEMA, 0);
};

Class_type_for_parallel_dwContext.prototype.OBJECT = function() {
    return this.getToken(TSqlParser.OBJECT, 0);
};

Class_type_for_parallel_dwContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterClass_type_for_parallel_dw(this);
	}
};

Class_type_for_parallel_dwContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitClass_type_for_parallel_dw(this);
	}
};




TSqlParser.Class_type_for_parallel_dwContext = Class_type_for_parallel_dwContext;

TSqlParser.prototype.class_type_for_parallel_dw = function() {

    var localctx = new Class_type_for_parallel_dwContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, TSqlParser.RULE_class_type_for_parallel_dw);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1760;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.DATABASE || _la===TSqlParser.SCHEMA || _la===TSqlParser.OBJECT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_availability_groupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_availability_group;
    this.group_name = null; // IdContext
    return this;
}

Drop_availability_groupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_availability_groupContext.prototype.constructor = Drop_availability_groupContext;

Drop_availability_groupContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_availability_groupContext.prototype.AVAILABILITY = function() {
    return this.getToken(TSqlParser.AVAILABILITY, 0);
};

Drop_availability_groupContext.prototype.GROUP = function() {
    return this.getToken(TSqlParser.GROUP, 0);
};

Drop_availability_groupContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_availability_groupContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_availability_group(this);
	}
};

Drop_availability_groupContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_availability_group(this);
	}
};




TSqlParser.Drop_availability_groupContext = Drop_availability_groupContext;

TSqlParser.prototype.drop_availability_group = function() {

    var localctx = new Drop_availability_groupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, TSqlParser.RULE_drop_availability_group);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1762;
        this.match(TSqlParser.DROP);
        this.state = 1763;
        this.match(TSqlParser.AVAILABILITY);
        this.state = 1764;
        this.match(TSqlParser.GROUP);
        this.state = 1765;
        localctx.group_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_availability_groupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_availability_group;
    return this;
}

Alter_availability_groupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_availability_groupContext.prototype.constructor = Alter_availability_groupContext;

Alter_availability_groupContext.prototype.alter_availability_group_start = function() {
    return this.getTypedRuleContext(Alter_availability_group_startContext,0);
};

Alter_availability_groupContext.prototype.alter_availability_group_options = function() {
    return this.getTypedRuleContext(Alter_availability_group_optionsContext,0);
};

Alter_availability_groupContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_availability_group(this);
	}
};

Alter_availability_groupContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_availability_group(this);
	}
};




TSqlParser.Alter_availability_groupContext = Alter_availability_groupContext;

TSqlParser.prototype.alter_availability_group = function() {

    var localctx = new Alter_availability_groupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, TSqlParser.RULE_alter_availability_group);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1767;
        this.alter_availability_group_start();
        this.state = 1768;
        this.alter_availability_group_options();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_availability_group_startContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_availability_group_start;
    this.group_name = null; // IdContext
    return this;
}

Alter_availability_group_startContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_availability_group_startContext.prototype.constructor = Alter_availability_group_startContext;

Alter_availability_group_startContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_availability_group_startContext.prototype.AVAILABILITY = function() {
    return this.getToken(TSqlParser.AVAILABILITY, 0);
};

Alter_availability_group_startContext.prototype.GROUP = function() {
    return this.getToken(TSqlParser.GROUP, 0);
};

Alter_availability_group_startContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Alter_availability_group_startContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_availability_group_start(this);
	}
};

Alter_availability_group_startContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_availability_group_start(this);
	}
};




TSqlParser.Alter_availability_group_startContext = Alter_availability_group_startContext;

TSqlParser.prototype.alter_availability_group_start = function() {

    var localctx = new Alter_availability_group_startContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, TSqlParser.RULE_alter_availability_group_start);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1770;
        this.match(TSqlParser.ALTER);
        this.state = 1771;
        this.match(TSqlParser.AVAILABILITY);
        this.state = 1772;
        this.match(TSqlParser.GROUP);
        this.state = 1773;
        localctx.group_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_availability_group_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_availability_group_options;
    this.milliseconds = null; // Token
    this.database_name = null; // IdContext
    this.server_instance = null; // Token
    this.session_timeout = null; // Token
    this.ag_name = null; // Token
    this.ag_name_modified = null; // Token
    this.listener_name = null; // Token
    return this;
}

Alter_availability_group_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_availability_group_optionsContext.prototype.constructor = Alter_availability_group_optionsContext;

Alter_availability_group_optionsContext.prototype.SET = function() {
    return this.getToken(TSqlParser.SET, 0);
};

Alter_availability_group_optionsContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LR_BRACKET);
    } else {
        return this.getToken(TSqlParser.LR_BRACKET, i);
    }
};


Alter_availability_group_optionsContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RR_BRACKET);
    } else {
        return this.getToken(TSqlParser.RR_BRACKET, i);
    }
};


Alter_availability_group_optionsContext.prototype.AUTOMATED_BACKUP_PREFERENCE = function() {
    return this.getToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0);
};

Alter_availability_group_optionsContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Alter_availability_group_optionsContext.prototype.FAILURE_CONDITION_LEVEL = function() {
    return this.getToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0);
};

Alter_availability_group_optionsContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Alter_availability_group_optionsContext.prototype.HEALTH_CHECK_TIMEOUT = function() {
    return this.getToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0);
};

Alter_availability_group_optionsContext.prototype.DB_FAILOVER = function() {
    return this.getToken(TSqlParser.DB_FAILOVER, 0);
};

Alter_availability_group_optionsContext.prototype.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT = function() {
    return this.getToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0);
};

Alter_availability_group_optionsContext.prototype.PRIMARY = function() {
    return this.getToken(TSqlParser.PRIMARY, 0);
};

Alter_availability_group_optionsContext.prototype.SECONDARY_ONLY = function() {
    return this.getToken(TSqlParser.SECONDARY_ONLY, 0);
};

Alter_availability_group_optionsContext.prototype.SECONDARY = function() {
    return this.getToken(TSqlParser.SECONDARY, 0);
};

Alter_availability_group_optionsContext.prototype.NONE = function() {
    return this.getToken(TSqlParser.NONE, 0);
};

Alter_availability_group_optionsContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Alter_availability_group_optionsContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Alter_availability_group_optionsContext.prototype.ADD = function() {
    return this.getToken(TSqlParser.ADD, 0);
};

Alter_availability_group_optionsContext.prototype.DATABASE = function() {
    return this.getToken(TSqlParser.DATABASE, 0);
};

Alter_availability_group_optionsContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Alter_availability_group_optionsContext.prototype.REMOVE = function() {
    return this.getToken(TSqlParser.REMOVE, 0);
};

Alter_availability_group_optionsContext.prototype.REPLICA = function() {
    return this.getToken(TSqlParser.REPLICA, 0);
};

Alter_availability_group_optionsContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Alter_availability_group_optionsContext.prototype.WITH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.WITH);
    } else {
        return this.getToken(TSqlParser.WITH, i);
    }
};


Alter_availability_group_optionsContext.prototype.ENDPOINT_URL = function() {
    return this.getToken(TSqlParser.ENDPOINT_URL, 0);
};

Alter_availability_group_optionsContext.prototype.AVAILABILITY_MODE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.AVAILABILITY_MODE);
    } else {
        return this.getToken(TSqlParser.AVAILABILITY_MODE, i);
    }
};


Alter_availability_group_optionsContext.prototype.FAILOVER_MODE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.FAILOVER_MODE);
    } else {
        return this.getToken(TSqlParser.FAILOVER_MODE, i);
    }
};


Alter_availability_group_optionsContext.prototype.SEEDING_MODE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SEEDING_MODE);
    } else {
        return this.getToken(TSqlParser.SEEDING_MODE, i);
    }
};


Alter_availability_group_optionsContext.prototype.BACKUP_PRIORITY = function() {
    return this.getToken(TSqlParser.BACKUP_PRIORITY, 0);
};

Alter_availability_group_optionsContext.prototype.PRIMARY_ROLE = function() {
    return this.getToken(TSqlParser.PRIMARY_ROLE, 0);
};

Alter_availability_group_optionsContext.prototype.ALLOW_CONNECTIONS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ALLOW_CONNECTIONS);
    } else {
        return this.getToken(TSqlParser.ALLOW_CONNECTIONS, i);
    }
};


Alter_availability_group_optionsContext.prototype.SECONDARY_ROLE = function() {
    return this.getToken(TSqlParser.SECONDARY_ROLE, 0);
};

Alter_availability_group_optionsContext.prototype.SYNCHRONOUS_COMMIT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SYNCHRONOUS_COMMIT);
    } else {
        return this.getToken(TSqlParser.SYNCHRONOUS_COMMIT, i);
    }
};


Alter_availability_group_optionsContext.prototype.ASYNCHRONOUS_COMMIT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ASYNCHRONOUS_COMMIT);
    } else {
        return this.getToken(TSqlParser.ASYNCHRONOUS_COMMIT, i);
    }
};


Alter_availability_group_optionsContext.prototype.AUTOMATIC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.AUTOMATIC);
    } else {
        return this.getToken(TSqlParser.AUTOMATIC, i);
    }
};


Alter_availability_group_optionsContext.prototype.MANUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MANUAL);
    } else {
        return this.getToken(TSqlParser.MANUAL, i);
    }
};


Alter_availability_group_optionsContext.prototype.READ_WRITE = function() {
    return this.getToken(TSqlParser.READ_WRITE, 0);
};

Alter_availability_group_optionsContext.prototype.ALL = function() {
    return this.getToken(TSqlParser.ALL, 0);
};

Alter_availability_group_optionsContext.prototype.READ_ONLY = function() {
    return this.getToken(TSqlParser.READ_ONLY, 0);
};

Alter_availability_group_optionsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Alter_availability_group_optionsContext.prototype.READ_ONLY_ROUTING_LIST = function() {
    return this.getToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0);
};

Alter_availability_group_optionsContext.prototype.NO = function() {
    return this.getToken(TSqlParser.NO, 0);
};

Alter_availability_group_optionsContext.prototype.SESSION_TIMEOUT = function() {
    return this.getToken(TSqlParser.SESSION_TIMEOUT, 0);
};

Alter_availability_group_optionsContext.prototype.MODIFY = function() {
    return this.getToken(TSqlParser.MODIFY, 0);
};

Alter_availability_group_optionsContext.prototype.JOIN = function() {
    return this.getToken(TSqlParser.JOIN, 0);
};

Alter_availability_group_optionsContext.prototype.AVAILABILITY = function() {
    return this.getToken(TSqlParser.AVAILABILITY, 0);
};

Alter_availability_group_optionsContext.prototype.GROUP = function() {
    return this.getToken(TSqlParser.GROUP, 0);
};

Alter_availability_group_optionsContext.prototype.LISTENER_URL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LISTENER_URL);
    } else {
        return this.getToken(TSqlParser.LISTENER_URL, i);
    }
};


Alter_availability_group_optionsContext.prototype.GRANT = function() {
    return this.getToken(TSqlParser.GRANT, 0);
};

Alter_availability_group_optionsContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Alter_availability_group_optionsContext.prototype.ANY = function() {
    return this.getToken(TSqlParser.ANY, 0);
};

Alter_availability_group_optionsContext.prototype.DENY = function() {
    return this.getToken(TSqlParser.DENY, 0);
};

Alter_availability_group_optionsContext.prototype.FAILOVER = function() {
    return this.getToken(TSqlParser.FAILOVER, 0);
};

Alter_availability_group_optionsContext.prototype.FORCE_FAILOVER_ALLOW_DATA_LOSS = function() {
    return this.getToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0);
};

Alter_availability_group_optionsContext.prototype.LISTENER = function() {
    return this.getToken(TSqlParser.LISTENER, 0);
};

Alter_availability_group_optionsContext.prototype.DHCP = function() {
    return this.getToken(TSqlParser.DHCP, 0);
};

Alter_availability_group_optionsContext.prototype.IP = function() {
    return this.getToken(TSqlParser.IP, 0);
};

Alter_availability_group_optionsContext.prototype.IPV4_ADDR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.IPV4_ADDR);
    } else {
        return this.getToken(TSqlParser.IPV4_ADDR, i);
    }
};


Alter_availability_group_optionsContext.prototype.PORT = function() {
    return this.getToken(TSqlParser.PORT, 0);
};

Alter_availability_group_optionsContext.prototype.IPV6_ADDR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.IPV6_ADDR);
    } else {
        return this.getToken(TSqlParser.IPV6_ADDR, i);
    }
};


Alter_availability_group_optionsContext.prototype.RESTART = function() {
    return this.getToken(TSqlParser.RESTART, 0);
};

Alter_availability_group_optionsContext.prototype.OFFLINE = function() {
    return this.getToken(TSqlParser.OFFLINE, 0);
};

Alter_availability_group_optionsContext.prototype.DTC_SUPPORT = function() {
    return this.getToken(TSqlParser.DTC_SUPPORT, 0);
};

Alter_availability_group_optionsContext.prototype.PER_DB = function() {
    return this.getToken(TSqlParser.PER_DB, 0);
};

Alter_availability_group_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_availability_group_options(this);
	}
};

Alter_availability_group_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_availability_group_options(this);
	}
};




TSqlParser.Alter_availability_group_optionsContext = Alter_availability_group_optionsContext;

TSqlParser.prototype.alter_availability_group_options = function() {

    var localctx = new Alter_availability_group_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, TSqlParser.RULE_alter_availability_group_options);
    var _la = 0; // Token type
    try {
        this.state = 2125;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1775;
            this.match(TSqlParser.SET);
            this.state = 1776;
            this.match(TSqlParser.LR_BRACKET);

            this.state = 1792;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.AUTOMATED_BACKUP_PREFERENCE:
                this.state = 1777;
                this.match(TSqlParser.AUTOMATED_BACKUP_PREFERENCE);
                this.state = 1778;
                this.match(TSqlParser.EQUAL);
                this.state = 1779;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.NONE || _la===TSqlParser.PRIMARY || _la===TSqlParser.SECONDARY || _la===TSqlParser.SECONDARY_ONLY)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            case TSqlParser.FAILURE_CONDITION_LEVEL:
                this.state = 1780;
                this.match(TSqlParser.FAILURE_CONDITION_LEVEL);
                this.state = 1781;
                this.match(TSqlParser.EQUAL);
                this.state = 1782;
                this.match(TSqlParser.DECIMAL);
                break;
            case TSqlParser.HEALTH_CHECK_TIMEOUT:
                this.state = 1783;
                this.match(TSqlParser.HEALTH_CHECK_TIMEOUT);
                this.state = 1784;
                this.match(TSqlParser.EQUAL);
                this.state = 1785;
                localctx.milliseconds = this.match(TSqlParser.DECIMAL);
                break;
            case TSqlParser.DB_FAILOVER:
                this.state = 1786;
                this.match(TSqlParser.DB_FAILOVER);
                this.state = 1787;
                this.match(TSqlParser.EQUAL);
                this.state = 1788;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            case TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
                this.state = 1789;
                this.match(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT);
                this.state = 1790;
                this.match(TSqlParser.EQUAL);
                this.state = 1791;
                this.match(TSqlParser.DECIMAL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1794;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1795;
            this.match(TSqlParser.ADD);
            this.state = 1796;
            this.match(TSqlParser.DATABASE);
            this.state = 1797;
            localctx.database_name = this.id();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1798;
            this.match(TSqlParser.REMOVE);
            this.state = 1799;
            this.match(TSqlParser.DATABASE);
            this.state = 1800;
            localctx.database_name = this.id();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1801;
            this.match(TSqlParser.ADD);
            this.state = 1802;
            this.match(TSqlParser.REPLICA);
            this.state = 1803;
            this.match(TSqlParser.ON);
            this.state = 1804;
            localctx.server_instance = this.match(TSqlParser.STRING);

            this.state = 1805;
            this.match(TSqlParser.WITH);
            this.state = 1806;
            this.match(TSqlParser.LR_BRACKET);

            this.state = 1810;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.ENDPOINT_URL) {
                this.state = 1807;
                this.match(TSqlParser.ENDPOINT_URL);
                this.state = 1808;
                this.match(TSqlParser.EQUAL);
                this.state = 1809;
                this.match(TSqlParser.STRING);
            }

            this.state = 1818;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
            if(la_===1) {
                this.state = 1813;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 1812;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 1815;
                this.match(TSqlParser.AVAILABILITY_MODE);
                this.state = 1816;
                this.match(TSqlParser.EQUAL);
                this.state = 1817;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.ASYNCHRONOUS_COMMIT || _la===TSqlParser.SYNCHRONOUS_COMMIT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 1826;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
            if(la_===1) {
                this.state = 1821;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 1820;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 1823;
                this.match(TSqlParser.FAILOVER_MODE);
                this.state = 1824;
                this.match(TSqlParser.EQUAL);
                this.state = 1825;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.AUTOMATIC || _la===TSqlParser.MANUAL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 1834;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
            if(la_===1) {
                this.state = 1829;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 1828;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 1831;
                this.match(TSqlParser.SEEDING_MODE);
                this.state = 1832;
                this.match(TSqlParser.EQUAL);
                this.state = 1833;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.AUTOMATIC || _la===TSqlParser.MANUAL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 1842;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
            if(la_===1) {
                this.state = 1837;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 1836;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 1839;
                this.match(TSqlParser.BACKUP_PRIORITY);
                this.state = 1840;
                this.match(TSqlParser.EQUAL);
                this.state = 1841;
                this.match(TSqlParser.DECIMAL);

            }
            this.state = 1853;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
            if(la_===1) {
                this.state = 1845;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 1844;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 1847;
                this.match(TSqlParser.PRIMARY_ROLE);
                this.state = 1848;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 1849;
                this.match(TSqlParser.ALLOW_CONNECTIONS);
                this.state = 1850;
                this.match(TSqlParser.EQUAL);
                this.state = 1851;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.ALL || _la===TSqlParser.READ_WRITE)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1852;
                this.match(TSqlParser.RR_BRACKET);

            }
            this.state = 1864;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.SECONDARY_ROLE || _la===TSqlParser.COMMA) {
                this.state = 1856;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 1855;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 1858;
                this.match(TSqlParser.SECONDARY_ROLE);
                this.state = 1859;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 1860;
                this.match(TSqlParser.ALLOW_CONNECTIONS);
                this.state = 1861;
                this.match(TSqlParser.EQUAL);

                this.state = 1862;
                this.match(TSqlParser.READ_ONLY);
                this.state = 1863;
                this.match(TSqlParser.RR_BRACKET);
            }

            this.state = 1866;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1867;
            this.match(TSqlParser.SECONDARY_ROLE);
            this.state = 1868;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 1877;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.ALLOW_CONNECTIONS:
                this.state = 1869;
                this.match(TSqlParser.ALLOW_CONNECTIONS);
                this.state = 1870;
                this.match(TSqlParser.EQUAL);
                this.state = 1871;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.ALL || _la===TSqlParser.NO || _la===TSqlParser.READ_ONLY)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            case TSqlParser.READ_ONLY_ROUTING_LIST:
                this.state = 1872;
                this.match(TSqlParser.READ_ONLY_ROUTING_LIST);
                this.state = 1873;
                this.match(TSqlParser.EQUAL);

                this.state = 1874;
                this.match(TSqlParser.LR_BRACKET);

                this.state = 1875;
                this.match(TSqlParser.STRING);
                this.state = 1876;
                this.match(TSqlParser.RR_BRACKET);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1879;
            this.match(TSqlParser.PRIMARY_ROLE);
            this.state = 1880;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 1903;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.ALLOW_CONNECTIONS:
                this.state = 1881;
                this.match(TSqlParser.ALLOW_CONNECTIONS);
                this.state = 1882;
                this.match(TSqlParser.EQUAL);
                this.state = 1883;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.ALL || _la===TSqlParser.NO || _la===TSqlParser.READ_ONLY)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            case TSqlParser.READ_ONLY_ROUTING_LIST:
                this.state = 1884;
                this.match(TSqlParser.READ_ONLY_ROUTING_LIST);
                this.state = 1885;
                this.match(TSqlParser.EQUAL);

                this.state = 1886;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 1897;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.STRING:
                case TSqlParser.RR_BRACKET:
                case TSqlParser.COMMA:
                    this.state = 1893;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===TSqlParser.STRING || _la===TSqlParser.COMMA) {
                        this.state = 1888;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 1887;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 1890;
                        this.match(TSqlParser.STRING);
                        this.state = 1895;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;
                case TSqlParser.NONE:
                    this.state = 1896;
                    this.match(TSqlParser.NONE);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1899;
                this.match(TSqlParser.RR_BRACKET);
                break;
            case TSqlParser.SESSION_TIMEOUT:
                this.state = 1900;
                this.match(TSqlParser.SESSION_TIMEOUT);
                this.state = 1901;
                this.match(TSqlParser.EQUAL);
                this.state = 1902;
                localctx.session_timeout = this.match(TSqlParser.DECIMAL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1905;
            this.match(TSqlParser.MODIFY);
            this.state = 1906;
            this.match(TSqlParser.REPLICA);
            this.state = 1907;
            this.match(TSqlParser.ON);
            this.state = 1908;
            localctx.server_instance = this.match(TSqlParser.STRING);
            this.state = 1966;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.WITH:
                this.state = 1909;
                this.match(TSqlParser.WITH);
                this.state = 1910;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 1926;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.ENDPOINT_URL:
                    this.state = 1911;
                    this.match(TSqlParser.ENDPOINT_URL);
                    this.state = 1912;
                    this.match(TSqlParser.EQUAL);
                    this.state = 1913;
                    this.match(TSqlParser.STRING);
                    break;
                case TSqlParser.AVAILABILITY_MODE:
                    this.state = 1914;
                    this.match(TSqlParser.AVAILABILITY_MODE);
                    this.state = 1915;
                    this.match(TSqlParser.EQUAL);
                    this.state = 1916;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.ASYNCHRONOUS_COMMIT || _la===TSqlParser.SYNCHRONOUS_COMMIT)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case TSqlParser.FAILOVER_MODE:
                    this.state = 1917;
                    this.match(TSqlParser.FAILOVER_MODE);
                    this.state = 1918;
                    this.match(TSqlParser.EQUAL);
                    this.state = 1919;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.AUTOMATIC || _la===TSqlParser.MANUAL)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case TSqlParser.SEEDING_MODE:
                    this.state = 1920;
                    this.match(TSqlParser.SEEDING_MODE);
                    this.state = 1921;
                    this.match(TSqlParser.EQUAL);
                    this.state = 1922;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.AUTOMATIC || _la===TSqlParser.MANUAL)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case TSqlParser.BACKUP_PRIORITY:
                    this.state = 1923;
                    this.match(TSqlParser.BACKUP_PRIORITY);
                    this.state = 1924;
                    this.match(TSqlParser.EQUAL);
                    this.state = 1925;
                    this.match(TSqlParser.DECIMAL);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;
            case TSqlParser.SECONDARY_ROLE:
                this.state = 1928;
                this.match(TSqlParser.SECONDARY_ROLE);
                this.state = 1929;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 1938;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.ALLOW_CONNECTIONS:
                    this.state = 1930;
                    this.match(TSqlParser.ALLOW_CONNECTIONS);
                    this.state = 1931;
                    this.match(TSqlParser.EQUAL);
                    this.state = 1932;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.ALL || _la===TSqlParser.NO || _la===TSqlParser.READ_ONLY)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case TSqlParser.READ_ONLY_ROUTING_LIST:
                    this.state = 1933;
                    this.match(TSqlParser.READ_ONLY_ROUTING_LIST);
                    this.state = 1934;
                    this.match(TSqlParser.EQUAL);

                    this.state = 1935;
                    this.match(TSqlParser.LR_BRACKET);

                    this.state = 1936;
                    this.match(TSqlParser.STRING);
                    this.state = 1937;
                    this.match(TSqlParser.RR_BRACKET);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;
            case TSqlParser.PRIMARY_ROLE:
                this.state = 1940;
                this.match(TSqlParser.PRIMARY_ROLE);
                this.state = 1941;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 1964;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.ALLOW_CONNECTIONS:
                    this.state = 1942;
                    this.match(TSqlParser.ALLOW_CONNECTIONS);
                    this.state = 1943;
                    this.match(TSqlParser.EQUAL);
                    this.state = 1944;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.ALL || _la===TSqlParser.NO || _la===TSqlParser.READ_ONLY)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case TSqlParser.READ_ONLY_ROUTING_LIST:
                    this.state = 1945;
                    this.match(TSqlParser.READ_ONLY_ROUTING_LIST);
                    this.state = 1946;
                    this.match(TSqlParser.EQUAL);

                    this.state = 1947;
                    this.match(TSqlParser.LR_BRACKET);
                    this.state = 1958;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case TSqlParser.STRING:
                    case TSqlParser.RR_BRACKET:
                    case TSqlParser.COMMA:
                        this.state = 1954;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while(_la===TSqlParser.STRING || _la===TSqlParser.COMMA) {
                            this.state = 1949;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(_la===TSqlParser.COMMA) {
                                this.state = 1948;
                                this.match(TSqlParser.COMMA);
                            }

                            this.state = 1951;
                            this.match(TSqlParser.STRING);
                            this.state = 1956;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        break;
                    case TSqlParser.NONE:
                        this.state = 1957;
                        this.match(TSqlParser.NONE);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 1960;
                    this.match(TSqlParser.RR_BRACKET);
                    break;
                case TSqlParser.SESSION_TIMEOUT:
                    this.state = 1961;
                    this.match(TSqlParser.SESSION_TIMEOUT);
                    this.state = 1962;
                    this.match(TSqlParser.EQUAL);
                    this.state = 1963;
                    localctx.session_timeout = this.match(TSqlParser.DECIMAL);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1968;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1969;
            this.match(TSqlParser.REMOVE);
            this.state = 1970;
            this.match(TSqlParser.REPLICA);
            this.state = 1971;
            this.match(TSqlParser.ON);
            this.state = 1972;
            this.match(TSqlParser.STRING);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1973;
            this.match(TSqlParser.JOIN);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1974;
            this.match(TSqlParser.JOIN);
            this.state = 1975;
            this.match(TSqlParser.AVAILABILITY);
            this.state = 1976;
            this.match(TSqlParser.GROUP);
            this.state = 1977;
            this.match(TSqlParser.ON);
            this.state = 2000; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1979;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 1978;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 1981;
                localctx.ag_name = this.match(TSqlParser.STRING);
                this.state = 1982;
                this.match(TSqlParser.WITH);
                this.state = 1983;
                this.match(TSqlParser.LR_BRACKET);

                this.state = 1984;
                this.match(TSqlParser.LISTENER_URL);
                this.state = 1985;
                this.match(TSqlParser.EQUAL);
                this.state = 1986;
                this.match(TSqlParser.STRING);
                this.state = 1987;
                this.match(TSqlParser.COMMA);
                this.state = 1988;
                this.match(TSqlParser.AVAILABILITY_MODE);
                this.state = 1989;
                this.match(TSqlParser.EQUAL);
                this.state = 1990;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.ASYNCHRONOUS_COMMIT || _la===TSqlParser.SYNCHRONOUS_COMMIT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1991;
                this.match(TSqlParser.COMMA);
                this.state = 1992;
                this.match(TSqlParser.FAILOVER_MODE);
                this.state = 1993;
                this.match(TSqlParser.EQUAL);
                this.state = 1994;
                this.match(TSqlParser.MANUAL);
                this.state = 1995;
                this.match(TSqlParser.COMMA);
                this.state = 1996;
                this.match(TSqlParser.SEEDING_MODE);
                this.state = 1997;
                this.match(TSqlParser.EQUAL);
                this.state = 1998;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.AUTOMATIC || _la===TSqlParser.MANUAL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1999;
                this.match(TSqlParser.RR_BRACKET);
                this.state = 2002; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.STRING || _la===TSqlParser.COMMA);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 2004;
            this.match(TSqlParser.MODIFY);
            this.state = 2005;
            this.match(TSqlParser.AVAILABILITY);
            this.state = 2006;
            this.match(TSqlParser.GROUP);
            this.state = 2007;
            this.match(TSqlParser.ON);
            this.state = 2042; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2009;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 2008;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 2011;
                localctx.ag_name_modified = this.match(TSqlParser.STRING);
                this.state = 2012;
                this.match(TSqlParser.WITH);
                this.state = 2013;
                this.match(TSqlParser.LR_BRACKET);

                this.state = 2014;
                this.match(TSqlParser.LISTENER_URL);
                this.state = 2015;
                this.match(TSqlParser.EQUAL);
                this.state = 2016;
                this.match(TSqlParser.STRING);
                this.state = 2023;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
                if(la_===1) {
                    this.state = 2018;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 2017;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 2020;
                    this.match(TSqlParser.AVAILABILITY_MODE);
                    this.state = 2021;
                    this.match(TSqlParser.EQUAL);
                    this.state = 2022;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.ASYNCHRONOUS_COMMIT || _la===TSqlParser.SYNCHRONOUS_COMMIT)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }

                }
                this.state = 2031;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
                if(la_===1) {
                    this.state = 2026;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 2025;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 2028;
                    this.match(TSqlParser.FAILOVER_MODE);
                    this.state = 2029;
                    this.match(TSqlParser.EQUAL);
                    this.state = 2030;
                    this.match(TSqlParser.MANUAL);

                }
                this.state = 2039;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.SEEDING_MODE || _la===TSqlParser.COMMA) {
                    this.state = 2034;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 2033;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 2036;
                    this.match(TSqlParser.SEEDING_MODE);
                    this.state = 2037;
                    this.match(TSqlParser.EQUAL);
                    this.state = 2038;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.AUTOMATIC || _la===TSqlParser.MANUAL)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.state = 2041;
                this.match(TSqlParser.RR_BRACKET);
                this.state = 2044; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.STRING || _la===TSqlParser.COMMA);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 2046;
            this.match(TSqlParser.GRANT);
            this.state = 2047;
            this.match(TSqlParser.CREATE);
            this.state = 2048;
            this.match(TSqlParser.ANY);
            this.state = 2049;
            this.match(TSqlParser.DATABASE);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 2050;
            this.match(TSqlParser.DENY);
            this.state = 2051;
            this.match(TSqlParser.CREATE);
            this.state = 2052;
            this.match(TSqlParser.ANY);
            this.state = 2053;
            this.match(TSqlParser.DATABASE);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 2054;
            this.match(TSqlParser.FAILOVER);
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 2055;
            this.match(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 2056;
            this.match(TSqlParser.ADD);
            this.state = 2057;
            this.match(TSqlParser.LISTENER);
            this.state = 2058;
            localctx.listener_name = this.match(TSqlParser.STRING);
            this.state = 2059;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 2093;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
            switch(la_) {
            case 1:
                this.state = 2060;
                this.match(TSqlParser.WITH);
                this.state = 2061;
                this.match(TSqlParser.DHCP);

                this.state = 2062;
                this.match(TSqlParser.ON);
                this.state = 2063;
                this.match(TSqlParser.LR_BRACKET);

                this.state = 2064;
                this.match(TSqlParser.IPV4_ADDR);
                this.state = 2065;
                this.match(TSqlParser.IPV4_ADDR);
                this.state = 2067;
                this.match(TSqlParser.RR_BRACKET);
                break;

            case 2:
                this.state = 2068;
                this.match(TSqlParser.WITH);
                this.state = 2069;
                this.match(TSqlParser.IP);
                this.state = 2070;
                this.match(TSqlParser.LR_BRACKET);

                this.state = 2082; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 2072;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 2071;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 2074;
                    this.match(TSqlParser.LR_BRACKET);
                    this.state = 2079;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case TSqlParser.IPV4_ADDR:
                        this.state = 2075;
                        this.match(TSqlParser.IPV4_ADDR);
                        this.state = 2076;
                        this.match(TSqlParser.COMMA);
                        this.state = 2077;
                        this.match(TSqlParser.IPV4_ADDR);
                        break;
                    case TSqlParser.IPV6_ADDR:
                        this.state = 2078;
                        this.match(TSqlParser.IPV6_ADDR);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 2081;
                    this.match(TSqlParser.RR_BRACKET);
                    this.state = 2084; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===TSqlParser.LR_BRACKET || _la===TSqlParser.COMMA);
                this.state = 2086;
                this.match(TSqlParser.RR_BRACKET);
                this.state = 2091;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 2087;
                    this.match(TSqlParser.COMMA);
                    this.state = 2088;
                    this.match(TSqlParser.PORT);
                    this.state = 2089;
                    this.match(TSqlParser.EQUAL);
                    this.state = 2090;
                    this.match(TSqlParser.DECIMAL);
                }

                break;

            }
            this.state = 2095;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 2096;
            this.match(TSqlParser.MODIFY);
            this.state = 2097;
            this.match(TSqlParser.LISTENER);
            this.state = 2110;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.ADD:
                this.state = 2098;
                this.match(TSqlParser.ADD);
                this.state = 2099;
                this.match(TSqlParser.IP);
                this.state = 2100;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 2104;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.IPV4_ADDR:
                    this.state = 2101;
                    this.match(TSqlParser.IPV4_ADDR);
                    this.state = 2102;
                    this.match(TSqlParser.IPV4_ADDR);
                    break;
                case TSqlParser.IPV6_ADDR:
                    this.state = 2103;
                    this.match(TSqlParser.IPV6_ADDR);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 2106;
                this.match(TSqlParser.RR_BRACKET);
                break;
            case TSqlParser.PORT:
                this.state = 2107;
                this.match(TSqlParser.PORT);
                this.state = 2108;
                this.match(TSqlParser.EQUAL);
                this.state = 2109;
                this.match(TSqlParser.DECIMAL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 2112;
            this.match(TSqlParser.RESTART);
            this.state = 2113;
            this.match(TSqlParser.LISTENER);
            this.state = 2114;
            this.match(TSqlParser.STRING);
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 2115;
            this.match(TSqlParser.REMOVE);
            this.state = 2116;
            this.match(TSqlParser.LISTENER);
            this.state = 2117;
            this.match(TSqlParser.STRING);
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 2118;
            this.match(TSqlParser.OFFLINE);
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 2119;
            this.match(TSqlParser.WITH);
            this.state = 2120;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 2121;
            this.match(TSqlParser.DTC_SUPPORT);
            this.state = 2122;
            this.match(TSqlParser.EQUAL);
            this.state = 2123;
            this.match(TSqlParser.PER_DB);
            this.state = 2124;
            this.match(TSqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_or_alter_broker_priorityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_or_alter_broker_priority;
    this.ConversationPriorityName = null; // IdContext
    this.RemoteServiceName = null; // Token
    this.PriorityValue = null; // Token
    return this;
}

Create_or_alter_broker_priorityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_or_alter_broker_priorityContext.prototype.constructor = Create_or_alter_broker_priorityContext;

Create_or_alter_broker_priorityContext.prototype.BROKER = function() {
    return this.getToken(TSqlParser.BROKER, 0);
};

Create_or_alter_broker_priorityContext.prototype.PRIORITY = function() {
    return this.getToken(TSqlParser.PRIORITY, 0);
};

Create_or_alter_broker_priorityContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Create_or_alter_broker_priorityContext.prototype.CONVERSATION = function() {
    return this.getToken(TSqlParser.CONVERSATION, 0);
};

Create_or_alter_broker_priorityContext.prototype.SET = function() {
    return this.getToken(TSqlParser.SET, 0);
};

Create_or_alter_broker_priorityContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Create_or_alter_broker_priorityContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Create_or_alter_broker_priorityContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_or_alter_broker_priorityContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Create_or_alter_broker_priorityContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_or_alter_broker_priorityContext.prototype.CONTRACT_NAME = function() {
    return this.getToken(TSqlParser.CONTRACT_NAME, 0);
};

Create_or_alter_broker_priorityContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Create_or_alter_broker_priorityContext.prototype.LOCAL_SERVICE_NAME = function() {
    return this.getToken(TSqlParser.LOCAL_SERVICE_NAME, 0);
};

Create_or_alter_broker_priorityContext.prototype.REMOTE_SERVICE_NAME = function() {
    return this.getToken(TSqlParser.REMOTE_SERVICE_NAME, 0);
};

Create_or_alter_broker_priorityContext.prototype.PRIORITY_LEVEL = function() {
    return this.getToken(TSqlParser.PRIORITY_LEVEL, 0);
};

Create_or_alter_broker_priorityContext.prototype.ANY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ANY);
    } else {
        return this.getToken(TSqlParser.ANY, i);
    }
};


Create_or_alter_broker_priorityContext.prototype.DEFAULT = function() {
    return this.getToken(TSqlParser.DEFAULT, 0);
};

Create_or_alter_broker_priorityContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Create_or_alter_broker_priorityContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Create_or_alter_broker_priorityContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Create_or_alter_broker_priorityContext.prototype.DOUBLE_FORWARD_SLASH = function() {
    return this.getToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0);
};

Create_or_alter_broker_priorityContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_or_alter_broker_priority(this);
	}
};

Create_or_alter_broker_priorityContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_or_alter_broker_priority(this);
	}
};




TSqlParser.Create_or_alter_broker_priorityContext = Create_or_alter_broker_priorityContext;

TSqlParser.prototype.create_or_alter_broker_priority = function() {

    var localctx = new Create_or_alter_broker_priorityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, TSqlParser.RULE_create_or_alter_broker_priority);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2127;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.ALTER || _la===TSqlParser.CREATE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2128;
        this.match(TSqlParser.BROKER);
        this.state = 2129;
        this.match(TSqlParser.PRIORITY);
        this.state = 2130;
        localctx.ConversationPriorityName = this.id();
        this.state = 2131;
        this.match(TSqlParser.FOR);
        this.state = 2132;
        this.match(TSqlParser.CONVERSATION);
        this.state = 2133;
        this.match(TSqlParser.SET);
        this.state = 2134;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 2144;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.CONTRACT_NAME) {
            this.state = 2135;
            this.match(TSqlParser.CONTRACT_NAME);
            this.state = 2136;
            this.match(TSqlParser.EQUAL);
            this.state = 2139;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.CALLED:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.EVENTDATA:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.KEY:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.OFFSETS:
            case TSqlParser.PAGE:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SERVER:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.TARGET:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.APPLY:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GLOBAL:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAST:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.ID:
                this.state = 2137;
                this.id();
                break;
            case TSqlParser.ANY:
                this.state = 2138;
                this.match(TSqlParser.ANY);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2142;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 2141;
                this.match(TSqlParser.COMMA);
            }

        }

        this.state = 2158;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.LOCAL_SERVICE_NAME) {
            this.state = 2146;
            this.match(TSqlParser.LOCAL_SERVICE_NAME);
            this.state = 2147;
            this.match(TSqlParser.EQUAL);
            this.state = 2153;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.CALLED:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.DOUBLE_FORWARD_SLASH:
            case TSqlParser.EVENTDATA:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.KEY:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.OFFSETS:
            case TSqlParser.PAGE:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SERVER:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.TARGET:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.APPLY:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GLOBAL:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAST:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.ID:
                this.state = 2149;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.DOUBLE_FORWARD_SLASH) {
                    this.state = 2148;
                    this.match(TSqlParser.DOUBLE_FORWARD_SLASH);
                }

                this.state = 2151;
                this.id();
                break;
            case TSqlParser.ANY:
                this.state = 2152;
                this.match(TSqlParser.ANY);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2156;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 2155;
                this.match(TSqlParser.COMMA);
            }

        }

        this.state = 2169;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.REMOTE_SERVICE_NAME) {
            this.state = 2160;
            this.match(TSqlParser.REMOTE_SERVICE_NAME);
            this.state = 2161;
            this.match(TSqlParser.EQUAL);
            this.state = 2164;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.STRING:
                this.state = 2162;
                localctx.RemoteServiceName = this.match(TSqlParser.STRING);
                break;
            case TSqlParser.ANY:
                this.state = 2163;
                this.match(TSqlParser.ANY);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2167;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 2166;
                this.match(TSqlParser.COMMA);
            }

        }

        this.state = 2177;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.PRIORITY_LEVEL) {
            this.state = 2171;
            this.match(TSqlParser.PRIORITY_LEVEL);
            this.state = 2172;
            this.match(TSqlParser.EQUAL);
            this.state = 2175;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.DECIMAL:
                this.state = 2173;
                localctx.PriorityValue = this.match(TSqlParser.DECIMAL);
                break;
            case TSqlParser.DEFAULT:
                this.state = 2174;
                this.match(TSqlParser.DEFAULT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
        }

        this.state = 2179;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_broker_priorityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_broker_priority;
    this.ConversationPriorityName = null; // IdContext
    return this;
}

Drop_broker_priorityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_broker_priorityContext.prototype.constructor = Drop_broker_priorityContext;

Drop_broker_priorityContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_broker_priorityContext.prototype.BROKER = function() {
    return this.getToken(TSqlParser.BROKER, 0);
};

Drop_broker_priorityContext.prototype.PRIORITY = function() {
    return this.getToken(TSqlParser.PRIORITY, 0);
};

Drop_broker_priorityContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_broker_priorityContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_broker_priority(this);
	}
};

Drop_broker_priorityContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_broker_priority(this);
	}
};




TSqlParser.Drop_broker_priorityContext = Drop_broker_priorityContext;

TSqlParser.prototype.drop_broker_priority = function() {

    var localctx = new Drop_broker_priorityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, TSqlParser.RULE_drop_broker_priority);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2181;
        this.match(TSqlParser.DROP);
        this.state = 2182;
        this.match(TSqlParser.BROKER);
        this.state = 2183;
        this.match(TSqlParser.PRIORITY);
        this.state = 2184;
        localctx.ConversationPriorityName = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_certificateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_certificate;
    this.certificate_name = null; // IdContext
    return this;
}

Alter_certificateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_certificateContext.prototype.constructor = Alter_certificateContext;

Alter_certificateContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_certificateContext.prototype.CERTIFICATE = function() {
    return this.getToken(TSqlParser.CERTIFICATE, 0);
};

Alter_certificateContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Alter_certificateContext.prototype.REMOVE = function() {
    return this.getToken(TSqlParser.REMOVE, 0);
};

Alter_certificateContext.prototype.PRIVATE_KEY = function() {
    return this.getToken(TSqlParser.PRIVATE_KEY, 0);
};

Alter_certificateContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_certificateContext.prototype.PRIVATE = function() {
    return this.getToken(TSqlParser.PRIVATE, 0);
};

Alter_certificateContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Alter_certificateContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Alter_certificateContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Alter_certificateContext.prototype.ACTIVE = function() {
    return this.getToken(TSqlParser.ACTIVE, 0);
};

Alter_certificateContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Alter_certificateContext.prototype.BEGIN_DIALOG = function() {
    return this.getToken(TSqlParser.BEGIN_DIALOG, 0);
};

Alter_certificateContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Alter_certificateContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Alter_certificateContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Alter_certificateContext.prototype.FILE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.FILE);
    } else {
        return this.getToken(TSqlParser.FILE, i);
    }
};


Alter_certificateContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Alter_certificateContext.prototype.DECRYPTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECRYPTION);
    } else {
        return this.getToken(TSqlParser.DECRYPTION, i);
    }
};


Alter_certificateContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.BY);
    } else {
        return this.getToken(TSqlParser.BY, i);
    }
};


Alter_certificateContext.prototype.PASSWORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.PASSWORD);
    } else {
        return this.getToken(TSqlParser.PASSWORD, i);
    }
};


Alter_certificateContext.prototype.ENCRYPTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ENCRYPTION);
    } else {
        return this.getToken(TSqlParser.ENCRYPTION, i);
    }
};


Alter_certificateContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Alter_certificateContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_certificate(this);
	}
};

Alter_certificateContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_certificate(this);
	}
};




TSqlParser.Alter_certificateContext = Alter_certificateContext;

TSqlParser.prototype.alter_certificate = function() {

    var localctx = new Alter_certificateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, TSqlParser.RULE_alter_certificate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2186;
        this.match(TSqlParser.ALTER);
        this.state = 2187;
        this.match(TSqlParser.CERTIFICATE);
        this.state = 2188;
        localctx.certificate_name = this.id();
        this.state = 2228;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2189;
            this.match(TSqlParser.REMOVE);
            this.state = 2190;
            this.match(TSqlParser.PRIVATE_KEY);
            break;

        case 2:
            this.state = 2191;
            this.match(TSqlParser.WITH);
            this.state = 2192;
            this.match(TSqlParser.PRIVATE);
            this.state = 2193;
            this.match(TSqlParser.KEY);
            this.state = 2194;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 2217; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2217;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.FILE:
                    this.state = 2195;
                    this.match(TSqlParser.FILE);
                    this.state = 2196;
                    this.match(TSqlParser.EQUAL);
                    this.state = 2197;
                    this.match(TSqlParser.STRING);
                    this.state = 2199;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 2198;
                        this.match(TSqlParser.COMMA);
                    }

                    break;
                case TSqlParser.DECRYPTION:
                    this.state = 2201;
                    this.match(TSqlParser.DECRYPTION);
                    this.state = 2202;
                    this.match(TSqlParser.BY);
                    this.state = 2203;
                    this.match(TSqlParser.PASSWORD);
                    this.state = 2204;
                    this.match(TSqlParser.EQUAL);
                    this.state = 2205;
                    this.match(TSqlParser.STRING);
                    this.state = 2207;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 2206;
                        this.match(TSqlParser.COMMA);
                    }

                    break;
                case TSqlParser.ENCRYPTION:
                    this.state = 2209;
                    this.match(TSqlParser.ENCRYPTION);
                    this.state = 2210;
                    this.match(TSqlParser.BY);
                    this.state = 2211;
                    this.match(TSqlParser.PASSWORD);
                    this.state = 2212;
                    this.match(TSqlParser.EQUAL);
                    this.state = 2213;
                    this.match(TSqlParser.STRING);
                    this.state = 2215;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 2214;
                        this.match(TSqlParser.COMMA);
                    }

                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 2219; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.FILE || _la===TSqlParser.DECRYPTION || _la===TSqlParser.ENCRYPTION);
            this.state = 2221;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 3:
            this.state = 2222;
            this.match(TSqlParser.WITH);
            this.state = 2223;
            this.match(TSqlParser.ACTIVE);
            this.state = 2224;
            this.match(TSqlParser.FOR);
            this.state = 2225;
            this.match(TSqlParser.BEGIN_DIALOG);
            this.state = 2226;
            this.match(TSqlParser.EQUAL);
            this.state = 2227;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_column_encryption_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_column_encryption_key;
    this.column_encryption_key = null; // IdContext
    this.column_master_key_name = null; // IdContext
    this.algorithm_name = null; // Token
    return this;
}

Alter_column_encryption_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_column_encryption_keyContext.prototype.constructor = Alter_column_encryption_keyContext;

Alter_column_encryption_keyContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_column_encryption_keyContext.prototype.COLUMN = function() {
    return this.getToken(TSqlParser.COLUMN, 0);
};

Alter_column_encryption_keyContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Alter_column_encryption_keyContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Alter_column_encryption_keyContext.prototype.VALUE = function() {
    return this.getToken(TSqlParser.VALUE, 0);
};

Alter_column_encryption_keyContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Alter_column_encryption_keyContext.prototype.COLUMN_MASTER_KEY = function() {
    return this.getToken(TSqlParser.COLUMN_MASTER_KEY, 0);
};

Alter_column_encryption_keyContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Alter_column_encryption_keyContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Alter_column_encryption_keyContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_column_encryption_keyContext.prototype.ADD = function() {
    return this.getToken(TSqlParser.ADD, 0);
};

Alter_column_encryption_keyContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Alter_column_encryption_keyContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Alter_column_encryption_keyContext.prototype.ALGORITHM = function() {
    return this.getToken(TSqlParser.ALGORITHM, 0);
};

Alter_column_encryption_keyContext.prototype.ENCRYPTED_VALUE = function() {
    return this.getToken(TSqlParser.ENCRYPTED_VALUE, 0);
};

Alter_column_encryption_keyContext.prototype.BINARY = function() {
    return this.getToken(TSqlParser.BINARY, 0);
};

Alter_column_encryption_keyContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Alter_column_encryption_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_column_encryption_key(this);
	}
};

Alter_column_encryption_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_column_encryption_key(this);
	}
};




TSqlParser.Alter_column_encryption_keyContext = Alter_column_encryption_keyContext;

TSqlParser.prototype.alter_column_encryption_key = function() {

    var localctx = new Alter_column_encryption_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, TSqlParser.RULE_alter_column_encryption_key);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2230;
        this.match(TSqlParser.ALTER);
        this.state = 2231;
        this.match(TSqlParser.COLUMN);
        this.state = 2232;
        this.match(TSqlParser.ENCRYPTION);
        this.state = 2233;
        this.match(TSqlParser.KEY);
        this.state = 2234;
        localctx.column_encryption_key = this.id();
        this.state = 2235;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.ADD || _la===TSqlParser.DROP)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2236;
        this.match(TSqlParser.VALUE);
        this.state = 2237;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 2238;
        this.match(TSqlParser.COLUMN_MASTER_KEY);
        this.state = 2239;
        this.match(TSqlParser.EQUAL);
        this.state = 2240;
        localctx.column_master_key_name = this.id();
        this.state = 2249;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 2241;
            this.match(TSqlParser.COMMA);
            this.state = 2242;
            this.match(TSqlParser.ALGORITHM);
            this.state = 2243;
            this.match(TSqlParser.EQUAL);
            this.state = 2244;
            localctx.algorithm_name = this.match(TSqlParser.STRING);
            this.state = 2245;
            this.match(TSqlParser.COMMA);
            this.state = 2246;
            this.match(TSqlParser.ENCRYPTED_VALUE);
            this.state = 2247;
            this.match(TSqlParser.EQUAL);
            this.state = 2248;
            this.match(TSqlParser.BINARY);
        }

        this.state = 2251;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_column_encryption_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_column_encryption_key;
    this.column_encryption_key = null; // IdContext
    this.column_master_key_name = null; // IdContext
    this.algorithm_name = null; // Token
    this.encrypted_value = null; // Token
    return this;
}

Create_column_encryption_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_column_encryption_keyContext.prototype.constructor = Create_column_encryption_keyContext;

Create_column_encryption_keyContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_column_encryption_keyContext.prototype.COLUMN = function() {
    return this.getToken(TSqlParser.COLUMN, 0);
};

Create_column_encryption_keyContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Create_column_encryption_keyContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Create_column_encryption_keyContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_column_encryption_keyContext.prototype.VALUES = function() {
    return this.getToken(TSqlParser.VALUES, 0);
};

Create_column_encryption_keyContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_column_encryption_keyContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LR_BRACKET);
    } else {
        return this.getToken(TSqlParser.LR_BRACKET, i);
    }
};


Create_column_encryption_keyContext.prototype.COLUMN_MASTER_KEY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COLUMN_MASTER_KEY);
    } else {
        return this.getToken(TSqlParser.COLUMN_MASTER_KEY, i);
    }
};


Create_column_encryption_keyContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Create_column_encryption_keyContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Create_column_encryption_keyContext.prototype.ALGORITHM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ALGORITHM);
    } else {
        return this.getToken(TSqlParser.ALGORITHM, i);
    }
};


Create_column_encryption_keyContext.prototype.ENCRYPTED_VALUE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ENCRYPTED_VALUE);
    } else {
        return this.getToken(TSqlParser.ENCRYPTED_VALUE, i);
    }
};


Create_column_encryption_keyContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RR_BRACKET);
    } else {
        return this.getToken(TSqlParser.RR_BRACKET, i);
    }
};


Create_column_encryption_keyContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Create_column_encryption_keyContext.prototype.BINARY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.BINARY);
    } else {
        return this.getToken(TSqlParser.BINARY, i);
    }
};


Create_column_encryption_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_column_encryption_key(this);
	}
};

Create_column_encryption_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_column_encryption_key(this);
	}
};




TSqlParser.Create_column_encryption_keyContext = Create_column_encryption_keyContext;

TSqlParser.prototype.create_column_encryption_key = function() {

    var localctx = new Create_column_encryption_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, TSqlParser.RULE_create_column_encryption_key);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2253;
        this.match(TSqlParser.CREATE);
        this.state = 2254;
        this.match(TSqlParser.COLUMN);
        this.state = 2255;
        this.match(TSqlParser.ENCRYPTION);
        this.state = 2256;
        this.match(TSqlParser.KEY);
        this.state = 2257;
        localctx.column_encryption_key = this.id();
        this.state = 2258;
        this.match(TSqlParser.WITH);
        this.state = 2259;
        this.match(TSqlParser.VALUES);
        this.state = 2279; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2260;
        		this.match(TSqlParser.LR_BRACKET);
        		this.state = 2262;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		if(_la===TSqlParser.COMMA) {
        		    this.state = 2261;
        		    this.match(TSqlParser.COMMA);
        		}

        		this.state = 2264;
        		this.match(TSqlParser.COLUMN_MASTER_KEY);
        		this.state = 2265;
        		this.match(TSqlParser.EQUAL);
        		this.state = 2266;
        		localctx.column_master_key_name = this.id();
        		this.state = 2267;
        		this.match(TSqlParser.COMMA);
        		this.state = 2268;
        		this.match(TSqlParser.ALGORITHM);
        		this.state = 2269;
        		this.match(TSqlParser.EQUAL);
        		this.state = 2270;
        		localctx.algorithm_name = this.match(TSqlParser.STRING);
        		this.state = 2271;
        		this.match(TSqlParser.COMMA);
        		this.state = 2272;
        		this.match(TSqlParser.ENCRYPTED_VALUE);
        		this.state = 2273;
        		this.match(TSqlParser.EQUAL);
        		this.state = 2274;
        		localctx.encrypted_value = this.match(TSqlParser.BINARY);
        		this.state = 2275;
        		this.match(TSqlParser.RR_BRACKET);
        		this.state = 2277;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		if(_la===TSqlParser.COMMA) {
        		    this.state = 2276;
        		    this.match(TSqlParser.COMMA);
        		}

        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2281; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,156, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_certificateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_certificate;
    this.certificate_name = null; // IdContext
    return this;
}

Drop_certificateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_certificateContext.prototype.constructor = Drop_certificateContext;

Drop_certificateContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_certificateContext.prototype.CERTIFICATE = function() {
    return this.getToken(TSqlParser.CERTIFICATE, 0);
};

Drop_certificateContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_certificateContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_certificate(this);
	}
};

Drop_certificateContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_certificate(this);
	}
};




TSqlParser.Drop_certificateContext = Drop_certificateContext;

TSqlParser.prototype.drop_certificate = function() {

    var localctx = new Drop_certificateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, TSqlParser.RULE_drop_certificate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2283;
        this.match(TSqlParser.DROP);
        this.state = 2284;
        this.match(TSqlParser.CERTIFICATE);
        this.state = 2285;
        localctx.certificate_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_column_encryption_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_column_encryption_key;
    this.key_name = null; // IdContext
    return this;
}

Drop_column_encryption_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_column_encryption_keyContext.prototype.constructor = Drop_column_encryption_keyContext;

Drop_column_encryption_keyContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_column_encryption_keyContext.prototype.COLUMN = function() {
    return this.getToken(TSqlParser.COLUMN, 0);
};

Drop_column_encryption_keyContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Drop_column_encryption_keyContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Drop_column_encryption_keyContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_column_encryption_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_column_encryption_key(this);
	}
};

Drop_column_encryption_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_column_encryption_key(this);
	}
};




TSqlParser.Drop_column_encryption_keyContext = Drop_column_encryption_keyContext;

TSqlParser.prototype.drop_column_encryption_key = function() {

    var localctx = new Drop_column_encryption_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, TSqlParser.RULE_drop_column_encryption_key);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2287;
        this.match(TSqlParser.DROP);
        this.state = 2288;
        this.match(TSqlParser.COLUMN);
        this.state = 2289;
        this.match(TSqlParser.ENCRYPTION);
        this.state = 2290;
        this.match(TSqlParser.KEY);
        this.state = 2291;
        localctx.key_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_column_master_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_column_master_key;
    this.key_name = null; // IdContext
    return this;
}

Drop_column_master_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_column_master_keyContext.prototype.constructor = Drop_column_master_keyContext;

Drop_column_master_keyContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_column_master_keyContext.prototype.COLUMN = function() {
    return this.getToken(TSqlParser.COLUMN, 0);
};

Drop_column_master_keyContext.prototype.MASTER = function() {
    return this.getToken(TSqlParser.MASTER, 0);
};

Drop_column_master_keyContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Drop_column_master_keyContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_column_master_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_column_master_key(this);
	}
};

Drop_column_master_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_column_master_key(this);
	}
};




TSqlParser.Drop_column_master_keyContext = Drop_column_master_keyContext;

TSqlParser.prototype.drop_column_master_key = function() {

    var localctx = new Drop_column_master_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, TSqlParser.RULE_drop_column_master_key);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2293;
        this.match(TSqlParser.DROP);
        this.state = 2294;
        this.match(TSqlParser.COLUMN);
        this.state = 2295;
        this.match(TSqlParser.MASTER);
        this.state = 2296;
        this.match(TSqlParser.KEY);
        this.state = 2297;
        localctx.key_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_contractContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_contract;
    this.dropped_contract_name = null; // IdContext
    return this;
}

Drop_contractContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_contractContext.prototype.constructor = Drop_contractContext;

Drop_contractContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_contractContext.prototype.CONTRACT = function() {
    return this.getToken(TSqlParser.CONTRACT, 0);
};

Drop_contractContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_contractContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_contract(this);
	}
};

Drop_contractContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_contract(this);
	}
};




TSqlParser.Drop_contractContext = Drop_contractContext;

TSqlParser.prototype.drop_contract = function() {

    var localctx = new Drop_contractContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, TSqlParser.RULE_drop_contract);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2299;
        this.match(TSqlParser.DROP);
        this.state = 2300;
        this.match(TSqlParser.CONTRACT);
        this.state = 2301;
        localctx.dropped_contract_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_credentialContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_credential;
    this.credential_name = null; // IdContext
    return this;
}

Drop_credentialContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_credentialContext.prototype.constructor = Drop_credentialContext;

Drop_credentialContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_credentialContext.prototype.CREDENTIAL = function() {
    return this.getToken(TSqlParser.CREDENTIAL, 0);
};

Drop_credentialContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_credentialContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_credential(this);
	}
};

Drop_credentialContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_credential(this);
	}
};




TSqlParser.Drop_credentialContext = Drop_credentialContext;

TSqlParser.prototype.drop_credential = function() {

    var localctx = new Drop_credentialContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, TSqlParser.RULE_drop_credential);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2303;
        this.match(TSqlParser.DROP);
        this.state = 2304;
        this.match(TSqlParser.CREDENTIAL);
        this.state = 2305;
        localctx.credential_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_cryptograhic_providerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_cryptograhic_provider;
    this.provider_name = null; // IdContext
    return this;
}

Drop_cryptograhic_providerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_cryptograhic_providerContext.prototype.constructor = Drop_cryptograhic_providerContext;

Drop_cryptograhic_providerContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_cryptograhic_providerContext.prototype.CRYPTOGRAPHIC = function() {
    return this.getToken(TSqlParser.CRYPTOGRAPHIC, 0);
};

Drop_cryptograhic_providerContext.prototype.PROVIDER = function() {
    return this.getToken(TSqlParser.PROVIDER, 0);
};

Drop_cryptograhic_providerContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_cryptograhic_providerContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_cryptograhic_provider(this);
	}
};

Drop_cryptograhic_providerContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_cryptograhic_provider(this);
	}
};




TSqlParser.Drop_cryptograhic_providerContext = Drop_cryptograhic_providerContext;

TSqlParser.prototype.drop_cryptograhic_provider = function() {

    var localctx = new Drop_cryptograhic_providerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, TSqlParser.RULE_drop_cryptograhic_provider);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2307;
        this.match(TSqlParser.DROP);
        this.state = 2308;
        this.match(TSqlParser.CRYPTOGRAPHIC);
        this.state = 2309;
        this.match(TSqlParser.PROVIDER);
        this.state = 2310;
        localctx.provider_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_databaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_database;
    this.database_name_or_database_snapshot_name = null; // IdContext
    return this;
}

Drop_databaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_databaseContext.prototype.constructor = Drop_databaseContext;

Drop_databaseContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_databaseContext.prototype.DATABASE = function() {
    return this.getToken(TSqlParser.DATABASE, 0);
};

Drop_databaseContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

Drop_databaseContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

Drop_databaseContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Drop_databaseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Drop_databaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_database(this);
	}
};

Drop_databaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_database(this);
	}
};




TSqlParser.Drop_databaseContext = Drop_databaseContext;

TSqlParser.prototype.drop_database = function() {

    var localctx = new Drop_databaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, TSqlParser.RULE_drop_database);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2312;
        this.match(TSqlParser.DROP);
        this.state = 2313;
        this.match(TSqlParser.DATABASE);
        this.state = 2316;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.IF) {
            this.state = 2314;
            this.match(TSqlParser.IF);
            this.state = 2315;
            this.match(TSqlParser.EXISTS);
        }

        this.state = 2322; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2319;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		if(_la===TSqlParser.COMMA) {
        		    this.state = 2318;
        		    this.match(TSqlParser.COMMA);
        		}

        		this.state = 2321;
        		localctx.database_name_or_database_snapshot_name = this.id();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2324; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,159, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_database_audit_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_database_audit_specification;
    this.audit_specification_name = null; // IdContext
    return this;
}

Drop_database_audit_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_database_audit_specificationContext.prototype.constructor = Drop_database_audit_specificationContext;

Drop_database_audit_specificationContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_database_audit_specificationContext.prototype.DATABASE = function() {
    return this.getToken(TSqlParser.DATABASE, 0);
};

Drop_database_audit_specificationContext.prototype.AUDIT = function() {
    return this.getToken(TSqlParser.AUDIT, 0);
};

Drop_database_audit_specificationContext.prototype.SPECIFICATION = function() {
    return this.getToken(TSqlParser.SPECIFICATION, 0);
};

Drop_database_audit_specificationContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_database_audit_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_database_audit_specification(this);
	}
};

Drop_database_audit_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_database_audit_specification(this);
	}
};




TSqlParser.Drop_database_audit_specificationContext = Drop_database_audit_specificationContext;

TSqlParser.prototype.drop_database_audit_specification = function() {

    var localctx = new Drop_database_audit_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, TSqlParser.RULE_drop_database_audit_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2326;
        this.match(TSqlParser.DROP);
        this.state = 2327;
        this.match(TSqlParser.DATABASE);
        this.state = 2328;
        this.match(TSqlParser.AUDIT);
        this.state = 2329;
        this.match(TSqlParser.SPECIFICATION);
        this.state = 2330;
        localctx.audit_specification_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_database_scoped_credentialContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_database_scoped_credential;
    this.credential_name = null; // IdContext
    return this;
}

Drop_database_scoped_credentialContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_database_scoped_credentialContext.prototype.constructor = Drop_database_scoped_credentialContext;

Drop_database_scoped_credentialContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_database_scoped_credentialContext.prototype.DATABASE = function() {
    return this.getToken(TSqlParser.DATABASE, 0);
};

Drop_database_scoped_credentialContext.prototype.SCOPED = function() {
    return this.getToken(TSqlParser.SCOPED, 0);
};

Drop_database_scoped_credentialContext.prototype.CREDENTIAL = function() {
    return this.getToken(TSqlParser.CREDENTIAL, 0);
};

Drop_database_scoped_credentialContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_database_scoped_credentialContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_database_scoped_credential(this);
	}
};

Drop_database_scoped_credentialContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_database_scoped_credential(this);
	}
};




TSqlParser.Drop_database_scoped_credentialContext = Drop_database_scoped_credentialContext;

TSqlParser.prototype.drop_database_scoped_credential = function() {

    var localctx = new Drop_database_scoped_credentialContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, TSqlParser.RULE_drop_database_scoped_credential);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2332;
        this.match(TSqlParser.DROP);
        this.state = 2333;
        this.match(TSqlParser.DATABASE);
        this.state = 2334;
        this.match(TSqlParser.SCOPED);
        this.state = 2335;
        this.match(TSqlParser.CREDENTIAL);
        this.state = 2336;
        localctx.credential_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_defaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_default;
    this.schema_name = null; // IdContext
    this.default_name = null; // IdContext
    return this;
}

Drop_defaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_defaultContext.prototype.constructor = Drop_defaultContext;

Drop_defaultContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_defaultContext.prototype.DEFAULT = function() {
    return this.getToken(TSqlParser.DEFAULT, 0);
};

Drop_defaultContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

Drop_defaultContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

Drop_defaultContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Drop_defaultContext.prototype.COMMA = function() {
    return this.getToken(TSqlParser.COMMA, 0);
};

Drop_defaultContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

Drop_defaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_default(this);
	}
};

Drop_defaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_default(this);
	}
};




TSqlParser.Drop_defaultContext = Drop_defaultContext;

TSqlParser.prototype.drop_default = function() {

    var localctx = new Drop_defaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, TSqlParser.RULE_drop_default);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2338;
        this.match(TSqlParser.DROP);
        this.state = 2339;
        this.match(TSqlParser.DEFAULT);
        this.state = 2342;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.IF) {
            this.state = 2340;
            this.match(TSqlParser.IF);
            this.state = 2341;
            this.match(TSqlParser.EXISTS);
        }

        this.state = 2345;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 2344;
            this.match(TSqlParser.COMMA);
        }

        this.state = 2350;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
        if(la_===1) {
            this.state = 2347;
            localctx.schema_name = this.id();
            this.state = 2348;
            this.match(TSqlParser.DOT);

        }
        this.state = 2352;
        localctx.default_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_endpointContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_endpoint;
    this.endPointName = null; // IdContext
    return this;
}

Drop_endpointContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_endpointContext.prototype.constructor = Drop_endpointContext;

Drop_endpointContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_endpointContext.prototype.ENDPOINT = function() {
    return this.getToken(TSqlParser.ENDPOINT, 0);
};

Drop_endpointContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_endpointContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_endpoint(this);
	}
};

Drop_endpointContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_endpoint(this);
	}
};




TSqlParser.Drop_endpointContext = Drop_endpointContext;

TSqlParser.prototype.drop_endpoint = function() {

    var localctx = new Drop_endpointContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, TSqlParser.RULE_drop_endpoint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2354;
        this.match(TSqlParser.DROP);
        this.state = 2355;
        this.match(TSqlParser.ENDPOINT);
        this.state = 2356;
        localctx.endPointName = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_external_data_sourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_external_data_source;
    this.external_data_source_name = null; // IdContext
    return this;
}

Drop_external_data_sourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_external_data_sourceContext.prototype.constructor = Drop_external_data_sourceContext;

Drop_external_data_sourceContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_external_data_sourceContext.prototype.EXTERNAL = function() {
    return this.getToken(TSqlParser.EXTERNAL, 0);
};

Drop_external_data_sourceContext.prototype.DATA = function() {
    return this.getToken(TSqlParser.DATA, 0);
};

Drop_external_data_sourceContext.prototype.SOURCE = function() {
    return this.getToken(TSqlParser.SOURCE, 0);
};

Drop_external_data_sourceContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_external_data_sourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_external_data_source(this);
	}
};

Drop_external_data_sourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_external_data_source(this);
	}
};




TSqlParser.Drop_external_data_sourceContext = Drop_external_data_sourceContext;

TSqlParser.prototype.drop_external_data_source = function() {

    var localctx = new Drop_external_data_sourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, TSqlParser.RULE_drop_external_data_source);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2358;
        this.match(TSqlParser.DROP);
        this.state = 2359;
        this.match(TSqlParser.EXTERNAL);
        this.state = 2360;
        this.match(TSqlParser.DATA);
        this.state = 2361;
        this.match(TSqlParser.SOURCE);
        this.state = 2362;
        localctx.external_data_source_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_external_file_formatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_external_file_format;
    this.external_file_format_name = null; // IdContext
    return this;
}

Drop_external_file_formatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_external_file_formatContext.prototype.constructor = Drop_external_file_formatContext;

Drop_external_file_formatContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_external_file_formatContext.prototype.EXTERNAL = function() {
    return this.getToken(TSqlParser.EXTERNAL, 0);
};

Drop_external_file_formatContext.prototype.FILE = function() {
    return this.getToken(TSqlParser.FILE, 0);
};

Drop_external_file_formatContext.prototype.FORMAT = function() {
    return this.getToken(TSqlParser.FORMAT, 0);
};

Drop_external_file_formatContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_external_file_formatContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_external_file_format(this);
	}
};

Drop_external_file_formatContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_external_file_format(this);
	}
};




TSqlParser.Drop_external_file_formatContext = Drop_external_file_formatContext;

TSqlParser.prototype.drop_external_file_format = function() {

    var localctx = new Drop_external_file_formatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, TSqlParser.RULE_drop_external_file_format);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2364;
        this.match(TSqlParser.DROP);
        this.state = 2365;
        this.match(TSqlParser.EXTERNAL);
        this.state = 2366;
        this.match(TSqlParser.FILE);
        this.state = 2367;
        this.match(TSqlParser.FORMAT);
        this.state = 2368;
        localctx.external_file_format_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_external_libraryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_external_library;
    this.library_name = null; // IdContext
    this.owner_name = null; // IdContext
    return this;
}

Drop_external_libraryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_external_libraryContext.prototype.constructor = Drop_external_libraryContext;

Drop_external_libraryContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_external_libraryContext.prototype.EXTERNAL = function() {
    return this.getToken(TSqlParser.EXTERNAL, 0);
};

Drop_external_libraryContext.prototype.LIBRARY = function() {
    return this.getToken(TSqlParser.LIBRARY, 0);
};

Drop_external_libraryContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Drop_external_libraryContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Drop_external_libraryContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_external_library(this);
	}
};

Drop_external_libraryContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_external_library(this);
	}
};




TSqlParser.Drop_external_libraryContext = Drop_external_libraryContext;

TSqlParser.prototype.drop_external_library = function() {

    var localctx = new Drop_external_libraryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, TSqlParser.RULE_drop_external_library);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2370;
        this.match(TSqlParser.DROP);
        this.state = 2371;
        this.match(TSqlParser.EXTERNAL);
        this.state = 2372;
        this.match(TSqlParser.LIBRARY);
        this.state = 2373;
        localctx.library_name = this.id();
        this.state = 2376;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AUTHORIZATION) {
            this.state = 2374;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 2375;
            localctx.owner_name = this.id();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_external_resource_poolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_external_resource_pool;
    this.pool_name = null; // IdContext
    return this;
}

Drop_external_resource_poolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_external_resource_poolContext.prototype.constructor = Drop_external_resource_poolContext;

Drop_external_resource_poolContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_external_resource_poolContext.prototype.EXTERNAL = function() {
    return this.getToken(TSqlParser.EXTERNAL, 0);
};

Drop_external_resource_poolContext.prototype.RESOURCE = function() {
    return this.getToken(TSqlParser.RESOURCE, 0);
};

Drop_external_resource_poolContext.prototype.POOL = function() {
    return this.getToken(TSqlParser.POOL, 0);
};

Drop_external_resource_poolContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_external_resource_poolContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_external_resource_pool(this);
	}
};

Drop_external_resource_poolContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_external_resource_pool(this);
	}
};




TSqlParser.Drop_external_resource_poolContext = Drop_external_resource_poolContext;

TSqlParser.prototype.drop_external_resource_pool = function() {

    var localctx = new Drop_external_resource_poolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, TSqlParser.RULE_drop_external_resource_pool);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2378;
        this.match(TSqlParser.DROP);
        this.state = 2379;
        this.match(TSqlParser.EXTERNAL);
        this.state = 2380;
        this.match(TSqlParser.RESOURCE);
        this.state = 2381;
        this.match(TSqlParser.POOL);
        this.state = 2382;
        localctx.pool_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_external_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_external_table;
    this.database_name = null; // IdContext
    this.schema_name = null; // IdContext
    this.table = null; // IdContext
    return this;
}

Drop_external_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_external_tableContext.prototype.constructor = Drop_external_tableContext;

Drop_external_tableContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_external_tableContext.prototype.EXTERNAL = function() {
    return this.getToken(TSqlParser.EXTERNAL, 0);
};

Drop_external_tableContext.prototype.TABLE = function() {
    return this.getToken(TSqlParser.TABLE, 0);
};

Drop_external_tableContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Drop_external_tableContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DOT);
    } else {
        return this.getToken(TSqlParser.DOT, i);
    }
};


Drop_external_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_external_table(this);
	}
};

Drop_external_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_external_table(this);
	}
};




TSqlParser.Drop_external_tableContext = Drop_external_tableContext;

TSqlParser.prototype.drop_external_table = function() {

    var localctx = new Drop_external_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, TSqlParser.RULE_drop_external_table);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2384;
        this.match(TSqlParser.DROP);
        this.state = 2385;
        this.match(TSqlParser.EXTERNAL);
        this.state = 2386;
        this.match(TSqlParser.TABLE);
        this.state = 2390;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
        if(la_===1) {
            this.state = 2387;
            localctx.database_name = this.id();
            this.state = 2388;
            this.match(TSqlParser.DOT);

        }
        this.state = 2395;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
        if(la_===1) {
            this.state = 2392;
            localctx.schema_name = this.id();
            this.state = 2393;
            this.match(TSqlParser.DOT);

        }
        this.state = 2397;
        localctx.table = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_event_notificationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_event_notifications;
    this.notification_name = null; // IdContext
    this.queue_name = null; // IdContext
    return this;
}

Drop_event_notificationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_event_notificationsContext.prototype.constructor = Drop_event_notificationsContext;

Drop_event_notificationsContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_event_notificationsContext.prototype.EVENT = function() {
    return this.getToken(TSqlParser.EVENT, 0);
};

Drop_event_notificationsContext.prototype.NOTIFICATION = function() {
    return this.getToken(TSqlParser.NOTIFICATION, 0);
};

Drop_event_notificationsContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Drop_event_notificationsContext.prototype.SERVER = function() {
    return this.getToken(TSqlParser.SERVER, 0);
};

Drop_event_notificationsContext.prototype.DATABASE = function() {
    return this.getToken(TSqlParser.DATABASE, 0);
};

Drop_event_notificationsContext.prototype.QUEUE = function() {
    return this.getToken(TSqlParser.QUEUE, 0);
};

Drop_event_notificationsContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Drop_event_notificationsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Drop_event_notificationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_event_notifications(this);
	}
};

Drop_event_notificationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_event_notifications(this);
	}
};




TSqlParser.Drop_event_notificationsContext = Drop_event_notificationsContext;

TSqlParser.prototype.drop_event_notifications = function() {

    var localctx = new Drop_event_notificationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, TSqlParser.RULE_drop_event_notifications);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2399;
        this.match(TSqlParser.DROP);
        this.state = 2400;
        this.match(TSqlParser.EVENT);
        this.state = 2401;
        this.match(TSqlParser.NOTIFICATION);
        this.state = 2406; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2403;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 2402;
                this.match(TSqlParser.COMMA);
            }

            this.state = 2405;
            localctx.notification_name = this.id();
            this.state = 2408; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0) || _la===TSqlParser.COMMA);
        this.state = 2410;
        this.match(TSqlParser.ON);
        this.state = 2415;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.SERVER:
            this.state = 2411;
            this.match(TSqlParser.SERVER);
            break;
        case TSqlParser.DATABASE:
            this.state = 2412;
            this.match(TSqlParser.DATABASE);
            break;
        case TSqlParser.QUEUE:
            this.state = 2413;
            this.match(TSqlParser.QUEUE);
            this.state = 2414;
            localctx.queue_name = this.id();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_event_sessionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_event_session;
    this.event_session_name = null; // IdContext
    return this;
}

Drop_event_sessionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_event_sessionContext.prototype.constructor = Drop_event_sessionContext;

Drop_event_sessionContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_event_sessionContext.prototype.EVENT = function() {
    return this.getToken(TSqlParser.EVENT, 0);
};

Drop_event_sessionContext.prototype.SESSION = function() {
    return this.getToken(TSqlParser.SESSION, 0);
};

Drop_event_sessionContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Drop_event_sessionContext.prototype.SERVER = function() {
    return this.getToken(TSqlParser.SERVER, 0);
};

Drop_event_sessionContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_event_sessionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_event_session(this);
	}
};

Drop_event_sessionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_event_session(this);
	}
};




TSqlParser.Drop_event_sessionContext = Drop_event_sessionContext;

TSqlParser.prototype.drop_event_session = function() {

    var localctx = new Drop_event_sessionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, TSqlParser.RULE_drop_event_session);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2417;
        this.match(TSqlParser.DROP);
        this.state = 2418;
        this.match(TSqlParser.EVENT);
        this.state = 2419;
        this.match(TSqlParser.SESSION);
        this.state = 2420;
        localctx.event_session_name = this.id();
        this.state = 2421;
        this.match(TSqlParser.ON);
        this.state = 2422;
        this.match(TSqlParser.SERVER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_fulltext_catalogContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_fulltext_catalog;
    this.catalog_name = null; // IdContext
    return this;
}

Drop_fulltext_catalogContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_fulltext_catalogContext.prototype.constructor = Drop_fulltext_catalogContext;

Drop_fulltext_catalogContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_fulltext_catalogContext.prototype.FULLTEXT = function() {
    return this.getToken(TSqlParser.FULLTEXT, 0);
};

Drop_fulltext_catalogContext.prototype.CATALOG = function() {
    return this.getToken(TSqlParser.CATALOG, 0);
};

Drop_fulltext_catalogContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_fulltext_catalogContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_fulltext_catalog(this);
	}
};

Drop_fulltext_catalogContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_fulltext_catalog(this);
	}
};




TSqlParser.Drop_fulltext_catalogContext = Drop_fulltext_catalogContext;

TSqlParser.prototype.drop_fulltext_catalog = function() {

    var localctx = new Drop_fulltext_catalogContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, TSqlParser.RULE_drop_fulltext_catalog);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2424;
        this.match(TSqlParser.DROP);
        this.state = 2425;
        this.match(TSqlParser.FULLTEXT);
        this.state = 2426;
        this.match(TSqlParser.CATALOG);
        this.state = 2427;
        localctx.catalog_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_fulltext_indexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_fulltext_index;
    this.schema = null; // IdContext
    this.table = null; // IdContext
    return this;
}

Drop_fulltext_indexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_fulltext_indexContext.prototype.constructor = Drop_fulltext_indexContext;

Drop_fulltext_indexContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_fulltext_indexContext.prototype.FULLTEXT = function() {
    return this.getToken(TSqlParser.FULLTEXT, 0);
};

Drop_fulltext_indexContext.prototype.INDEX = function() {
    return this.getToken(TSqlParser.INDEX, 0);
};

Drop_fulltext_indexContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Drop_fulltext_indexContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Drop_fulltext_indexContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

Drop_fulltext_indexContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_fulltext_index(this);
	}
};

Drop_fulltext_indexContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_fulltext_index(this);
	}
};




TSqlParser.Drop_fulltext_indexContext = Drop_fulltext_indexContext;

TSqlParser.prototype.drop_fulltext_index = function() {

    var localctx = new Drop_fulltext_indexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, TSqlParser.RULE_drop_fulltext_index);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2429;
        this.match(TSqlParser.DROP);
        this.state = 2430;
        this.match(TSqlParser.FULLTEXT);
        this.state = 2431;
        this.match(TSqlParser.INDEX);
        this.state = 2432;
        this.match(TSqlParser.ON);
        this.state = 2436;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
        if(la_===1) {
            this.state = 2433;
            localctx.schema = this.id();
            this.state = 2434;
            this.match(TSqlParser.DOT);

        }
        this.state = 2438;
        localctx.table = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_fulltext_stoplistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_fulltext_stoplist;
    this.stoplist_name = null; // IdContext
    return this;
}

Drop_fulltext_stoplistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_fulltext_stoplistContext.prototype.constructor = Drop_fulltext_stoplistContext;

Drop_fulltext_stoplistContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_fulltext_stoplistContext.prototype.FULLTEXT = function() {
    return this.getToken(TSqlParser.FULLTEXT, 0);
};

Drop_fulltext_stoplistContext.prototype.STOPLIST = function() {
    return this.getToken(TSqlParser.STOPLIST, 0);
};

Drop_fulltext_stoplistContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_fulltext_stoplistContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_fulltext_stoplist(this);
	}
};

Drop_fulltext_stoplistContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_fulltext_stoplist(this);
	}
};




TSqlParser.Drop_fulltext_stoplistContext = Drop_fulltext_stoplistContext;

TSqlParser.prototype.drop_fulltext_stoplist = function() {

    var localctx = new Drop_fulltext_stoplistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, TSqlParser.RULE_drop_fulltext_stoplist);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2440;
        this.match(TSqlParser.DROP);
        this.state = 2441;
        this.match(TSqlParser.FULLTEXT);
        this.state = 2442;
        this.match(TSqlParser.STOPLIST);
        this.state = 2443;
        localctx.stoplist_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_loginContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_login;
    this.login_name = null; // IdContext
    return this;
}

Drop_loginContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_loginContext.prototype.constructor = Drop_loginContext;

Drop_loginContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_loginContext.prototype.LOGIN = function() {
    return this.getToken(TSqlParser.LOGIN, 0);
};

Drop_loginContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_loginContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_login(this);
	}
};

Drop_loginContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_login(this);
	}
};




TSqlParser.Drop_loginContext = Drop_loginContext;

TSqlParser.prototype.drop_login = function() {

    var localctx = new Drop_loginContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, TSqlParser.RULE_drop_login);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2445;
        this.match(TSqlParser.DROP);
        this.state = 2446;
        this.match(TSqlParser.LOGIN);
        this.state = 2447;
        localctx.login_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_master_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_master_key;
    return this;
}

Drop_master_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_master_keyContext.prototype.constructor = Drop_master_keyContext;

Drop_master_keyContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_master_keyContext.prototype.MASTER = function() {
    return this.getToken(TSqlParser.MASTER, 0);
};

Drop_master_keyContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Drop_master_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_master_key(this);
	}
};

Drop_master_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_master_key(this);
	}
};




TSqlParser.Drop_master_keyContext = Drop_master_keyContext;

TSqlParser.prototype.drop_master_key = function() {

    var localctx = new Drop_master_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, TSqlParser.RULE_drop_master_key);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2449;
        this.match(TSqlParser.DROP);
        this.state = 2450;
        this.match(TSqlParser.MASTER);
        this.state = 2451;
        this.match(TSqlParser.KEY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_message_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_message_type;
    this.message_type_name = null; // IdContext
    return this;
}

Drop_message_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_message_typeContext.prototype.constructor = Drop_message_typeContext;

Drop_message_typeContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_message_typeContext.prototype.MESSAGE = function() {
    return this.getToken(TSqlParser.MESSAGE, 0);
};

Drop_message_typeContext.prototype.TYPE = function() {
    return this.getToken(TSqlParser.TYPE, 0);
};

Drop_message_typeContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_message_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_message_type(this);
	}
};

Drop_message_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_message_type(this);
	}
};




TSqlParser.Drop_message_typeContext = Drop_message_typeContext;

TSqlParser.prototype.drop_message_type = function() {

    var localctx = new Drop_message_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, TSqlParser.RULE_drop_message_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2453;
        this.match(TSqlParser.DROP);
        this.state = 2454;
        this.match(TSqlParser.MESSAGE);
        this.state = 2455;
        this.match(TSqlParser.TYPE);
        this.state = 2456;
        localctx.message_type_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_partition_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_partition_function;
    this.partition_function_name = null; // IdContext
    return this;
}

Drop_partition_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_partition_functionContext.prototype.constructor = Drop_partition_functionContext;

Drop_partition_functionContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_partition_functionContext.prototype.PARTITION = function() {
    return this.getToken(TSqlParser.PARTITION, 0);
};

Drop_partition_functionContext.prototype.FUNCTION = function() {
    return this.getToken(TSqlParser.FUNCTION, 0);
};

Drop_partition_functionContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_partition_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_partition_function(this);
	}
};

Drop_partition_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_partition_function(this);
	}
};




TSqlParser.Drop_partition_functionContext = Drop_partition_functionContext;

TSqlParser.prototype.drop_partition_function = function() {

    var localctx = new Drop_partition_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, TSqlParser.RULE_drop_partition_function);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2458;
        this.match(TSqlParser.DROP);
        this.state = 2459;
        this.match(TSqlParser.PARTITION);
        this.state = 2460;
        this.match(TSqlParser.FUNCTION);
        this.state = 2461;
        localctx.partition_function_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_partition_schemeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_partition_scheme;
    this.partition_scheme_name = null; // IdContext
    return this;
}

Drop_partition_schemeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_partition_schemeContext.prototype.constructor = Drop_partition_schemeContext;

Drop_partition_schemeContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_partition_schemeContext.prototype.PARTITION = function() {
    return this.getToken(TSqlParser.PARTITION, 0);
};

Drop_partition_schemeContext.prototype.SCHEME = function() {
    return this.getToken(TSqlParser.SCHEME, 0);
};

Drop_partition_schemeContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_partition_schemeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_partition_scheme(this);
	}
};

Drop_partition_schemeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_partition_scheme(this);
	}
};




TSqlParser.Drop_partition_schemeContext = Drop_partition_schemeContext;

TSqlParser.prototype.drop_partition_scheme = function() {

    var localctx = new Drop_partition_schemeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, TSqlParser.RULE_drop_partition_scheme);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2463;
        this.match(TSqlParser.DROP);
        this.state = 2464;
        this.match(TSqlParser.PARTITION);
        this.state = 2465;
        this.match(TSqlParser.SCHEME);
        this.state = 2466;
        localctx.partition_scheme_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_queueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_queue;
    this.database_name = null; // IdContext
    this.schema_name = null; // IdContext
    this.queue_name = null; // IdContext
    return this;
}

Drop_queueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_queueContext.prototype.constructor = Drop_queueContext;

Drop_queueContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_queueContext.prototype.QUEUE = function() {
    return this.getToken(TSqlParser.QUEUE, 0);
};

Drop_queueContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Drop_queueContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DOT);
    } else {
        return this.getToken(TSqlParser.DOT, i);
    }
};


Drop_queueContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_queue(this);
	}
};

Drop_queueContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_queue(this);
	}
};




TSqlParser.Drop_queueContext = Drop_queueContext;

TSqlParser.prototype.drop_queue = function() {

    var localctx = new Drop_queueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, TSqlParser.RULE_drop_queue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2468;
        this.match(TSqlParser.DROP);
        this.state = 2469;
        this.match(TSqlParser.QUEUE);
        this.state = 2473;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
        if(la_===1) {
            this.state = 2470;
            localctx.database_name = this.id();
            this.state = 2471;
            this.match(TSqlParser.DOT);

        }
        this.state = 2478;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
        if(la_===1) {
            this.state = 2475;
            localctx.schema_name = this.id();
            this.state = 2476;
            this.match(TSqlParser.DOT);

        }
        this.state = 2480;
        localctx.queue_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_remote_service_bindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_remote_service_binding;
    this.binding_name = null; // IdContext
    return this;
}

Drop_remote_service_bindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_remote_service_bindingContext.prototype.constructor = Drop_remote_service_bindingContext;

Drop_remote_service_bindingContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_remote_service_bindingContext.prototype.REMOTE = function() {
    return this.getToken(TSqlParser.REMOTE, 0);
};

Drop_remote_service_bindingContext.prototype.SERVICE = function() {
    return this.getToken(TSqlParser.SERVICE, 0);
};

Drop_remote_service_bindingContext.prototype.BINDING = function() {
    return this.getToken(TSqlParser.BINDING, 0);
};

Drop_remote_service_bindingContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_remote_service_bindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_remote_service_binding(this);
	}
};

Drop_remote_service_bindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_remote_service_binding(this);
	}
};




TSqlParser.Drop_remote_service_bindingContext = Drop_remote_service_bindingContext;

TSqlParser.prototype.drop_remote_service_binding = function() {

    var localctx = new Drop_remote_service_bindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, TSqlParser.RULE_drop_remote_service_binding);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2482;
        this.match(TSqlParser.DROP);
        this.state = 2483;
        this.match(TSqlParser.REMOTE);
        this.state = 2484;
        this.match(TSqlParser.SERVICE);
        this.state = 2485;
        this.match(TSqlParser.BINDING);
        this.state = 2486;
        localctx.binding_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_resource_poolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_resource_pool;
    this.pool_name = null; // IdContext
    return this;
}

Drop_resource_poolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_resource_poolContext.prototype.constructor = Drop_resource_poolContext;

Drop_resource_poolContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_resource_poolContext.prototype.RESOURCE = function() {
    return this.getToken(TSqlParser.RESOURCE, 0);
};

Drop_resource_poolContext.prototype.POOL = function() {
    return this.getToken(TSqlParser.POOL, 0);
};

Drop_resource_poolContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_resource_poolContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_resource_pool(this);
	}
};

Drop_resource_poolContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_resource_pool(this);
	}
};




TSqlParser.Drop_resource_poolContext = Drop_resource_poolContext;

TSqlParser.prototype.drop_resource_pool = function() {

    var localctx = new Drop_resource_poolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, TSqlParser.RULE_drop_resource_pool);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2488;
        this.match(TSqlParser.DROP);
        this.state = 2489;
        this.match(TSqlParser.RESOURCE);
        this.state = 2490;
        this.match(TSqlParser.POOL);
        this.state = 2491;
        localctx.pool_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_db_roleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_db_role;
    this.role_name = null; // IdContext
    return this;
}

Drop_db_roleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_db_roleContext.prototype.constructor = Drop_db_roleContext;

Drop_db_roleContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_db_roleContext.prototype.ROLE = function() {
    return this.getToken(TSqlParser.ROLE, 0);
};

Drop_db_roleContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_db_roleContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

Drop_db_roleContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

Drop_db_roleContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_db_role(this);
	}
};

Drop_db_roleContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_db_role(this);
	}
};




TSqlParser.Drop_db_roleContext = Drop_db_roleContext;

TSqlParser.prototype.drop_db_role = function() {

    var localctx = new Drop_db_roleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, TSqlParser.RULE_drop_db_role);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2493;
        this.match(TSqlParser.DROP);
        this.state = 2494;
        this.match(TSqlParser.ROLE);
        this.state = 2497;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.IF) {
            this.state = 2495;
            this.match(TSqlParser.IF);
            this.state = 2496;
            this.match(TSqlParser.EXISTS);
        }

        this.state = 2499;
        localctx.role_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_routeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_route;
    this.route_name = null; // IdContext
    return this;
}

Drop_routeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_routeContext.prototype.constructor = Drop_routeContext;

Drop_routeContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_routeContext.prototype.ROUTE = function() {
    return this.getToken(TSqlParser.ROUTE, 0);
};

Drop_routeContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_routeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_route(this);
	}
};

Drop_routeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_route(this);
	}
};




TSqlParser.Drop_routeContext = Drop_routeContext;

TSqlParser.prototype.drop_route = function() {

    var localctx = new Drop_routeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, TSqlParser.RULE_drop_route);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2501;
        this.match(TSqlParser.DROP);
        this.state = 2502;
        this.match(TSqlParser.ROUTE);
        this.state = 2503;
        localctx.route_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_ruleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_rule;
    this.schema_name = null; // IdContext
    this.rule_name = null; // IdContext
    return this;
}

Drop_ruleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_ruleContext.prototype.constructor = Drop_ruleContext;

Drop_ruleContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_ruleContext.prototype.RULE = function() {
    return this.getToken(TSqlParser.RULE, 0);
};

Drop_ruleContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

Drop_ruleContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

Drop_ruleContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Drop_ruleContext.prototype.COMMA = function() {
    return this.getToken(TSqlParser.COMMA, 0);
};

Drop_ruleContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

Drop_ruleContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_rule(this);
	}
};

Drop_ruleContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_rule(this);
	}
};




TSqlParser.Drop_ruleContext = Drop_ruleContext;

TSqlParser.prototype.drop_rule = function() {

    var localctx = new Drop_ruleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, TSqlParser.RULE_drop_rule);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2505;
        this.match(TSqlParser.DROP);
        this.state = 2506;
        this.match(TSqlParser.RULE);
        this.state = 2509;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
        if(la_===1) {
            this.state = 2507;
            this.match(TSqlParser.IF);
            this.state = 2508;
            this.match(TSqlParser.EXISTS);

        }
        this.state = 2520;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
        if(la_===1) {
            this.state = 2512;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 2511;
                this.match(TSqlParser.COMMA);
            }

            this.state = 2517;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
            if(la_===1) {
                this.state = 2514;
                localctx.schema_name = this.id();
                this.state = 2515;
                this.match(TSqlParser.DOT);

            }
            this.state = 2519;
            localctx.rule_name = this.id();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_schemaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_schema;
    this.schema_name = null; // IdContext
    return this;
}

Drop_schemaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_schemaContext.prototype.constructor = Drop_schemaContext;

Drop_schemaContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_schemaContext.prototype.SCHEMA = function() {
    return this.getToken(TSqlParser.SCHEMA, 0);
};

Drop_schemaContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_schemaContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

Drop_schemaContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

Drop_schemaContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_schema(this);
	}
};

Drop_schemaContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_schema(this);
	}
};




TSqlParser.Drop_schemaContext = Drop_schemaContext;

TSqlParser.prototype.drop_schema = function() {

    var localctx = new Drop_schemaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, TSqlParser.RULE_drop_schema);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2522;
        this.match(TSqlParser.DROP);
        this.state = 2523;
        this.match(TSqlParser.SCHEMA);
        this.state = 2526;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.IF) {
            this.state = 2524;
            this.match(TSqlParser.IF);
            this.state = 2525;
            this.match(TSqlParser.EXISTS);
        }

        this.state = 2528;
        localctx.schema_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_search_property_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_search_property_list;
    this.property_list_name = null; // IdContext
    return this;
}

Drop_search_property_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_search_property_listContext.prototype.constructor = Drop_search_property_listContext;

Drop_search_property_listContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_search_property_listContext.prototype.SEARCH = function() {
    return this.getToken(TSqlParser.SEARCH, 0);
};

Drop_search_property_listContext.prototype.PROPERTY = function() {
    return this.getToken(TSqlParser.PROPERTY, 0);
};

Drop_search_property_listContext.prototype.LIST = function() {
    return this.getToken(TSqlParser.LIST, 0);
};

Drop_search_property_listContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_search_property_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_search_property_list(this);
	}
};

Drop_search_property_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_search_property_list(this);
	}
};




TSqlParser.Drop_search_property_listContext = Drop_search_property_listContext;

TSqlParser.prototype.drop_search_property_list = function() {

    var localctx = new Drop_search_property_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, TSqlParser.RULE_drop_search_property_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2530;
        this.match(TSqlParser.DROP);
        this.state = 2531;
        this.match(TSqlParser.SEARCH);
        this.state = 2532;
        this.match(TSqlParser.PROPERTY);
        this.state = 2533;
        this.match(TSqlParser.LIST);
        this.state = 2534;
        localctx.property_list_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_security_policyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_security_policy;
    this.schema_name = null; // IdContext
    this.security_policy_name = null; // IdContext
    return this;
}

Drop_security_policyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_security_policyContext.prototype.constructor = Drop_security_policyContext;

Drop_security_policyContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_security_policyContext.prototype.SECURITY = function() {
    return this.getToken(TSqlParser.SECURITY, 0);
};

Drop_security_policyContext.prototype.POLICY = function() {
    return this.getToken(TSqlParser.POLICY, 0);
};

Drop_security_policyContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Drop_security_policyContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

Drop_security_policyContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

Drop_security_policyContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

Drop_security_policyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_security_policy(this);
	}
};

Drop_security_policyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_security_policy(this);
	}
};




TSqlParser.Drop_security_policyContext = Drop_security_policyContext;

TSqlParser.prototype.drop_security_policy = function() {

    var localctx = new Drop_security_policyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, TSqlParser.RULE_drop_security_policy);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2536;
        this.match(TSqlParser.DROP);
        this.state = 2537;
        this.match(TSqlParser.SECURITY);
        this.state = 2538;
        this.match(TSqlParser.POLICY);
        this.state = 2541;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.IF) {
            this.state = 2539;
            this.match(TSqlParser.IF);
            this.state = 2540;
            this.match(TSqlParser.EXISTS);
        }

        this.state = 2546;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
        if(la_===1) {
            this.state = 2543;
            localctx.schema_name = this.id();
            this.state = 2544;
            this.match(TSqlParser.DOT);

        }
        this.state = 2548;
        localctx.security_policy_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_sequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_sequence;
    this.database_name = null; // IdContext
    this.schema_name = null; // IdContext
    this.sequence_name = null; // IdContext
    return this;
}

Drop_sequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_sequenceContext.prototype.constructor = Drop_sequenceContext;

Drop_sequenceContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_sequenceContext.prototype.SEQUENCE = function() {
    return this.getToken(TSqlParser.SEQUENCE, 0);
};

Drop_sequenceContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

Drop_sequenceContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

Drop_sequenceContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Drop_sequenceContext.prototype.COMMA = function() {
    return this.getToken(TSqlParser.COMMA, 0);
};

Drop_sequenceContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DOT);
    } else {
        return this.getToken(TSqlParser.DOT, i);
    }
};


Drop_sequenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_sequence(this);
	}
};

Drop_sequenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_sequence(this);
	}
};




TSqlParser.Drop_sequenceContext = Drop_sequenceContext;

TSqlParser.prototype.drop_sequence = function() {

    var localctx = new Drop_sequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, TSqlParser.RULE_drop_sequence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2550;
        this.match(TSqlParser.DROP);
        this.state = 2551;
        this.match(TSqlParser.SEQUENCE);
        this.state = 2554;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
        if(la_===1) {
            this.state = 2552;
            this.match(TSqlParser.IF);
            this.state = 2553;
            this.match(TSqlParser.EXISTS);

        }
        this.state = 2570;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
        if(la_===1) {
            this.state = 2557;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 2556;
                this.match(TSqlParser.COMMA);
            }

            this.state = 2562;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
            if(la_===1) {
                this.state = 2559;
                localctx.database_name = this.id();
                this.state = 2560;
                this.match(TSqlParser.DOT);

            }
            this.state = 2567;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
            if(la_===1) {
                this.state = 2564;
                localctx.schema_name = this.id();
                this.state = 2565;
                this.match(TSqlParser.DOT);

            }
            this.state = 2569;
            localctx.sequence_name = this.id();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_server_auditContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_server_audit;
    this.audit_name = null; // IdContext
    return this;
}

Drop_server_auditContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_server_auditContext.prototype.constructor = Drop_server_auditContext;

Drop_server_auditContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_server_auditContext.prototype.SERVER = function() {
    return this.getToken(TSqlParser.SERVER, 0);
};

Drop_server_auditContext.prototype.AUDIT = function() {
    return this.getToken(TSqlParser.AUDIT, 0);
};

Drop_server_auditContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_server_auditContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_server_audit(this);
	}
};

Drop_server_auditContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_server_audit(this);
	}
};




TSqlParser.Drop_server_auditContext = Drop_server_auditContext;

TSqlParser.prototype.drop_server_audit = function() {

    var localctx = new Drop_server_auditContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, TSqlParser.RULE_drop_server_audit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2572;
        this.match(TSqlParser.DROP);
        this.state = 2573;
        this.match(TSqlParser.SERVER);
        this.state = 2574;
        this.match(TSqlParser.AUDIT);
        this.state = 2575;
        localctx.audit_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_server_audit_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_server_audit_specification;
    this.audit_specification_name = null; // IdContext
    return this;
}

Drop_server_audit_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_server_audit_specificationContext.prototype.constructor = Drop_server_audit_specificationContext;

Drop_server_audit_specificationContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_server_audit_specificationContext.prototype.SERVER = function() {
    return this.getToken(TSqlParser.SERVER, 0);
};

Drop_server_audit_specificationContext.prototype.AUDIT = function() {
    return this.getToken(TSqlParser.AUDIT, 0);
};

Drop_server_audit_specificationContext.prototype.SPECIFICATION = function() {
    return this.getToken(TSqlParser.SPECIFICATION, 0);
};

Drop_server_audit_specificationContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_server_audit_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_server_audit_specification(this);
	}
};

Drop_server_audit_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_server_audit_specification(this);
	}
};




TSqlParser.Drop_server_audit_specificationContext = Drop_server_audit_specificationContext;

TSqlParser.prototype.drop_server_audit_specification = function() {

    var localctx = new Drop_server_audit_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, TSqlParser.RULE_drop_server_audit_specification);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2577;
        this.match(TSqlParser.DROP);
        this.state = 2578;
        this.match(TSqlParser.SERVER);
        this.state = 2579;
        this.match(TSqlParser.AUDIT);
        this.state = 2580;
        this.match(TSqlParser.SPECIFICATION);
        this.state = 2581;
        localctx.audit_specification_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_server_roleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_server_role;
    this.role_name = null; // IdContext
    return this;
}

Drop_server_roleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_server_roleContext.prototype.constructor = Drop_server_roleContext;

Drop_server_roleContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_server_roleContext.prototype.SERVER = function() {
    return this.getToken(TSqlParser.SERVER, 0);
};

Drop_server_roleContext.prototype.ROLE = function() {
    return this.getToken(TSqlParser.ROLE, 0);
};

Drop_server_roleContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_server_roleContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_server_role(this);
	}
};

Drop_server_roleContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_server_role(this);
	}
};




TSqlParser.Drop_server_roleContext = Drop_server_roleContext;

TSqlParser.prototype.drop_server_role = function() {

    var localctx = new Drop_server_roleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, TSqlParser.RULE_drop_server_role);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2583;
        this.match(TSqlParser.DROP);
        this.state = 2584;
        this.match(TSqlParser.SERVER);
        this.state = 2585;
        this.match(TSqlParser.ROLE);
        this.state = 2586;
        localctx.role_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_serviceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_service;
    this.dropped_service_name = null; // IdContext
    return this;
}

Drop_serviceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_serviceContext.prototype.constructor = Drop_serviceContext;

Drop_serviceContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_serviceContext.prototype.SERVICE = function() {
    return this.getToken(TSqlParser.SERVICE, 0);
};

Drop_serviceContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_serviceContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_service(this);
	}
};

Drop_serviceContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_service(this);
	}
};




TSqlParser.Drop_serviceContext = Drop_serviceContext;

TSqlParser.prototype.drop_service = function() {

    var localctx = new Drop_serviceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, TSqlParser.RULE_drop_service);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2588;
        this.match(TSqlParser.DROP);
        this.state = 2589;
        this.match(TSqlParser.SERVICE);
        this.state = 2590;
        localctx.dropped_service_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_signatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_signature;
    this.schema_name = null; // IdContext
    this.module_name = null; // IdContext
    this.cert_name = null; // IdContext
    this.Asym_key_name = null; // IdContext
    return this;
}

Drop_signatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_signatureContext.prototype.constructor = Drop_signatureContext;

Drop_signatureContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_signatureContext.prototype.SIGNATURE = function() {
    return this.getToken(TSqlParser.SIGNATURE, 0);
};

Drop_signatureContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Drop_signatureContext.prototype.BY = function() {
    return this.getToken(TSqlParser.BY, 0);
};

Drop_signatureContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Drop_signatureContext.prototype.COUNTER = function() {
    return this.getToken(TSqlParser.COUNTER, 0);
};

Drop_signatureContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

Drop_signatureContext.prototype.CERTIFICATE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.CERTIFICATE);
    } else {
        return this.getToken(TSqlParser.CERTIFICATE, i);
    }
};


Drop_signatureContext.prototype.ASYMMETRIC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ASYMMETRIC);
    } else {
        return this.getToken(TSqlParser.ASYMMETRIC, i);
    }
};


Drop_signatureContext.prototype.KEY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.KEY);
    } else {
        return this.getToken(TSqlParser.KEY, i);
    }
};


Drop_signatureContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Drop_signatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_signature(this);
	}
};

Drop_signatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_signature(this);
	}
};




TSqlParser.Drop_signatureContext = Drop_signatureContext;

TSqlParser.prototype.drop_signature = function() {

    var localctx = new Drop_signatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, TSqlParser.RULE_drop_signature);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2592;
        this.match(TSqlParser.DROP);
        this.state = 2594;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COUNTER) {
            this.state = 2593;
            this.match(TSqlParser.COUNTER);
        }

        this.state = 2596;
        this.match(TSqlParser.SIGNATURE);
        this.state = 2597;
        this.match(TSqlParser.FROM);
        this.state = 2601;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
        if(la_===1) {
            this.state = 2598;
            localctx.schema_name = this.id();
            this.state = 2599;
            this.match(TSqlParser.DOT);

        }
        this.state = 2603;
        localctx.module_name = this.id();
        this.state = 2604;
        this.match(TSqlParser.BY);
        this.state = 2616; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2616;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
            switch(la_) {
            case 1:
                this.state = 2606;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 2605;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 2608;
                this.match(TSqlParser.CERTIFICATE);
                this.state = 2609;
                localctx.cert_name = this.id();
                break;

            case 2:
                this.state = 2611;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 2610;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 2613;
                this.match(TSqlParser.ASYMMETRIC);
                this.state = 2614;
                this.match(TSqlParser.KEY);
                this.state = 2615;
                localctx.Asym_key_name = this.id();
                break;

            }
            this.state = 2618; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===TSqlParser.ASYMMETRIC || _la===TSqlParser.CERTIFICATE || _la===TSqlParser.COMMA);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_statistics_name_azure_dw_and_pdwContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_statistics_name_azure_dw_and_pdw;
    this.schema_name = null; // IdContext
    this.object_name = null; // IdContext
    this.statistics_name = null; // IdContext
    return this;
}

Drop_statistics_name_azure_dw_and_pdwContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_statistics_name_azure_dw_and_pdwContext.prototype.constructor = Drop_statistics_name_azure_dw_and_pdwContext;

Drop_statistics_name_azure_dw_and_pdwContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_statistics_name_azure_dw_and_pdwContext.prototype.STATISTICS = function() {
    return this.getToken(TSqlParser.STATISTICS, 0);
};

Drop_statistics_name_azure_dw_and_pdwContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DOT);
    } else {
        return this.getToken(TSqlParser.DOT, i);
    }
};


Drop_statistics_name_azure_dw_and_pdwContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Drop_statistics_name_azure_dw_and_pdwContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_statistics_name_azure_dw_and_pdw(this);
	}
};

Drop_statistics_name_azure_dw_and_pdwContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_statistics_name_azure_dw_and_pdw(this);
	}
};




TSqlParser.Drop_statistics_name_azure_dw_and_pdwContext = Drop_statistics_name_azure_dw_and_pdwContext;

TSqlParser.prototype.drop_statistics_name_azure_dw_and_pdw = function() {

    var localctx = new Drop_statistics_name_azure_dw_and_pdwContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, TSqlParser.RULE_drop_statistics_name_azure_dw_and_pdw);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2620;
        this.match(TSqlParser.DROP);
        this.state = 2621;
        this.match(TSqlParser.STATISTICS);
        this.state = 2625;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
        if(la_===1) {
            this.state = 2622;
            localctx.schema_name = this.id();
            this.state = 2623;
            this.match(TSqlParser.DOT);

        }
        this.state = 2627;
        localctx.object_name = this.id();
        this.state = 2628;
        this.match(TSqlParser.DOT);
        this.state = 2629;
        localctx.statistics_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_symmetric_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_symmetric_key;
    this.symmetric_key_name = null; // IdContext
    return this;
}

Drop_symmetric_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_symmetric_keyContext.prototype.constructor = Drop_symmetric_keyContext;

Drop_symmetric_keyContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_symmetric_keyContext.prototype.SYMMETRIC = function() {
    return this.getToken(TSqlParser.SYMMETRIC, 0);
};

Drop_symmetric_keyContext.prototype.KEY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.KEY);
    } else {
        return this.getToken(TSqlParser.KEY, i);
    }
};


Drop_symmetric_keyContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_symmetric_keyContext.prototype.REMOVE = function() {
    return this.getToken(TSqlParser.REMOVE, 0);
};

Drop_symmetric_keyContext.prototype.PROVIDER = function() {
    return this.getToken(TSqlParser.PROVIDER, 0);
};

Drop_symmetric_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_symmetric_key(this);
	}
};

Drop_symmetric_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_symmetric_key(this);
	}
};




TSqlParser.Drop_symmetric_keyContext = Drop_symmetric_keyContext;

TSqlParser.prototype.drop_symmetric_key = function() {

    var localctx = new Drop_symmetric_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, TSqlParser.RULE_drop_symmetric_key);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2631;
        this.match(TSqlParser.DROP);
        this.state = 2632;
        this.match(TSqlParser.SYMMETRIC);
        this.state = 2633;
        this.match(TSqlParser.KEY);
        this.state = 2634;
        localctx.symmetric_key_name = this.id();
        this.state = 2638;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.REMOVE) {
            this.state = 2635;
            this.match(TSqlParser.REMOVE);
            this.state = 2636;
            this.match(TSqlParser.PROVIDER);
            this.state = 2637;
            this.match(TSqlParser.KEY);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_synonymContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_synonym;
    this.schema = null; // IdContext
    this.synonym_name = null; // IdContext
    return this;
}

Drop_synonymContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_synonymContext.prototype.constructor = Drop_synonymContext;

Drop_synonymContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_synonymContext.prototype.SYNONYM = function() {
    return this.getToken(TSqlParser.SYNONYM, 0);
};

Drop_synonymContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Drop_synonymContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

Drop_synonymContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

Drop_synonymContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

Drop_synonymContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_synonym(this);
	}
};

Drop_synonymContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_synonym(this);
	}
};




TSqlParser.Drop_synonymContext = Drop_synonymContext;

TSqlParser.prototype.drop_synonym = function() {

    var localctx = new Drop_synonymContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, TSqlParser.RULE_drop_synonym);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2640;
        this.match(TSqlParser.DROP);
        this.state = 2641;
        this.match(TSqlParser.SYNONYM);
        this.state = 2644;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.IF) {
            this.state = 2642;
            this.match(TSqlParser.IF);
            this.state = 2643;
            this.match(TSqlParser.EXISTS);
        }

        this.state = 2649;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
        if(la_===1) {
            this.state = 2646;
            localctx.schema = this.id();
            this.state = 2647;
            this.match(TSqlParser.DOT);

        }
        this.state = 2651;
        localctx.synonym_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_userContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_user;
    this.user_name = null; // IdContext
    return this;
}

Drop_userContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_userContext.prototype.constructor = Drop_userContext;

Drop_userContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_userContext.prototype.USER = function() {
    return this.getToken(TSqlParser.USER, 0);
};

Drop_userContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_userContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

Drop_userContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

Drop_userContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_user(this);
	}
};

Drop_userContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_user(this);
	}
};




TSqlParser.Drop_userContext = Drop_userContext;

TSqlParser.prototype.drop_user = function() {

    var localctx = new Drop_userContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, TSqlParser.RULE_drop_user);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2653;
        this.match(TSqlParser.DROP);
        this.state = 2654;
        this.match(TSqlParser.USER);
        this.state = 2657;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.IF) {
            this.state = 2655;
            this.match(TSqlParser.IF);
            this.state = 2656;
            this.match(TSqlParser.EXISTS);
        }

        this.state = 2659;
        localctx.user_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_workload_groupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_workload_group;
    this.group_name = null; // IdContext
    return this;
}

Drop_workload_groupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_workload_groupContext.prototype.constructor = Drop_workload_groupContext;

Drop_workload_groupContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_workload_groupContext.prototype.WORKLOAD = function() {
    return this.getToken(TSqlParser.WORKLOAD, 0);
};

Drop_workload_groupContext.prototype.GROUP = function() {
    return this.getToken(TSqlParser.GROUP, 0);
};

Drop_workload_groupContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_workload_groupContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_workload_group(this);
	}
};

Drop_workload_groupContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_workload_group(this);
	}
};




TSqlParser.Drop_workload_groupContext = Drop_workload_groupContext;

TSqlParser.prototype.drop_workload_group = function() {

    var localctx = new Drop_workload_groupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, TSqlParser.RULE_drop_workload_group);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2661;
        this.match(TSqlParser.DROP);
        this.state = 2662;
        this.match(TSqlParser.WORKLOAD);
        this.state = 2663;
        this.match(TSqlParser.GROUP);
        this.state = 2664;
        localctx.group_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_xml_schema_collectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_xml_schema_collection;
    this.relational_schema = null; // IdContext
    this.sql_identifier = null; // IdContext
    return this;
}

Drop_xml_schema_collectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_xml_schema_collectionContext.prototype.constructor = Drop_xml_schema_collectionContext;

Drop_xml_schema_collectionContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_xml_schema_collectionContext.prototype.XML = function() {
    return this.getToken(TSqlParser.XML, 0);
};

Drop_xml_schema_collectionContext.prototype.SCHEMA = function() {
    return this.getToken(TSqlParser.SCHEMA, 0);
};

Drop_xml_schema_collectionContext.prototype.COLLECTION = function() {
    return this.getToken(TSqlParser.COLLECTION, 0);
};

Drop_xml_schema_collectionContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Drop_xml_schema_collectionContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

Drop_xml_schema_collectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_xml_schema_collection(this);
	}
};

Drop_xml_schema_collectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_xml_schema_collection(this);
	}
};




TSqlParser.Drop_xml_schema_collectionContext = Drop_xml_schema_collectionContext;

TSqlParser.prototype.drop_xml_schema_collection = function() {

    var localctx = new Drop_xml_schema_collectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, TSqlParser.RULE_drop_xml_schema_collection);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2666;
        this.match(TSqlParser.DROP);
        this.state = 2667;
        this.match(TSqlParser.XML);
        this.state = 2668;
        this.match(TSqlParser.SCHEMA);
        this.state = 2669;
        this.match(TSqlParser.COLLECTION);
        this.state = 2673;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
        if(la_===1) {
            this.state = 2670;
            localctx.relational_schema = this.id();
            this.state = 2671;
            this.match(TSqlParser.DOT);

        }
        this.state = 2675;
        localctx.sql_identifier = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Disable_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_disable_trigger;
    this.schema_name = null; // IdContext
    this.trigger_name = null; // IdContext
    this.schema_id = null; // IdContext
    this.object_name = null; // IdContext
    return this;
}

Disable_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Disable_triggerContext.prototype.constructor = Disable_triggerContext;

Disable_triggerContext.prototype.DISABLE = function() {
    return this.getToken(TSqlParser.DISABLE, 0);
};

Disable_triggerContext.prototype.TRIGGER = function() {
    return this.getToken(TSqlParser.TRIGGER, 0);
};

Disable_triggerContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Disable_triggerContext.prototype.ALL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ALL);
    } else {
        return this.getToken(TSqlParser.ALL, i);
    }
};


Disable_triggerContext.prototype.DATABASE = function() {
    return this.getToken(TSqlParser.DATABASE, 0);
};

Disable_triggerContext.prototype.SERVER = function() {
    return this.getToken(TSqlParser.SERVER, 0);
};

Disable_triggerContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Disable_triggerContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DOT);
    } else {
        return this.getToken(TSqlParser.DOT, i);
    }
};


Disable_triggerContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Disable_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDisable_trigger(this);
	}
};

Disable_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDisable_trigger(this);
	}
};




TSqlParser.Disable_triggerContext = Disable_triggerContext;

TSqlParser.prototype.disable_trigger = function() {

    var localctx = new Disable_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, TSqlParser.RULE_disable_trigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2677;
        this.match(TSqlParser.DISABLE);
        this.state = 2678;
        this.match(TSqlParser.TRIGGER);
        this.state = 2693;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
        case TSqlParser.COMMA:
            this.state = 2688; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2680;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 2679;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 2685;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
                if(la_===1) {
                    this.state = 2682;
                    localctx.schema_name = this.id();
                    this.state = 2683;
                    this.match(TSqlParser.DOT);

                }
                this.state = 2687;
                localctx.trigger_name = this.id();
                this.state = 2690; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0) || _la===TSqlParser.COMMA);
            break;
        case TSqlParser.ALL:
            this.state = 2692;
            this.match(TSqlParser.ALL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2695;
        this.match(TSqlParser.ON);
        this.state = 2705;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.state = 2699;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
            if(la_===1) {
                this.state = 2696;
                localctx.schema_id = this.id();
                this.state = 2697;
                this.match(TSqlParser.DOT);

            }
            this.state = 2701;
            localctx.object_name = this.id();
            break;
        case TSqlParser.DATABASE:
            this.state = 2702;
            this.match(TSqlParser.DATABASE);
            break;
        case TSqlParser.ALL:
            this.state = 2703;
            this.match(TSqlParser.ALL);
            this.state = 2704;
            this.match(TSqlParser.SERVER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enable_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_enable_trigger;
    this.schema_name = null; // IdContext
    this.trigger_name = null; // IdContext
    this.schema_id = null; // IdContext
    this.object_name = null; // IdContext
    return this;
}

Enable_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enable_triggerContext.prototype.constructor = Enable_triggerContext;

Enable_triggerContext.prototype.ENABLE = function() {
    return this.getToken(TSqlParser.ENABLE, 0);
};

Enable_triggerContext.prototype.TRIGGER = function() {
    return this.getToken(TSqlParser.TRIGGER, 0);
};

Enable_triggerContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Enable_triggerContext.prototype.ALL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ALL);
    } else {
        return this.getToken(TSqlParser.ALL, i);
    }
};


Enable_triggerContext.prototype.DATABASE = function() {
    return this.getToken(TSqlParser.DATABASE, 0);
};

Enable_triggerContext.prototype.SERVER = function() {
    return this.getToken(TSqlParser.SERVER, 0);
};

Enable_triggerContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Enable_triggerContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DOT);
    } else {
        return this.getToken(TSqlParser.DOT, i);
    }
};


Enable_triggerContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Enable_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterEnable_trigger(this);
	}
};

Enable_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitEnable_trigger(this);
	}
};




TSqlParser.Enable_triggerContext = Enable_triggerContext;

TSqlParser.prototype.enable_trigger = function() {

    var localctx = new Enable_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, TSqlParser.RULE_enable_trigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2707;
        this.match(TSqlParser.ENABLE);
        this.state = 2708;
        this.match(TSqlParser.TRIGGER);
        this.state = 2723;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
        case TSqlParser.COMMA:
            this.state = 2718; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2710;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 2709;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 2715;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,204,this._ctx);
                if(la_===1) {
                    this.state = 2712;
                    localctx.schema_name = this.id();
                    this.state = 2713;
                    this.match(TSqlParser.DOT);

                }
                this.state = 2717;
                localctx.trigger_name = this.id();
                this.state = 2720; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0) || _la===TSqlParser.COMMA);
            break;
        case TSqlParser.ALL:
            this.state = 2722;
            this.match(TSqlParser.ALL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2725;
        this.match(TSqlParser.ON);
        this.state = 2735;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.state = 2729;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
            if(la_===1) {
                this.state = 2726;
                localctx.schema_id = this.id();
                this.state = 2727;
                this.match(TSqlParser.DOT);

            }
            this.state = 2731;
            localctx.object_name = this.id();
            break;
        case TSqlParser.DATABASE:
            this.state = 2732;
            this.match(TSqlParser.DATABASE);
            break;
        case TSqlParser.ALL:
            this.state = 2733;
            this.match(TSqlParser.ALL);
            this.state = 2734;
            this.match(TSqlParser.SERVER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Truncate_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_truncate_table;
    this.database_name = null; // IdContext
    this.schema_name = null; // IdContext
    this.table = null; // IdContext
    return this;
}

Truncate_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Truncate_tableContext.prototype.constructor = Truncate_tableContext;

Truncate_tableContext.prototype.TRUNCATE = function() {
    return this.getToken(TSqlParser.TRUNCATE, 0);
};

Truncate_tableContext.prototype.TABLE = function() {
    return this.getToken(TSqlParser.TABLE, 0);
};

Truncate_tableContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Truncate_tableContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DOT);
    } else {
        return this.getToken(TSqlParser.DOT, i);
    }
};


Truncate_tableContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Truncate_tableContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LR_BRACKET);
    } else {
        return this.getToken(TSqlParser.LR_BRACKET, i);
    }
};


Truncate_tableContext.prototype.PARTITIONS = function() {
    return this.getToken(TSqlParser.PARTITIONS, 0);
};

Truncate_tableContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RR_BRACKET);
    } else {
        return this.getToken(TSqlParser.RR_BRACKET, i);
    }
};


Truncate_tableContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Truncate_tableContext.prototype.TO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.TO);
    } else {
        return this.getToken(TSqlParser.TO, i);
    }
};


Truncate_tableContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Truncate_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTruncate_table(this);
	}
};

Truncate_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTruncate_table(this);
	}
};




TSqlParser.Truncate_tableContext = Truncate_tableContext;

TSqlParser.prototype.truncate_table = function() {

    var localctx = new Truncate_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, TSqlParser.RULE_truncate_table);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2737;
        this.match(TSqlParser.TRUNCATE);
        this.state = 2738;
        this.match(TSqlParser.TABLE);
        this.state = 2742;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
        if(la_===1) {
            this.state = 2739;
            localctx.database_name = this.id();
            this.state = 2740;
            this.match(TSqlParser.DOT);

        }
        this.state = 2747;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
        if(la_===1) {
            this.state = 2744;
            localctx.schema_name = this.id();
            this.state = 2745;
            this.match(TSqlParser.DOT);

        }
        this.state = 2749;
        localctx.table = this.id();
        this.state = 2769;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
        if(la_===1) {
            this.state = 2750;
            this.match(TSqlParser.WITH);
            this.state = 2751;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 2752;
            this.match(TSqlParser.PARTITIONS);
            this.state = 2753;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 2763; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2755;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 2754;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 2761;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 2757;
                    this.match(TSqlParser.DECIMAL);
                    break;

                case 2:
                    this.state = 2758;
                    this.match(TSqlParser.DECIMAL);
                    this.state = 2759;
                    this.match(TSqlParser.TO);
                    this.state = 2760;
                    this.match(TSqlParser.DECIMAL);
                    break;

                }
                this.state = 2765; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.DECIMAL || _la===TSqlParser.COMMA);
            this.state = 2767;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 2768;
            this.match(TSqlParser.RR_BRACKET);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_column_master_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_column_master_key;
    this.key_name = null; // IdContext
    this.key_store_provider_name = null; // Token
    this.key_path = null; // Token
    return this;
}

Create_column_master_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_column_master_keyContext.prototype.constructor = Create_column_master_keyContext;

Create_column_master_keyContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_column_master_keyContext.prototype.COLUMN = function() {
    return this.getToken(TSqlParser.COLUMN, 0);
};

Create_column_master_keyContext.prototype.MASTER = function() {
    return this.getToken(TSqlParser.MASTER, 0);
};

Create_column_master_keyContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Create_column_master_keyContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_column_master_keyContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Create_column_master_keyContext.prototype.KEY_STORE_PROVIDER_NAME = function() {
    return this.getToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0);
};

Create_column_master_keyContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Create_column_master_keyContext.prototype.COMMA = function() {
    return this.getToken(TSqlParser.COMMA, 0);
};

Create_column_master_keyContext.prototype.KEY_PATH = function() {
    return this.getToken(TSqlParser.KEY_PATH, 0);
};

Create_column_master_keyContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Create_column_master_keyContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Create_column_master_keyContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Create_column_master_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_column_master_key(this);
	}
};

Create_column_master_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_column_master_key(this);
	}
};




TSqlParser.Create_column_master_keyContext = Create_column_master_keyContext;

TSqlParser.prototype.create_column_master_key = function() {

    var localctx = new Create_column_master_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, TSqlParser.RULE_create_column_master_key);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2771;
        this.match(TSqlParser.CREATE);
        this.state = 2772;
        this.match(TSqlParser.COLUMN);
        this.state = 2773;
        this.match(TSqlParser.MASTER);
        this.state = 2774;
        this.match(TSqlParser.KEY);
        this.state = 2775;
        localctx.key_name = this.id();
        this.state = 2776;
        this.match(TSqlParser.WITH);
        this.state = 2777;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 2778;
        this.match(TSqlParser.KEY_STORE_PROVIDER_NAME);
        this.state = 2779;
        this.match(TSqlParser.EQUAL);
        this.state = 2780;
        localctx.key_store_provider_name = this.match(TSqlParser.STRING);
        this.state = 2781;
        this.match(TSqlParser.COMMA);
        this.state = 2782;
        this.match(TSqlParser.KEY_PATH);
        this.state = 2783;
        this.match(TSqlParser.EQUAL);
        this.state = 2784;
        localctx.key_path = this.match(TSqlParser.STRING);
        this.state = 2785;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_credentialContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_credential;
    this.credential_name = null; // IdContext
    this.identity_name = null; // Token
    this.secret = null; // Token
    return this;
}

Alter_credentialContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_credentialContext.prototype.constructor = Alter_credentialContext;

Alter_credentialContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_credentialContext.prototype.CREDENTIAL = function() {
    return this.getToken(TSqlParser.CREDENTIAL, 0);
};

Alter_credentialContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_credentialContext.prototype.IDENTITY = function() {
    return this.getToken(TSqlParser.IDENTITY, 0);
};

Alter_credentialContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Alter_credentialContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Alter_credentialContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Alter_credentialContext.prototype.COMMA = function() {
    return this.getToken(TSqlParser.COMMA, 0);
};

Alter_credentialContext.prototype.SECRET = function() {
    return this.getToken(TSqlParser.SECRET, 0);
};

Alter_credentialContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_credential(this);
	}
};

Alter_credentialContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_credential(this);
	}
};




TSqlParser.Alter_credentialContext = Alter_credentialContext;

TSqlParser.prototype.alter_credential = function() {

    var localctx = new Alter_credentialContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, TSqlParser.RULE_alter_credential);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2787;
        this.match(TSqlParser.ALTER);
        this.state = 2788;
        this.match(TSqlParser.CREDENTIAL);
        this.state = 2789;
        localctx.credential_name = this.id();
        this.state = 2790;
        this.match(TSqlParser.WITH);
        this.state = 2791;
        this.match(TSqlParser.IDENTITY);
        this.state = 2792;
        this.match(TSqlParser.EQUAL);
        this.state = 2793;
        localctx.identity_name = this.match(TSqlParser.STRING);
        this.state = 2798;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 2794;
            this.match(TSqlParser.COMMA);
            this.state = 2795;
            this.match(TSqlParser.SECRET);
            this.state = 2796;
            this.match(TSqlParser.EQUAL);
            this.state = 2797;
            localctx.secret = this.match(TSqlParser.STRING);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_credentialContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_credential;
    this.credential_name = null; // IdContext
    this.identity_name = null; // Token
    this.secret = null; // Token
    this.cryptographic_provider_name = null; // IdContext
    return this;
}

Create_credentialContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_credentialContext.prototype.constructor = Create_credentialContext;

Create_credentialContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_credentialContext.prototype.CREDENTIAL = function() {
    return this.getToken(TSqlParser.CREDENTIAL, 0);
};

Create_credentialContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_credentialContext.prototype.IDENTITY = function() {
    return this.getToken(TSqlParser.IDENTITY, 0);
};

Create_credentialContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Create_credentialContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_credentialContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Create_credentialContext.prototype.COMMA = function() {
    return this.getToken(TSqlParser.COMMA, 0);
};

Create_credentialContext.prototype.SECRET = function() {
    return this.getToken(TSqlParser.SECRET, 0);
};

Create_credentialContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Create_credentialContext.prototype.CRYPTOGRAPHIC = function() {
    return this.getToken(TSqlParser.CRYPTOGRAPHIC, 0);
};

Create_credentialContext.prototype.PROVIDER = function() {
    return this.getToken(TSqlParser.PROVIDER, 0);
};

Create_credentialContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_credential(this);
	}
};

Create_credentialContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_credential(this);
	}
};




TSqlParser.Create_credentialContext = Create_credentialContext;

TSqlParser.prototype.create_credential = function() {

    var localctx = new Create_credentialContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, TSqlParser.RULE_create_credential);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2800;
        this.match(TSqlParser.CREATE);
        this.state = 2801;
        this.match(TSqlParser.CREDENTIAL);
        this.state = 2802;
        localctx.credential_name = this.id();
        this.state = 2803;
        this.match(TSqlParser.WITH);
        this.state = 2804;
        this.match(TSqlParser.IDENTITY);
        this.state = 2805;
        this.match(TSqlParser.EQUAL);
        this.state = 2806;
        localctx.identity_name = this.match(TSqlParser.STRING);
        this.state = 2811;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 2807;
            this.match(TSqlParser.COMMA);
            this.state = 2808;
            this.match(TSqlParser.SECRET);
            this.state = 2809;
            this.match(TSqlParser.EQUAL);
            this.state = 2810;
            localctx.secret = this.match(TSqlParser.STRING);
        }

        this.state = 2817;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.FOR) {
            this.state = 2813;
            this.match(TSqlParser.FOR);
            this.state = 2814;
            this.match(TSqlParser.CRYPTOGRAPHIC);
            this.state = 2815;
            this.match(TSqlParser.PROVIDER);
            this.state = 2816;
            localctx.cryptographic_provider_name = this.id();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_cryptographic_providerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_cryptographic_provider;
    this.provider_name = null; // IdContext
    this.crypto_provider_ddl_file = null; // Token
    return this;
}

Alter_cryptographic_providerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_cryptographic_providerContext.prototype.constructor = Alter_cryptographic_providerContext;

Alter_cryptographic_providerContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_cryptographic_providerContext.prototype.CRYPTOGRAPHIC = function() {
    return this.getToken(TSqlParser.CRYPTOGRAPHIC, 0);
};

Alter_cryptographic_providerContext.prototype.PROVIDER = function() {
    return this.getToken(TSqlParser.PROVIDER, 0);
};

Alter_cryptographic_providerContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Alter_cryptographic_providerContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Alter_cryptographic_providerContext.prototype.FILE = function() {
    return this.getToken(TSqlParser.FILE, 0);
};

Alter_cryptographic_providerContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Alter_cryptographic_providerContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Alter_cryptographic_providerContext.prototype.ENABLE = function() {
    return this.getToken(TSqlParser.ENABLE, 0);
};

Alter_cryptographic_providerContext.prototype.DISABLE = function() {
    return this.getToken(TSqlParser.DISABLE, 0);
};

Alter_cryptographic_providerContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_cryptographic_provider(this);
	}
};

Alter_cryptographic_providerContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_cryptographic_provider(this);
	}
};




TSqlParser.Alter_cryptographic_providerContext = Alter_cryptographic_providerContext;

TSqlParser.prototype.alter_cryptographic_provider = function() {

    var localctx = new Alter_cryptographic_providerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, TSqlParser.RULE_alter_cryptographic_provider);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2819;
        this.match(TSqlParser.ALTER);
        this.state = 2820;
        this.match(TSqlParser.CRYPTOGRAPHIC);
        this.state = 2821;
        this.match(TSqlParser.PROVIDER);
        this.state = 2822;
        localctx.provider_name = this.id();
        this.state = 2827;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.FROM) {
            this.state = 2823;
            this.match(TSqlParser.FROM);
            this.state = 2824;
            this.match(TSqlParser.FILE);
            this.state = 2825;
            this.match(TSqlParser.EQUAL);
            this.state = 2826;
            localctx.crypto_provider_ddl_file = this.match(TSqlParser.STRING);
        }

        this.state = 2830;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
        if(la_===1) {
            this.state = 2829;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.DISABLE || _la===TSqlParser.ENABLE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_cryptographic_providerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_cryptographic_provider;
    this.provider_name = null; // IdContext
    this.path_of_DLL = null; // Token
    return this;
}

Create_cryptographic_providerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_cryptographic_providerContext.prototype.constructor = Create_cryptographic_providerContext;

Create_cryptographic_providerContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_cryptographic_providerContext.prototype.CRYPTOGRAPHIC = function() {
    return this.getToken(TSqlParser.CRYPTOGRAPHIC, 0);
};

Create_cryptographic_providerContext.prototype.PROVIDER = function() {
    return this.getToken(TSqlParser.PROVIDER, 0);
};

Create_cryptographic_providerContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Create_cryptographic_providerContext.prototype.FILE = function() {
    return this.getToken(TSqlParser.FILE, 0);
};

Create_cryptographic_providerContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Create_cryptographic_providerContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Create_cryptographic_providerContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Create_cryptographic_providerContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_cryptographic_provider(this);
	}
};

Create_cryptographic_providerContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_cryptographic_provider(this);
	}
};




TSqlParser.Create_cryptographic_providerContext = Create_cryptographic_providerContext;

TSqlParser.prototype.create_cryptographic_provider = function() {

    var localctx = new Create_cryptographic_providerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, TSqlParser.RULE_create_cryptographic_provider);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2832;
        this.match(TSqlParser.CREATE);
        this.state = 2833;
        this.match(TSqlParser.CRYPTOGRAPHIC);
        this.state = 2834;
        this.match(TSqlParser.PROVIDER);
        this.state = 2835;
        localctx.provider_name = this.id();
        this.state = 2836;
        this.match(TSqlParser.FROM);
        this.state = 2837;
        this.match(TSqlParser.FILE);
        this.state = 2838;
        this.match(TSqlParser.EQUAL);
        this.state = 2839;
        localctx.path_of_DLL = this.match(TSqlParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_event_notificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_event_notification;
    this.event_notification_name = null; // IdContext
    this.queue_name = null; // IdContext
    this.event_type_or_group = null; // IdContext
    this.broker_service = null; // Token
    this.broker_service_specifier_or_current_database = null; // Token
    return this;
}

Create_event_notificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_event_notificationContext.prototype.constructor = Create_event_notificationContext;

Create_event_notificationContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_event_notificationContext.prototype.EVENT = function() {
    return this.getToken(TSqlParser.EVENT, 0);
};

Create_event_notificationContext.prototype.NOTIFICATION = function() {
    return this.getToken(TSqlParser.NOTIFICATION, 0);
};

Create_event_notificationContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Create_event_notificationContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Create_event_notificationContext.prototype.TO = function() {
    return this.getToken(TSqlParser.TO, 0);
};

Create_event_notificationContext.prototype.SERVICE = function() {
    return this.getToken(TSqlParser.SERVICE, 0);
};

Create_event_notificationContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Create_event_notificationContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_event_notificationContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Create_event_notificationContext.prototype.SERVER = function() {
    return this.getToken(TSqlParser.SERVER, 0);
};

Create_event_notificationContext.prototype.DATABASE = function() {
    return this.getToken(TSqlParser.DATABASE, 0);
};

Create_event_notificationContext.prototype.QUEUE = function() {
    return this.getToken(TSqlParser.QUEUE, 0);
};

Create_event_notificationContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_event_notificationContext.prototype.FAN_IN = function() {
    return this.getToken(TSqlParser.FAN_IN, 0);
};

Create_event_notificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_event_notification(this);
	}
};

Create_event_notificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_event_notification(this);
	}
};




TSqlParser.Create_event_notificationContext = Create_event_notificationContext;

TSqlParser.prototype.create_event_notification = function() {

    var localctx = new Create_event_notificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, TSqlParser.RULE_create_event_notification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2841;
        this.match(TSqlParser.CREATE);
        this.state = 2842;
        this.match(TSqlParser.EVENT);
        this.state = 2843;
        this.match(TSqlParser.NOTIFICATION);
        this.state = 2844;
        localctx.event_notification_name = this.id();
        this.state = 2845;
        this.match(TSqlParser.ON);
        this.state = 2850;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.SERVER:
            this.state = 2846;
            this.match(TSqlParser.SERVER);
            break;
        case TSqlParser.DATABASE:
            this.state = 2847;
            this.match(TSqlParser.DATABASE);
            break;
        case TSqlParser.QUEUE:
            this.state = 2848;
            this.match(TSqlParser.QUEUE);
            this.state = 2849;
            localctx.queue_name = this.id();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2854;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WITH) {
            this.state = 2852;
            this.match(TSqlParser.WITH);
            this.state = 2853;
            this.match(TSqlParser.FAN_IN);
        }

        this.state = 2856;
        this.match(TSqlParser.FOR);
        this.state = 2861; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2858;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 2857;
                this.match(TSqlParser.COMMA);
            }

            this.state = 2860;
            localctx.event_type_or_group = this.id();
            this.state = 2863; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0) || _la===TSqlParser.COMMA);
        this.state = 2865;
        this.match(TSqlParser.TO);
        this.state = 2866;
        this.match(TSqlParser.SERVICE);
        this.state = 2867;
        localctx.broker_service = this.match(TSqlParser.STRING);
        this.state = 2868;
        this.match(TSqlParser.COMMA);
        this.state = 2869;
        localctx.broker_service_specifier_or_current_database = this.match(TSqlParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_or_alter_event_sessionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_or_alter_event_session;
    this.event_session_name = null; // IdContext
    this.event_module_guid = null; // IdContext
    this.event_package_name = null; // IdContext
    this.event_name = null; // IdContext
    this.event_customizable_attributue = null; // IdContext
    this.action_name = null; // IdContext
    this.target_name = null; // IdContext
    this.target_parameter_name = null; // IdContext
    this.max_memory = null; // Token
    this.max_dispatch_latency_seconds = null; // Token
    this.max_event_size = null; // Token
    return this;
}

Create_or_alter_event_sessionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_or_alter_event_sessionContext.prototype.constructor = Create_or_alter_event_sessionContext;

Create_or_alter_event_sessionContext.prototype.EVENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EVENT);
    } else {
        return this.getToken(TSqlParser.EVENT, i);
    }
};


Create_or_alter_event_sessionContext.prototype.SESSION = function() {
    return this.getToken(TSqlParser.SESSION, 0);
};

Create_or_alter_event_sessionContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ON);
    } else {
        return this.getToken(TSqlParser.ON, i);
    }
};


Create_or_alter_event_sessionContext.prototype.SERVER = function() {
    return this.getToken(TSqlParser.SERVER, 0);
};

Create_or_alter_event_sessionContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_or_alter_event_sessionContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Create_or_alter_event_sessionContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_or_alter_event_sessionContext.prototype.ADD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ADD);
    } else {
        return this.getToken(TSqlParser.ADD, i);
    }
};


Create_or_alter_event_sessionContext.prototype.DROP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DROP);
    } else {
        return this.getToken(TSqlParser.DROP, i);
    }
};


Create_or_alter_event_sessionContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DOT);
    } else {
        return this.getToken(TSqlParser.DOT, i);
    }
};


Create_or_alter_event_sessionContext.prototype.TARGET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.TARGET);
    } else {
        return this.getToken(TSqlParser.TARGET, i);
    }
};


Create_or_alter_event_sessionContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_or_alter_event_sessionContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LR_BRACKET);
    } else {
        return this.getToken(TSqlParser.LR_BRACKET, i);
    }
};


Create_or_alter_event_sessionContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RR_BRACKET);
    } else {
        return this.getToken(TSqlParser.RR_BRACKET, i);
    }
};


Create_or_alter_event_sessionContext.prototype.STATE = function() {
    return this.getToken(TSqlParser.STATE, 0);
};

Create_or_alter_event_sessionContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Create_or_alter_event_sessionContext.prototype.START = function() {
    return this.getToken(TSqlParser.START, 0);
};

Create_or_alter_event_sessionContext.prototype.STOP = function() {
    return this.getToken(TSqlParser.STOP, 0);
};

Create_or_alter_event_sessionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Create_or_alter_event_sessionContext.prototype.SET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SET);
    } else {
        return this.getToken(TSqlParser.SET, i);
    }
};


Create_or_alter_event_sessionContext.prototype.MAX_MEMORY = function() {
    return this.getToken(TSqlParser.MAX_MEMORY, 0);
};

Create_or_alter_event_sessionContext.prototype.EVENT_RETENTION_MODE = function() {
    return this.getToken(TSqlParser.EVENT_RETENTION_MODE, 0);
};

Create_or_alter_event_sessionContext.prototype.MAX_DISPATCH_LATENCY = function() {
    return this.getToken(TSqlParser.MAX_DISPATCH_LATENCY, 0);
};

Create_or_alter_event_sessionContext.prototype.MAX_EVENT_SIZE = function() {
    return this.getToken(TSqlParser.MAX_EVENT_SIZE, 0);
};

Create_or_alter_event_sessionContext.prototype.MEMORY_PARTITION_MODE = function() {
    return this.getToken(TSqlParser.MEMORY_PARTITION_MODE, 0);
};

Create_or_alter_event_sessionContext.prototype.TRACK_CAUSALITY = function() {
    return this.getToken(TSqlParser.TRACK_CAUSALITY, 0);
};

Create_or_alter_event_sessionContext.prototype.STARTUP_STATE = function() {
    return this.getToken(TSqlParser.STARTUP_STATE, 0);
};

Create_or_alter_event_sessionContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Create_or_alter_event_sessionContext.prototype.KB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.KB);
    } else {
        return this.getToken(TSqlParser.KB, i);
    }
};


Create_or_alter_event_sessionContext.prototype.MB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MB);
    } else {
        return this.getToken(TSqlParser.MB, i);
    }
};


Create_or_alter_event_sessionContext.prototype.ALLOW_SINGLE_EVENT_LOSS = function() {
    return this.getToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0);
};

Create_or_alter_event_sessionContext.prototype.ALLOW_MULTIPLE_EVENT_LOSS = function() {
    return this.getToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0);
};

Create_or_alter_event_sessionContext.prototype.NO_EVENT_LOSS = function() {
    return this.getToken(TSqlParser.NO_EVENT_LOSS, 0);
};

Create_or_alter_event_sessionContext.prototype.NONE = function() {
    return this.getToken(TSqlParser.NONE, 0);
};

Create_or_alter_event_sessionContext.prototype.PER_NODE = function() {
    return this.getToken(TSqlParser.PER_NODE, 0);
};

Create_or_alter_event_sessionContext.prototype.PER_CPU = function() {
    return this.getToken(TSqlParser.PER_CPU, 0);
};

Create_or_alter_event_sessionContext.prototype.OFF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.OFF);
    } else {
        return this.getToken(TSqlParser.OFF, i);
    }
};


Create_or_alter_event_sessionContext.prototype.SECONDS = function() {
    return this.getToken(TSqlParser.SECONDS, 0);
};

Create_or_alter_event_sessionContext.prototype.INFINITE = function() {
    return this.getToken(TSqlParser.INFINITE, 0);
};

Create_or_alter_event_sessionContext.prototype.ACTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ACTION);
    } else {
        return this.getToken(TSqlParser.ACTION, i);
    }
};


Create_or_alter_event_sessionContext.prototype.WHERE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.WHERE);
    } else {
        return this.getToken(TSqlParser.WHERE, i);
    }
};


Create_or_alter_event_sessionContext.prototype.event_session_predicate_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Event_session_predicate_expressionContext);
    } else {
        return this.getTypedRuleContext(Event_session_predicate_expressionContext,i);
    }
};

Create_or_alter_event_sessionContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Create_or_alter_event_sessionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_or_alter_event_session(this);
	}
};

Create_or_alter_event_sessionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_or_alter_event_session(this);
	}
};




TSqlParser.Create_or_alter_event_sessionContext = Create_or_alter_event_sessionContext;

TSqlParser.prototype.create_or_alter_event_session = function() {

    var localctx = new Create_or_alter_event_sessionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 284, TSqlParser.RULE_create_or_alter_event_session);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2871;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.ALTER || _la===TSqlParser.CREATE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2872;
        this.match(TSqlParser.EVENT);
        this.state = 2873;
        this.match(TSqlParser.SESSION);
        this.state = 2874;
        localctx.event_session_name = this.id();
        this.state = 2875;
        this.match(TSqlParser.ON);
        this.state = 2876;
        this.match(TSqlParser.SERVER);
        this.state = 2944;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,235,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2878;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 2877;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 2880;
                this.match(TSqlParser.ADD);
                this.state = 2881;
                this.match(TSqlParser.EVENT);

                this.state = 2885;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
                if(la_===1) {
                    this.state = 2882;
                    localctx.event_module_guid = this.id();
                    this.state = 2883;
                    this.match(TSqlParser.DOT);

                }
                this.state = 2887;
                localctx.event_package_name = this.id();
                this.state = 2888;
                this.match(TSqlParser.DOT);
                this.state = 2889;
                localctx.event_name = this.id();
                this.state = 2939;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,234,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 2891;
                        this.match(TSqlParser.LR_BRACKET);
                        this.state = 2905;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.SET) {
                            this.state = 2892;
                            this.match(TSqlParser.SET);
                            this.state = 2902;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while(_la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0) || _la===TSqlParser.COMMA) {
                                this.state = 2894;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if(_la===TSqlParser.COMMA) {
                                    this.state = 2893;
                                    this.match(TSqlParser.COMMA);
                                }

                                this.state = 2896;
                                localctx.event_customizable_attributue = this.id();
                                this.state = 2897;
                                this.match(TSqlParser.EQUAL);
                                this.state = 2898;
                                _la = this._input.LA(1);
                                if(!(_la===TSqlParser.DECIMAL || _la===TSqlParser.STRING)) {
                                this._errHandler.recoverInline(this);
                                }
                                else {
                                	this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                                this.state = 2904;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }

                        this.state = 2927; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            this.state = 2907;
                            this.match(TSqlParser.ACTION);
                            this.state = 2908;
                            this.match(TSqlParser.LR_BRACKET);
                            this.state = 2921; 
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            do {
                                this.state = 2910;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if(_la===TSqlParser.COMMA) {
                                    this.state = 2909;
                                    this.match(TSqlParser.COMMA);
                                }

                                this.state = 2915;
                                this._errHandler.sync(this);
                                var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
                                if(la_===1) {
                                    this.state = 2912;
                                    localctx.event_module_guid = this.id();
                                    this.state = 2913;
                                    this.match(TSqlParser.DOT);

                                }
                                this.state = 2917;
                                localctx.event_package_name = this.id();
                                this.state = 2918;
                                this.match(TSqlParser.DOT);
                                this.state = 2919;
                                localctx.action_name = this.id();
                                this.state = 2923; 
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            } while(_la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0) || _la===TSqlParser.COMMA);
                            this.state = 2925;
                            this.match(TSqlParser.RR_BRACKET);
                            this.state = 2929; 
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while(_la===TSqlParser.ACTION);
                        this.state = 2933;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.WHERE) {
                            this.state = 2931;
                            this.match(TSqlParser.WHERE);
                            this.state = 2932;
                            this.event_session_predicate_expression();
                        }

                        this.state = 2935;
                        this.match(TSqlParser.RR_BRACKET); 
                    }
                    this.state = 2941;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,234,this._ctx);
                }
         
            }
            this.state = 2946;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,235,this._ctx);
        }

        this.state = 2963;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,238,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2948;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 2947;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 2950;
                this.match(TSqlParser.DROP);
                this.state = 2951;
                this.match(TSqlParser.EVENT);
                this.state = 2955;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
                if(la_===1) {
                    this.state = 2952;
                    localctx.event_module_guid = this.id();
                    this.state = 2953;
                    this.match(TSqlParser.DOT);

                }
                this.state = 2957;
                localctx.event_package_name = this.id();
                this.state = 2958;
                this.match(TSqlParser.DOT);
                this.state = 2959;
                localctx.event_name = this.id(); 
            }
            this.state = 2965;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,238,this._ctx);
        }

        this.state = 3007;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.ADD) {
            this.state = 2966;
            this.match(TSqlParser.ADD);
            this.state = 2967;
            this.match(TSqlParser.TARGET);
            this.state = 2971;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
            if(la_===1) {
                this.state = 2968;
                localctx.event_module_guid = this.id();
                this.state = 2969;
                this.match(TSqlParser.DOT);

            }
            this.state = 2973;
            localctx.event_package_name = this.id();
            this.state = 2974;
            this.match(TSqlParser.DOT);
            this.state = 2975;
            localctx.target_name = this.id();
            this.state = 3002;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,245,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2977;
                    this.match(TSqlParser.LR_BRACKET);
                    this.state = 2978;
                    this.match(TSqlParser.SET);
                    this.state = 2994; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 2980;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 2979;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 2982;
                        localctx.target_parameter_name = this.id();
                        this.state = 2983;
                        this.match(TSqlParser.EQUAL);
                        this.state = 2992;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case TSqlParser.DECIMAL:
                        case TSqlParser.LR_BRACKET:
                            this.state = 2985;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(_la===TSqlParser.LR_BRACKET) {
                                this.state = 2984;
                                this.match(TSqlParser.LR_BRACKET);
                            }

                            this.state = 2987;
                            this.match(TSqlParser.DECIMAL);
                            this.state = 2989;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
                            if(la_===1) {
                                this.state = 2988;
                                this.match(TSqlParser.RR_BRACKET);

                            }
                            break;
                        case TSqlParser.STRING:
                            this.state = 2991;
                            this.match(TSqlParser.STRING);
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        }
                        this.state = 2996; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while(_la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0) || _la===TSqlParser.COMMA);
                    this.state = 2998;
                    this.match(TSqlParser.RR_BRACKET); 
                }
                this.state = 3004;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,245,this._ctx);
            }

            this.state = 3009;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3023;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,248,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 3010;
                this.match(TSqlParser.DROP);
                this.state = 3011;
                this.match(TSqlParser.TARGET);
                this.state = 3015;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
                if(la_===1) {
                    this.state = 3012;
                    localctx.event_module_guid = this.id();
                    this.state = 3013;
                    this.match(TSqlParser.DOT);

                }
                this.state = 3017;
                localctx.event_package_name = this.id();
                this.state = 3018;
                this.match(TSqlParser.DOT);
                this.state = 3019;
                localctx.target_name = this.id(); 
            }
            this.state = 3025;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,248,this._ctx);
        }

        this.state = 3091;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,264,this._ctx);
        if(la_===1) {
            this.state = 3026;
            this.match(TSqlParser.WITH);
            this.state = 3027;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 3035;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
            if(la_===1) {
                this.state = 3029;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 3028;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 3031;
                this.match(TSqlParser.MAX_MEMORY);
                this.state = 3032;
                this.match(TSqlParser.EQUAL);
                this.state = 3033;
                localctx.max_memory = this.match(TSqlParser.DECIMAL);
                this.state = 3034;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.KB || _la===TSqlParser.MB)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 3043;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
            if(la_===1) {
                this.state = 3038;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 3037;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 3040;
                this.match(TSqlParser.EVENT_RETENTION_MODE);
                this.state = 3041;
                this.match(TSqlParser.EQUAL);
                this.state = 3042;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS || _la===TSqlParser.ALLOW_SINGLE_EVENT_LOSS || _la===TSqlParser.NO_EVENT_LOSS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 3055;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,255,this._ctx);
            if(la_===1) {
                this.state = 3046;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 3045;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 3048;
                this.match(TSqlParser.MAX_DISPATCH_LATENCY);
                this.state = 3049;
                this.match(TSqlParser.EQUAL);
                this.state = 3053;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.DECIMAL:
                    this.state = 3050;
                    localctx.max_dispatch_latency_seconds = this.match(TSqlParser.DECIMAL);
                    this.state = 3051;
                    this.match(TSqlParser.SECONDS);
                    break;
                case TSqlParser.INFINITE:
                    this.state = 3052;
                    this.match(TSqlParser.INFINITE);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }

            }
            this.state = 3064;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,257,this._ctx);
            if(la_===1) {
                this.state = 3058;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 3057;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 3060;
                this.match(TSqlParser.MAX_EVENT_SIZE);
                this.state = 3061;
                this.match(TSqlParser.EQUAL);
                this.state = 3062;
                localctx.max_event_size = this.match(TSqlParser.DECIMAL);
                this.state = 3063;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.KB || _la===TSqlParser.MB)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 3072;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,259,this._ctx);
            if(la_===1) {
                this.state = 3067;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 3066;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 3069;
                this.match(TSqlParser.MEMORY_PARTITION_MODE);
                this.state = 3070;
                this.match(TSqlParser.EQUAL);
                this.state = 3071;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.NONE || _la===TSqlParser.PER_CPU || _la===TSqlParser.PER_NODE)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 3080;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
            if(la_===1) {
                this.state = 3075;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 3074;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 3077;
                this.match(TSqlParser.TRACK_CAUSALITY);
                this.state = 3078;
                this.match(TSqlParser.EQUAL);
                this.state = 3079;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 3088;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.STARTUP_STATE || _la===TSqlParser.COMMA) {
                this.state = 3083;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 3082;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 3085;
                this.match(TSqlParser.STARTUP_STATE);
                this.state = 3086;
                this.match(TSqlParser.EQUAL);
                this.state = 3087;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 3090;
            this.match(TSqlParser.RR_BRACKET);

        }
        this.state = 3096;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,265,this._ctx);
        if(la_===1) {
            this.state = 3093;
            this.match(TSqlParser.STATE);
            this.state = 3094;
            this.match(TSqlParser.EQUAL);
            this.state = 3095;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.START || _la===TSqlParser.STOP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Event_session_predicate_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_event_session_predicate_expression;
    return this;
}

Event_session_predicate_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Event_session_predicate_expressionContext.prototype.constructor = Event_session_predicate_expressionContext;

Event_session_predicate_expressionContext.prototype.event_session_predicate_factor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Event_session_predicate_factorContext);
    } else {
        return this.getTypedRuleContext(Event_session_predicate_factorContext,i);
    }
};

Event_session_predicate_expressionContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LR_BRACKET);
    } else {
        return this.getToken(TSqlParser.LR_BRACKET, i);
    }
};


Event_session_predicate_expressionContext.prototype.event_session_predicate_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Event_session_predicate_expressionContext);
    } else {
        return this.getTypedRuleContext(Event_session_predicate_expressionContext,i);
    }
};

Event_session_predicate_expressionContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RR_BRACKET);
    } else {
        return this.getToken(TSqlParser.RR_BRACKET, i);
    }
};


Event_session_predicate_expressionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Event_session_predicate_expressionContext.prototype.NOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NOT);
    } else {
        return this.getToken(TSqlParser.NOT, i);
    }
};


Event_session_predicate_expressionContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.AND);
    } else {
        return this.getToken(TSqlParser.AND, i);
    }
};


Event_session_predicate_expressionContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.OR);
    } else {
        return this.getToken(TSqlParser.OR, i);
    }
};


Event_session_predicate_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterEvent_session_predicate_expression(this);
	}
};

Event_session_predicate_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitEvent_session_predicate_expression(this);
	}
};




TSqlParser.Event_session_predicate_expressionContext = Event_session_predicate_expressionContext;

TSqlParser.prototype.event_session_predicate_expression = function() {

    var localctx = new Event_session_predicate_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 286, TSqlParser.RULE_event_session_predicate_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3114; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 3099;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 3098;
                this.match(TSqlParser.COMMA);
            }

            this.state = 3102;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.AND || _la===TSqlParser.OR) {
                this.state = 3101;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.AND || _la===TSqlParser.OR)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 3105;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.NOT) {
                this.state = 3104;
                this.match(TSqlParser.NOT);
            }

            this.state = 3112;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,269,this._ctx);
            switch(la_) {
            case 1:
                this.state = 3107;
                this.event_session_predicate_factor();
                break;

            case 2:
                this.state = 3108;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 3109;
                this.event_session_predicate_expression();
                this.state = 3110;
                this.match(TSqlParser.RR_BRACKET);
                break;

            }
            this.state = 3116; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===TSqlParser.AND || _la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || ((((_la - 217)) & ~0x1f) == 0 && ((1 << (_la - 217)) & ((1 << (TSqlParser.NOT - 217)) | (1 << (TSqlParser.OFFSETS - 217)) | (1 << (TSqlParser.OR - 217)) | (1 << (TSqlParser.PAGE - 217)))) !== 0) || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0) || _la===TSqlParser.LR_BRACKET || _la===TSqlParser.COMMA);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Event_session_predicate_factorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_event_session_predicate_factor;
    return this;
}

Event_session_predicate_factorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Event_session_predicate_factorContext.prototype.constructor = Event_session_predicate_factorContext;

Event_session_predicate_factorContext.prototype.event_session_predicate_leaf = function() {
    return this.getTypedRuleContext(Event_session_predicate_leafContext,0);
};

Event_session_predicate_factorContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Event_session_predicate_factorContext.prototype.event_session_predicate_expression = function() {
    return this.getTypedRuleContext(Event_session_predicate_expressionContext,0);
};

Event_session_predicate_factorContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Event_session_predicate_factorContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterEvent_session_predicate_factor(this);
	}
};

Event_session_predicate_factorContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitEvent_session_predicate_factor(this);
	}
};




TSqlParser.Event_session_predicate_factorContext = Event_session_predicate_factorContext;

TSqlParser.prototype.event_session_predicate_factor = function() {

    var localctx = new Event_session_predicate_factorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 288, TSqlParser.RULE_event_session_predicate_factor);
    try {
        this.state = 3123;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 3118;
            this.event_session_predicate_leaf();
            break;
        case TSqlParser.LR_BRACKET:
            this.enterOuterAlt(localctx, 2);
            this.state = 3119;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 3120;
            this.event_session_predicate_expression();
            this.state = 3121;
            this.match(TSqlParser.RR_BRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Event_session_predicate_leafContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_event_session_predicate_leaf;
    this.event_field_name = null; // IdContext
    this.event_module_guid = null; // IdContext
    this.event_package_name = null; // IdContext
    this.predicate_source_name = null; // IdContext
    this.predicate_compare_name = null; // IdContext
    return this;
}

Event_session_predicate_leafContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Event_session_predicate_leafContext.prototype.constructor = Event_session_predicate_leafContext;

Event_session_predicate_leafContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Event_session_predicate_leafContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Event_session_predicate_leafContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Event_session_predicate_leafContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Event_session_predicate_leafContext.prototype.GREATER = function() {
    return this.getToken(TSqlParser.GREATER, 0);
};

Event_session_predicate_leafContext.prototype.LESS = function() {
    return this.getToken(TSqlParser.LESS, 0);
};

Event_session_predicate_leafContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DOT);
    } else {
        return this.getToken(TSqlParser.DOT, i);
    }
};


Event_session_predicate_leafContext.prototype.EXCLAMATION = function() {
    return this.getToken(TSqlParser.EXCLAMATION, 0);
};

Event_session_predicate_leafContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Event_session_predicate_leafContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Event_session_predicate_leafContext.prototype.COMMA = function() {
    return this.getToken(TSqlParser.COMMA, 0);
};

Event_session_predicate_leafContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterEvent_session_predicate_leaf(this);
	}
};

Event_session_predicate_leafContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitEvent_session_predicate_leaf(this);
	}
};




TSqlParser.Event_session_predicate_leafContext = Event_session_predicate_leafContext;

TSqlParser.prototype.event_session_predicate_leaf = function() {

    var localctx = new Event_session_predicate_leafContext(this, this._ctx, this.state);
    this.enterRule(localctx, 290, TSqlParser.RULE_event_session_predicate_leaf);
    var _la = 0; // Token type
    try {
        this.state = 3181;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,279,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3153;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
            switch(la_) {
            case 1:
                this.state = 3125;
                localctx.event_field_name = this.id();
                break;

            case 2:
                this.state = 3136;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,273,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 3126;
                    localctx.event_field_name = this.id();
                    break;

                case 2:
                    this.state = 3130;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,272,this._ctx);
                    if(la_===1) {
                        this.state = 3127;
                        localctx.event_module_guid = this.id();
                        this.state = 3128;
                        this.match(TSqlParser.DOT);

                    }
                    this.state = 3132;
                    localctx.event_package_name = this.id();
                    this.state = 3133;
                    this.match(TSqlParser.DOT);
                    this.state = 3134;
                    localctx.predicate_source_name = this.id();
                    break;

                }
                this.state = 3149;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 3138;
                    this.match(TSqlParser.EQUAL);
                    break;

                case 2:
                    this.state = 3139;
                    this.match(TSqlParser.LESS);
                    this.state = 3140;
                    this.match(TSqlParser.GREATER);
                    break;

                case 3:
                    this.state = 3141;
                    this.match(TSqlParser.EXCLAMATION);
                    this.state = 3142;
                    this.match(TSqlParser.EQUAL);
                    break;

                case 4:
                    this.state = 3143;
                    this.match(TSqlParser.GREATER);
                    break;

                case 5:
                    this.state = 3144;
                    this.match(TSqlParser.GREATER);
                    this.state = 3145;
                    this.match(TSqlParser.EQUAL);
                    break;

                case 6:
                    this.state = 3146;
                    this.match(TSqlParser.LESS);
                    break;

                case 7:
                    this.state = 3147;
                    this.match(TSqlParser.LESS);
                    this.state = 3148;
                    this.match(TSqlParser.EQUAL);
                    break;

                }
                this.state = 3151;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.DECIMAL || _la===TSqlParser.STRING)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3158;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,276,this._ctx);
            if(la_===1) {
                this.state = 3155;
                localctx.event_module_guid = this.id();
                this.state = 3156;
                this.match(TSqlParser.DOT);

            }
            this.state = 3160;
            localctx.event_package_name = this.id();
            this.state = 3161;
            this.match(TSqlParser.DOT);
            this.state = 3162;
            localctx.predicate_compare_name = this.id();
            this.state = 3163;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 3177;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,278,this._ctx);
            switch(la_) {
            case 1:
                this.state = 3164;
                localctx.event_field_name = this.id();
                break;

            case 2:
                this.state = 3168;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,277,this._ctx);
                if(la_===1) {
                    this.state = 3165;
                    localctx.event_module_guid = this.id();
                    this.state = 3166;
                    this.match(TSqlParser.DOT);

                }
                this.state = 3170;
                localctx.event_package_name = this.id();
                this.state = 3171;
                this.match(TSqlParser.DOT);
                this.state = 3172;
                localctx.predicate_source_name = this.id();
                this.state = 3174;
                this.match(TSqlParser.COMMA);
                this.state = 3175;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.DECIMAL || _la===TSqlParser.STRING)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;

            }
            this.state = 3179;
            this.match(TSqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_external_data_sourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_external_data_source;
    this.data_source_name = null; // IdContext
    this.location = null; // Token
    this.resource_manager_location = null; // Token
    this.credential_name = null; // IdContext
    return this;
}

Alter_external_data_sourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_external_data_sourceContext.prototype.constructor = Alter_external_data_sourceContext;

Alter_external_data_sourceContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_external_data_sourceContext.prototype.EXTERNAL = function() {
    return this.getToken(TSqlParser.EXTERNAL, 0);
};

Alter_external_data_sourceContext.prototype.DATA = function() {
    return this.getToken(TSqlParser.DATA, 0);
};

Alter_external_data_sourceContext.prototype.SOURCE = function() {
    return this.getToken(TSqlParser.SOURCE, 0);
};

Alter_external_data_sourceContext.prototype.SET = function() {
    return this.getToken(TSqlParser.SET, 0);
};

Alter_external_data_sourceContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_external_data_sourceContext.prototype.LOCATION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LOCATION);
    } else {
        return this.getToken(TSqlParser.LOCATION, i);
    }
};


Alter_external_data_sourceContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Alter_external_data_sourceContext.prototype.RESOURCE_MANAGER_LOCATION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RESOURCE_MANAGER_LOCATION);
    } else {
        return this.getToken(TSqlParser.RESOURCE_MANAGER_LOCATION, i);
    }
};


Alter_external_data_sourceContext.prototype.CREDENTIAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.CREDENTIAL);
    } else {
        return this.getToken(TSqlParser.CREDENTIAL, i);
    }
};


Alter_external_data_sourceContext.prototype.QUOTED_URL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.QUOTED_URL);
    } else {
        return this.getToken(TSqlParser.QUOTED_URL, i);
    }
};


Alter_external_data_sourceContext.prototype.QUOTED_HOST_AND_PORT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.QUOTED_HOST_AND_PORT);
    } else {
        return this.getToken(TSqlParser.QUOTED_HOST_AND_PORT, i);
    }
};


Alter_external_data_sourceContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Alter_external_data_sourceContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_external_data_sourceContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Alter_external_data_sourceContext.prototype.TYPE = function() {
    return this.getToken(TSqlParser.TYPE, 0);
};

Alter_external_data_sourceContext.prototype.BLOB_STORAGE = function() {
    return this.getToken(TSqlParser.BLOB_STORAGE, 0);
};

Alter_external_data_sourceContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Alter_external_data_sourceContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Alter_external_data_sourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_external_data_source(this);
	}
};

Alter_external_data_sourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_external_data_source(this);
	}
};




TSqlParser.Alter_external_data_sourceContext = Alter_external_data_sourceContext;

TSqlParser.prototype.alter_external_data_source = function() {

    var localctx = new Alter_external_data_sourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 292, TSqlParser.RULE_alter_external_data_source);
    var _la = 0; // Token type
    try {
        this.state = 3230;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,285,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 3183;
            this.match(TSqlParser.ALTER);
            this.state = 3184;
            this.match(TSqlParser.EXTERNAL);
            this.state = 3185;
            this.match(TSqlParser.DATA);
            this.state = 3186;
            this.match(TSqlParser.SOURCE);
            this.state = 3187;
            localctx.data_source_name = this.id();
            this.state = 3188;
            this.match(TSqlParser.SET);
            this.state = 3204; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 3204;
            		this._errHandler.sync(this);
            		switch(this._input.LA(1)) {
            		case TSqlParser.LOCATION:
            		    this.state = 3189;
            		    this.match(TSqlParser.LOCATION);
            		    this.state = 3190;
            		    this.match(TSqlParser.EQUAL);
            		    this.state = 3191;
            		    localctx.location = this._input.LT(1);
            		    _la = this._input.LA(1);
            		    if(!(_la===TSqlParser.QUOTED_URL || _la===TSqlParser.QUOTED_HOST_AND_PORT)) {
            		        localctx.location = this._errHandler.recoverInline(this);
            		    }
            		    else {
            		    	this._errHandler.reportMatch(this);
            		        this.consume();
            		    }
            		    this.state = 3193;
            		    this._errHandler.sync(this);
            		    _la = this._input.LA(1);
            		    if(_la===TSqlParser.COMMA) {
            		        this.state = 3192;
            		        this.match(TSqlParser.COMMA);
            		    }

            		    break;
            		case TSqlParser.RESOURCE_MANAGER_LOCATION:
            		    this.state = 3195;
            		    this.match(TSqlParser.RESOURCE_MANAGER_LOCATION);
            		    this.state = 3196;
            		    this.match(TSqlParser.EQUAL);
            		    this.state = 3197;
            		    localctx.resource_manager_location = this._input.LT(1);
            		    _la = this._input.LA(1);
            		    if(!(_la===TSqlParser.QUOTED_URL || _la===TSqlParser.QUOTED_HOST_AND_PORT)) {
            		        localctx.resource_manager_location = this._errHandler.recoverInline(this);
            		    }
            		    else {
            		    	this._errHandler.reportMatch(this);
            		        this.consume();
            		    }
            		    this.state = 3199;
            		    this._errHandler.sync(this);
            		    _la = this._input.LA(1);
            		    if(_la===TSqlParser.COMMA) {
            		        this.state = 3198;
            		        this.match(TSqlParser.COMMA);
            		    }

            		    break;
            		case TSqlParser.CREDENTIAL:
            		    this.state = 3201;
            		    this.match(TSqlParser.CREDENTIAL);
            		    this.state = 3202;
            		    this.match(TSqlParser.EQUAL);
            		    this.state = 3203;
            		    localctx.credential_name = this.id();
            		    break;
            		default:
            		    throw new antlr4.error.NoViableAltException(this);
            		}
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 3206; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,283, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 3208;
            this.match(TSqlParser.ALTER);
            this.state = 3209;
            this.match(TSqlParser.EXTERNAL);
            this.state = 3210;
            this.match(TSqlParser.DATA);
            this.state = 3211;
            this.match(TSqlParser.SOURCE);
            this.state = 3212;
            localctx.data_source_name = this.id();
            this.state = 3213;
            this.match(TSqlParser.WITH);
            this.state = 3214;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 3215;
            this.match(TSqlParser.TYPE);
            this.state = 3216;
            this.match(TSqlParser.EQUAL);
            this.state = 3217;
            this.match(TSqlParser.BLOB_STORAGE);
            this.state = 3218;
            this.match(TSqlParser.COMMA);
            this.state = 3219;
            this.match(TSqlParser.LOCATION);
            this.state = 3220;
            this.match(TSqlParser.EQUAL);
            this.state = 3221;
            localctx.location = this.match(TSqlParser.STRING);
            this.state = 3226;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 3222;
                this.match(TSqlParser.COMMA);
                this.state = 3223;
                this.match(TSqlParser.CREDENTIAL);
                this.state = 3224;
                this.match(TSqlParser.EQUAL);
                this.state = 3225;
                localctx.credential_name = this.id();
            }

            this.state = 3228;
            this.match(TSqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_external_libraryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_external_library;
    this.library_name = null; // IdContext
    this.owner_name = null; // IdContext
    this.client_library = null; // Token
    this.external_data_source_name = null; // IdContext
    return this;
}

Alter_external_libraryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_external_libraryContext.prototype.constructor = Alter_external_libraryContext;

Alter_external_libraryContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_external_libraryContext.prototype.EXTERNAL = function() {
    return this.getToken(TSqlParser.EXTERNAL, 0);
};

Alter_external_libraryContext.prototype.LIBRARY = function() {
    return this.getToken(TSqlParser.LIBRARY, 0);
};

Alter_external_libraryContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_external_libraryContext.prototype.SET = function() {
    return this.getToken(TSqlParser.SET, 0);
};

Alter_external_libraryContext.prototype.ADD = function() {
    return this.getToken(TSqlParser.ADD, 0);
};

Alter_external_libraryContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Alter_external_libraryContext.prototype.CONTENT = function() {
    return this.getToken(TSqlParser.CONTENT, 0);
};

Alter_external_libraryContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Alter_external_libraryContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_external_libraryContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RR_BRACKET);
    } else {
        return this.getToken(TSqlParser.RR_BRACKET, i);
    }
};


Alter_external_libraryContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Alter_external_libraryContext.prototype.BINARY = function() {
    return this.getToken(TSqlParser.BINARY, 0);
};

Alter_external_libraryContext.prototype.NONE = function() {
    return this.getToken(TSqlParser.NONE, 0);
};

Alter_external_libraryContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Alter_external_libraryContext.prototype.PLATFORM = function() {
    return this.getToken(TSqlParser.PLATFORM, 0);
};

Alter_external_libraryContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Alter_external_libraryContext.prototype.LANGUAGE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LANGUAGE);
    } else {
        return this.getToken(TSqlParser.LANGUAGE, i);
    }
};


Alter_external_libraryContext.prototype.DATA_SOURCE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DATA_SOURCE);
    } else {
        return this.getToken(TSqlParser.DATA_SOURCE, i);
    }
};


Alter_external_libraryContext.prototype.R = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.R);
    } else {
        return this.getToken(TSqlParser.R, i);
    }
};


Alter_external_libraryContext.prototype.PYTHON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.PYTHON);
    } else {
        return this.getToken(TSqlParser.PYTHON, i);
    }
};


Alter_external_libraryContext.prototype.WINDOWS = function() {
    return this.getToken(TSqlParser.WINDOWS, 0);
};

Alter_external_libraryContext.prototype.LINUX = function() {
    return this.getToken(TSqlParser.LINUX, 0);
};

Alter_external_libraryContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_external_library(this);
	}
};

Alter_external_libraryContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_external_library(this);
	}
};




TSqlParser.Alter_external_libraryContext = Alter_external_libraryContext;

TSqlParser.prototype.alter_external_library = function() {

    var localctx = new Alter_external_libraryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 294, TSqlParser.RULE_alter_external_library);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3232;
        this.match(TSqlParser.ALTER);
        this.state = 3233;
        this.match(TSqlParser.EXTERNAL);
        this.state = 3234;
        this.match(TSqlParser.LIBRARY);
        this.state = 3235;
        localctx.library_name = this.id();
        this.state = 3238;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AUTHORIZATION) {
            this.state = 3236;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 3237;
            localctx.owner_name = this.id();
        }

        this.state = 3240;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.ADD || _la===TSqlParser.SET)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }

        this.state = 3241;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 3242;
        this.match(TSqlParser.CONTENT);
        this.state = 3243;
        this.match(TSqlParser.EQUAL);
        this.state = 3247;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.STRING:
            this.state = 3244;
            localctx.client_library = this.match(TSqlParser.STRING);
            break;
        case TSqlParser.BINARY:
            this.state = 3245;
            this.match(TSqlParser.BINARY);
            break;
        case TSqlParser.NONE:
            this.state = 3246;
            this.match(TSqlParser.NONE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }

        this.state = 3249;
        this.match(TSqlParser.COMMA);
        this.state = 3250;
        this.match(TSqlParser.PLATFORM);
        this.state = 3251;
        this.match(TSqlParser.EQUAL);
        this.state = 3253;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.LINUX || _la===TSqlParser.WINDOWS) {
            this.state = 3252;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.LINUX || _la===TSqlParser.WINDOWS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 3255;
        this.match(TSqlParser.RR_BRACKET);
        this.state = 3257;
        this.match(TSqlParser.WITH);
        this.state = 3267; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 3267;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.LANGUAGE:
            case TSqlParser.COMMA:
                this.state = 3259;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 3258;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 3261;
                this.match(TSqlParser.LANGUAGE);
                this.state = 3262;
                this.match(TSqlParser.EQUAL);
                this.state = 3263;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.PYTHON || _la===TSqlParser.R)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            case TSqlParser.DATA_SOURCE:
                this.state = 3264;
                this.match(TSqlParser.DATA_SOURCE);
                this.state = 3265;
                this.match(TSqlParser.EQUAL);
                this.state = 3266;
                localctx.external_data_source_name = this.id();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 3269; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===TSqlParser.DATA_SOURCE || _la===TSqlParser.LANGUAGE || _la===TSqlParser.COMMA);
        this.state = 3271;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_external_libraryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_external_library;
    this.library_name = null; // IdContext
    this.owner_name = null; // IdContext
    this.client_library = null; // Token
    this.external_data_source_name = null; // IdContext
    return this;
}

Create_external_libraryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_external_libraryContext.prototype.constructor = Create_external_libraryContext;

Create_external_libraryContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_external_libraryContext.prototype.EXTERNAL = function() {
    return this.getToken(TSqlParser.EXTERNAL, 0);
};

Create_external_libraryContext.prototype.LIBRARY = function() {
    return this.getToken(TSqlParser.LIBRARY, 0);
};

Create_external_libraryContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Create_external_libraryContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_external_libraryContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Create_external_libraryContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_external_libraryContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RR_BRACKET);
    } else {
        return this.getToken(TSqlParser.RR_BRACKET, i);
    }
};


Create_external_libraryContext.prototype.BINARY = function() {
    return this.getToken(TSqlParser.BINARY, 0);
};

Create_external_libraryContext.prototype.NONE = function() {
    return this.getToken(TSqlParser.NONE, 0);
};

Create_external_libraryContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Create_external_libraryContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Create_external_libraryContext.prototype.CONTENT = function() {
    return this.getToken(TSqlParser.CONTENT, 0);
};

Create_external_libraryContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Create_external_libraryContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Create_external_libraryContext.prototype.PLATFORM = function() {
    return this.getToken(TSqlParser.PLATFORM, 0);
};

Create_external_libraryContext.prototype.LANGUAGE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LANGUAGE);
    } else {
        return this.getToken(TSqlParser.LANGUAGE, i);
    }
};


Create_external_libraryContext.prototype.DATA_SOURCE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DATA_SOURCE);
    } else {
        return this.getToken(TSqlParser.DATA_SOURCE, i);
    }
};


Create_external_libraryContext.prototype.R = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.R);
    } else {
        return this.getToken(TSqlParser.R, i);
    }
};


Create_external_libraryContext.prototype.PYTHON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.PYTHON);
    } else {
        return this.getToken(TSqlParser.PYTHON, i);
    }
};


Create_external_libraryContext.prototype.WINDOWS = function() {
    return this.getToken(TSqlParser.WINDOWS, 0);
};

Create_external_libraryContext.prototype.LINUX = function() {
    return this.getToken(TSqlParser.LINUX, 0);
};

Create_external_libraryContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_external_library(this);
	}
};

Create_external_libraryContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_external_library(this);
	}
};




TSqlParser.Create_external_libraryContext = Create_external_libraryContext;

TSqlParser.prototype.create_external_library = function() {

    var localctx = new Create_external_libraryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 296, TSqlParser.RULE_create_external_library);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3273;
        this.match(TSqlParser.CREATE);
        this.state = 3274;
        this.match(TSqlParser.EXTERNAL);
        this.state = 3275;
        this.match(TSqlParser.LIBRARY);
        this.state = 3276;
        localctx.library_name = this.id();
        this.state = 3279;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AUTHORIZATION) {
            this.state = 3277;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 3278;
            localctx.owner_name = this.id();
        }

        this.state = 3281;
        this.match(TSqlParser.FROM);

        this.state = 3283;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 3282;
            this.match(TSqlParser.COMMA);
        }

        this.state = 3286;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.LR_BRACKET) {
            this.state = 3285;
            this.match(TSqlParser.LR_BRACKET);
        }

        this.state = 3290;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.CONTENT) {
            this.state = 3288;
            this.match(TSqlParser.CONTENT);
            this.state = 3289;
            this.match(TSqlParser.EQUAL);
        }

        this.state = 3295;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.STRING:
            this.state = 3292;
            localctx.client_library = this.match(TSqlParser.STRING);
            break;
        case TSqlParser.BINARY:
            this.state = 3293;
            this.match(TSqlParser.BINARY);
            break;
        case TSqlParser.NONE:
            this.state = 3294;
            this.match(TSqlParser.NONE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3304;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 3297;
            this.match(TSqlParser.COMMA);
            this.state = 3298;
            this.match(TSqlParser.PLATFORM);
            this.state = 3299;
            this.match(TSqlParser.EQUAL);
            this.state = 3301;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.LINUX || _la===TSqlParser.WINDOWS) {
                this.state = 3300;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.LINUX || _la===TSqlParser.WINDOWS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 3303;
            this.match(TSqlParser.RR_BRACKET);
        }

        this.state = 3321;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,302,this._ctx);
        if(la_===1) {
            this.state = 3306;
            this.match(TSqlParser.WITH);
            this.state = 3316; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 3316;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.LANGUAGE:
                case TSqlParser.COMMA:
                    this.state = 3308;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 3307;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 3310;
                    this.match(TSqlParser.LANGUAGE);
                    this.state = 3311;
                    this.match(TSqlParser.EQUAL);
                    this.state = 3312;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.PYTHON || _la===TSqlParser.R)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case TSqlParser.DATA_SOURCE:
                    this.state = 3313;
                    this.match(TSqlParser.DATA_SOURCE);
                    this.state = 3314;
                    this.match(TSqlParser.EQUAL);
                    this.state = 3315;
                    localctx.external_data_source_name = this.id();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 3318; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.DATA_SOURCE || _la===TSqlParser.LANGUAGE || _la===TSqlParser.COMMA);
            this.state = 3320;
            this.match(TSqlParser.RR_BRACKET);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_external_resource_poolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_external_resource_pool;
    this.pool_name = null; // IdContext
    this.max_cpu_percent = null; // Token
    this.max_memory_percent = null; // Token
    this.max_processes = null; // Token
    return this;
}

Alter_external_resource_poolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_external_resource_poolContext.prototype.constructor = Alter_external_resource_poolContext;

Alter_external_resource_poolContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_external_resource_poolContext.prototype.EXTERNAL = function() {
    return this.getToken(TSqlParser.EXTERNAL, 0);
};

Alter_external_resource_poolContext.prototype.RESOURCE = function() {
    return this.getToken(TSqlParser.RESOURCE, 0);
};

Alter_external_resource_poolContext.prototype.POOL = function() {
    return this.getToken(TSqlParser.POOL, 0);
};

Alter_external_resource_poolContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_external_resource_poolContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Alter_external_resource_poolContext.prototype.MAX_CPU_PERCENT = function() {
    return this.getToken(TSqlParser.MAX_CPU_PERCENT, 0);
};

Alter_external_resource_poolContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Alter_external_resource_poolContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Alter_external_resource_poolContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Alter_external_resource_poolContext.prototype.DEFAULT_DOUBLE_QUOTE = function() {
    return this.getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0);
};

Alter_external_resource_poolContext.prototype.AFFINITY = function() {
    return this.getToken(TSqlParser.AFFINITY, 0);
};

Alter_external_resource_poolContext.prototype.CPU = function() {
    return this.getToken(TSqlParser.CPU, 0);
};

Alter_external_resource_poolContext.prototype.NUMANODE = function() {
    return this.getToken(TSqlParser.NUMANODE, 0);
};

Alter_external_resource_poolContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Alter_external_resource_poolContext.prototype.MAX_MEMORY_PERCENT = function() {
    return this.getToken(TSqlParser.MAX_MEMORY_PERCENT, 0);
};

Alter_external_resource_poolContext.prototype.MAX_PROCESSES = function() {
    return this.getToken(TSqlParser.MAX_PROCESSES, 0);
};

Alter_external_resource_poolContext.prototype.AUTO = function() {
    return this.getToken(TSqlParser.AUTO, 0);
};

Alter_external_resource_poolContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Alter_external_resource_poolContext.prototype.TO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.TO);
    } else {
        return this.getToken(TSqlParser.TO, i);
    }
};


Alter_external_resource_poolContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_external_resource_pool(this);
	}
};

Alter_external_resource_poolContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_external_resource_pool(this);
	}
};




TSqlParser.Alter_external_resource_poolContext = Alter_external_resource_poolContext;

TSqlParser.prototype.alter_external_resource_pool = function() {

    var localctx = new Alter_external_resource_poolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 298, TSqlParser.RULE_alter_external_resource_pool);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3323;
        this.match(TSqlParser.ALTER);
        this.state = 3324;
        this.match(TSqlParser.EXTERNAL);
        this.state = 3325;
        this.match(TSqlParser.RESOURCE);
        this.state = 3326;
        this.match(TSqlParser.POOL);
        this.state = 3329;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.state = 3327;
            localctx.pool_name = this.id();
            break;
        case TSqlParser.DEFAULT_DOUBLE_QUOTE:
            this.state = 3328;
            this.match(TSqlParser.DEFAULT_DOUBLE_QUOTE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3331;
        this.match(TSqlParser.WITH);
        this.state = 3332;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 3333;
        this.match(TSqlParser.MAX_CPU_PERCENT);
        this.state = 3334;
        this.match(TSqlParser.EQUAL);
        this.state = 3335;
        localctx.max_cpu_percent = this.match(TSqlParser.DECIMAL);
        this.state = 3373;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.AFFINITY:
        case TSqlParser.COMMA:
            this.state = 3337;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 3336;
                this.match(TSqlParser.COMMA);
            }

            this.state = 3339;
            this.match(TSqlParser.AFFINITY);
            this.state = 3340;
            this.match(TSqlParser.CPU);
            this.state = 3341;
            this.match(TSqlParser.EQUAL);
            this.state = 3355;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.AUTO:
                this.state = 3342;
                this.match(TSqlParser.AUTO);
                break;
            case TSqlParser.DECIMAL:
            case TSqlParser.COMMA:
                this.state = 3351; 
                this._errHandler.sync(this);
                var _alt = 1;
                do {
                	switch (_alt) {
                	case 1:
                		this.state = 3351;
                		this._errHandler.sync(this);
                		var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
                		switch(la_) {
                		case 1:
                		    this.state = 3344;
                		    this._errHandler.sync(this);
                		    _la = this._input.LA(1);
                		    if(_la===TSqlParser.COMMA) {
                		        this.state = 3343;
                		        this.match(TSqlParser.COMMA);
                		    }

                		    this.state = 3346;
                		    this.match(TSqlParser.DECIMAL);
                		    this.state = 3347;
                		    this.match(TSqlParser.TO);
                		    this.state = 3348;
                		    this.match(TSqlParser.DECIMAL);
                		    break;

                		case 2:
                		    this.state = 3349;
                		    this.match(TSqlParser.COMMA);
                		    this.state = 3350;
                		    this.match(TSqlParser.DECIMAL);
                		    break;

                		}
                		break;
                	default:
                		throw new antlr4.error.NoViableAltException(this);
                	}
                	this.state = 3353; 
                	this._errHandler.sync(this);
                	_alt = this._interp.adaptivePredict(this._input,307, this._ctx);
                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case TSqlParser.NUMANODE:
            this.state = 3357;
            this.match(TSqlParser.NUMANODE);
            this.state = 3358;
            this.match(TSqlParser.EQUAL);
            this.state = 3369; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 3369;
            		this._errHandler.sync(this);
            		var la_ = this._interp.adaptivePredict(this._input,311,this._ctx);
            		switch(la_) {
            		case 1:
            		    this.state = 3360;
            		    this._errHandler.sync(this);
            		    _la = this._input.LA(1);
            		    if(_la===TSqlParser.COMMA) {
            		        this.state = 3359;
            		        this.match(TSqlParser.COMMA);
            		    }

            		    this.state = 3362;
            		    this.match(TSqlParser.DECIMAL);
            		    this.state = 3363;
            		    this.match(TSqlParser.TO);
            		    this.state = 3364;
            		    this.match(TSqlParser.DECIMAL);
            		    break;

            		case 2:
            		    this.state = 3366;
            		    this._errHandler.sync(this);
            		    _la = this._input.LA(1);
            		    if(_la===TSqlParser.COMMA) {
            		        this.state = 3365;
            		        this.match(TSqlParser.COMMA);
            		    }

            		    this.state = 3368;
            		    this.match(TSqlParser.DECIMAL);
            		    break;

            		}
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 3371; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,312, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3381;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,315,this._ctx);
        if(la_===1) {
            this.state = 3376;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 3375;
                this.match(TSqlParser.COMMA);
            }

            this.state = 3378;
            this.match(TSqlParser.MAX_MEMORY_PERCENT);
            this.state = 3379;
            this.match(TSqlParser.EQUAL);
            this.state = 3380;
            localctx.max_memory_percent = this.match(TSqlParser.DECIMAL);

        }
        this.state = 3389;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.MAX_PROCESSES || _la===TSqlParser.COMMA) {
            this.state = 3384;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 3383;
                this.match(TSqlParser.COMMA);
            }

            this.state = 3386;
            this.match(TSqlParser.MAX_PROCESSES);
            this.state = 3387;
            this.match(TSqlParser.EQUAL);
            this.state = 3388;
            localctx.max_processes = this.match(TSqlParser.DECIMAL);
        }

        this.state = 3391;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_external_resource_poolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_external_resource_pool;
    this.pool_name = null; // IdContext
    this.max_cpu_percent = null; // Token
    this.max_memory_percent = null; // Token
    this.max_processes = null; // Token
    return this;
}

Create_external_resource_poolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_external_resource_poolContext.prototype.constructor = Create_external_resource_poolContext;

Create_external_resource_poolContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_external_resource_poolContext.prototype.EXTERNAL = function() {
    return this.getToken(TSqlParser.EXTERNAL, 0);
};

Create_external_resource_poolContext.prototype.RESOURCE = function() {
    return this.getToken(TSqlParser.RESOURCE, 0);
};

Create_external_resource_poolContext.prototype.POOL = function() {
    return this.getToken(TSqlParser.POOL, 0);
};

Create_external_resource_poolContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_external_resource_poolContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Create_external_resource_poolContext.prototype.MAX_CPU_PERCENT = function() {
    return this.getToken(TSqlParser.MAX_CPU_PERCENT, 0);
};

Create_external_resource_poolContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Create_external_resource_poolContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Create_external_resource_poolContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Create_external_resource_poolContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Create_external_resource_poolContext.prototype.AFFINITY = function() {
    return this.getToken(TSqlParser.AFFINITY, 0);
};

Create_external_resource_poolContext.prototype.CPU = function() {
    return this.getToken(TSqlParser.CPU, 0);
};

Create_external_resource_poolContext.prototype.NUMANODE = function() {
    return this.getToken(TSqlParser.NUMANODE, 0);
};

Create_external_resource_poolContext.prototype.MAX_MEMORY_PERCENT = function() {
    return this.getToken(TSqlParser.MAX_MEMORY_PERCENT, 0);
};

Create_external_resource_poolContext.prototype.MAX_PROCESSES = function() {
    return this.getToken(TSqlParser.MAX_PROCESSES, 0);
};

Create_external_resource_poolContext.prototype.AUTO = function() {
    return this.getToken(TSqlParser.AUTO, 0);
};

Create_external_resource_poolContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Create_external_resource_poolContext.prototype.TO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.TO);
    } else {
        return this.getToken(TSqlParser.TO, i);
    }
};


Create_external_resource_poolContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_external_resource_pool(this);
	}
};

Create_external_resource_poolContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_external_resource_pool(this);
	}
};




TSqlParser.Create_external_resource_poolContext = Create_external_resource_poolContext;

TSqlParser.prototype.create_external_resource_pool = function() {

    var localctx = new Create_external_resource_poolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 300, TSqlParser.RULE_create_external_resource_pool);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3393;
        this.match(TSqlParser.CREATE);
        this.state = 3394;
        this.match(TSqlParser.EXTERNAL);
        this.state = 3395;
        this.match(TSqlParser.RESOURCE);
        this.state = 3396;
        this.match(TSqlParser.POOL);
        this.state = 3397;
        localctx.pool_name = this.id();
        this.state = 3398;
        this.match(TSqlParser.WITH);
        this.state = 3399;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 3400;
        this.match(TSqlParser.MAX_CPU_PERCENT);
        this.state = 3401;
        this.match(TSqlParser.EQUAL);
        this.state = 3402;
        localctx.max_cpu_percent = this.match(TSqlParser.DECIMAL);
        this.state = 3440;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.AFFINITY:
        case TSqlParser.COMMA:
            this.state = 3404;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 3403;
                this.match(TSqlParser.COMMA);
            }

            this.state = 3406;
            this.match(TSqlParser.AFFINITY);
            this.state = 3407;
            this.match(TSqlParser.CPU);
            this.state = 3408;
            this.match(TSqlParser.EQUAL);
            this.state = 3422;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.AUTO:
                this.state = 3409;
                this.match(TSqlParser.AUTO);
                break;
            case TSqlParser.DECIMAL:
            case TSqlParser.COMMA:
                this.state = 3418; 
                this._errHandler.sync(this);
                var _alt = 1;
                do {
                	switch (_alt) {
                	case 1:
                		this.state = 3418;
                		this._errHandler.sync(this);
                		var la_ = this._interp.adaptivePredict(this._input,320,this._ctx);
                		switch(la_) {
                		case 1:
                		    this.state = 3411;
                		    this._errHandler.sync(this);
                		    _la = this._input.LA(1);
                		    if(_la===TSqlParser.COMMA) {
                		        this.state = 3410;
                		        this.match(TSqlParser.COMMA);
                		    }

                		    this.state = 3413;
                		    this.match(TSqlParser.DECIMAL);
                		    this.state = 3414;
                		    this.match(TSqlParser.TO);
                		    this.state = 3415;
                		    this.match(TSqlParser.DECIMAL);
                		    break;

                		case 2:
                		    this.state = 3416;
                		    this.match(TSqlParser.COMMA);
                		    this.state = 3417;
                		    this.match(TSqlParser.DECIMAL);
                		    break;

                		}
                		break;
                	default:
                		throw new antlr4.error.NoViableAltException(this);
                	}
                	this.state = 3420; 
                	this._errHandler.sync(this);
                	_alt = this._interp.adaptivePredict(this._input,321, this._ctx);
                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case TSqlParser.NUMANODE:
            this.state = 3424;
            this.match(TSqlParser.NUMANODE);
            this.state = 3425;
            this.match(TSqlParser.EQUAL);
            this.state = 3436; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 3436;
            		this._errHandler.sync(this);
            		var la_ = this._interp.adaptivePredict(this._input,325,this._ctx);
            		switch(la_) {
            		case 1:
            		    this.state = 3427;
            		    this._errHandler.sync(this);
            		    _la = this._input.LA(1);
            		    if(_la===TSqlParser.COMMA) {
            		        this.state = 3426;
            		        this.match(TSqlParser.COMMA);
            		    }

            		    this.state = 3429;
            		    this.match(TSqlParser.DECIMAL);
            		    this.state = 3430;
            		    this.match(TSqlParser.TO);
            		    this.state = 3431;
            		    this.match(TSqlParser.DECIMAL);
            		    break;

            		case 2:
            		    this.state = 3433;
            		    this._errHandler.sync(this);
            		    _la = this._input.LA(1);
            		    if(_la===TSqlParser.COMMA) {
            		        this.state = 3432;
            		        this.match(TSqlParser.COMMA);
            		    }

            		    this.state = 3435;
            		    this.match(TSqlParser.DECIMAL);
            		    break;

            		}
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 3438; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,326, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 3448;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,329,this._ctx);
        if(la_===1) {
            this.state = 3443;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 3442;
                this.match(TSqlParser.COMMA);
            }

            this.state = 3445;
            this.match(TSqlParser.MAX_MEMORY_PERCENT);
            this.state = 3446;
            this.match(TSqlParser.EQUAL);
            this.state = 3447;
            localctx.max_memory_percent = this.match(TSqlParser.DECIMAL);

        }
        this.state = 3456;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.MAX_PROCESSES || _la===TSqlParser.COMMA) {
            this.state = 3451;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 3450;
                this.match(TSqlParser.COMMA);
            }

            this.state = 3453;
            this.match(TSqlParser.MAX_PROCESSES);
            this.state = 3454;
            this.match(TSqlParser.EQUAL);
            this.state = 3455;
            localctx.max_processes = this.match(TSqlParser.DECIMAL);
        }

        this.state = 3458;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_fulltext_catalogContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_fulltext_catalog;
    this.catalog_name = null; // IdContext
    return this;
}

Alter_fulltext_catalogContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_fulltext_catalogContext.prototype.constructor = Alter_fulltext_catalogContext;

Alter_fulltext_catalogContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_fulltext_catalogContext.prototype.FULLTEXT = function() {
    return this.getToken(TSqlParser.FULLTEXT, 0);
};

Alter_fulltext_catalogContext.prototype.CATALOG = function() {
    return this.getToken(TSqlParser.CATALOG, 0);
};

Alter_fulltext_catalogContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Alter_fulltext_catalogContext.prototype.REBUILD = function() {
    return this.getToken(TSqlParser.REBUILD, 0);
};

Alter_fulltext_catalogContext.prototype.REORGANIZE = function() {
    return this.getToken(TSqlParser.REORGANIZE, 0);
};

Alter_fulltext_catalogContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Alter_fulltext_catalogContext.prototype.DEFAULT = function() {
    return this.getToken(TSqlParser.DEFAULT, 0);
};

Alter_fulltext_catalogContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_fulltext_catalogContext.prototype.ACCENT_SENSITIVITY = function() {
    return this.getToken(TSqlParser.ACCENT_SENSITIVITY, 0);
};

Alter_fulltext_catalogContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Alter_fulltext_catalogContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Alter_fulltext_catalogContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Alter_fulltext_catalogContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_fulltext_catalog(this);
	}
};

Alter_fulltext_catalogContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_fulltext_catalog(this);
	}
};




TSqlParser.Alter_fulltext_catalogContext = Alter_fulltext_catalogContext;

TSqlParser.prototype.alter_fulltext_catalog = function() {

    var localctx = new Alter_fulltext_catalogContext(this, this._ctx, this.state);
    this.enterRule(localctx, 302, TSqlParser.RULE_alter_fulltext_catalog);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3460;
        this.match(TSqlParser.ALTER);
        this.state = 3461;
        this.match(TSqlParser.FULLTEXT);
        this.state = 3462;
        this.match(TSqlParser.CATALOG);
        this.state = 3463;
        localctx.catalog_name = this.id();
        this.state = 3474;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.REBUILD:
            this.state = 3464;
            this.match(TSqlParser.REBUILD);
            this.state = 3469;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,332,this._ctx);
            if(la_===1) {
                this.state = 3465;
                this.match(TSqlParser.WITH);
                this.state = 3466;
                this.match(TSqlParser.ACCENT_SENSITIVITY);
                this.state = 3467;
                this.match(TSqlParser.EQUAL);
                this.state = 3468;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            break;
        case TSqlParser.REORGANIZE:
            this.state = 3471;
            this.match(TSqlParser.REORGANIZE);
            break;
        case TSqlParser.AS:
            this.state = 3472;
            this.match(TSqlParser.AS);
            this.state = 3473;
            this.match(TSqlParser.DEFAULT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_fulltext_catalogContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_fulltext_catalog;
    this.catalog_name = null; // IdContext
    this.filegroup = null; // IdContext
    this.rootpath = null; // Token
    this.owner_name = null; // IdContext
    return this;
}

Create_fulltext_catalogContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_fulltext_catalogContext.prototype.constructor = Create_fulltext_catalogContext;

Create_fulltext_catalogContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_fulltext_catalogContext.prototype.FULLTEXT = function() {
    return this.getToken(TSqlParser.FULLTEXT, 0);
};

Create_fulltext_catalogContext.prototype.CATALOG = function() {
    return this.getToken(TSqlParser.CATALOG, 0);
};

Create_fulltext_catalogContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_fulltext_catalogContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ON);
    } else {
        return this.getToken(TSqlParser.ON, i);
    }
};


Create_fulltext_catalogContext.prototype.FILEGROUP = function() {
    return this.getToken(TSqlParser.FILEGROUP, 0);
};

Create_fulltext_catalogContext.prototype.IN = function() {
    return this.getToken(TSqlParser.IN, 0);
};

Create_fulltext_catalogContext.prototype.PATH = function() {
    return this.getToken(TSqlParser.PATH, 0);
};

Create_fulltext_catalogContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_fulltext_catalogContext.prototype.ACCENT_SENSITIVITY = function() {
    return this.getToken(TSqlParser.ACCENT_SENSITIVITY, 0);
};

Create_fulltext_catalogContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Create_fulltext_catalogContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Create_fulltext_catalogContext.prototype.DEFAULT = function() {
    return this.getToken(TSqlParser.DEFAULT, 0);
};

Create_fulltext_catalogContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Create_fulltext_catalogContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Create_fulltext_catalogContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Create_fulltext_catalogContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_fulltext_catalog(this);
	}
};

Create_fulltext_catalogContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_fulltext_catalog(this);
	}
};




TSqlParser.Create_fulltext_catalogContext = Create_fulltext_catalogContext;

TSqlParser.prototype.create_fulltext_catalog = function() {

    var localctx = new Create_fulltext_catalogContext(this, this._ctx, this.state);
    this.enterRule(localctx, 304, TSqlParser.RULE_create_fulltext_catalog);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3476;
        this.match(TSqlParser.CREATE);
        this.state = 3477;
        this.match(TSqlParser.FULLTEXT);
        this.state = 3478;
        this.match(TSqlParser.CATALOG);
        this.state = 3479;
        localctx.catalog_name = this.id();
        this.state = 3483;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.ON) {
            this.state = 3480;
            this.match(TSqlParser.ON);
            this.state = 3481;
            this.match(TSqlParser.FILEGROUP);
            this.state = 3482;
            localctx.filegroup = this.id();
        }

        this.state = 3488;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.IN) {
            this.state = 3485;
            this.match(TSqlParser.IN);
            this.state = 3486;
            this.match(TSqlParser.PATH);
            this.state = 3487;
            localctx.rootpath = this.match(TSqlParser.STRING);
        }

        this.state = 3494;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,336,this._ctx);
        if(la_===1) {
            this.state = 3490;
            this.match(TSqlParser.WITH);
            this.state = 3491;
            this.match(TSqlParser.ACCENT_SENSITIVITY);
            this.state = 3492;
            this.match(TSqlParser.EQUAL);
            this.state = 3493;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 3498;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AS) {
            this.state = 3496;
            this.match(TSqlParser.AS);
            this.state = 3497;
            this.match(TSqlParser.DEFAULT);
        }

        this.state = 3502;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AUTHORIZATION) {
            this.state = 3500;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 3501;
            localctx.owner_name = this.id();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_fulltext_stoplistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_fulltext_stoplist;
    this.stoplist_name = null; // IdContext
    this.stopword = null; // Token
    return this;
}

Alter_fulltext_stoplistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_fulltext_stoplistContext.prototype.constructor = Alter_fulltext_stoplistContext;

Alter_fulltext_stoplistContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_fulltext_stoplistContext.prototype.FULLTEXT = function() {
    return this.getToken(TSqlParser.FULLTEXT, 0);
};

Alter_fulltext_stoplistContext.prototype.STOPLIST = function() {
    return this.getToken(TSqlParser.STOPLIST, 0);
};

Alter_fulltext_stoplistContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Alter_fulltext_stoplistContext.prototype.ADD = function() {
    return this.getToken(TSqlParser.ADD, 0);
};

Alter_fulltext_stoplistContext.prototype.LANGUAGE = function() {
    return this.getToken(TSqlParser.LANGUAGE, 0);
};

Alter_fulltext_stoplistContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Alter_fulltext_stoplistContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Alter_fulltext_stoplistContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Alter_fulltext_stoplistContext.prototype.BINARY = function() {
    return this.getToken(TSqlParser.BINARY, 0);
};

Alter_fulltext_stoplistContext.prototype.ALL = function() {
    return this.getToken(TSqlParser.ALL, 0);
};

Alter_fulltext_stoplistContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_fulltext_stoplist(this);
	}
};

Alter_fulltext_stoplistContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_fulltext_stoplist(this);
	}
};




TSqlParser.Alter_fulltext_stoplistContext = Alter_fulltext_stoplistContext;

TSqlParser.prototype.alter_fulltext_stoplist = function() {

    var localctx = new Alter_fulltext_stoplistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 306, TSqlParser.RULE_alter_fulltext_stoplist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3504;
        this.match(TSqlParser.ALTER);
        this.state = 3505;
        this.match(TSqlParser.FULLTEXT);
        this.state = 3506;
        this.match(TSqlParser.STOPLIST);
        this.state = 3507;
        localctx.stoplist_name = this.id();
        this.state = 3521;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.ADD:
            this.state = 3508;
            this.match(TSqlParser.ADD);
            this.state = 3509;
            localctx.stopword = this.match(TSqlParser.STRING);
            this.state = 3510;
            this.match(TSqlParser.LANGUAGE);
            this.state = 3511;
            _la = this._input.LA(1);
            if(!(((((_la - 777)) & ~0x1f) == 0 && ((1 << (_la - 777)) & ((1 << (TSqlParser.DECIMAL - 777)) | (1 << (TSqlParser.STRING - 777)) | (1 << (TSqlParser.BINARY - 777)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case TSqlParser.DROP:
            this.state = 3512;
            this.match(TSqlParser.DROP);
            this.state = 3519;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,339,this._ctx);
            switch(la_) {
            case 1:
                this.state = 3513;
                localctx.stopword = this.match(TSqlParser.STRING);
                this.state = 3514;
                this.match(TSqlParser.LANGUAGE);
                this.state = 3515;
                _la = this._input.LA(1);
                if(!(((((_la - 777)) & ~0x1f) == 0 && ((1 << (_la - 777)) & ((1 << (TSqlParser.DECIMAL - 777)) | (1 << (TSqlParser.STRING - 777)) | (1 << (TSqlParser.BINARY - 777)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;

            case 2:
                this.state = 3516;
                this.match(TSqlParser.ALL);
                this.state = 3517;
                _la = this._input.LA(1);
                if(!(((((_la - 777)) & ~0x1f) == 0 && ((1 << (_la - 777)) & ((1 << (TSqlParser.DECIMAL - 777)) | (1 << (TSqlParser.STRING - 777)) | (1 << (TSqlParser.BINARY - 777)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;

            case 3:
                this.state = 3518;
                this.match(TSqlParser.ALL);
                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_fulltext_stoplistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_fulltext_stoplist;
    this.stoplist_name = null; // IdContext
    this.database_name = null; // IdContext
    this.source_stoplist_name = null; // IdContext
    this.owner_name = null; // IdContext
    return this;
}

Create_fulltext_stoplistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_fulltext_stoplistContext.prototype.constructor = Create_fulltext_stoplistContext;

Create_fulltext_stoplistContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_fulltext_stoplistContext.prototype.FULLTEXT = function() {
    return this.getToken(TSqlParser.FULLTEXT, 0);
};

Create_fulltext_stoplistContext.prototype.STOPLIST = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STOPLIST);
    } else {
        return this.getToken(TSqlParser.STOPLIST, i);
    }
};


Create_fulltext_stoplistContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_fulltext_stoplistContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Create_fulltext_stoplistContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Create_fulltext_stoplistContext.prototype.SYSTEM = function() {
    return this.getToken(TSqlParser.SYSTEM, 0);
};

Create_fulltext_stoplistContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

Create_fulltext_stoplistContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_fulltext_stoplist(this);
	}
};

Create_fulltext_stoplistContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_fulltext_stoplist(this);
	}
};




TSqlParser.Create_fulltext_stoplistContext = Create_fulltext_stoplistContext;

TSqlParser.prototype.create_fulltext_stoplist = function() {

    var localctx = new Create_fulltext_stoplistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 308, TSqlParser.RULE_create_fulltext_stoplist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3523;
        this.match(TSqlParser.CREATE);
        this.state = 3524;
        this.match(TSqlParser.FULLTEXT);
        this.state = 3525;
        this.match(TSqlParser.STOPLIST);
        this.state = 3526;
        localctx.stoplist_name = this.id();
        this.state = 3538;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.FROM) {
            this.state = 3527;
            this.match(TSqlParser.FROM);
            this.state = 3536;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.CALLED:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.EVENTDATA:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.KEY:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.OFFSETS:
            case TSqlParser.PAGE:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SERVER:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.TARGET:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.APPLY:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GLOBAL:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAST:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.ID:
                this.state = 3531;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,341,this._ctx);
                if(la_===1) {
                    this.state = 3528;
                    localctx.database_name = this.id();
                    this.state = 3529;
                    this.match(TSqlParser.DOT);

                }
                this.state = 3533;
                localctx.source_stoplist_name = this.id();
                break;
            case TSqlParser.SYSTEM:
                this.state = 3534;
                this.match(TSqlParser.SYSTEM);
                this.state = 3535;
                this.match(TSqlParser.STOPLIST);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
        }

        this.state = 3542;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AUTHORIZATION) {
            this.state = 3540;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 3541;
            localctx.owner_name = this.id();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_login_sql_serverContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_login_sql_server;
    this.login_name = null; // IdContext
    this.password = null; // Token
    this.password_hash = null; // Token
    this.old_password = null; // Token
    this.default_database = null; // IdContext
    this.default_laguage = null; // IdContext
    this.credential_name = null; // IdContext
    return this;
}

Alter_login_sql_serverContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_login_sql_serverContext.prototype.constructor = Alter_login_sql_serverContext;

Alter_login_sql_serverContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_login_sql_serverContext.prototype.LOGIN = function() {
    return this.getToken(TSqlParser.LOGIN, 0);
};

Alter_login_sql_serverContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_login_sql_serverContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_login_sql_serverContext.prototype.CREDENTIAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.CREDENTIAL);
    } else {
        return this.getToken(TSqlParser.CREDENTIAL, i);
    }
};


Alter_login_sql_serverContext.prototype.ADD = function() {
    return this.getToken(TSqlParser.ADD, 0);
};

Alter_login_sql_serverContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Alter_login_sql_serverContext.prototype.OLD_PASSWORD = function() {
    return this.getToken(TSqlParser.OLD_PASSWORD, 0);
};

Alter_login_sql_serverContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Alter_login_sql_serverContext.prototype.DEFAULT_DATABASE = function() {
    return this.getToken(TSqlParser.DEFAULT_DATABASE, 0);
};

Alter_login_sql_serverContext.prototype.DEFAULT_LANGUAGE = function() {
    return this.getToken(TSqlParser.DEFAULT_LANGUAGE, 0);
};

Alter_login_sql_serverContext.prototype.NAME = function() {
    return this.getToken(TSqlParser.NAME, 0);
};

Alter_login_sql_serverContext.prototype.CHECK_POLICY = function() {
    return this.getToken(TSqlParser.CHECK_POLICY, 0);
};

Alter_login_sql_serverContext.prototype.CHECK_EXPIRATION = function() {
    return this.getToken(TSqlParser.CHECK_EXPIRATION, 0);
};

Alter_login_sql_serverContext.prototype.NO = function() {
    return this.getToken(TSqlParser.NO, 0);
};

Alter_login_sql_serverContext.prototype.ENABLE = function() {
    return this.getToken(TSqlParser.ENABLE, 0);
};

Alter_login_sql_serverContext.prototype.DISABLE = function() {
    return this.getToken(TSqlParser.DISABLE, 0);
};

Alter_login_sql_serverContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Alter_login_sql_serverContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ON);
    } else {
        return this.getToken(TSqlParser.ON, i);
    }
};


Alter_login_sql_serverContext.prototype.OFF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.OFF);
    } else {
        return this.getToken(TSqlParser.OFF, i);
    }
};


Alter_login_sql_serverContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Alter_login_sql_serverContext.prototype.HASHED = function() {
    return this.getToken(TSqlParser.HASHED, 0);
};

Alter_login_sql_serverContext.prototype.MUST_CHANGE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MUST_CHANGE);
    } else {
        return this.getToken(TSqlParser.MUST_CHANGE, i);
    }
};


Alter_login_sql_serverContext.prototype.UNLOCK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.UNLOCK);
    } else {
        return this.getToken(TSqlParser.UNLOCK, i);
    }
};


Alter_login_sql_serverContext.prototype.BINARY = function() {
    return this.getToken(TSqlParser.BINARY, 0);
};

Alter_login_sql_serverContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_login_sql_server(this);
	}
};

Alter_login_sql_serverContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_login_sql_server(this);
	}
};




TSqlParser.Alter_login_sql_serverContext = Alter_login_sql_serverContext;

TSqlParser.prototype.alter_login_sql_server = function() {

    var localctx = new Alter_login_sql_serverContext(this, this._ctx, this.state);
    this.enterRule(localctx, 310, TSqlParser.RULE_alter_login_sql_server);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3544;
        this.match(TSqlParser.ALTER);
        this.state = 3545;
        this.match(TSqlParser.LOGIN);
        this.state = 3546;
        localctx.login_name = this.id();
        this.state = 3614;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,358,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3548;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,345,this._ctx);
            if(la_===1) {
                this.state = 3547;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.DISABLE || _la===TSqlParser.ENABLE)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            break;

        case 2:
            this.state = 3550;
            this.match(TSqlParser.WITH);
            this.state = 3564;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.PASSWORD) {
                this.state = 3551;
                this.match(TSqlParser.PASSWORD);
                this.state = 3552;
                this.match(TSqlParser.EQUAL);
                this.state = 3556;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.STRING:
                    this.state = 3553;
                    localctx.password = this.match(TSqlParser.STRING);
                    break;
                case TSqlParser.BINARY:
                    this.state = 3554;
                    localctx.password_hash = this.match(TSqlParser.BINARY);
                    this.state = 3555;
                    this.match(TSqlParser.HASHED);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 3561;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===TSqlParser.MUST_CHANGE || _la===TSqlParser.UNLOCK) {
                    this.state = 3558;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.MUST_CHANGE || _la===TSqlParser.UNLOCK)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3563;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 3575;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.OLD_PASSWORD) {
                this.state = 3566;
                this.match(TSqlParser.OLD_PASSWORD);
                this.state = 3567;
                this.match(TSqlParser.EQUAL);
                this.state = 3568;
                localctx.old_password = this.match(TSqlParser.STRING);
                this.state = 3572;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===TSqlParser.MUST_CHANGE || _la===TSqlParser.UNLOCK) {
                    this.state = 3569;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.MUST_CHANGE || _la===TSqlParser.UNLOCK)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3574;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 3580;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.DEFAULT_DATABASE) {
                this.state = 3577;
                this.match(TSqlParser.DEFAULT_DATABASE);
                this.state = 3578;
                this.match(TSqlParser.EQUAL);
                this.state = 3579;
                localctx.default_database = this.id();
            }

            this.state = 3585;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.DEFAULT_LANGUAGE) {
                this.state = 3582;
                this.match(TSqlParser.DEFAULT_LANGUAGE);
                this.state = 3583;
                this.match(TSqlParser.EQUAL);
                this.state = 3584;
                localctx.default_laguage = this.id();
            }

            this.state = 3590;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,353,this._ctx);
            if(la_===1) {
                this.state = 3587;
                this.match(TSqlParser.NAME);
                this.state = 3588;
                this.match(TSqlParser.EQUAL);
                this.state = 3589;
                localctx.login_name = this.id();

            }
            this.state = 3595;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.CHECK_POLICY) {
                this.state = 3592;
                this.match(TSqlParser.CHECK_POLICY);
                this.state = 3593;
                this.match(TSqlParser.EQUAL);
                this.state = 3594;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 3600;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.CHECK_EXPIRATION) {
                this.state = 3597;
                this.match(TSqlParser.CHECK_EXPIRATION);
                this.state = 3598;
                this.match(TSqlParser.EQUAL);
                this.state = 3599;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 3605;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.CREDENTIAL) {
                this.state = 3602;
                this.match(TSqlParser.CREDENTIAL);
                this.state = 3603;
                this.match(TSqlParser.EQUAL);
                this.state = 3604;
                localctx.credential_name = this.id();
            }

            this.state = 3609;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.NO) {
                this.state = 3607;
                this.match(TSqlParser.NO);
                this.state = 3608;
                this.match(TSqlParser.CREDENTIAL);
            }

            break;

        case 3:
            this.state = 3611;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.ADD || _la===TSqlParser.DROP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3612;
            this.match(TSqlParser.CREDENTIAL);
            this.state = 3613;
            localctx.credential_name = this.id();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_login_sql_serverContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_login_sql_server;
    this.login_name = null; // IdContext
    this.password = null; // Token
    this.password_hash = null; // Token
    this.sid = null; // Token
    this.default_database = null; // IdContext
    this.default_laguage = null; // IdContext
    this.credential_name = null; // IdContext
    this.default_language = null; // Token
    this.certname = null; // IdContext
    this.asym_key_name = null; // IdContext
    return this;
}

Create_login_sql_serverContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_login_sql_serverContext.prototype.constructor = Create_login_sql_serverContext;

Create_login_sql_serverContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_login_sql_serverContext.prototype.LOGIN = function() {
    return this.getToken(TSqlParser.LOGIN, 0);
};

Create_login_sql_serverContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_login_sql_serverContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_login_sql_serverContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Create_login_sql_serverContext.prototype.SID = function() {
    return this.getToken(TSqlParser.SID, 0);
};

Create_login_sql_serverContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Create_login_sql_serverContext.prototype.DEFAULT_DATABASE = function() {
    return this.getToken(TSqlParser.DEFAULT_DATABASE, 0);
};

Create_login_sql_serverContext.prototype.DEFAULT_LANGUAGE = function() {
    return this.getToken(TSqlParser.DEFAULT_LANGUAGE, 0);
};

Create_login_sql_serverContext.prototype.CHECK_EXPIRATION = function() {
    return this.getToken(TSqlParser.CHECK_EXPIRATION, 0);
};

Create_login_sql_serverContext.prototype.CHECK_POLICY = function() {
    return this.getToken(TSqlParser.CHECK_POLICY, 0);
};

Create_login_sql_serverContext.prototype.CREDENTIAL = function() {
    return this.getToken(TSqlParser.CREDENTIAL, 0);
};

Create_login_sql_serverContext.prototype.BINARY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.BINARY);
    } else {
        return this.getToken(TSqlParser.BINARY, i);
    }
};


Create_login_sql_serverContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ON);
    } else {
        return this.getToken(TSqlParser.ON, i);
    }
};


Create_login_sql_serverContext.prototype.OFF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.OFF);
    } else {
        return this.getToken(TSqlParser.OFF, i);
    }
};


Create_login_sql_serverContext.prototype.WINDOWS = function() {
    return this.getToken(TSqlParser.WINDOWS, 0);
};

Create_login_sql_serverContext.prototype.CERTIFICATE = function() {
    return this.getToken(TSqlParser.CERTIFICATE, 0);
};

Create_login_sql_serverContext.prototype.ASYMMETRIC = function() {
    return this.getToken(TSqlParser.ASYMMETRIC, 0);
};

Create_login_sql_serverContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Create_login_sql_serverContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Create_login_sql_serverContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Create_login_sql_serverContext.prototype.HASHED = function() {
    return this.getToken(TSqlParser.HASHED, 0);
};

Create_login_sql_serverContext.prototype.MUST_CHANGE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MUST_CHANGE);
    } else {
        return this.getToken(TSqlParser.MUST_CHANGE, i);
    }
};


Create_login_sql_serverContext.prototype.UNLOCK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.UNLOCK);
    } else {
        return this.getToken(TSqlParser.UNLOCK, i);
    }
};


Create_login_sql_serverContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Create_login_sql_serverContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_login_sql_server(this);
	}
};

Create_login_sql_serverContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_login_sql_server(this);
	}
};




TSqlParser.Create_login_sql_serverContext = Create_login_sql_serverContext;

TSqlParser.prototype.create_login_sql_server = function() {

    var localctx = new Create_login_sql_serverContext(this, this._ctx, this.state);
    this.enterRule(localctx, 312, TSqlParser.RULE_create_login_sql_server);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3616;
        this.match(TSqlParser.CREATE);
        this.state = 3617;
        this.match(TSqlParser.LOGIN);
        this.state = 3618;
        localctx.login_name = this.id();
        this.state = 3709;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.WITH:
            this.state = 3619;
            this.match(TSqlParser.WITH);
            this.state = 3633;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.PASSWORD) {
                this.state = 3620;
                this.match(TSqlParser.PASSWORD);
                this.state = 3621;
                this.match(TSqlParser.EQUAL);
                this.state = 3625;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.STRING:
                    this.state = 3622;
                    localctx.password = this.match(TSqlParser.STRING);
                    break;
                case TSqlParser.BINARY:
                    this.state = 3623;
                    localctx.password_hash = this.match(TSqlParser.BINARY);
                    this.state = 3624;
                    this.match(TSqlParser.HASHED);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 3630;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===TSqlParser.MUST_CHANGE || _la===TSqlParser.UNLOCK) {
                    this.state = 3627;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.MUST_CHANGE || _la===TSqlParser.UNLOCK)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3632;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 3641;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,363,this._ctx);
            if(la_===1) {
                this.state = 3636;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 3635;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 3638;
                this.match(TSqlParser.SID);
                this.state = 3639;
                this.match(TSqlParser.EQUAL);
                this.state = 3640;
                localctx.sid = this.match(TSqlParser.BINARY);

            }
            this.state = 3649;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,365,this._ctx);
            if(la_===1) {
                this.state = 3644;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 3643;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 3646;
                this.match(TSqlParser.DEFAULT_DATABASE);
                this.state = 3647;
                this.match(TSqlParser.EQUAL);
                this.state = 3648;
                localctx.default_database = this.id();

            }
            this.state = 3657;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,367,this._ctx);
            if(la_===1) {
                this.state = 3652;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 3651;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 3654;
                this.match(TSqlParser.DEFAULT_LANGUAGE);
                this.state = 3655;
                this.match(TSqlParser.EQUAL);
                this.state = 3656;
                localctx.default_laguage = this.id();

            }
            this.state = 3665;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,369,this._ctx);
            if(la_===1) {
                this.state = 3660;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 3659;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 3662;
                this.match(TSqlParser.CHECK_EXPIRATION);
                this.state = 3663;
                this.match(TSqlParser.EQUAL);
                this.state = 3664;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 3673;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,371,this._ctx);
            if(la_===1) {
                this.state = 3668;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 3667;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 3670;
                this.match(TSqlParser.CHECK_POLICY);
                this.state = 3671;
                this.match(TSqlParser.EQUAL);
                this.state = 3672;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 3681;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.CREDENTIAL || _la===TSqlParser.COMMA) {
                this.state = 3676;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 3675;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 3678;
                this.match(TSqlParser.CREDENTIAL);
                this.state = 3679;
                this.match(TSqlParser.EQUAL);
                this.state = 3680;
                localctx.credential_name = this.id();
            }

            break;
        case TSqlParser.FROM:
            this.state = 3683;
            this.match(TSqlParser.FROM);
            this.state = 3707;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.WINDOWS:
                this.state = 3684;
                this.match(TSqlParser.WINDOWS);

                this.state = 3685;
                this.match(TSqlParser.WITH);
                this.state = 3692;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,375,this._ctx);
                if(la_===1) {
                    this.state = 3687;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 3686;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 3689;
                    this.match(TSqlParser.DEFAULT_DATABASE);
                    this.state = 3690;
                    this.match(TSqlParser.EQUAL);
                    this.state = 3691;
                    localctx.default_database = this.id();

                }
                this.state = 3700;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.DEFAULT_LANGUAGE || _la===TSqlParser.COMMA) {
                    this.state = 3695;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 3694;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 3697;
                    this.match(TSqlParser.DEFAULT_LANGUAGE);
                    this.state = 3698;
                    this.match(TSqlParser.EQUAL);
                    this.state = 3699;
                    localctx.default_language = this.match(TSqlParser.STRING);
                }

                break;
            case TSqlParser.CERTIFICATE:
                this.state = 3702;
                this.match(TSqlParser.CERTIFICATE);
                this.state = 3703;
                localctx.certname = this.id();
                break;
            case TSqlParser.ASYMMETRIC:
                this.state = 3704;
                this.match(TSqlParser.ASYMMETRIC);
                this.state = 3705;
                this.match(TSqlParser.KEY);
                this.state = 3706;
                localctx.asym_key_name = this.id();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_login_azure_sqlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_login_azure_sql;
    this.login_name = null; // IdContext
    this.password = null; // Token
    this.old_password = null; // Token
    return this;
}

Alter_login_azure_sqlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_login_azure_sqlContext.prototype.constructor = Alter_login_azure_sqlContext;

Alter_login_azure_sqlContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_login_azure_sqlContext.prototype.LOGIN = function() {
    return this.getToken(TSqlParser.LOGIN, 0);
};

Alter_login_azure_sqlContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_login_azure_sqlContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_login_azure_sqlContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Alter_login_azure_sqlContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Alter_login_azure_sqlContext.prototype.NAME = function() {
    return this.getToken(TSqlParser.NAME, 0);
};

Alter_login_azure_sqlContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Alter_login_azure_sqlContext.prototype.ENABLE = function() {
    return this.getToken(TSqlParser.ENABLE, 0);
};

Alter_login_azure_sqlContext.prototype.DISABLE = function() {
    return this.getToken(TSqlParser.DISABLE, 0);
};

Alter_login_azure_sqlContext.prototype.OLD_PASSWORD = function() {
    return this.getToken(TSqlParser.OLD_PASSWORD, 0);
};

Alter_login_azure_sqlContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_login_azure_sql(this);
	}
};

Alter_login_azure_sqlContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_login_azure_sql(this);
	}
};




TSqlParser.Alter_login_azure_sqlContext = Alter_login_azure_sqlContext;

TSqlParser.prototype.alter_login_azure_sql = function() {

    var localctx = new Alter_login_azure_sqlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 314, TSqlParser.RULE_alter_login_azure_sql);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3711;
        this.match(TSqlParser.ALTER);
        this.state = 3712;
        this.match(TSqlParser.LOGIN);
        this.state = 3713;
        localctx.login_name = this.id();
        this.state = 3731;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,383,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3715;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,380,this._ctx);
            if(la_===1) {
                this.state = 3714;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.DISABLE || _la===TSqlParser.ENABLE)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            break;

        case 2:
            this.state = 3717;
            this.match(TSqlParser.WITH);
            this.state = 3729;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.PASSWORD:
                this.state = 3718;
                this.match(TSqlParser.PASSWORD);
                this.state = 3719;
                this.match(TSqlParser.EQUAL);
                this.state = 3720;
                localctx.password = this.match(TSqlParser.STRING);
                this.state = 3724;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.OLD_PASSWORD) {
                    this.state = 3721;
                    this.match(TSqlParser.OLD_PASSWORD);
                    this.state = 3722;
                    this.match(TSqlParser.EQUAL);
                    this.state = 3723;
                    localctx.old_password = this.match(TSqlParser.STRING);
                }

                break;
            case TSqlParser.NAME:
                this.state = 3726;
                this.match(TSqlParser.NAME);
                this.state = 3727;
                this.match(TSqlParser.EQUAL);
                this.state = 3728;
                localctx.login_name = this.id();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_login_azure_sqlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_login_azure_sql;
    this.login_name = null; // IdContext
    this.sid = null; // Token
    return this;
}

Create_login_azure_sqlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_login_azure_sqlContext.prototype.constructor = Create_login_azure_sqlContext;

Create_login_azure_sqlContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_login_azure_sqlContext.prototype.LOGIN = function() {
    return this.getToken(TSqlParser.LOGIN, 0);
};

Create_login_azure_sqlContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_login_azure_sqlContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Create_login_azure_sqlContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Create_login_azure_sqlContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Create_login_azure_sqlContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Create_login_azure_sqlContext.prototype.SID = function() {
    return this.getToken(TSqlParser.SID, 0);
};

Create_login_azure_sqlContext.prototype.BINARY = function() {
    return this.getToken(TSqlParser.BINARY, 0);
};

Create_login_azure_sqlContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_login_azure_sql(this);
	}
};

Create_login_azure_sqlContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_login_azure_sql(this);
	}
};




TSqlParser.Create_login_azure_sqlContext = Create_login_azure_sqlContext;

TSqlParser.prototype.create_login_azure_sql = function() {

    var localctx = new Create_login_azure_sqlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 316, TSqlParser.RULE_create_login_azure_sql);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3733;
        this.match(TSqlParser.CREATE);
        this.state = 3734;
        this.match(TSqlParser.LOGIN);
        this.state = 3735;
        localctx.login_name = this.id();
        this.state = 3736;
        this.match(TSqlParser.WITH);
        this.state = 3737;
        this.match(TSqlParser.PASSWORD);
        this.state = 3738;
        this.match(TSqlParser.EQUAL);
        this.state = 3739;
        this.match(TSqlParser.STRING);
        this.state = 3743;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,384,this._ctx);
        if(la_===1) {
            this.state = 3740;
            this.match(TSqlParser.SID);
            this.state = 3741;
            this.match(TSqlParser.EQUAL);
            this.state = 3742;
            localctx.sid = this.match(TSqlParser.BINARY);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_login_azure_sql_dw_and_pdwContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_login_azure_sql_dw_and_pdw;
    this.login_name = null; // IdContext
    this.password = null; // Token
    this.old_password = null; // Token
    return this;
}

Alter_login_azure_sql_dw_and_pdwContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_login_azure_sql_dw_and_pdwContext.prototype.constructor = Alter_login_azure_sql_dw_and_pdwContext;

Alter_login_azure_sql_dw_and_pdwContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_login_azure_sql_dw_and_pdwContext.prototype.LOGIN = function() {
    return this.getToken(TSqlParser.LOGIN, 0);
};

Alter_login_azure_sql_dw_and_pdwContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_login_azure_sql_dw_and_pdwContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_login_azure_sql_dw_and_pdwContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Alter_login_azure_sql_dw_and_pdwContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Alter_login_azure_sql_dw_and_pdwContext.prototype.NAME = function() {
    return this.getToken(TSqlParser.NAME, 0);
};

Alter_login_azure_sql_dw_and_pdwContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Alter_login_azure_sql_dw_and_pdwContext.prototype.ENABLE = function() {
    return this.getToken(TSqlParser.ENABLE, 0);
};

Alter_login_azure_sql_dw_and_pdwContext.prototype.DISABLE = function() {
    return this.getToken(TSqlParser.DISABLE, 0);
};

Alter_login_azure_sql_dw_and_pdwContext.prototype.OLD_PASSWORD = function() {
    return this.getToken(TSqlParser.OLD_PASSWORD, 0);
};

Alter_login_azure_sql_dw_and_pdwContext.prototype.MUST_CHANGE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MUST_CHANGE);
    } else {
        return this.getToken(TSqlParser.MUST_CHANGE, i);
    }
};


Alter_login_azure_sql_dw_and_pdwContext.prototype.UNLOCK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.UNLOCK);
    } else {
        return this.getToken(TSqlParser.UNLOCK, i);
    }
};


Alter_login_azure_sql_dw_and_pdwContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_login_azure_sql_dw_and_pdw(this);
	}
};

Alter_login_azure_sql_dw_and_pdwContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_login_azure_sql_dw_and_pdw(this);
	}
};




TSqlParser.Alter_login_azure_sql_dw_and_pdwContext = Alter_login_azure_sql_dw_and_pdwContext;

TSqlParser.prototype.alter_login_azure_sql_dw_and_pdw = function() {

    var localctx = new Alter_login_azure_sql_dw_and_pdwContext(this, this._ctx, this.state);
    this.enterRule(localctx, 318, TSqlParser.RULE_alter_login_azure_sql_dw_and_pdw);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3745;
        this.match(TSqlParser.ALTER);
        this.state = 3746;
        this.match(TSqlParser.LOGIN);
        this.state = 3747;
        localctx.login_name = this.id();
        this.state = 3771;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,389,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3749;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,385,this._ctx);
            if(la_===1) {
                this.state = 3748;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.DISABLE || _la===TSqlParser.ENABLE)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            break;

        case 2:
            this.state = 3751;
            this.match(TSqlParser.WITH);
            this.state = 3769;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.PASSWORD:
                this.state = 3752;
                this.match(TSqlParser.PASSWORD);
                this.state = 3753;
                this.match(TSqlParser.EQUAL);
                this.state = 3754;
                localctx.password = this.match(TSqlParser.STRING);
                this.state = 3764;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.OLD_PASSWORD) {
                    this.state = 3755;
                    this.match(TSqlParser.OLD_PASSWORD);
                    this.state = 3756;
                    this.match(TSqlParser.EQUAL);
                    this.state = 3757;
                    localctx.old_password = this.match(TSqlParser.STRING);
                    this.state = 3761;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===TSqlParser.MUST_CHANGE || _la===TSqlParser.UNLOCK) {
                        this.state = 3758;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.MUST_CHANGE || _la===TSqlParser.UNLOCK)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3763;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                }

                break;
            case TSqlParser.NAME:
                this.state = 3766;
                this.match(TSqlParser.NAME);
                this.state = 3767;
                this.match(TSqlParser.EQUAL);
                this.state = 3768;
                localctx.login_name = this.id();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_login_pdwContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_login_pdw;
    this.loginName = null; // IdContext
    this.password = null; // Token
    return this;
}

Create_login_pdwContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_login_pdwContext.prototype.constructor = Create_login_pdwContext;

Create_login_pdwContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_login_pdwContext.prototype.LOGIN = function() {
    return this.getToken(TSqlParser.LOGIN, 0);
};

Create_login_pdwContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Create_login_pdwContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_login_pdwContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Create_login_pdwContext.prototype.WINDOWS = function() {
    return this.getToken(TSqlParser.WINDOWS, 0);
};

Create_login_pdwContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Create_login_pdwContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Create_login_pdwContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Create_login_pdwContext.prototype.MUST_CHANGE = function() {
    return this.getToken(TSqlParser.MUST_CHANGE, 0);
};

Create_login_pdwContext.prototype.CHECK_POLICY = function() {
    return this.getToken(TSqlParser.CHECK_POLICY, 0);
};

Create_login_pdwContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Create_login_pdwContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Create_login_pdwContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_login_pdw(this);
	}
};

Create_login_pdwContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_login_pdw(this);
	}
};




TSqlParser.Create_login_pdwContext = Create_login_pdwContext;

TSqlParser.prototype.create_login_pdw = function() {

    var localctx = new Create_login_pdwContext(this, this._ctx, this.state);
    this.enterRule(localctx, 320, TSqlParser.RULE_create_login_pdw);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3773;
        this.match(TSqlParser.CREATE);
        this.state = 3774;
        this.match(TSqlParser.LOGIN);
        this.state = 3775;
        localctx.loginName = this.id();
        this.state = 3792;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.WITH:
            this.state = 3776;
            this.match(TSqlParser.WITH);

            this.state = 3777;
            this.match(TSqlParser.PASSWORD);
            this.state = 3778;
            this.match(TSqlParser.EQUAL);
            this.state = 3779;
            localctx.password = this.match(TSqlParser.STRING);
            this.state = 3781;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.MUST_CHANGE) {
                this.state = 3780;
                this.match(TSqlParser.MUST_CHANGE);
            }

            this.state = 3788;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.CHECK_POLICY) {
                this.state = 3783;
                this.match(TSqlParser.CHECK_POLICY);
                this.state = 3784;
                this.match(TSqlParser.EQUAL);
                this.state = 3786;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.OFF || _la===TSqlParser.ON) {
                    this.state = 3785;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

            }

            break;
        case TSqlParser.FROM:
            this.state = 3790;
            this.match(TSqlParser.FROM);
            this.state = 3791;
            this.match(TSqlParser.WINDOWS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_master_key_sql_serverContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_master_key_sql_server;
    this.password = null; // Token
    this.encryption_password = null; // Token
    return this;
}

Alter_master_key_sql_serverContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_master_key_sql_serverContext.prototype.constructor = Alter_master_key_sql_serverContext;

Alter_master_key_sql_serverContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_master_key_sql_serverContext.prototype.MASTER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MASTER);
    } else {
        return this.getToken(TSqlParser.MASTER, i);
    }
};


Alter_master_key_sql_serverContext.prototype.KEY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.KEY);
    } else {
        return this.getToken(TSqlParser.KEY, i);
    }
};


Alter_master_key_sql_serverContext.prototype.REGENERATE = function() {
    return this.getToken(TSqlParser.REGENERATE, 0);
};

Alter_master_key_sql_serverContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_master_key_sql_serverContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Alter_master_key_sql_serverContext.prototype.BY = function() {
    return this.getToken(TSqlParser.BY, 0);
};

Alter_master_key_sql_serverContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Alter_master_key_sql_serverContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Alter_master_key_sql_serverContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Alter_master_key_sql_serverContext.prototype.ADD = function() {
    return this.getToken(TSqlParser.ADD, 0);
};

Alter_master_key_sql_serverContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Alter_master_key_sql_serverContext.prototype.SERVICE = function() {
    return this.getToken(TSqlParser.SERVICE, 0);
};

Alter_master_key_sql_serverContext.prototype.FORCE = function() {
    return this.getToken(TSqlParser.FORCE, 0);
};

Alter_master_key_sql_serverContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_master_key_sql_server(this);
	}
};

Alter_master_key_sql_serverContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_master_key_sql_server(this);
	}
};




TSqlParser.Alter_master_key_sql_serverContext = Alter_master_key_sql_serverContext;

TSqlParser.prototype.alter_master_key_sql_server = function() {

    var localctx = new Alter_master_key_sql_serverContext(this, this._ctx, this.state);
    this.enterRule(localctx, 322, TSqlParser.RULE_alter_master_key_sql_server);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3794;
        this.match(TSqlParser.ALTER);
        this.state = 3795;
        this.match(TSqlParser.MASTER);
        this.state = 3796;
        this.match(TSqlParser.KEY);
        this.state = 3818;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.REGENERATE:
        case TSqlParser.FORCE:
            this.state = 3798;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.FORCE) {
                this.state = 3797;
                this.match(TSqlParser.FORCE);
            }

            this.state = 3800;
            this.match(TSqlParser.REGENERATE);
            this.state = 3801;
            this.match(TSqlParser.WITH);
            this.state = 3802;
            this.match(TSqlParser.ENCRYPTION);
            this.state = 3803;
            this.match(TSqlParser.BY);
            this.state = 3804;
            this.match(TSqlParser.PASSWORD);
            this.state = 3805;
            this.match(TSqlParser.EQUAL);
            this.state = 3806;
            localctx.password = this.match(TSqlParser.STRING);
            break;
        case TSqlParser.ADD:
        case TSqlParser.DROP:
            this.state = 3807;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.ADD || _la===TSqlParser.DROP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3808;
            this.match(TSqlParser.ENCRYPTION);
            this.state = 3809;
            this.match(TSqlParser.BY);
            this.state = 3816;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.SERVICE:
                this.state = 3810;
                this.match(TSqlParser.SERVICE);
                this.state = 3811;
                this.match(TSqlParser.MASTER);
                this.state = 3812;
                this.match(TSqlParser.KEY);
                break;
            case TSqlParser.PASSWORD:
                this.state = 3813;
                this.match(TSqlParser.PASSWORD);
                this.state = 3814;
                this.match(TSqlParser.EQUAL);
                this.state = 3815;
                localctx.encryption_password = this.match(TSqlParser.STRING);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_master_key_sql_serverContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_master_key_sql_server;
    this.password = null; // Token
    return this;
}

Create_master_key_sql_serverContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_master_key_sql_serverContext.prototype.constructor = Create_master_key_sql_serverContext;

Create_master_key_sql_serverContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_master_key_sql_serverContext.prototype.MASTER = function() {
    return this.getToken(TSqlParser.MASTER, 0);
};

Create_master_key_sql_serverContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Create_master_key_sql_serverContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Create_master_key_sql_serverContext.prototype.BY = function() {
    return this.getToken(TSqlParser.BY, 0);
};

Create_master_key_sql_serverContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Create_master_key_sql_serverContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Create_master_key_sql_serverContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Create_master_key_sql_serverContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_master_key_sql_server(this);
	}
};

Create_master_key_sql_serverContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_master_key_sql_server(this);
	}
};




TSqlParser.Create_master_key_sql_serverContext = Create_master_key_sql_serverContext;

TSqlParser.prototype.create_master_key_sql_server = function() {

    var localctx = new Create_master_key_sql_serverContext(this, this._ctx, this.state);
    this.enterRule(localctx, 324, TSqlParser.RULE_create_master_key_sql_server);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3820;
        this.match(TSqlParser.CREATE);
        this.state = 3821;
        this.match(TSqlParser.MASTER);
        this.state = 3822;
        this.match(TSqlParser.KEY);
        this.state = 3823;
        this.match(TSqlParser.ENCRYPTION);
        this.state = 3824;
        this.match(TSqlParser.BY);
        this.state = 3825;
        this.match(TSqlParser.PASSWORD);
        this.state = 3826;
        this.match(TSqlParser.EQUAL);
        this.state = 3827;
        localctx.password = this.match(TSqlParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_master_key_azure_sqlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_master_key_azure_sql;
    this.password = null; // Token
    this.encryption_password = null; // Token
    return this;
}

Alter_master_key_azure_sqlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_master_key_azure_sqlContext.prototype.constructor = Alter_master_key_azure_sqlContext;

Alter_master_key_azure_sqlContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_master_key_azure_sqlContext.prototype.MASTER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MASTER);
    } else {
        return this.getToken(TSqlParser.MASTER, i);
    }
};


Alter_master_key_azure_sqlContext.prototype.KEY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.KEY);
    } else {
        return this.getToken(TSqlParser.KEY, i);
    }
};


Alter_master_key_azure_sqlContext.prototype.REGENERATE = function() {
    return this.getToken(TSqlParser.REGENERATE, 0);
};

Alter_master_key_azure_sqlContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_master_key_azure_sqlContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Alter_master_key_azure_sqlContext.prototype.BY = function() {
    return this.getToken(TSqlParser.BY, 0);
};

Alter_master_key_azure_sqlContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Alter_master_key_azure_sqlContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Alter_master_key_azure_sqlContext.prototype.ADD = function() {
    return this.getToken(TSqlParser.ADD, 0);
};

Alter_master_key_azure_sqlContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Alter_master_key_azure_sqlContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Alter_master_key_azure_sqlContext.prototype.SERVICE = function() {
    return this.getToken(TSqlParser.SERVICE, 0);
};

Alter_master_key_azure_sqlContext.prototype.FORCE = function() {
    return this.getToken(TSqlParser.FORCE, 0);
};

Alter_master_key_azure_sqlContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_master_key_azure_sql(this);
	}
};

Alter_master_key_azure_sqlContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_master_key_azure_sql(this);
	}
};




TSqlParser.Alter_master_key_azure_sqlContext = Alter_master_key_azure_sqlContext;

TSqlParser.prototype.alter_master_key_azure_sql = function() {

    var localctx = new Alter_master_key_azure_sqlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 326, TSqlParser.RULE_alter_master_key_azure_sql);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3829;
        this.match(TSqlParser.ALTER);
        this.state = 3830;
        this.match(TSqlParser.MASTER);
        this.state = 3831;
        this.match(TSqlParser.KEY);
        this.state = 3859;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.REGENERATE:
        case TSqlParser.FORCE:
            this.state = 3833;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.FORCE) {
                this.state = 3832;
                this.match(TSqlParser.FORCE);
            }

            this.state = 3835;
            this.match(TSqlParser.REGENERATE);
            this.state = 3836;
            this.match(TSqlParser.WITH);
            this.state = 3837;
            this.match(TSqlParser.ENCRYPTION);
            this.state = 3838;
            this.match(TSqlParser.BY);
            this.state = 3839;
            this.match(TSqlParser.PASSWORD);
            this.state = 3840;
            this.match(TSqlParser.EQUAL);
            this.state = 3841;
            localctx.password = this.match(TSqlParser.STRING);
            break;
        case TSqlParser.ADD:
            this.state = 3842;
            this.match(TSqlParser.ADD);
            this.state = 3843;
            this.match(TSqlParser.ENCRYPTION);
            this.state = 3844;
            this.match(TSqlParser.BY);
            this.state = 3851;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.SERVICE:
                this.state = 3845;
                this.match(TSqlParser.SERVICE);
                this.state = 3846;
                this.match(TSqlParser.MASTER);
                this.state = 3847;
                this.match(TSqlParser.KEY);
                break;
            case TSqlParser.PASSWORD:
                this.state = 3848;
                this.match(TSqlParser.PASSWORD);
                this.state = 3849;
                this.match(TSqlParser.EQUAL);
                this.state = 3850;
                localctx.encryption_password = this.match(TSqlParser.STRING);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case TSqlParser.DROP:
            this.state = 3853;
            this.match(TSqlParser.DROP);
            this.state = 3854;
            this.match(TSqlParser.ENCRYPTION);
            this.state = 3855;
            this.match(TSqlParser.BY);
            this.state = 3856;
            this.match(TSqlParser.PASSWORD);
            this.state = 3857;
            this.match(TSqlParser.EQUAL);
            this.state = 3858;
            localctx.encryption_password = this.match(TSqlParser.STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_master_key_azure_sqlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_master_key_azure_sql;
    this.password = null; // Token
    return this;
}

Create_master_key_azure_sqlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_master_key_azure_sqlContext.prototype.constructor = Create_master_key_azure_sqlContext;

Create_master_key_azure_sqlContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_master_key_azure_sqlContext.prototype.MASTER = function() {
    return this.getToken(TSqlParser.MASTER, 0);
};

Create_master_key_azure_sqlContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Create_master_key_azure_sqlContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Create_master_key_azure_sqlContext.prototype.BY = function() {
    return this.getToken(TSqlParser.BY, 0);
};

Create_master_key_azure_sqlContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Create_master_key_azure_sqlContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Create_master_key_azure_sqlContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Create_master_key_azure_sqlContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_master_key_azure_sql(this);
	}
};

Create_master_key_azure_sqlContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_master_key_azure_sql(this);
	}
};




TSqlParser.Create_master_key_azure_sqlContext = Create_master_key_azure_sqlContext;

TSqlParser.prototype.create_master_key_azure_sql = function() {

    var localctx = new Create_master_key_azure_sqlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 328, TSqlParser.RULE_create_master_key_azure_sql);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3861;
        this.match(TSqlParser.CREATE);
        this.state = 3862;
        this.match(TSqlParser.MASTER);
        this.state = 3863;
        this.match(TSqlParser.KEY);
        this.state = 3869;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,400,this._ctx);
        if(la_===1) {
            this.state = 3864;
            this.match(TSqlParser.ENCRYPTION);
            this.state = 3865;
            this.match(TSqlParser.BY);
            this.state = 3866;
            this.match(TSqlParser.PASSWORD);
            this.state = 3867;
            this.match(TSqlParser.EQUAL);
            this.state = 3868;
            localctx.password = this.match(TSqlParser.STRING);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_message_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_message_type;
    this.message_type_name = null; // IdContext
    this.schema_collection_name = null; // IdContext
    return this;
}

Alter_message_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_message_typeContext.prototype.constructor = Alter_message_typeContext;

Alter_message_typeContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_message_typeContext.prototype.MESSAGE = function() {
    return this.getToken(TSqlParser.MESSAGE, 0);
};

Alter_message_typeContext.prototype.TYPE = function() {
    return this.getToken(TSqlParser.TYPE, 0);
};

Alter_message_typeContext.prototype.VALIDATION = function() {
    return this.getToken(TSqlParser.VALIDATION, 0);
};

Alter_message_typeContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Alter_message_typeContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_message_typeContext.prototype.NONE = function() {
    return this.getToken(TSqlParser.NONE, 0);
};

Alter_message_typeContext.prototype.EMPTY = function() {
    return this.getToken(TSqlParser.EMPTY, 0);
};

Alter_message_typeContext.prototype.WELL_FORMED_XML = function() {
    return this.getToken(TSqlParser.WELL_FORMED_XML, 0);
};

Alter_message_typeContext.prototype.VALID_XML = function() {
    return this.getToken(TSqlParser.VALID_XML, 0);
};

Alter_message_typeContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_message_typeContext.prototype.SCHEMA = function() {
    return this.getToken(TSqlParser.SCHEMA, 0);
};

Alter_message_typeContext.prototype.COLLECTION = function() {
    return this.getToken(TSqlParser.COLLECTION, 0);
};

Alter_message_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_message_type(this);
	}
};

Alter_message_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_message_type(this);
	}
};




TSqlParser.Alter_message_typeContext = Alter_message_typeContext;

TSqlParser.prototype.alter_message_type = function() {

    var localctx = new Alter_message_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 330, TSqlParser.RULE_alter_message_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3871;
        this.match(TSqlParser.ALTER);
        this.state = 3872;
        this.match(TSqlParser.MESSAGE);
        this.state = 3873;
        this.match(TSqlParser.TYPE);
        this.state = 3874;
        localctx.message_type_name = this.id();
        this.state = 3875;
        this.match(TSqlParser.VALIDATION);
        this.state = 3876;
        this.match(TSqlParser.EQUAL);
        this.state = 3885;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.NONE:
            this.state = 3877;
            this.match(TSqlParser.NONE);
            break;
        case TSqlParser.EMPTY:
            this.state = 3878;
            this.match(TSqlParser.EMPTY);
            break;
        case TSqlParser.WELL_FORMED_XML:
            this.state = 3879;
            this.match(TSqlParser.WELL_FORMED_XML);
            break;
        case TSqlParser.VALID_XML:
            this.state = 3880;
            this.match(TSqlParser.VALID_XML);
            this.state = 3881;
            this.match(TSqlParser.WITH);
            this.state = 3882;
            this.match(TSqlParser.SCHEMA);
            this.state = 3883;
            this.match(TSqlParser.COLLECTION);
            this.state = 3884;
            localctx.schema_collection_name = this.id();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_partition_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_partition_function;
    this.partition_function_name = null; // IdContext
    return this;
}

Alter_partition_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_partition_functionContext.prototype.constructor = Alter_partition_functionContext;

Alter_partition_functionContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_partition_functionContext.prototype.PARTITION = function() {
    return this.getToken(TSqlParser.PARTITION, 0);
};

Alter_partition_functionContext.prototype.FUNCTION = function() {
    return this.getToken(TSqlParser.FUNCTION, 0);
};

Alter_partition_functionContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LR_BRACKET);
    } else {
        return this.getToken(TSqlParser.LR_BRACKET, i);
    }
};


Alter_partition_functionContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RR_BRACKET);
    } else {
        return this.getToken(TSqlParser.RR_BRACKET, i);
    }
};


Alter_partition_functionContext.prototype.RANGE = function() {
    return this.getToken(TSqlParser.RANGE, 0);
};

Alter_partition_functionContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Alter_partition_functionContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Alter_partition_functionContext.prototype.SPLIT = function() {
    return this.getToken(TSqlParser.SPLIT, 0);
};

Alter_partition_functionContext.prototype.MERGE = function() {
    return this.getToken(TSqlParser.MERGE, 0);
};

Alter_partition_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_partition_function(this);
	}
};

Alter_partition_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_partition_function(this);
	}
};




TSqlParser.Alter_partition_functionContext = Alter_partition_functionContext;

TSqlParser.prototype.alter_partition_function = function() {

    var localctx = new Alter_partition_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 332, TSqlParser.RULE_alter_partition_function);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3887;
        this.match(TSqlParser.ALTER);
        this.state = 3888;
        this.match(TSqlParser.PARTITION);
        this.state = 3889;
        this.match(TSqlParser.FUNCTION);
        this.state = 3890;
        localctx.partition_function_name = this.id();
        this.state = 3891;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 3892;
        this.match(TSqlParser.RR_BRACKET);
        this.state = 3893;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.MERGE || _la===TSqlParser.SPLIT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 3894;
        this.match(TSqlParser.RANGE);
        this.state = 3895;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 3896;
        this.match(TSqlParser.DECIMAL);
        this.state = 3897;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_partition_schemeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_partition_scheme;
    this.partition_scheme_name = null; // IdContext
    this.file_group_name = null; // IdContext
    return this;
}

Alter_partition_schemeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_partition_schemeContext.prototype.constructor = Alter_partition_schemeContext;

Alter_partition_schemeContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_partition_schemeContext.prototype.PARTITION = function() {
    return this.getToken(TSqlParser.PARTITION, 0);
};

Alter_partition_schemeContext.prototype.SCHEME = function() {
    return this.getToken(TSqlParser.SCHEME, 0);
};

Alter_partition_schemeContext.prototype.NEXT = function() {
    return this.getToken(TSqlParser.NEXT, 0);
};

Alter_partition_schemeContext.prototype.USED = function() {
    return this.getToken(TSqlParser.USED, 0);
};

Alter_partition_schemeContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_partition_schemeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_partition_scheme(this);
	}
};

Alter_partition_schemeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_partition_scheme(this);
	}
};




TSqlParser.Alter_partition_schemeContext = Alter_partition_schemeContext;

TSqlParser.prototype.alter_partition_scheme = function() {

    var localctx = new Alter_partition_schemeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 334, TSqlParser.RULE_alter_partition_scheme);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3899;
        this.match(TSqlParser.ALTER);
        this.state = 3900;
        this.match(TSqlParser.PARTITION);
        this.state = 3901;
        this.match(TSqlParser.SCHEME);
        this.state = 3902;
        localctx.partition_scheme_name = this.id();
        this.state = 3903;
        this.match(TSqlParser.NEXT);
        this.state = 3904;
        this.match(TSqlParser.USED);
        this.state = 3906;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,402,this._ctx);
        if(la_===1) {
            this.state = 3905;
            localctx.file_group_name = this.id();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_remote_service_bindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_remote_service_binding;
    this.binding_name = null; // IdContext
    this.user_name = null; // IdContext
    return this;
}

Alter_remote_service_bindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_remote_service_bindingContext.prototype.constructor = Alter_remote_service_bindingContext;

Alter_remote_service_bindingContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_remote_service_bindingContext.prototype.REMOTE = function() {
    return this.getToken(TSqlParser.REMOTE, 0);
};

Alter_remote_service_bindingContext.prototype.SERVICE = function() {
    return this.getToken(TSqlParser.SERVICE, 0);
};

Alter_remote_service_bindingContext.prototype.BINDING = function() {
    return this.getToken(TSqlParser.BINDING, 0);
};

Alter_remote_service_bindingContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_remote_service_bindingContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_remote_service_bindingContext.prototype.USER = function() {
    return this.getToken(TSqlParser.USER, 0);
};

Alter_remote_service_bindingContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Alter_remote_service_bindingContext.prototype.COMMA = function() {
    return this.getToken(TSqlParser.COMMA, 0);
};

Alter_remote_service_bindingContext.prototype.ANONYMOUS = function() {
    return this.getToken(TSqlParser.ANONYMOUS, 0);
};

Alter_remote_service_bindingContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Alter_remote_service_bindingContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Alter_remote_service_bindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_remote_service_binding(this);
	}
};

Alter_remote_service_bindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_remote_service_binding(this);
	}
};




TSqlParser.Alter_remote_service_bindingContext = Alter_remote_service_bindingContext;

TSqlParser.prototype.alter_remote_service_binding = function() {

    var localctx = new Alter_remote_service_bindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 336, TSqlParser.RULE_alter_remote_service_binding);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3908;
        this.match(TSqlParser.ALTER);
        this.state = 3909;
        this.match(TSqlParser.REMOTE);
        this.state = 3910;
        this.match(TSqlParser.SERVICE);
        this.state = 3911;
        this.match(TSqlParser.BINDING);
        this.state = 3912;
        localctx.binding_name = this.id();
        this.state = 3913;
        this.match(TSqlParser.WITH);
        this.state = 3917;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.USER) {
            this.state = 3914;
            this.match(TSqlParser.USER);
            this.state = 3915;
            this.match(TSqlParser.EQUAL);
            this.state = 3916;
            localctx.user_name = this.id();
        }

        this.state = 3923;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 3919;
            this.match(TSqlParser.COMMA);
            this.state = 3920;
            this.match(TSqlParser.ANONYMOUS);
            this.state = 3921;
            this.match(TSqlParser.EQUAL);
            this.state = 3922;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_remote_service_bindingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_remote_service_binding;
    this.binding_name = null; // IdContext
    this.owner_name = null; // IdContext
    this.remote_service_name = null; // Token
    this.user_name = null; // IdContext
    return this;
}

Create_remote_service_bindingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_remote_service_bindingContext.prototype.constructor = Create_remote_service_bindingContext;

Create_remote_service_bindingContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_remote_service_bindingContext.prototype.REMOTE = function() {
    return this.getToken(TSqlParser.REMOTE, 0);
};

Create_remote_service_bindingContext.prototype.SERVICE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SERVICE);
    } else {
        return this.getToken(TSqlParser.SERVICE, i);
    }
};


Create_remote_service_bindingContext.prototype.BINDING = function() {
    return this.getToken(TSqlParser.BINDING, 0);
};

Create_remote_service_bindingContext.prototype.TO = function() {
    return this.getToken(TSqlParser.TO, 0);
};

Create_remote_service_bindingContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_remote_service_bindingContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_remote_service_bindingContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Create_remote_service_bindingContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Create_remote_service_bindingContext.prototype.USER = function() {
    return this.getToken(TSqlParser.USER, 0);
};

Create_remote_service_bindingContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Create_remote_service_bindingContext.prototype.COMMA = function() {
    return this.getToken(TSqlParser.COMMA, 0);
};

Create_remote_service_bindingContext.prototype.ANONYMOUS = function() {
    return this.getToken(TSqlParser.ANONYMOUS, 0);
};

Create_remote_service_bindingContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Create_remote_service_bindingContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Create_remote_service_bindingContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_remote_service_binding(this);
	}
};

Create_remote_service_bindingContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_remote_service_binding(this);
	}
};




TSqlParser.Create_remote_service_bindingContext = Create_remote_service_bindingContext;

TSqlParser.prototype.create_remote_service_binding = function() {

    var localctx = new Create_remote_service_bindingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 338, TSqlParser.RULE_create_remote_service_binding);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3925;
        this.match(TSqlParser.CREATE);
        this.state = 3926;
        this.match(TSqlParser.REMOTE);
        this.state = 3927;
        this.match(TSqlParser.SERVICE);
        this.state = 3928;
        this.match(TSqlParser.BINDING);
        this.state = 3929;
        localctx.binding_name = this.id();
        this.state = 3932;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AUTHORIZATION) {
            this.state = 3930;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 3931;
            localctx.owner_name = this.id();
        }

        this.state = 3934;
        this.match(TSqlParser.TO);
        this.state = 3935;
        this.match(TSqlParser.SERVICE);
        this.state = 3936;
        localctx.remote_service_name = this.match(TSqlParser.STRING);
        this.state = 3937;
        this.match(TSqlParser.WITH);
        this.state = 3941;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.USER) {
            this.state = 3938;
            this.match(TSqlParser.USER);
            this.state = 3939;
            this.match(TSqlParser.EQUAL);
            this.state = 3940;
            localctx.user_name = this.id();
        }

        this.state = 3947;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 3943;
            this.match(TSqlParser.COMMA);
            this.state = 3944;
            this.match(TSqlParser.ANONYMOUS);
            this.state = 3945;
            this.match(TSqlParser.EQUAL);
            this.state = 3946;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_resource_poolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_resource_pool;
    this.pool_name = null; // IdContext
    return this;
}

Create_resource_poolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_resource_poolContext.prototype.constructor = Create_resource_poolContext;

Create_resource_poolContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_resource_poolContext.prototype.RESOURCE = function() {
    return this.getToken(TSqlParser.RESOURCE, 0);
};

Create_resource_poolContext.prototype.POOL = function() {
    return this.getToken(TSqlParser.POOL, 0);
};

Create_resource_poolContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Create_resource_poolContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_resource_poolContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LR_BRACKET);
    } else {
        return this.getToken(TSqlParser.LR_BRACKET, i);
    }
};


Create_resource_poolContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RR_BRACKET);
    } else {
        return this.getToken(TSqlParser.RR_BRACKET, i);
    }
};


Create_resource_poolContext.prototype.MIN_CPU_PERCENT = function() {
    return this.getToken(TSqlParser.MIN_CPU_PERCENT, 0);
};

Create_resource_poolContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Create_resource_poolContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Create_resource_poolContext.prototype.MAX_CPU_PERCENT = function() {
    return this.getToken(TSqlParser.MAX_CPU_PERCENT, 0);
};

Create_resource_poolContext.prototype.CAP_CPU_PERCENT = function() {
    return this.getToken(TSqlParser.CAP_CPU_PERCENT, 0);
};

Create_resource_poolContext.prototype.AFFINITY = function() {
    return this.getToken(TSqlParser.AFFINITY, 0);
};

Create_resource_poolContext.prototype.SCHEDULER = function() {
    return this.getToken(TSqlParser.SCHEDULER, 0);
};

Create_resource_poolContext.prototype.MIN_MEMORY_PERCENT = function() {
    return this.getToken(TSqlParser.MIN_MEMORY_PERCENT, 0);
};

Create_resource_poolContext.prototype.MAX_MEMORY_PERCENT = function() {
    return this.getToken(TSqlParser.MAX_MEMORY_PERCENT, 0);
};

Create_resource_poolContext.prototype.MIN_IOPS_PER_VOLUME = function() {
    return this.getToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0);
};

Create_resource_poolContext.prototype.MAX_IOPS_PER_VOLUME = function() {
    return this.getToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0);
};

Create_resource_poolContext.prototype.AUTO = function() {
    return this.getToken(TSqlParser.AUTO, 0);
};

Create_resource_poolContext.prototype.NUMANODE = function() {
    return this.getToken(TSqlParser.NUMANODE, 0);
};

Create_resource_poolContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Create_resource_poolContext.prototype.TO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.TO);
    } else {
        return this.getToken(TSqlParser.TO, i);
    }
};


Create_resource_poolContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_resource_pool(this);
	}
};

Create_resource_poolContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_resource_pool(this);
	}
};




TSqlParser.Create_resource_poolContext = Create_resource_poolContext;

TSqlParser.prototype.create_resource_pool = function() {

    var localctx = new Create_resource_poolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 340, TSqlParser.RULE_create_resource_pool);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3949;
        this.match(TSqlParser.CREATE);
        this.state = 3950;
        this.match(TSqlParser.RESOURCE);
        this.state = 3951;
        this.match(TSqlParser.POOL);
        this.state = 3952;
        localctx.pool_name = this.id();
        this.state = 4055;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,431,this._ctx);
        if(la_===1) {
            this.state = 3953;
            this.match(TSqlParser.WITH);
            this.state = 3954;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 3961;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,409,this._ctx);
            if(la_===1) {
                this.state = 3956;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 3955;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 3958;
                this.match(TSqlParser.MIN_CPU_PERCENT);
                this.state = 3959;
                this.match(TSqlParser.EQUAL);
                this.state = 3960;
                this.match(TSqlParser.DECIMAL);

            }
            this.state = 3969;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,411,this._ctx);
            if(la_===1) {
                this.state = 3964;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 3963;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 3966;
                this.match(TSqlParser.MAX_CPU_PERCENT);
                this.state = 3967;
                this.match(TSqlParser.EQUAL);
                this.state = 3968;
                this.match(TSqlParser.DECIMAL);

            }
            this.state = 3977;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,413,this._ctx);
            if(la_===1) {
                this.state = 3972;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 3971;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 3974;
                this.match(TSqlParser.CAP_CPU_PERCENT);
                this.state = 3975;
                this.match(TSqlParser.EQUAL);
                this.state = 3976;
                this.match(TSqlParser.DECIMAL);

            }
            this.state = 4020;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,422,this._ctx);
            if(la_===1) {
                this.state = 3980;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 3979;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 3982;
                this.match(TSqlParser.AFFINITY);
                this.state = 3983;
                this.match(TSqlParser.SCHEDULER);
                this.state = 3984;
                this.match(TSqlParser.EQUAL);
                this.state = 4018;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.AUTO:
                    this.state = 3985;
                    this.match(TSqlParser.AUTO);
                    break;
                case TSqlParser.LR_BRACKET:
                    this.state = 3986;
                    this.match(TSqlParser.LR_BRACKET);
                    this.state = 3996; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 3988;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 3987;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 3994;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input,416,this._ctx);
                        switch(la_) {
                        case 1:
                            this.state = 3990;
                            this.match(TSqlParser.DECIMAL);
                            break;

                        case 2:
                            this.state = 3991;
                            this.match(TSqlParser.DECIMAL);
                            this.state = 3992;
                            this.match(TSqlParser.TO);
                            this.state = 3993;
                            this.match(TSqlParser.DECIMAL);
                            break;

                        }
                        this.state = 3998; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while(_la===TSqlParser.DECIMAL || _la===TSqlParser.COMMA);
                    this.state = 4000;
                    this.match(TSqlParser.RR_BRACKET);
                    break;
                case TSqlParser.NUMANODE:
                    this.state = 4001;
                    this.match(TSqlParser.NUMANODE);
                    this.state = 4002;
                    this.match(TSqlParser.EQUAL);
                    this.state = 4003;
                    this.match(TSqlParser.LR_BRACKET);
                    this.state = 4013; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 4005;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 4004;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 4011;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input,419,this._ctx);
                        switch(la_) {
                        case 1:
                            this.state = 4007;
                            this.match(TSqlParser.DECIMAL);
                            break;

                        case 2:
                            this.state = 4008;
                            this.match(TSqlParser.DECIMAL);
                            this.state = 4009;
                            this.match(TSqlParser.TO);
                            this.state = 4010;
                            this.match(TSqlParser.DECIMAL);
                            break;

                        }
                        this.state = 4015; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while(_la===TSqlParser.DECIMAL || _la===TSqlParser.COMMA);
                    this.state = 4017;
                    this.match(TSqlParser.RR_BRACKET);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }

            }
            this.state = 4028;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,424,this._ctx);
            if(la_===1) {
                this.state = 4023;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 4022;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 4025;
                this.match(TSqlParser.MIN_MEMORY_PERCENT);
                this.state = 4026;
                this.match(TSqlParser.EQUAL);
                this.state = 4027;
                this.match(TSqlParser.DECIMAL);

            }
            this.state = 4036;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,426,this._ctx);
            if(la_===1) {
                this.state = 4031;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 4030;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 4033;
                this.match(TSqlParser.MAX_MEMORY_PERCENT);
                this.state = 4034;
                this.match(TSqlParser.EQUAL);
                this.state = 4035;
                this.match(TSqlParser.DECIMAL);

            }
            this.state = 4044;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,428,this._ctx);
            if(la_===1) {
                this.state = 4039;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 4038;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 4041;
                this.match(TSqlParser.MIN_IOPS_PER_VOLUME);
                this.state = 4042;
                this.match(TSqlParser.EQUAL);
                this.state = 4043;
                this.match(TSqlParser.DECIMAL);

            }
            this.state = 4052;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.MAX_IOPS_PER_VOLUME || _la===TSqlParser.COMMA) {
                this.state = 4047;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 4046;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 4049;
                this.match(TSqlParser.MAX_IOPS_PER_VOLUME);
                this.state = 4050;
                this.match(TSqlParser.EQUAL);
                this.state = 4051;
                this.match(TSqlParser.DECIMAL);
            }

            this.state = 4054;
            this.match(TSqlParser.RR_BRACKET);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_resource_governorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_resource_governor;
    this.schema_name = null; // IdContext
    this.function_name = null; // IdContext
    this.max_outstanding_io_per_volume = null; // Token
    return this;
}

Alter_resource_governorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_resource_governorContext.prototype.constructor = Alter_resource_governorContext;

Alter_resource_governorContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_resource_governorContext.prototype.RESOURCE = function() {
    return this.getToken(TSqlParser.RESOURCE, 0);
};

Alter_resource_governorContext.prototype.GOVERNOR = function() {
    return this.getToken(TSqlParser.GOVERNOR, 0);
};

Alter_resource_governorContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_resource_governorContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Alter_resource_governorContext.prototype.CLASSIFIER_FUNCTION = function() {
    return this.getToken(TSqlParser.CLASSIFIER_FUNCTION, 0);
};

Alter_resource_governorContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Alter_resource_governorContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Alter_resource_governorContext.prototype.RESET = function() {
    return this.getToken(TSqlParser.RESET, 0);
};

Alter_resource_governorContext.prototype.STATISTICS = function() {
    return this.getToken(TSqlParser.STATISTICS, 0);
};

Alter_resource_governorContext.prototype.MAX_OUTSTANDING_IO_PER_VOLUME = function() {
    return this.getToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0);
};

Alter_resource_governorContext.prototype.DISABLE = function() {
    return this.getToken(TSqlParser.DISABLE, 0);
};

Alter_resource_governorContext.prototype.RECONFIGURE = function() {
    return this.getToken(TSqlParser.RECONFIGURE, 0);
};

Alter_resource_governorContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Alter_resource_governorContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

Alter_resource_governorContext.prototype.NULL = function() {
    return this.getToken(TSqlParser.NULL, 0);
};

Alter_resource_governorContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_resource_governorContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_resource_governor(this);
	}
};

Alter_resource_governorContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_resource_governor(this);
	}
};




TSqlParser.Alter_resource_governorContext = Alter_resource_governorContext;

TSqlParser.prototype.alter_resource_governor = function() {

    var localctx = new Alter_resource_governorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 342, TSqlParser.RULE_alter_resource_governor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4057;
        this.match(TSqlParser.ALTER);
        this.state = 4058;
        this.match(TSqlParser.RESOURCE);
        this.state = 4059;
        this.match(TSqlParser.GOVERNOR);
        this.state = 4081;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,433,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4060;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.RECONFIGURE || _la===TSqlParser.DISABLE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 2:
            this.state = 4061;
            this.match(TSqlParser.WITH);
            this.state = 4062;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 4063;
            this.match(TSqlParser.CLASSIFIER_FUNCTION);
            this.state = 4064;
            this.match(TSqlParser.EQUAL);
            this.state = 4070;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.CALLED:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.EVENTDATA:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.KEY:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.OFFSETS:
            case TSqlParser.PAGE:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SERVER:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.TARGET:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.APPLY:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GLOBAL:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAST:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.ID:
                this.state = 4065;
                localctx.schema_name = this.id();
                this.state = 4066;
                this.match(TSqlParser.DOT);
                this.state = 4067;
                localctx.function_name = this.id();
                break;
            case TSqlParser.NULL:
                this.state = 4069;
                this.match(TSqlParser.NULL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 4072;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 3:
            this.state = 4073;
            this.match(TSqlParser.RESET);
            this.state = 4074;
            this.match(TSqlParser.STATISTICS);
            break;

        case 4:
            this.state = 4075;
            this.match(TSqlParser.WITH);
            this.state = 4076;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 4077;
            this.match(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME);
            this.state = 4078;
            this.match(TSqlParser.EQUAL);
            this.state = 4079;
            localctx.max_outstanding_io_per_volume = this.match(TSqlParser.DECIMAL);
            this.state = 4080;
            this.match(TSqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_db_roleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_db_role;
    this.role_name = null; // IdContext
    this.database_principal = null; // IdContext
    this.new_role_name = null; // IdContext
    return this;
}

Alter_db_roleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_db_roleContext.prototype.constructor = Alter_db_roleContext;

Alter_db_roleContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_db_roleContext.prototype.ROLE = function() {
    return this.getToken(TSqlParser.ROLE, 0);
};

Alter_db_roleContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_db_roleContext.prototype.MEMBER = function() {
    return this.getToken(TSqlParser.MEMBER, 0);
};

Alter_db_roleContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_db_roleContext.prototype.NAME = function() {
    return this.getToken(TSqlParser.NAME, 0);
};

Alter_db_roleContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Alter_db_roleContext.prototype.ADD = function() {
    return this.getToken(TSqlParser.ADD, 0);
};

Alter_db_roleContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Alter_db_roleContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_db_role(this);
	}
};

Alter_db_roleContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_db_role(this);
	}
};




TSqlParser.Alter_db_roleContext = Alter_db_roleContext;

TSqlParser.prototype.alter_db_role = function() {

    var localctx = new Alter_db_roleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 344, TSqlParser.RULE_alter_db_role);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4083;
        this.match(TSqlParser.ALTER);
        this.state = 4084;
        this.match(TSqlParser.ROLE);
        this.state = 4085;
        localctx.role_name = this.id();
        this.state = 4093;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.ADD:
        case TSqlParser.DROP:
            this.state = 4086;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.ADD || _la===TSqlParser.DROP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4087;
            this.match(TSqlParser.MEMBER);
            this.state = 4088;
            localctx.database_principal = this.id();
            break;
        case TSqlParser.WITH:
            this.state = 4089;
            this.match(TSqlParser.WITH);
            this.state = 4090;
            this.match(TSqlParser.NAME);
            this.state = 4091;
            this.match(TSqlParser.EQUAL);
            this.state = 4092;
            localctx.new_role_name = this.id();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_db_roleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_db_role;
    this.role_name = null; // IdContext
    this.owner_name = null; // IdContext
    return this;
}

Create_db_roleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_db_roleContext.prototype.constructor = Create_db_roleContext;

Create_db_roleContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_db_roleContext.prototype.ROLE = function() {
    return this.getToken(TSqlParser.ROLE, 0);
};

Create_db_roleContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_db_roleContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Create_db_roleContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_db_role(this);
	}
};

Create_db_roleContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_db_role(this);
	}
};




TSqlParser.Create_db_roleContext = Create_db_roleContext;

TSqlParser.prototype.create_db_role = function() {

    var localctx = new Create_db_roleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 346, TSqlParser.RULE_create_db_role);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4095;
        this.match(TSqlParser.CREATE);
        this.state = 4096;
        this.match(TSqlParser.ROLE);
        this.state = 4097;
        localctx.role_name = this.id();
        this.state = 4100;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AUTHORIZATION) {
            this.state = 4098;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 4099;
            localctx.owner_name = this.id();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_routeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_route;
    this.route_name = null; // IdContext
    this.owner_name = null; // IdContext
    this.route_service_name = null; // Token
    this.broker_instance_identifier = null; // Token
    return this;
}

Create_routeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_routeContext.prototype.constructor = Create_routeContext;

Create_routeContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_routeContext.prototype.ROUTE = function() {
    return this.getToken(TSqlParser.ROUTE, 0);
};

Create_routeContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_routeContext.prototype.ADDRESS = function() {
    return this.getToken(TSqlParser.ADDRESS, 0);
};

Create_routeContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Create_routeContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_routeContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Create_routeContext.prototype.QUOTED_URL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.QUOTED_URL);
    } else {
        return this.getToken(TSqlParser.QUOTED_URL, i);
    }
};


Create_routeContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Create_routeContext.prototype.SERVICE_NAME = function() {
    return this.getToken(TSqlParser.SERVICE_NAME, 0);
};

Create_routeContext.prototype.BROKER_INSTANCE = function() {
    return this.getToken(TSqlParser.BROKER_INSTANCE, 0);
};

Create_routeContext.prototype.LIFETIME = function() {
    return this.getToken(TSqlParser.LIFETIME, 0);
};

Create_routeContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Create_routeContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Create_routeContext.prototype.MIRROR_ADDRESS = function() {
    return this.getToken(TSqlParser.MIRROR_ADDRESS, 0);
};

Create_routeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_route(this);
	}
};

Create_routeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_route(this);
	}
};




TSqlParser.Create_routeContext = Create_routeContext;

TSqlParser.prototype.create_route = function() {

    var localctx = new Create_routeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 348, TSqlParser.RULE_create_route);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4102;
        this.match(TSqlParser.CREATE);
        this.state = 4103;
        this.match(TSqlParser.ROUTE);
        this.state = 4104;
        localctx.route_name = this.id();
        this.state = 4107;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AUTHORIZATION) {
            this.state = 4105;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 4106;
            localctx.owner_name = this.id();
        }

        this.state = 4109;
        this.match(TSqlParser.WITH);
        this.state = 4116;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,438,this._ctx);
        if(la_===1) {
            this.state = 4111;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 4110;
                this.match(TSqlParser.COMMA);
            }

            this.state = 4113;
            this.match(TSqlParser.SERVICE_NAME);
            this.state = 4114;
            this.match(TSqlParser.EQUAL);
            this.state = 4115;
            localctx.route_service_name = this.match(TSqlParser.STRING);

        }
        this.state = 4124;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,440,this._ctx);
        if(la_===1) {
            this.state = 4119;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 4118;
                this.match(TSqlParser.COMMA);
            }

            this.state = 4121;
            this.match(TSqlParser.BROKER_INSTANCE);
            this.state = 4122;
            this.match(TSqlParser.EQUAL);
            this.state = 4123;
            localctx.broker_instance_identifier = this.match(TSqlParser.STRING);

        }
        this.state = 4132;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,442,this._ctx);
        if(la_===1) {
            this.state = 4127;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 4126;
                this.match(TSqlParser.COMMA);
            }

            this.state = 4129;
            this.match(TSqlParser.LIFETIME);
            this.state = 4130;
            this.match(TSqlParser.EQUAL);
            this.state = 4131;
            this.match(TSqlParser.DECIMAL);

        }
        this.state = 4135;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 4134;
            this.match(TSqlParser.COMMA);
        }

        this.state = 4137;
        this.match(TSqlParser.ADDRESS);
        this.state = 4138;
        this.match(TSqlParser.EQUAL);
        this.state = 4139;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.QUOTED_URL || _la===TSqlParser.STRING)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 4144;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 4140;
            this.match(TSqlParser.COMMA);
            this.state = 4141;
            this.match(TSqlParser.MIRROR_ADDRESS);
            this.state = 4142;
            this.match(TSqlParser.EQUAL);
            this.state = 4143;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.QUOTED_URL || _la===TSqlParser.STRING)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_ruleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_rule;
    this.schema_name = null; // IdContext
    this.rule_name = null; // IdContext
    return this;
}

Create_ruleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_ruleContext.prototype.constructor = Create_ruleContext;

Create_ruleContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_ruleContext.prototype.RULE = function() {
    return this.getToken(TSqlParser.RULE, 0);
};

Create_ruleContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Create_ruleContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Create_ruleContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_ruleContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

Create_ruleContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_rule(this);
	}
};

Create_ruleContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_rule(this);
	}
};




TSqlParser.Create_ruleContext = Create_ruleContext;

TSqlParser.prototype.create_rule = function() {

    var localctx = new Create_ruleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 350, TSqlParser.RULE_create_rule);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4146;
        this.match(TSqlParser.CREATE);
        this.state = 4147;
        this.match(TSqlParser.RULE);
        this.state = 4151;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,445,this._ctx);
        if(la_===1) {
            this.state = 4148;
            localctx.schema_name = this.id();
            this.state = 4149;
            this.match(TSqlParser.DOT);

        }
        this.state = 4153;
        localctx.rule_name = this.id();
        this.state = 4154;
        this.match(TSqlParser.AS);
        this.state = 4155;
        this.search_condition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_schema_sqlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_schema_sql;
    this.schema_name = null; // IdContext
    return this;
}

Alter_schema_sqlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_schema_sqlContext.prototype.constructor = Alter_schema_sqlContext;

Alter_schema_sqlContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_schema_sqlContext.prototype.SCHEMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SCHEMA);
    } else {
        return this.getToken(TSqlParser.SCHEMA, i);
    }
};


Alter_schema_sqlContext.prototype.TRANSFER = function() {
    return this.getToken(TSqlParser.TRANSFER, 0);
};

Alter_schema_sqlContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_schema_sqlContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COLON);
    } else {
        return this.getToken(TSqlParser.COLON, i);
    }
};


Alter_schema_sqlContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

Alter_schema_sqlContext.prototype.OBJECT = function() {
    return this.getToken(TSqlParser.OBJECT, 0);
};

Alter_schema_sqlContext.prototype.TYPE = function() {
    return this.getToken(TSqlParser.TYPE, 0);
};

Alter_schema_sqlContext.prototype.XML = function() {
    return this.getToken(TSqlParser.XML, 0);
};

Alter_schema_sqlContext.prototype.COLLECTION = function() {
    return this.getToken(TSqlParser.COLLECTION, 0);
};

Alter_schema_sqlContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_schema_sql(this);
	}
};

Alter_schema_sqlContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_schema_sql(this);
	}
};




TSqlParser.Alter_schema_sqlContext = Alter_schema_sqlContext;

TSqlParser.prototype.alter_schema_sql = function() {

    var localctx = new Alter_schema_sqlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 352, TSqlParser.RULE_alter_schema_sql);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4157;
        this.match(TSqlParser.ALTER);
        this.state = 4158;
        this.match(TSqlParser.SCHEMA);
        this.state = 4159;
        localctx.schema_name = this.id();
        this.state = 4160;
        this.match(TSqlParser.TRANSFER);
        this.state = 4170;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,447,this._ctx);
        if(la_===1) {
            this.state = 4166;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.OBJECT:
                this.state = 4161;
                this.match(TSqlParser.OBJECT);
                break;
            case TSqlParser.TYPE:
                this.state = 4162;
                this.match(TSqlParser.TYPE);
                break;
            case TSqlParser.XML:
                this.state = 4163;
                this.match(TSqlParser.XML);
                this.state = 4164;
                this.match(TSqlParser.SCHEMA);
                this.state = 4165;
                this.match(TSqlParser.COLLECTION);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 4168;
            this.match(TSqlParser.COLON);
            this.state = 4169;
            this.match(TSqlParser.COLON);

        }
        this.state = 4172;
        this.id();
        this.state = 4175;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.DOT) {
            this.state = 4173;
            this.match(TSqlParser.DOT);
            this.state = 4174;
            this.id();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_schemaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_schema;
    this.schema_name = null; // IdContext
    this.owner_name = null; // IdContext
    this.object_name = null; // IdContext
    return this;
}

Create_schemaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_schemaContext.prototype.constructor = Create_schemaContext;

Create_schemaContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_schemaContext.prototype.SCHEMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SCHEMA);
    } else {
        return this.getToken(TSqlParser.SCHEMA, i);
    }
};


Create_schemaContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Create_schemaContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_schemaContext.prototype.create_table = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Create_tableContext);
    } else {
        return this.getTypedRuleContext(Create_tableContext,i);
    }
};

Create_schemaContext.prototype.create_view = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Create_viewContext);
    } else {
        return this.getTypedRuleContext(Create_viewContext,i);
    }
};

Create_schemaContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ON);
    } else {
        return this.getToken(TSqlParser.ON, i);
    }
};


Create_schemaContext.prototype.TO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.TO);
    } else {
        return this.getToken(TSqlParser.TO, i);
    }
};


Create_schemaContext.prototype.REVOKE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.REVOKE);
    } else {
        return this.getToken(TSqlParser.REVOKE, i);
    }
};


Create_schemaContext.prototype.FROM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.FROM);
    } else {
        return this.getToken(TSqlParser.FROM, i);
    }
};


Create_schemaContext.prototype.GRANT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.GRANT);
    } else {
        return this.getToken(TSqlParser.GRANT, i);
    }
};


Create_schemaContext.prototype.DENY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DENY);
    } else {
        return this.getToken(TSqlParser.DENY, i);
    }
};


Create_schemaContext.prototype.SELECT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SELECT);
    } else {
        return this.getToken(TSqlParser.SELECT, i);
    }
};


Create_schemaContext.prototype.INSERT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.INSERT);
    } else {
        return this.getToken(TSqlParser.INSERT, i);
    }
};


Create_schemaContext.prototype.DELETE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DELETE);
    } else {
        return this.getToken(TSqlParser.DELETE, i);
    }
};


Create_schemaContext.prototype.UPDATE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.UPDATE);
    } else {
        return this.getToken(TSqlParser.UPDATE, i);
    }
};


Create_schemaContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COLON);
    } else {
        return this.getToken(TSqlParser.COLON, i);
    }
};


Create_schemaContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_schema(this);
	}
};

Create_schemaContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_schema(this);
	}
};




TSqlParser.Create_schemaContext = Create_schemaContext;

TSqlParser.prototype.create_schema = function() {

    var localctx = new Create_schemaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 354, TSqlParser.RULE_create_schema);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4177;
        this.match(TSqlParser.CREATE);
        this.state = 4178;
        this.match(TSqlParser.SCHEMA);
        this.state = 4186;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,449,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4179;
            localctx.schema_name = this.id();
            break;

        case 2:
            this.state = 4180;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 4181;
            localctx.owner_name = this.id();
            break;

        case 3:
            this.state = 4182;
            localctx.schema_name = this.id();
            this.state = 4183;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 4184;
            localctx.owner_name = this.id();
            break;

        }
        this.state = 4216;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,453,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 4214;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,452,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 4188;
                    this.create_table();
                    break;

                case 2:
                    this.state = 4189;
                    this.create_view();
                    break;

                case 3:
                    this.state = 4190;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.DENY || _la===TSqlParser.GRANT)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 4191;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.DELETE || _la===TSqlParser.INSERT || _la===TSqlParser.SELECT || _la===TSqlParser.UPDATE)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 4192;
                    this.match(TSqlParser.ON);
                    this.state = 4196;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.SCHEMA) {
                        this.state = 4193;
                        this.match(TSqlParser.SCHEMA);
                        this.state = 4194;
                        this.match(TSqlParser.COLON);
                        this.state = 4195;
                        this.match(TSqlParser.COLON);
                    }

                    this.state = 4198;
                    localctx.object_name = this.id();
                    this.state = 4199;
                    this.match(TSqlParser.TO);
                    this.state = 4200;
                    localctx.owner_name = this.id();
                    break;

                case 4:
                    this.state = 4202;
                    this.match(TSqlParser.REVOKE);
                    this.state = 4203;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.DELETE || _la===TSqlParser.INSERT || _la===TSqlParser.SELECT || _la===TSqlParser.UPDATE)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 4204;
                    this.match(TSqlParser.ON);
                    this.state = 4208;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.SCHEMA) {
                        this.state = 4205;
                        this.match(TSqlParser.SCHEMA);
                        this.state = 4206;
                        this.match(TSqlParser.COLON);
                        this.state = 4207;
                        this.match(TSqlParser.COLON);
                    }

                    this.state = 4210;
                    localctx.object_name = this.id();
                    this.state = 4211;
                    this.match(TSqlParser.FROM);
                    this.state = 4212;
                    localctx.owner_name = this.id();
                    break;

                } 
            }
            this.state = 4218;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,453,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_schema_azure_sql_dw_and_pdwContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_schema_azure_sql_dw_and_pdw;
    this.schema_name = null; // IdContext
    this.owner_name = null; // IdContext
    return this;
}

Create_schema_azure_sql_dw_and_pdwContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_schema_azure_sql_dw_and_pdwContext.prototype.constructor = Create_schema_azure_sql_dw_and_pdwContext;

Create_schema_azure_sql_dw_and_pdwContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_schema_azure_sql_dw_and_pdwContext.prototype.SCHEMA = function() {
    return this.getToken(TSqlParser.SCHEMA, 0);
};

Create_schema_azure_sql_dw_and_pdwContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_schema_azure_sql_dw_and_pdwContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Create_schema_azure_sql_dw_and_pdwContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_schema_azure_sql_dw_and_pdw(this);
	}
};

Create_schema_azure_sql_dw_and_pdwContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_schema_azure_sql_dw_and_pdw(this);
	}
};




TSqlParser.Create_schema_azure_sql_dw_and_pdwContext = Create_schema_azure_sql_dw_and_pdwContext;

TSqlParser.prototype.create_schema_azure_sql_dw_and_pdw = function() {

    var localctx = new Create_schema_azure_sql_dw_and_pdwContext(this, this._ctx, this.state);
    this.enterRule(localctx, 356, TSqlParser.RULE_create_schema_azure_sql_dw_and_pdw);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4219;
        this.match(TSqlParser.CREATE);
        this.state = 4220;
        this.match(TSqlParser.SCHEMA);
        this.state = 4221;
        localctx.schema_name = this.id();
        this.state = 4224;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AUTHORIZATION) {
            this.state = 4222;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 4223;
            localctx.owner_name = this.id();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_schema_azure_sql_dw_and_pdwContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_schema_azure_sql_dw_and_pdw;
    this.schema_name = null; // IdContext
    return this;
}

Alter_schema_azure_sql_dw_and_pdwContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_schema_azure_sql_dw_and_pdwContext.prototype.constructor = Alter_schema_azure_sql_dw_and_pdwContext;

Alter_schema_azure_sql_dw_and_pdwContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_schema_azure_sql_dw_and_pdwContext.prototype.SCHEMA = function() {
    return this.getToken(TSqlParser.SCHEMA, 0);
};

Alter_schema_azure_sql_dw_and_pdwContext.prototype.TRANSFER = function() {
    return this.getToken(TSqlParser.TRANSFER, 0);
};

Alter_schema_azure_sql_dw_and_pdwContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_schema_azure_sql_dw_and_pdwContext.prototype.OBJECT = function() {
    return this.getToken(TSqlParser.OBJECT, 0);
};

Alter_schema_azure_sql_dw_and_pdwContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COLON);
    } else {
        return this.getToken(TSqlParser.COLON, i);
    }
};


Alter_schema_azure_sql_dw_and_pdwContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

Alter_schema_azure_sql_dw_and_pdwContext.prototype.ID = function() {
    return this.getToken(TSqlParser.ID, 0);
};

Alter_schema_azure_sql_dw_and_pdwContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_schema_azure_sql_dw_and_pdw(this);
	}
};

Alter_schema_azure_sql_dw_and_pdwContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_schema_azure_sql_dw_and_pdw(this);
	}
};




TSqlParser.Alter_schema_azure_sql_dw_and_pdwContext = Alter_schema_azure_sql_dw_and_pdwContext;

TSqlParser.prototype.alter_schema_azure_sql_dw_and_pdw = function() {

    var localctx = new Alter_schema_azure_sql_dw_and_pdwContext(this, this._ctx, this.state);
    this.enterRule(localctx, 358, TSqlParser.RULE_alter_schema_azure_sql_dw_and_pdw);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4226;
        this.match(TSqlParser.ALTER);
        this.state = 4227;
        this.match(TSqlParser.SCHEMA);
        this.state = 4228;
        localctx.schema_name = this.id();
        this.state = 4229;
        this.match(TSqlParser.TRANSFER);
        this.state = 4233;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.OBJECT) {
            this.state = 4230;
            this.match(TSqlParser.OBJECT);
            this.state = 4231;
            this.match(TSqlParser.COLON);
            this.state = 4232;
            this.match(TSqlParser.COLON);
        }

        this.state = 4235;
        this.id();
        this.state = 4238;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.DOT) {
            this.state = 4236;
            this.match(TSqlParser.DOT);
            this.state = 4237;
            this.match(TSqlParser.ID);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_search_property_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_search_property_list;
    this.new_list_name = null; // IdContext
    this.database_name = null; // IdContext
    this.source_list_name = null; // IdContext
    this.owner_name = null; // IdContext
    return this;
}

Create_search_property_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_search_property_listContext.prototype.constructor = Create_search_property_listContext;

Create_search_property_listContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_search_property_listContext.prototype.SEARCH = function() {
    return this.getToken(TSqlParser.SEARCH, 0);
};

Create_search_property_listContext.prototype.PROPERTY = function() {
    return this.getToken(TSqlParser.PROPERTY, 0);
};

Create_search_property_listContext.prototype.LIST = function() {
    return this.getToken(TSqlParser.LIST, 0);
};

Create_search_property_listContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_search_property_listContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Create_search_property_listContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Create_search_property_listContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

Create_search_property_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_search_property_list(this);
	}
};

Create_search_property_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_search_property_list(this);
	}
};




TSqlParser.Create_search_property_listContext = Create_search_property_listContext;

TSqlParser.prototype.create_search_property_list = function() {

    var localctx = new Create_search_property_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 360, TSqlParser.RULE_create_search_property_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4240;
        this.match(TSqlParser.CREATE);
        this.state = 4241;
        this.match(TSqlParser.SEARCH);
        this.state = 4242;
        this.match(TSqlParser.PROPERTY);
        this.state = 4243;
        this.match(TSqlParser.LIST);
        this.state = 4244;
        localctx.new_list_name = this.id();
        this.state = 4252;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.FROM) {
            this.state = 4245;
            this.match(TSqlParser.FROM);
            this.state = 4249;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,457,this._ctx);
            if(la_===1) {
                this.state = 4246;
                localctx.database_name = this.id();
                this.state = 4247;
                this.match(TSqlParser.DOT);

            }
            this.state = 4251;
            localctx.source_list_name = this.id();
        }

        this.state = 4256;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AUTHORIZATION) {
            this.state = 4254;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 4255;
            localctx.owner_name = this.id();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_security_policyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_security_policy;
    this.schema_name = null; // IdContext
    this.security_policy_name = null; // IdContext
    this.tvf_schema_name = null; // IdContext
    this.security_predicate_function_name = null; // IdContext
    this.column_name_or_arguments = null; // IdContext
    this.table_schema_name = null; // IdContext
    this.name = null; // IdContext
    return this;
}

Create_security_policyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_security_policyContext.prototype.constructor = Create_security_policyContext;

Create_security_policyContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_security_policyContext.prototype.SECURITY = function() {
    return this.getToken(TSqlParser.SECURITY, 0);
};

Create_security_policyContext.prototype.POLICY = function() {
    return this.getToken(TSqlParser.POLICY, 0);
};

Create_security_policyContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_security_policyContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DOT);
    } else {
        return this.getToken(TSqlParser.DOT, i);
    }
};


Create_security_policyContext.prototype.ADD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ADD);
    } else {
        return this.getToken(TSqlParser.ADD, i);
    }
};


Create_security_policyContext.prototype.PREDICATE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.PREDICATE);
    } else {
        return this.getToken(TSqlParser.PREDICATE, i);
    }
};


Create_security_policyContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LR_BRACKET);
    } else {
        return this.getToken(TSqlParser.LR_BRACKET, i);
    }
};


Create_security_policyContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RR_BRACKET);
    } else {
        return this.getToken(TSqlParser.RR_BRACKET, i);
    }
};


Create_security_policyContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ON);
    } else {
        return this.getToken(TSqlParser.ON, i);
    }
};


Create_security_policyContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_security_policyContext.prototype.STATE = function() {
    return this.getToken(TSqlParser.STATE, 0);
};

Create_security_policyContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Create_security_policyContext.prototype.NOT = function() {
    return this.getToken(TSqlParser.NOT, 0);
};

Create_security_policyContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Create_security_policyContext.prototype.REPLICATION = function() {
    return this.getToken(TSqlParser.REPLICATION, 0);
};

Create_security_policyContext.prototype.OFF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.OFF);
    } else {
        return this.getToken(TSqlParser.OFF, i);
    }
};


Create_security_policyContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Create_security_policyContext.prototype.AFTER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.AFTER);
    } else {
        return this.getToken(TSqlParser.AFTER, i);
    }
};


Create_security_policyContext.prototype.BEFORE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.BEFORE);
    } else {
        return this.getToken(TSqlParser.BEFORE, i);
    }
};


Create_security_policyContext.prototype.SCHEMABINDING = function() {
    return this.getToken(TSqlParser.SCHEMABINDING, 0);
};

Create_security_policyContext.prototype.FILTER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.FILTER);
    } else {
        return this.getToken(TSqlParser.FILTER, i);
    }
};


Create_security_policyContext.prototype.BLOCK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.BLOCK);
    } else {
        return this.getToken(TSqlParser.BLOCK, i);
    }
};


Create_security_policyContext.prototype.INSERT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.INSERT);
    } else {
        return this.getToken(TSqlParser.INSERT, i);
    }
};


Create_security_policyContext.prototype.UPDATE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.UPDATE);
    } else {
        return this.getToken(TSqlParser.UPDATE, i);
    }
};


Create_security_policyContext.prototype.DELETE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DELETE);
    } else {
        return this.getToken(TSqlParser.DELETE, i);
    }
};


Create_security_policyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_security_policy(this);
	}
};

Create_security_policyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_security_policy(this);
	}
};




TSqlParser.Create_security_policyContext = Create_security_policyContext;

TSqlParser.prototype.create_security_policy = function() {

    var localctx = new Create_security_policyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 362, TSqlParser.RULE_create_security_policy);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4258;
        this.match(TSqlParser.CREATE);
        this.state = 4259;
        this.match(TSqlParser.SECURITY);
        this.state = 4260;
        this.match(TSqlParser.POLICY);
        this.state = 4264;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,460,this._ctx);
        if(la_===1) {
            this.state = 4261;
            localctx.schema_name = this.id();
            this.state = 4262;
            this.match(TSqlParser.DOT);

        }
        this.state = 4266;
        localctx.security_policy_name = this.id();
        this.state = 4307; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 4268;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 4267;
                this.match(TSqlParser.COMMA);
            }

            this.state = 4270;
            this.match(TSqlParser.ADD);
            this.state = 4272;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.BLOCK || _la===TSqlParser.FILTER) {
                this.state = 4271;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.BLOCK || _la===TSqlParser.FILTER)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 4274;
            this.match(TSqlParser.PREDICATE);
            this.state = 4275;
            localctx.tvf_schema_name = this.id();
            this.state = 4276;
            this.match(TSqlParser.DOT);
            this.state = 4277;
            localctx.security_predicate_function_name = this.id();
            this.state = 4278;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 4283; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 4280;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 4279;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 4282;
                localctx.column_name_or_arguments = this.id();
                this.state = 4285; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0) || _la===TSqlParser.COMMA);
            this.state = 4287;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 4288;
            this.match(TSqlParser.ON);
            this.state = 4289;
            localctx.table_schema_name = this.id();
            this.state = 4290;
            this.match(TSqlParser.DOT);
            this.state = 4291;
            localctx.name = this.id();
            this.state = 4304;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,468,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 4302;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,467,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 4293;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 4292;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 4295;
                        this.match(TSqlParser.AFTER);
                        this.state = 4296;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.INSERT || _la===TSqlParser.UPDATE)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 2:
                        this.state = 4298;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 4297;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 4300;
                        this.match(TSqlParser.BEFORE);
                        this.state = 4301;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.DELETE || _la===TSqlParser.UPDATE)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    } 
                }
                this.state = 4306;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,468,this._ctx);
            }

            this.state = 4309; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===TSqlParser.ADD || _la===TSqlParser.COMMA);
        this.state = 4321;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,471,this._ctx);
        if(la_===1) {
            this.state = 4311;
            this.match(TSqlParser.WITH);
            this.state = 4312;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 4313;
            this.match(TSqlParser.STATE);
            this.state = 4314;
            this.match(TSqlParser.EQUAL);
            this.state = 4315;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4318;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.SCHEMABINDING) {
                this.state = 4316;
                this.match(TSqlParser.SCHEMABINDING);
                this.state = 4317;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 4320;
            this.match(TSqlParser.RR_BRACKET);

        }
        this.state = 4326;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.NOT) {
            this.state = 4323;
            this.match(TSqlParser.NOT);
            this.state = 4324;
            this.match(TSqlParser.FOR);
            this.state = 4325;
            this.match(TSqlParser.REPLICATION);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_sequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_sequence;
    this.schema_name = null; // IdContext
    this.sequence_name = null; // IdContext
    this.sequnce_increment = null; // Token
    return this;
}

Alter_sequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_sequenceContext.prototype.constructor = Alter_sequenceContext;

Alter_sequenceContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_sequenceContext.prototype.SEQUENCE = function() {
    return this.getToken(TSqlParser.SEQUENCE, 0);
};

Alter_sequenceContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_sequenceContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

Alter_sequenceContext.prototype.RESTART = function() {
    return this.getToken(TSqlParser.RESTART, 0);
};

Alter_sequenceContext.prototype.INCREMENT = function() {
    return this.getToken(TSqlParser.INCREMENT, 0);
};

Alter_sequenceContext.prototype.BY = function() {
    return this.getToken(TSqlParser.BY, 0);
};

Alter_sequenceContext.prototype.MINVALUE = function() {
    return this.getToken(TSqlParser.MINVALUE, 0);
};

Alter_sequenceContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Alter_sequenceContext.prototype.NO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NO);
    } else {
        return this.getToken(TSqlParser.NO, i);
    }
};


Alter_sequenceContext.prototype.MAXVALUE = function() {
    return this.getToken(TSqlParser.MAXVALUE, 0);
};

Alter_sequenceContext.prototype.CYCLE = function() {
    return this.getToken(TSqlParser.CYCLE, 0);
};

Alter_sequenceContext.prototype.CACHE = function() {
    return this.getToken(TSqlParser.CACHE, 0);
};

Alter_sequenceContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_sequenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_sequence(this);
	}
};

Alter_sequenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_sequence(this);
	}
};




TSqlParser.Alter_sequenceContext = Alter_sequenceContext;

TSqlParser.prototype.alter_sequence = function() {

    var localctx = new Alter_sequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 364, TSqlParser.RULE_alter_sequence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4328;
        this.match(TSqlParser.ALTER);
        this.state = 4329;
        this.match(TSqlParser.SEQUENCE);
        this.state = 4333;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,473,this._ctx);
        if(la_===1) {
            this.state = 4330;
            localctx.schema_name = this.id();
            this.state = 4331;
            this.match(TSqlParser.DOT);

        }
        this.state = 4335;
        localctx.sequence_name = this.id();
        this.state = 4341;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.RESTART) {
            this.state = 4336;
            this.match(TSqlParser.RESTART);
            this.state = 4339;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,474,this._ctx);
            if(la_===1) {
                this.state = 4337;
                this.match(TSqlParser.WITH);
                this.state = 4338;
                this.match(TSqlParser.DECIMAL);

            }
        }

        this.state = 4346;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.INCREMENT) {
            this.state = 4343;
            this.match(TSqlParser.INCREMENT);
            this.state = 4344;
            this.match(TSqlParser.BY);
            this.state = 4345;
            localctx.sequnce_increment = this.match(TSqlParser.DECIMAL);
        }

        this.state = 4352;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,477,this._ctx);
        if(la_===1) {
            this.state = 4348;
            this.match(TSqlParser.MINVALUE);
            this.state = 4349;
            this.match(TSqlParser.DECIMAL);

        } else if(la_===2) {
            this.state = 4350;
            this.match(TSqlParser.NO);
            this.state = 4351;
            this.match(TSqlParser.MINVALUE);

        }
        this.state = 4358;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,478,this._ctx);
        if(la_===1) {
            this.state = 4354;
            this.match(TSqlParser.MAXVALUE);
            this.state = 4355;
            this.match(TSqlParser.DECIMAL);

        } else if(la_===2) {
            this.state = 4356;
            this.match(TSqlParser.NO);
            this.state = 4357;
            this.match(TSqlParser.MAXVALUE);

        }
        this.state = 4363;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,479,this._ctx);
        if(la_===1) {
            this.state = 4360;
            this.match(TSqlParser.CYCLE);

        } else if(la_===2) {
            this.state = 4361;
            this.match(TSqlParser.NO);
            this.state = 4362;
            this.match(TSqlParser.CYCLE);

        }
        this.state = 4369;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case TSqlParser.CACHE:
        	this.state = 4365;
        	this.match(TSqlParser.CACHE);
        	this.state = 4366;
        	this.match(TSqlParser.DECIMAL);
        	break;
        case TSqlParser.NO:
        	this.state = 4367;
        	this.match(TSqlParser.NO);
        	this.state = 4368;
        	this.match(TSqlParser.CACHE);
        	break;
        case TSqlParser.EOF:
        case TSqlParser.ALTER:
        case TSqlParser.BACKUP:
        case TSqlParser.BEGIN:
        case TSqlParser.BREAK:
        case TSqlParser.CALLED:
        case TSqlParser.CLOSE:
        case TSqlParser.COMMIT:
        case TSqlParser.CONTINUE:
        case TSqlParser.CREATE:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.DBCC:
        case TSqlParser.DEALLOCATE:
        case TSqlParser.DECLARE:
        case TSqlParser.DELETE:
        case TSqlParser.DROP:
        case TSqlParser.ELSE:
        case TSqlParser.END:
        case TSqlParser.EVENTDATA:
        case TSqlParser.EXECUTE:
        case TSqlParser.FETCH:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.GET:
        case TSqlParser.GOTO:
        case TSqlParser.GRANT:
        case TSqlParser.IF:
        case TSqlParser.INSERT:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.MERGE:
        case TSqlParser.OFFSETS:
        case TSqlParser.OPEN:
        case TSqlParser.PAGE:
        case TSqlParser.PRINT:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAISERROR:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.REVERT:
        case TSqlParser.ROLLBACK:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SAVE:
        case TSqlParser.SELECT:
        case TSqlParser.SERVER:
        case TSqlParser.SET:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.TRUNCATE:
        case TSqlParser.UPDATE:
        case TSqlParser.USE:
        case TSqlParser.WAITFOR:
        case TSqlParser.WHILE:
        case TSqlParser.WITH:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENABLE:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GO:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SEND:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
        case TSqlParser.LR_BRACKET:
        case TSqlParser.SEMI:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_sequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_sequence;
    this.schema_name = null; // IdContext
    this.sequence_name = null; // IdContext
    return this;
}

Create_sequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_sequenceContext.prototype.constructor = Create_sequenceContext;

Create_sequenceContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_sequenceContext.prototype.SEQUENCE = function() {
    return this.getToken(TSqlParser.SEQUENCE, 0);
};

Create_sequenceContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_sequenceContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

Create_sequenceContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Create_sequenceContext.prototype.data_type = function() {
    return this.getTypedRuleContext(Data_typeContext,0);
};

Create_sequenceContext.prototype.START = function() {
    return this.getToken(TSqlParser.START, 0);
};

Create_sequenceContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_sequenceContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Create_sequenceContext.prototype.INCREMENT = function() {
    return this.getToken(TSqlParser.INCREMENT, 0);
};

Create_sequenceContext.prototype.BY = function() {
    return this.getToken(TSqlParser.BY, 0);
};

Create_sequenceContext.prototype.MINVALUE = function() {
    return this.getToken(TSqlParser.MINVALUE, 0);
};

Create_sequenceContext.prototype.NO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NO);
    } else {
        return this.getToken(TSqlParser.NO, i);
    }
};


Create_sequenceContext.prototype.MAXVALUE = function() {
    return this.getToken(TSqlParser.MAXVALUE, 0);
};

Create_sequenceContext.prototype.CYCLE = function() {
    return this.getToken(TSqlParser.CYCLE, 0);
};

Create_sequenceContext.prototype.CACHE = function() {
    return this.getToken(TSqlParser.CACHE, 0);
};

Create_sequenceContext.prototype.MINUS = function() {
    return this.getToken(TSqlParser.MINUS, 0);
};

Create_sequenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_sequence(this);
	}
};

Create_sequenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_sequence(this);
	}
};




TSqlParser.Create_sequenceContext = Create_sequenceContext;

TSqlParser.prototype.create_sequence = function() {

    var localctx = new Create_sequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 366, TSqlParser.RULE_create_sequence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4371;
        this.match(TSqlParser.CREATE);
        this.state = 4372;
        this.match(TSqlParser.SEQUENCE);
        this.state = 4376;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,481,this._ctx);
        if(la_===1) {
            this.state = 4373;
            localctx.schema_name = this.id();
            this.state = 4374;
            this.match(TSqlParser.DOT);

        }
        this.state = 4378;
        localctx.sequence_name = this.id();
        this.state = 4381;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AS) {
            this.state = 4379;
            this.match(TSqlParser.AS);
            this.state = 4380;
            this.data_type();
        }

        this.state = 4386;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.START) {
            this.state = 4383;
            this.match(TSqlParser.START);
            this.state = 4384;
            this.match(TSqlParser.WITH);
            this.state = 4385;
            this.match(TSqlParser.DECIMAL);
        }

        this.state = 4394;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.INCREMENT) {
            this.state = 4388;
            this.match(TSqlParser.INCREMENT);
            this.state = 4389;
            this.match(TSqlParser.BY);
            this.state = 4391;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.MINUS) {
                this.state = 4390;
                this.match(TSqlParser.MINUS);
            }

            this.state = 4393;
            this.match(TSqlParser.DECIMAL);
        }

        this.state = 4402;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,487,this._ctx);
        if(la_===1) {
            this.state = 4396;
            this.match(TSqlParser.MINVALUE);
            this.state = 4398;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.DECIMAL) {
                this.state = 4397;
                this.match(TSqlParser.DECIMAL);
            }


        } else if(la_===2) {
            this.state = 4400;
            this.match(TSqlParser.NO);
            this.state = 4401;
            this.match(TSqlParser.MINVALUE);

        }
        this.state = 4410;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,489,this._ctx);
        if(la_===1) {
            this.state = 4404;
            this.match(TSqlParser.MAXVALUE);
            this.state = 4406;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.DECIMAL) {
                this.state = 4405;
                this.match(TSqlParser.DECIMAL);
            }


        } else if(la_===2) {
            this.state = 4408;
            this.match(TSqlParser.NO);
            this.state = 4409;
            this.match(TSqlParser.MAXVALUE);

        }
        this.state = 4415;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,490,this._ctx);
        if(la_===1) {
            this.state = 4412;
            this.match(TSqlParser.CYCLE);

        } else if(la_===2) {
            this.state = 4413;
            this.match(TSqlParser.NO);
            this.state = 4414;
            this.match(TSqlParser.CYCLE);

        }
        this.state = 4423;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case TSqlParser.CACHE:
        	this.state = 4417;
        	this.match(TSqlParser.CACHE);
        	this.state = 4419;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===TSqlParser.DECIMAL) {
        	    this.state = 4418;
        	    this.match(TSqlParser.DECIMAL);
        	}

        	break;
        case TSqlParser.NO:
        	this.state = 4421;
        	this.match(TSqlParser.NO);
        	this.state = 4422;
        	this.match(TSqlParser.CACHE);
        	break;
        case TSqlParser.EOF:
        case TSqlParser.ALTER:
        case TSqlParser.BACKUP:
        case TSqlParser.BEGIN:
        case TSqlParser.BREAK:
        case TSqlParser.CALLED:
        case TSqlParser.CLOSE:
        case TSqlParser.COMMIT:
        case TSqlParser.CONTINUE:
        case TSqlParser.CREATE:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.DBCC:
        case TSqlParser.DEALLOCATE:
        case TSqlParser.DECLARE:
        case TSqlParser.DELETE:
        case TSqlParser.DROP:
        case TSqlParser.ELSE:
        case TSqlParser.END:
        case TSqlParser.EVENTDATA:
        case TSqlParser.EXECUTE:
        case TSqlParser.FETCH:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.GET:
        case TSqlParser.GOTO:
        case TSqlParser.GRANT:
        case TSqlParser.IF:
        case TSqlParser.INSERT:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.MERGE:
        case TSqlParser.OFFSETS:
        case TSqlParser.OPEN:
        case TSqlParser.PAGE:
        case TSqlParser.PRINT:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAISERROR:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.REVERT:
        case TSqlParser.ROLLBACK:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SAVE:
        case TSqlParser.SELECT:
        case TSqlParser.SERVER:
        case TSqlParser.SET:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.TRUNCATE:
        case TSqlParser.UPDATE:
        case TSqlParser.USE:
        case TSqlParser.WAITFOR:
        case TSqlParser.WHILE:
        case TSqlParser.WITH:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENABLE:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GO:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SEND:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
        case TSqlParser.LR_BRACKET:
        case TSqlParser.SEMI:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_server_auditContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_server_audit;
    this.audit_name = null; // IdContext
    this.filepath = null; // Token
    this.max_rollover_files = null; // Token
    this.max_files = null; // Token
    this.queue_delay = null; // Token
    this.event_field_name = null; // IdContext
    this.new_audit_name = null; // IdContext
    return this;
}

Alter_server_auditContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_server_auditContext.prototype.constructor = Alter_server_auditContext;

Alter_server_auditContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_server_auditContext.prototype.SERVER = function() {
    return this.getToken(TSqlParser.SERVER, 0);
};

Alter_server_auditContext.prototype.AUDIT = function() {
    return this.getToken(TSqlParser.AUDIT, 0);
};

Alter_server_auditContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_server_auditContext.prototype.REMOVE = function() {
    return this.getToken(TSqlParser.REMOVE, 0);
};

Alter_server_auditContext.prototype.WHERE = function() {
    return this.getToken(TSqlParser.WHERE, 0);
};

Alter_server_auditContext.prototype.MODIFY = function() {
    return this.getToken(TSqlParser.MODIFY, 0);
};

Alter_server_auditContext.prototype.NAME = function() {
    return this.getToken(TSqlParser.NAME, 0);
};

Alter_server_auditContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Alter_server_auditContext.prototype.TO = function() {
    return this.getToken(TSqlParser.TO, 0);
};

Alter_server_auditContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_server_auditContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LR_BRACKET);
    } else {
        return this.getToken(TSqlParser.LR_BRACKET, i);
    }
};


Alter_server_auditContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RR_BRACKET);
    } else {
        return this.getToken(TSqlParser.RR_BRACKET, i);
    }
};


Alter_server_auditContext.prototype.FILE = function() {
    return this.getToken(TSqlParser.FILE, 0);
};

Alter_server_auditContext.prototype.APPLICATION_LOG = function() {
    return this.getToken(TSqlParser.APPLICATION_LOG, 0);
};

Alter_server_auditContext.prototype.SECURITY_LOG = function() {
    return this.getToken(TSqlParser.SECURITY_LOG, 0);
};

Alter_server_auditContext.prototype.QUEUE_DELAY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.QUEUE_DELAY);
    } else {
        return this.getToken(TSqlParser.QUEUE_DELAY, i);
    }
};


Alter_server_auditContext.prototype.ON_FAILURE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ON_FAILURE);
    } else {
        return this.getToken(TSqlParser.ON_FAILURE, i);
    }
};


Alter_server_auditContext.prototype.STATE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STATE);
    } else {
        return this.getToken(TSqlParser.STATE, i);
    }
};


Alter_server_auditContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Alter_server_auditContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Alter_server_auditContext.prototype.AND = function() {
    return this.getToken(TSqlParser.AND, 0);
};

Alter_server_auditContext.prototype.OR = function() {
    return this.getToken(TSqlParser.OR, 0);
};

Alter_server_auditContext.prototype.CONTINUE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.CONTINUE);
    } else {
        return this.getToken(TSqlParser.CONTINUE, i);
    }
};


Alter_server_auditContext.prototype.SHUTDOWN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SHUTDOWN);
    } else {
        return this.getToken(TSqlParser.SHUTDOWN, i);
    }
};


Alter_server_auditContext.prototype.FAIL_OPERATION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.FAIL_OPERATION);
    } else {
        return this.getToken(TSqlParser.FAIL_OPERATION, i);
    }
};


Alter_server_auditContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ON);
    } else {
        return this.getToken(TSqlParser.ON, i);
    }
};


Alter_server_auditContext.prototype.OFF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.OFF);
    } else {
        return this.getToken(TSqlParser.OFF, i);
    }
};


Alter_server_auditContext.prototype.GREATER = function() {
    return this.getToken(TSqlParser.GREATER, 0);
};

Alter_server_auditContext.prototype.LESS = function() {
    return this.getToken(TSqlParser.LESS, 0);
};

Alter_server_auditContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Alter_server_auditContext.prototype.NOT = function() {
    return this.getToken(TSqlParser.NOT, 0);
};

Alter_server_auditContext.prototype.EXCLAMATION = function() {
    return this.getToken(TSqlParser.EXCLAMATION, 0);
};

Alter_server_auditContext.prototype.FILEPATH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.FILEPATH);
    } else {
        return this.getToken(TSqlParser.FILEPATH, i);
    }
};


Alter_server_auditContext.prototype.MAXSIZE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MAXSIZE);
    } else {
        return this.getToken(TSqlParser.MAXSIZE, i);
    }
};


Alter_server_auditContext.prototype.MAX_ROLLOVER_FILES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MAX_ROLLOVER_FILES);
    } else {
        return this.getToken(TSqlParser.MAX_ROLLOVER_FILES, i);
    }
};


Alter_server_auditContext.prototype.MAX_FILES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MAX_FILES);
    } else {
        return this.getToken(TSqlParser.MAX_FILES, i);
    }
};


Alter_server_auditContext.prototype.RESERVE_DISK_SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RESERVE_DISK_SPACE);
    } else {
        return this.getToken(TSqlParser.RESERVE_DISK_SPACE, i);
    }
};


Alter_server_auditContext.prototype.UNLIMITED = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.UNLIMITED);
    } else {
        return this.getToken(TSqlParser.UNLIMITED, i);
    }
};


Alter_server_auditContext.prototype.MB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MB);
    } else {
        return this.getToken(TSqlParser.MB, i);
    }
};


Alter_server_auditContext.prototype.GB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.GB);
    } else {
        return this.getToken(TSqlParser.GB, i);
    }
};


Alter_server_auditContext.prototype.TB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.TB);
    } else {
        return this.getToken(TSqlParser.TB, i);
    }
};


Alter_server_auditContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_server_audit(this);
	}
};

Alter_server_auditContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_server_audit(this);
	}
};




TSqlParser.Alter_server_auditContext = Alter_server_auditContext;

TSqlParser.prototype.alter_server_audit = function() {

    var localctx = new Alter_server_auditContext(this, this._ctx, this.state);
    this.enterRule(localctx, 368, TSqlParser.RULE_alter_server_audit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4425;
        this.match(TSqlParser.ALTER);
        this.state = 4426;
        this.match(TSqlParser.SERVER);
        this.state = 4427;
        this.match(TSqlParser.AUDIT);
        this.state = 4428;
        localctx.audit_name = this.id();
        this.state = 4560;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,517,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4476;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.TO) {
                this.state = 4429;
                this.match(TSqlParser.TO);
                this.state = 4474;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.FILE:
                    this.state = 4430;
                    this.match(TSqlParser.FILE);

                    this.state = 4431;
                    this.match(TSqlParser.LR_BRACKET);
                    this.state = 4468;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===TSqlParser.FILEPATH || ((((_la - 572)) & ~0x1f) == 0 && ((1 << (_la - 572)) & ((1 << (TSqlParser.MAX_FILES - 572)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 572)) | (1 << (TSqlParser.MAXSIZE - 572)))) !== 0) || _la===TSqlParser.RESERVE_DISK_SPACE || _la===TSqlParser.COMMA) {
                        this.state = 4466;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input,499,this._ctx);
                        switch(la_) {
                        case 1:
                            this.state = 4433;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(_la===TSqlParser.COMMA) {
                                this.state = 4432;
                                this.match(TSqlParser.COMMA);
                            }

                            this.state = 4435;
                            this.match(TSqlParser.FILEPATH);
                            this.state = 4436;
                            this.match(TSqlParser.EQUAL);
                            this.state = 4437;
                            localctx.filepath = this.match(TSqlParser.STRING);
                            break;

                        case 2:
                            this.state = 4439;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(_la===TSqlParser.COMMA) {
                                this.state = 4438;
                                this.match(TSqlParser.COMMA);
                            }

                            this.state = 4441;
                            this.match(TSqlParser.MAXSIZE);
                            this.state = 4442;
                            this.match(TSqlParser.EQUAL);
                            this.state = 4446;
                            this._errHandler.sync(this);
                            switch(this._input.LA(1)) {
                            case TSqlParser.DECIMAL:
                                this.state = 4443;
                                this.match(TSqlParser.DECIMAL);
                                this.state = 4444;
                                _la = this._input.LA(1);
                                if(!(_la===TSqlParser.GB || _la===TSqlParser.MB || _la===TSqlParser.TB)) {
                                this._errHandler.recoverInline(this);
                                }
                                else {
                                	this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                                break;
                            case TSqlParser.UNLIMITED:
                                this.state = 4445;
                                this.match(TSqlParser.UNLIMITED);
                                break;
                            default:
                                throw new antlr4.error.NoViableAltException(this);
                            }
                            break;

                        case 3:
                            this.state = 4449;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(_la===TSqlParser.COMMA) {
                                this.state = 4448;
                                this.match(TSqlParser.COMMA);
                            }

                            this.state = 4451;
                            this.match(TSqlParser.MAX_ROLLOVER_FILES);
                            this.state = 4452;
                            this.match(TSqlParser.EQUAL);
                            this.state = 4453;
                            localctx.max_rollover_files = this._input.LT(1);
                            _la = this._input.LA(1);
                            if(!(_la===TSqlParser.UNLIMITED || _la===TSqlParser.DECIMAL)) {
                                localctx.max_rollover_files = this._errHandler.recoverInline(this);
                            }
                            else {
                            	this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            break;

                        case 4:
                            this.state = 4455;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(_la===TSqlParser.COMMA) {
                                this.state = 4454;
                                this.match(TSqlParser.COMMA);
                            }

                            this.state = 4457;
                            this.match(TSqlParser.MAX_FILES);
                            this.state = 4458;
                            this.match(TSqlParser.EQUAL);
                            this.state = 4459;
                            localctx.max_files = this.match(TSqlParser.DECIMAL);
                            break;

                        case 5:
                            this.state = 4461;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(_la===TSqlParser.COMMA) {
                                this.state = 4460;
                                this.match(TSqlParser.COMMA);
                            }

                            this.state = 4463;
                            this.match(TSqlParser.RESERVE_DISK_SPACE);
                            this.state = 4464;
                            this.match(TSqlParser.EQUAL);
                            this.state = 4465;
                            _la = this._input.LA(1);
                            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                            this._errHandler.recoverInline(this);
                            }
                            else {
                            	this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            break;

                        }
                        this.state = 4470;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 4471;
                    this.match(TSqlParser.RR_BRACKET);
                    break;
                case TSqlParser.APPLICATION_LOG:
                    this.state = 4472;
                    this.match(TSqlParser.APPLICATION_LOG);
                    break;
                case TSqlParser.SECURITY_LOG:
                    this.state = 4473;
                    this.match(TSqlParser.SECURITY_LOG);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
            }

            this.state = 4504;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,508,this._ctx);
            if(la_===1) {
                this.state = 4478;
                this.match(TSqlParser.WITH);
                this.state = 4479;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 4500;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===TSqlParser.ON_FAILURE || _la===TSqlParser.STATE || _la===TSqlParser.QUEUE_DELAY || _la===TSqlParser.COMMA) {
                    this.state = 4498;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,506,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 4481;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 4480;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 4483;
                        this.match(TSqlParser.QUEUE_DELAY);
                        this.state = 4484;
                        this.match(TSqlParser.EQUAL);
                        this.state = 4485;
                        localctx.queue_delay = this.match(TSqlParser.DECIMAL);
                        break;

                    case 2:
                        this.state = 4487;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 4486;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 4489;
                        this.match(TSqlParser.ON_FAILURE);
                        this.state = 4490;
                        this.match(TSqlParser.EQUAL);
                        this.state = 4491;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.CONTINUE || _la===TSqlParser.SHUTDOWN || _la===TSqlParser.FAIL_OPERATION)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 3:
                        this.state = 4493;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 4492;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 4495;
                        this.match(TSqlParser.STATE);
                        this.state = 4496;
                        this.match(TSqlParser.EQUAL);
                        this.state = 4497;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    }
                    this.state = 4502;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 4503;
                this.match(TSqlParser.RR_BRACKET);

            }
            this.state = 4552;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.WHERE) {
                this.state = 4506;
                this.match(TSqlParser.WHERE);
                this.state = 4550;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,515,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 4508;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 4507;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 4511;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.NOT) {
                        this.state = 4510;
                        this.match(TSqlParser.NOT);
                    }

                    this.state = 4513;
                    localctx.event_field_name = this.id();
                    this.state = 4525;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,511,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 4514;
                        this.match(TSqlParser.EQUAL);
                        break;

                    case 2:
                        this.state = 4515;
                        this.match(TSqlParser.LESS);
                        this.state = 4516;
                        this.match(TSqlParser.GREATER);
                        break;

                    case 3:
                        this.state = 4517;
                        this.match(TSqlParser.EXCLAMATION);
                        this.state = 4518;
                        this.match(TSqlParser.EQUAL);
                        break;

                    case 4:
                        this.state = 4519;
                        this.match(TSqlParser.GREATER);
                        break;

                    case 5:
                        this.state = 4520;
                        this.match(TSqlParser.GREATER);
                        this.state = 4521;
                        this.match(TSqlParser.EQUAL);
                        break;

                    case 6:
                        this.state = 4522;
                        this.match(TSqlParser.LESS);
                        break;

                    case 7:
                        this.state = 4523;
                        this.match(TSqlParser.LESS);
                        this.state = 4524;
                        this.match(TSqlParser.EQUAL);
                        break;

                    }
                    this.state = 4527;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.DECIMAL || _la===TSqlParser.STRING)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                case 2:
                    this.state = 4530;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 4529;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 4532;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.AND || _la===TSqlParser.OR)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 4534;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.NOT) {
                        this.state = 4533;
                        this.match(TSqlParser.NOT);
                    }

                    this.state = 4547;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,514,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 4536;
                        this.match(TSqlParser.EQUAL);
                        break;

                    case 2:
                        this.state = 4537;
                        this.match(TSqlParser.LESS);
                        this.state = 4538;
                        this.match(TSqlParser.GREATER);
                        break;

                    case 3:
                        this.state = 4539;
                        this.match(TSqlParser.EXCLAMATION);
                        this.state = 4540;
                        this.match(TSqlParser.EQUAL);
                        break;

                    case 4:
                        this.state = 4541;
                        this.match(TSqlParser.GREATER);
                        break;

                    case 5:
                        this.state = 4542;
                        this.match(TSqlParser.GREATER);
                        this.state = 4543;
                        this.match(TSqlParser.EQUAL);
                        break;

                    case 6:
                        this.state = 4544;
                        this.match(TSqlParser.LESS);
                        break;

                    case 7:
                        this.state = 4545;
                        this.match(TSqlParser.LESS);
                        this.state = 4546;
                        this.match(TSqlParser.EQUAL);
                        break;

                    }
                    this.state = 4549;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.DECIMAL || _la===TSqlParser.STRING)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                }
            }

            break;

        case 2:
            this.state = 4554;
            this.match(TSqlParser.REMOVE);
            this.state = 4555;
            this.match(TSqlParser.WHERE);
            break;

        case 3:
            this.state = 4556;
            this.match(TSqlParser.MODIFY);
            this.state = 4557;
            this.match(TSqlParser.NAME);
            this.state = 4558;
            this.match(TSqlParser.EQUAL);
            this.state = 4559;
            localctx.new_audit_name = this.id();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_server_auditContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_server_audit;
    this.audit_name = null; // IdContext
    this.filepath = null; // Token
    this.max_rollover_files = null; // Token
    this.max_files = null; // Token
    this.queue_delay = null; // Token
    this.audit_guid = null; // IdContext
    this.event_field_name = null; // IdContext
    this.new_audit_name = null; // IdContext
    return this;
}

Create_server_auditContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_server_auditContext.prototype.constructor = Create_server_auditContext;

Create_server_auditContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_server_auditContext.prototype.SERVER = function() {
    return this.getToken(TSqlParser.SERVER, 0);
};

Create_server_auditContext.prototype.AUDIT = function() {
    return this.getToken(TSqlParser.AUDIT, 0);
};

Create_server_auditContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_server_auditContext.prototype.REMOVE = function() {
    return this.getToken(TSqlParser.REMOVE, 0);
};

Create_server_auditContext.prototype.WHERE = function() {
    return this.getToken(TSqlParser.WHERE, 0);
};

Create_server_auditContext.prototype.MODIFY = function() {
    return this.getToken(TSqlParser.MODIFY, 0);
};

Create_server_auditContext.prototype.NAME = function() {
    return this.getToken(TSqlParser.NAME, 0);
};

Create_server_auditContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Create_server_auditContext.prototype.TO = function() {
    return this.getToken(TSqlParser.TO, 0);
};

Create_server_auditContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_server_auditContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LR_BRACKET);
    } else {
        return this.getToken(TSqlParser.LR_BRACKET, i);
    }
};


Create_server_auditContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RR_BRACKET);
    } else {
        return this.getToken(TSqlParser.RR_BRACKET, i);
    }
};


Create_server_auditContext.prototype.FILE = function() {
    return this.getToken(TSqlParser.FILE, 0);
};

Create_server_auditContext.prototype.APPLICATION_LOG = function() {
    return this.getToken(TSqlParser.APPLICATION_LOG, 0);
};

Create_server_auditContext.prototype.SECURITY_LOG = function() {
    return this.getToken(TSqlParser.SECURITY_LOG, 0);
};

Create_server_auditContext.prototype.QUEUE_DELAY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.QUEUE_DELAY);
    } else {
        return this.getToken(TSqlParser.QUEUE_DELAY, i);
    }
};


Create_server_auditContext.prototype.ON_FAILURE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ON_FAILURE);
    } else {
        return this.getToken(TSqlParser.ON_FAILURE, i);
    }
};


Create_server_auditContext.prototype.STATE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STATE);
    } else {
        return this.getToken(TSqlParser.STATE, i);
    }
};


Create_server_auditContext.prototype.AUDIT_GUID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.AUDIT_GUID);
    } else {
        return this.getToken(TSqlParser.AUDIT_GUID, i);
    }
};


Create_server_auditContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Create_server_auditContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Create_server_auditContext.prototype.AND = function() {
    return this.getToken(TSqlParser.AND, 0);
};

Create_server_auditContext.prototype.OR = function() {
    return this.getToken(TSqlParser.OR, 0);
};

Create_server_auditContext.prototype.CONTINUE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.CONTINUE);
    } else {
        return this.getToken(TSqlParser.CONTINUE, i);
    }
};


Create_server_auditContext.prototype.SHUTDOWN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SHUTDOWN);
    } else {
        return this.getToken(TSqlParser.SHUTDOWN, i);
    }
};


Create_server_auditContext.prototype.FAIL_OPERATION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.FAIL_OPERATION);
    } else {
        return this.getToken(TSqlParser.FAIL_OPERATION, i);
    }
};


Create_server_auditContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ON);
    } else {
        return this.getToken(TSqlParser.ON, i);
    }
};


Create_server_auditContext.prototype.OFF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.OFF);
    } else {
        return this.getToken(TSqlParser.OFF, i);
    }
};


Create_server_auditContext.prototype.GREATER = function() {
    return this.getToken(TSqlParser.GREATER, 0);
};

Create_server_auditContext.prototype.LESS = function() {
    return this.getToken(TSqlParser.LESS, 0);
};

Create_server_auditContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Create_server_auditContext.prototype.NOT = function() {
    return this.getToken(TSqlParser.NOT, 0);
};

Create_server_auditContext.prototype.EXCLAMATION = function() {
    return this.getToken(TSqlParser.EXCLAMATION, 0);
};

Create_server_auditContext.prototype.FILEPATH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.FILEPATH);
    } else {
        return this.getToken(TSqlParser.FILEPATH, i);
    }
};


Create_server_auditContext.prototype.MAXSIZE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MAXSIZE);
    } else {
        return this.getToken(TSqlParser.MAXSIZE, i);
    }
};


Create_server_auditContext.prototype.MAX_ROLLOVER_FILES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MAX_ROLLOVER_FILES);
    } else {
        return this.getToken(TSqlParser.MAX_ROLLOVER_FILES, i);
    }
};


Create_server_auditContext.prototype.MAX_FILES = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MAX_FILES);
    } else {
        return this.getToken(TSqlParser.MAX_FILES, i);
    }
};


Create_server_auditContext.prototype.RESERVE_DISK_SPACE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RESERVE_DISK_SPACE);
    } else {
        return this.getToken(TSqlParser.RESERVE_DISK_SPACE, i);
    }
};


Create_server_auditContext.prototype.UNLIMITED = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.UNLIMITED);
    } else {
        return this.getToken(TSqlParser.UNLIMITED, i);
    }
};


Create_server_auditContext.prototype.MB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MB);
    } else {
        return this.getToken(TSqlParser.MB, i);
    }
};


Create_server_auditContext.prototype.GB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.GB);
    } else {
        return this.getToken(TSqlParser.GB, i);
    }
};


Create_server_auditContext.prototype.TB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.TB);
    } else {
        return this.getToken(TSqlParser.TB, i);
    }
};


Create_server_auditContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_server_audit(this);
	}
};

Create_server_auditContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_server_audit(this);
	}
};




TSqlParser.Create_server_auditContext = Create_server_auditContext;

TSqlParser.prototype.create_server_audit = function() {

    var localctx = new Create_server_auditContext(this, this._ctx, this.state);
    this.enterRule(localctx, 370, TSqlParser.RULE_create_server_audit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4562;
        this.match(TSqlParser.CREATE);
        this.state = 4563;
        this.match(TSqlParser.SERVER);
        this.state = 4564;
        this.match(TSqlParser.AUDIT);
        this.state = 4565;
        localctx.audit_name = this.id();
        this.state = 4703;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,543,this._ctx);
        switch(la_) {
        case 1:
            this.state = 4613;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.TO) {
                this.state = 4566;
                this.match(TSqlParser.TO);
                this.state = 4611;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.FILE:
                    this.state = 4567;
                    this.match(TSqlParser.FILE);

                    this.state = 4568;
                    this.match(TSqlParser.LR_BRACKET);
                    this.state = 4605;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===TSqlParser.FILEPATH || ((((_la - 572)) & ~0x1f) == 0 && ((1 << (_la - 572)) & ((1 << (TSqlParser.MAX_FILES - 572)) | (1 << (TSqlParser.MAX_ROLLOVER_FILES - 572)) | (1 << (TSqlParser.MAXSIZE - 572)))) !== 0) || _la===TSqlParser.RESERVE_DISK_SPACE || _la===TSqlParser.COMMA) {
                        this.state = 4603;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input,524,this._ctx);
                        switch(la_) {
                        case 1:
                            this.state = 4570;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(_la===TSqlParser.COMMA) {
                                this.state = 4569;
                                this.match(TSqlParser.COMMA);
                            }

                            this.state = 4572;
                            this.match(TSqlParser.FILEPATH);
                            this.state = 4573;
                            this.match(TSqlParser.EQUAL);
                            this.state = 4574;
                            localctx.filepath = this.match(TSqlParser.STRING);
                            break;

                        case 2:
                            this.state = 4576;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(_la===TSqlParser.COMMA) {
                                this.state = 4575;
                                this.match(TSqlParser.COMMA);
                            }

                            this.state = 4578;
                            this.match(TSqlParser.MAXSIZE);
                            this.state = 4579;
                            this.match(TSqlParser.EQUAL);
                            this.state = 4583;
                            this._errHandler.sync(this);
                            switch(this._input.LA(1)) {
                            case TSqlParser.DECIMAL:
                                this.state = 4580;
                                this.match(TSqlParser.DECIMAL);
                                this.state = 4581;
                                _la = this._input.LA(1);
                                if(!(_la===TSqlParser.GB || _la===TSqlParser.MB || _la===TSqlParser.TB)) {
                                this._errHandler.recoverInline(this);
                                }
                                else {
                                	this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                                break;
                            case TSqlParser.UNLIMITED:
                                this.state = 4582;
                                this.match(TSqlParser.UNLIMITED);
                                break;
                            default:
                                throw new antlr4.error.NoViableAltException(this);
                            }
                            break;

                        case 3:
                            this.state = 4586;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(_la===TSqlParser.COMMA) {
                                this.state = 4585;
                                this.match(TSqlParser.COMMA);
                            }

                            this.state = 4588;
                            this.match(TSqlParser.MAX_ROLLOVER_FILES);
                            this.state = 4589;
                            this.match(TSqlParser.EQUAL);
                            this.state = 4590;
                            localctx.max_rollover_files = this._input.LT(1);
                            _la = this._input.LA(1);
                            if(!(_la===TSqlParser.UNLIMITED || _la===TSqlParser.DECIMAL)) {
                                localctx.max_rollover_files = this._errHandler.recoverInline(this);
                            }
                            else {
                            	this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            break;

                        case 4:
                            this.state = 4592;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(_la===TSqlParser.COMMA) {
                                this.state = 4591;
                                this.match(TSqlParser.COMMA);
                            }

                            this.state = 4594;
                            this.match(TSqlParser.MAX_FILES);
                            this.state = 4595;
                            this.match(TSqlParser.EQUAL);
                            this.state = 4596;
                            localctx.max_files = this.match(TSqlParser.DECIMAL);
                            break;

                        case 5:
                            this.state = 4598;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(_la===TSqlParser.COMMA) {
                                this.state = 4597;
                                this.match(TSqlParser.COMMA);
                            }

                            this.state = 4600;
                            this.match(TSqlParser.RESERVE_DISK_SPACE);
                            this.state = 4601;
                            this.match(TSqlParser.EQUAL);
                            this.state = 4602;
                            _la = this._input.LA(1);
                            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                            this._errHandler.recoverInline(this);
                            }
                            else {
                            	this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            break;

                        }
                        this.state = 4607;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 4608;
                    this.match(TSqlParser.RR_BRACKET);
                    break;
                case TSqlParser.APPLICATION_LOG:
                    this.state = 4609;
                    this.match(TSqlParser.APPLICATION_LOG);
                    break;
                case TSqlParser.SECURITY_LOG:
                    this.state = 4610;
                    this.match(TSqlParser.SECURITY_LOG);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
            }

            this.state = 4647;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,534,this._ctx);
            if(la_===1) {
                this.state = 4615;
                this.match(TSqlParser.WITH);
                this.state = 4616;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 4643;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===TSqlParser.ON_FAILURE || _la===TSqlParser.STATE || _la===TSqlParser.AUDIT_GUID || _la===TSqlParser.QUEUE_DELAY || _la===TSqlParser.COMMA) {
                    this.state = 4641;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,532,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 4618;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 4617;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 4620;
                        this.match(TSqlParser.QUEUE_DELAY);
                        this.state = 4621;
                        this.match(TSqlParser.EQUAL);
                        this.state = 4622;
                        localctx.queue_delay = this.match(TSqlParser.DECIMAL);
                        break;

                    case 2:
                        this.state = 4624;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 4623;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 4626;
                        this.match(TSqlParser.ON_FAILURE);
                        this.state = 4627;
                        this.match(TSqlParser.EQUAL);
                        this.state = 4628;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.CONTINUE || _la===TSqlParser.SHUTDOWN || _la===TSqlParser.FAIL_OPERATION)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 3:
                        this.state = 4630;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 4629;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 4632;
                        this.match(TSqlParser.STATE);
                        this.state = 4633;
                        this.match(TSqlParser.EQUAL);
                        this.state = 4634;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 4:
                        this.state = 4636;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 4635;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 4638;
                        this.match(TSqlParser.AUDIT_GUID);
                        this.state = 4639;
                        this.match(TSqlParser.EQUAL);
                        this.state = 4640;
                        localctx.audit_guid = this.id();
                        break;

                    }
                    this.state = 4645;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 4646;
                this.match(TSqlParser.RR_BRACKET);

            }
            this.state = 4695;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.WHERE) {
                this.state = 4649;
                this.match(TSqlParser.WHERE);
                this.state = 4693;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,541,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 4651;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 4650;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 4654;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.NOT) {
                        this.state = 4653;
                        this.match(TSqlParser.NOT);
                    }

                    this.state = 4656;
                    localctx.event_field_name = this.id();
                    this.state = 4668;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,537,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 4657;
                        this.match(TSqlParser.EQUAL);
                        break;

                    case 2:
                        this.state = 4658;
                        this.match(TSqlParser.LESS);
                        this.state = 4659;
                        this.match(TSqlParser.GREATER);
                        break;

                    case 3:
                        this.state = 4660;
                        this.match(TSqlParser.EXCLAMATION);
                        this.state = 4661;
                        this.match(TSqlParser.EQUAL);
                        break;

                    case 4:
                        this.state = 4662;
                        this.match(TSqlParser.GREATER);
                        break;

                    case 5:
                        this.state = 4663;
                        this.match(TSqlParser.GREATER);
                        this.state = 4664;
                        this.match(TSqlParser.EQUAL);
                        break;

                    case 6:
                        this.state = 4665;
                        this.match(TSqlParser.LESS);
                        break;

                    case 7:
                        this.state = 4666;
                        this.match(TSqlParser.LESS);
                        this.state = 4667;
                        this.match(TSqlParser.EQUAL);
                        break;

                    }
                    this.state = 4670;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.DECIMAL || _la===TSqlParser.STRING)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                case 2:
                    this.state = 4673;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 4672;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 4675;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.AND || _la===TSqlParser.OR)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 4677;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.NOT) {
                        this.state = 4676;
                        this.match(TSqlParser.NOT);
                    }

                    this.state = 4690;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,540,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 4679;
                        this.match(TSqlParser.EQUAL);
                        break;

                    case 2:
                        this.state = 4680;
                        this.match(TSqlParser.LESS);
                        this.state = 4681;
                        this.match(TSqlParser.GREATER);
                        break;

                    case 3:
                        this.state = 4682;
                        this.match(TSqlParser.EXCLAMATION);
                        this.state = 4683;
                        this.match(TSqlParser.EQUAL);
                        break;

                    case 4:
                        this.state = 4684;
                        this.match(TSqlParser.GREATER);
                        break;

                    case 5:
                        this.state = 4685;
                        this.match(TSqlParser.GREATER);
                        this.state = 4686;
                        this.match(TSqlParser.EQUAL);
                        break;

                    case 6:
                        this.state = 4687;
                        this.match(TSqlParser.LESS);
                        break;

                    case 7:
                        this.state = 4688;
                        this.match(TSqlParser.LESS);
                        this.state = 4689;
                        this.match(TSqlParser.EQUAL);
                        break;

                    }
                    this.state = 4692;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.DECIMAL || _la===TSqlParser.STRING)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                }
            }

            break;

        case 2:
            this.state = 4697;
            this.match(TSqlParser.REMOVE);
            this.state = 4698;
            this.match(TSqlParser.WHERE);
            break;

        case 3:
            this.state = 4699;
            this.match(TSqlParser.MODIFY);
            this.state = 4700;
            this.match(TSqlParser.NAME);
            this.state = 4701;
            this.match(TSqlParser.EQUAL);
            this.state = 4702;
            localctx.new_audit_name = this.id();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_server_audit_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_server_audit_specification;
    this.audit_specification_name = null; // IdContext
    this.audit_name = null; // IdContext
    this.audit_action_group_name = null; // IdContext
    return this;
}

Alter_server_audit_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_server_audit_specificationContext.prototype.constructor = Alter_server_audit_specificationContext;

Alter_server_audit_specificationContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_server_audit_specificationContext.prototype.SERVER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SERVER);
    } else {
        return this.getToken(TSqlParser.SERVER, i);
    }
};


Alter_server_audit_specificationContext.prototype.AUDIT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.AUDIT);
    } else {
        return this.getToken(TSqlParser.AUDIT, i);
    }
};


Alter_server_audit_specificationContext.prototype.SPECIFICATION = function() {
    return this.getToken(TSqlParser.SPECIFICATION, 0);
};

Alter_server_audit_specificationContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_server_audit_specificationContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Alter_server_audit_specificationContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LR_BRACKET);
    } else {
        return this.getToken(TSqlParser.LR_BRACKET, i);
    }
};


Alter_server_audit_specificationContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RR_BRACKET);
    } else {
        return this.getToken(TSqlParser.RR_BRACKET, i);
    }
};


Alter_server_audit_specificationContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_server_audit_specificationContext.prototype.STATE = function() {
    return this.getToken(TSqlParser.STATE, 0);
};

Alter_server_audit_specificationContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Alter_server_audit_specificationContext.prototype.ADD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ADD);
    } else {
        return this.getToken(TSqlParser.ADD, i);
    }
};


Alter_server_audit_specificationContext.prototype.DROP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DROP);
    } else {
        return this.getToken(TSqlParser.DROP, i);
    }
};


Alter_server_audit_specificationContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Alter_server_audit_specificationContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Alter_server_audit_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_server_audit_specification(this);
	}
};

Alter_server_audit_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_server_audit_specification(this);
	}
};




TSqlParser.Alter_server_audit_specificationContext = Alter_server_audit_specificationContext;

TSqlParser.prototype.alter_server_audit_specification = function() {

    var localctx = new Alter_server_audit_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 372, TSqlParser.RULE_alter_server_audit_specification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4705;
        this.match(TSqlParser.ALTER);
        this.state = 4706;
        this.match(TSqlParser.SERVER);
        this.state = 4707;
        this.match(TSqlParser.AUDIT);
        this.state = 4708;
        this.match(TSqlParser.SPECIFICATION);
        this.state = 4709;
        localctx.audit_specification_name = this.id();
        this.state = 4714;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.FOR) {
            this.state = 4710;
            this.match(TSqlParser.FOR);
            this.state = 4711;
            this.match(TSqlParser.SERVER);
            this.state = 4712;
            this.match(TSqlParser.AUDIT);
            this.state = 4713;
            localctx.audit_name = this.id();
        }

        this.state = 4723;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,545,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 4716;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.ADD || _la===TSqlParser.DROP)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4717;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 4718;
                localctx.audit_action_group_name = this.id();
                this.state = 4719;
                this.match(TSqlParser.RR_BRACKET); 
            }
            this.state = 4725;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,545,this._ctx);
        }

        this.state = 4732;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,546,this._ctx);
        if(la_===1) {
            this.state = 4726;
            this.match(TSqlParser.WITH);
            this.state = 4727;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 4728;
            this.match(TSqlParser.STATE);
            this.state = 4729;
            this.match(TSqlParser.EQUAL);
            this.state = 4730;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4731;
            this.match(TSqlParser.RR_BRACKET);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_server_audit_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_server_audit_specification;
    this.audit_specification_name = null; // IdContext
    this.audit_name = null; // IdContext
    this.audit_action_group_name = null; // IdContext
    return this;
}

Create_server_audit_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_server_audit_specificationContext.prototype.constructor = Create_server_audit_specificationContext;

Create_server_audit_specificationContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_server_audit_specificationContext.prototype.SERVER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SERVER);
    } else {
        return this.getToken(TSqlParser.SERVER, i);
    }
};


Create_server_audit_specificationContext.prototype.AUDIT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.AUDIT);
    } else {
        return this.getToken(TSqlParser.AUDIT, i);
    }
};


Create_server_audit_specificationContext.prototype.SPECIFICATION = function() {
    return this.getToken(TSqlParser.SPECIFICATION, 0);
};

Create_server_audit_specificationContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_server_audit_specificationContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Create_server_audit_specificationContext.prototype.ADD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ADD);
    } else {
        return this.getToken(TSqlParser.ADD, i);
    }
};


Create_server_audit_specificationContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LR_BRACKET);
    } else {
        return this.getToken(TSqlParser.LR_BRACKET, i);
    }
};


Create_server_audit_specificationContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RR_BRACKET);
    } else {
        return this.getToken(TSqlParser.RR_BRACKET, i);
    }
};


Create_server_audit_specificationContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_server_audit_specificationContext.prototype.STATE = function() {
    return this.getToken(TSqlParser.STATE, 0);
};

Create_server_audit_specificationContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Create_server_audit_specificationContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Create_server_audit_specificationContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Create_server_audit_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_server_audit_specification(this);
	}
};

Create_server_audit_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_server_audit_specification(this);
	}
};




TSqlParser.Create_server_audit_specificationContext = Create_server_audit_specificationContext;

TSqlParser.prototype.create_server_audit_specification = function() {

    var localctx = new Create_server_audit_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 374, TSqlParser.RULE_create_server_audit_specification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4734;
        this.match(TSqlParser.CREATE);
        this.state = 4735;
        this.match(TSqlParser.SERVER);
        this.state = 4736;
        this.match(TSqlParser.AUDIT);
        this.state = 4737;
        this.match(TSqlParser.SPECIFICATION);
        this.state = 4738;
        localctx.audit_specification_name = this.id();
        this.state = 4743;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.FOR) {
            this.state = 4739;
            this.match(TSqlParser.FOR);
            this.state = 4740;
            this.match(TSqlParser.SERVER);
            this.state = 4741;
            this.match(TSqlParser.AUDIT);
            this.state = 4742;
            localctx.audit_name = this.id();
        }

        this.state = 4752;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.ADD) {
            this.state = 4745;
            this.match(TSqlParser.ADD);
            this.state = 4746;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 4747;
            localctx.audit_action_group_name = this.id();
            this.state = 4748;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 4754;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 4761;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,549,this._ctx);
        if(la_===1) {
            this.state = 4755;
            this.match(TSqlParser.WITH);
            this.state = 4756;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 4757;
            this.match(TSqlParser.STATE);
            this.state = 4758;
            this.match(TSqlParser.EQUAL);
            this.state = 4759;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4760;
            this.match(TSqlParser.RR_BRACKET);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_server_configurationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_server_configuration;
    return this;
}

Alter_server_configurationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_server_configurationContext.prototype.constructor = Alter_server_configurationContext;

Alter_server_configurationContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_server_configurationContext.prototype.SERVER = function() {
    return this.getToken(TSqlParser.SERVER, 0);
};

Alter_server_configurationContext.prototype.CONFIGURATION = function() {
    return this.getToken(TSqlParser.CONFIGURATION, 0);
};

Alter_server_configurationContext.prototype.SET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SET);
    } else {
        return this.getToken(TSqlParser.SET, i);
    }
};


Alter_server_configurationContext.prototype.PROCESS = function() {
    return this.getToken(TSqlParser.PROCESS, 0);
};

Alter_server_configurationContext.prototype.AFFINITY = function() {
    return this.getToken(TSqlParser.AFFINITY, 0);
};

Alter_server_configurationContext.prototype.DIAGNOSTICS = function() {
    return this.getToken(TSqlParser.DIAGNOSTICS, 0);
};

Alter_server_configurationContext.prototype.LOG = function() {
    return this.getToken(TSqlParser.LOG, 0);
};

Alter_server_configurationContext.prototype.FAILOVER = function() {
    return this.getToken(TSqlParser.FAILOVER, 0);
};

Alter_server_configurationContext.prototype.CLUSTER = function() {
    return this.getToken(TSqlParser.CLUSTER, 0);
};

Alter_server_configurationContext.prototype.PROPERTY = function() {
    return this.getToken(TSqlParser.PROPERTY, 0);
};

Alter_server_configurationContext.prototype.HADR = function() {
    return this.getToken(TSqlParser.HADR, 0);
};

Alter_server_configurationContext.prototype.CONTEXT = function() {
    return this.getToken(TSqlParser.CONTEXT, 0);
};

Alter_server_configurationContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Alter_server_configurationContext.prototype.BUFFER = function() {
    return this.getToken(TSqlParser.BUFFER, 0);
};

Alter_server_configurationContext.prototype.POOL = function() {
    return this.getToken(TSqlParser.POOL, 0);
};

Alter_server_configurationContext.prototype.EXTENSION = function() {
    return this.getToken(TSqlParser.EXTENSION, 0);
};

Alter_server_configurationContext.prototype.SOFTNUMA = function() {
    return this.getToken(TSqlParser.SOFTNUMA, 0);
};

Alter_server_configurationContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Alter_server_configurationContext.prototype.LOCAL = function() {
    return this.getToken(TSqlParser.LOCAL, 0);
};

Alter_server_configurationContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Alter_server_configurationContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Alter_server_configurationContext.prototype.CPU = function() {
    return this.getToken(TSqlParser.CPU, 0);
};

Alter_server_configurationContext.prototype.NUMANODE = function() {
    return this.getToken(TSqlParser.NUMANODE, 0);
};

Alter_server_configurationContext.prototype.PATH = function() {
    return this.getToken(TSqlParser.PATH, 0);
};

Alter_server_configurationContext.prototype.MAX_SIZE = function() {
    return this.getToken(TSqlParser.MAX_SIZE, 0);
};

Alter_server_configurationContext.prototype.MAX_FILES = function() {
    return this.getToken(TSqlParser.MAX_FILES, 0);
};

Alter_server_configurationContext.prototype.VERBOSELOGGING = function() {
    return this.getToken(TSqlParser.VERBOSELOGGING, 0);
};

Alter_server_configurationContext.prototype.SQLDUMPERFLAGS = function() {
    return this.getToken(TSqlParser.SQLDUMPERFLAGS, 0);
};

Alter_server_configurationContext.prototype.SQLDUMPERPATH = function() {
    return this.getToken(TSqlParser.SQLDUMPERPATH, 0);
};

Alter_server_configurationContext.prototype.SQLDUMPERTIMEOUT = function() {
    return this.getToken(TSqlParser.SQLDUMPERTIMEOUT, 0);
};

Alter_server_configurationContext.prototype.FAILURECONDITIONLEVEL = function() {
    return this.getToken(TSqlParser.FAILURECONDITIONLEVEL, 0);
};

Alter_server_configurationContext.prototype.HEALTHCHECKTIMEOUT = function() {
    return this.getToken(TSqlParser.HEALTHCHECKTIMEOUT, 0);
};

Alter_server_configurationContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Alter_server_configurationContext.prototype.FILENAME = function() {
    return this.getToken(TSqlParser.FILENAME, 0);
};

Alter_server_configurationContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Alter_server_configurationContext.prototype.SIZE = function() {
    return this.getToken(TSqlParser.SIZE, 0);
};

Alter_server_configurationContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Alter_server_configurationContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Alter_server_configurationContext.prototype.DEFAULT = function() {
    return this.getToken(TSqlParser.DEFAULT, 0);
};

Alter_server_configurationContext.prototype.KB = function() {
    return this.getToken(TSqlParser.KB, 0);
};

Alter_server_configurationContext.prototype.MB = function() {
    return this.getToken(TSqlParser.MB, 0);
};

Alter_server_configurationContext.prototype.GB = function() {
    return this.getToken(TSqlParser.GB, 0);
};

Alter_server_configurationContext.prototype.AUTO = function() {
    return this.getToken(TSqlParser.AUTO, 0);
};

Alter_server_configurationContext.prototype.TO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.TO);
    } else {
        return this.getToken(TSqlParser.TO, i);
    }
};


Alter_server_configurationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_server_configuration(this);
	}
};

Alter_server_configurationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_server_configuration(this);
	}
};




TSqlParser.Alter_server_configurationContext = Alter_server_configurationContext;

TSqlParser.prototype.alter_server_configuration = function() {

    var localctx = new Alter_server_configurationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 376, TSqlParser.RULE_alter_server_configuration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4763;
        this.match(TSqlParser.ALTER);
        this.state = 4764;
        this.match(TSqlParser.SERVER);
        this.state = 4765;
        this.match(TSqlParser.CONFIGURATION);
        this.state = 4766;
        this.match(TSqlParser.SET);

        this.state = 4872;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.PROCESS:
            this.state = 4767;
            this.match(TSqlParser.PROCESS);
            this.state = 4768;
            this.match(TSqlParser.AFFINITY);
            this.state = 4804;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.CPU:
                this.state = 4769;
                this.match(TSqlParser.CPU);
                this.state = 4770;
                this.match(TSqlParser.EQUAL);
                this.state = 4786;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.AUTO:
                    this.state = 4771;
                    this.match(TSqlParser.AUTO);
                    break;
                case TSqlParser.DECIMAL:
                case TSqlParser.COMMA:
                    this.state = 4782; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 4782;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input,552,this._ctx);
                        switch(la_) {
                        case 1:
                            this.state = 4773;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(_la===TSqlParser.COMMA) {
                                this.state = 4772;
                                this.match(TSqlParser.COMMA);
                            }

                            this.state = 4775;
                            this.match(TSqlParser.DECIMAL);
                            break;

                        case 2:
                            this.state = 4777;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(_la===TSqlParser.COMMA) {
                                this.state = 4776;
                                this.match(TSqlParser.COMMA);
                            }

                            this.state = 4779;
                            this.match(TSqlParser.DECIMAL);
                            this.state = 4780;
                            this.match(TSqlParser.TO);
                            this.state = 4781;
                            this.match(TSqlParser.DECIMAL);
                            break;

                        }
                        this.state = 4784; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while(_la===TSqlParser.DECIMAL || _la===TSqlParser.COMMA);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;
            case TSqlParser.NUMANODE:
                this.state = 4788;
                this.match(TSqlParser.NUMANODE);
                this.state = 4789;
                this.match(TSqlParser.EQUAL);
                this.state = 4800; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 4800;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,557,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 4791;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 4790;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 4793;
                        this.match(TSqlParser.DECIMAL);
                        break;

                    case 2:
                        this.state = 4795;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 4794;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 4797;
                        this.match(TSqlParser.DECIMAL);
                        this.state = 4798;
                        this.match(TSqlParser.TO);
                        this.state = 4799;
                        this.match(TSqlParser.DECIMAL);
                        break;

                    }
                    this.state = 4802; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===TSqlParser.DECIMAL || _la===TSqlParser.COMMA);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case TSqlParser.DIAGNOSTICS:
            this.state = 4806;
            this.match(TSqlParser.DIAGNOSTICS);
            this.state = 4807;
            this.match(TSqlParser.LOG);
            this.state = 4823;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.ON:
                this.state = 4808;
                this.match(TSqlParser.ON);
                break;
            case TSqlParser.OFF:
                this.state = 4809;
                this.match(TSqlParser.OFF);
                break;
            case TSqlParser.PATH:
                this.state = 4810;
                this.match(TSqlParser.PATH);
                this.state = 4811;
                this.match(TSqlParser.EQUAL);
                this.state = 4812;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.DEFAULT || _la===TSqlParser.STRING)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            case TSqlParser.MAX_SIZE:
                this.state = 4813;
                this.match(TSqlParser.MAX_SIZE);
                this.state = 4814;
                this.match(TSqlParser.EQUAL);
                this.state = 4818;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.DECIMAL:
                    this.state = 4815;
                    this.match(TSqlParser.DECIMAL);
                    this.state = 4816;
                    this.match(TSqlParser.MB);
                    break;
                case TSqlParser.DEFAULT:
                    this.state = 4817;
                    this.match(TSqlParser.DEFAULT);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;
            case TSqlParser.MAX_FILES:
                this.state = 4820;
                this.match(TSqlParser.MAX_FILES);
                this.state = 4821;
                this.match(TSqlParser.EQUAL);
                this.state = 4822;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.DEFAULT || _la===TSqlParser.DECIMAL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case TSqlParser.FAILOVER:
            this.state = 4825;
            this.match(TSqlParser.FAILOVER);
            this.state = 4826;
            this.match(TSqlParser.CLUSTER);
            this.state = 4827;
            this.match(TSqlParser.PROPERTY);
            this.state = 4845;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.VERBOSELOGGING:
                this.state = 4828;
                this.match(TSqlParser.VERBOSELOGGING);
                this.state = 4829;
                this.match(TSqlParser.EQUAL);
                this.state = 4830;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.DEFAULT || _la===TSqlParser.STRING)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            case TSqlParser.SQLDUMPERFLAGS:
                this.state = 4831;
                this.match(TSqlParser.SQLDUMPERFLAGS);
                this.state = 4832;
                this.match(TSqlParser.EQUAL);
                this.state = 4833;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.DEFAULT || _la===TSqlParser.STRING)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            case TSqlParser.SQLDUMPERPATH:
                this.state = 4834;
                this.match(TSqlParser.SQLDUMPERPATH);
                this.state = 4835;
                this.match(TSqlParser.EQUAL);
                this.state = 4836;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.DEFAULT || _la===TSqlParser.STRING)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            case TSqlParser.SQLDUMPERTIMEOUT:
                this.state = 4837;
                this.match(TSqlParser.SQLDUMPERTIMEOUT);
                this.state = 4838;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.DEFAULT || _la===TSqlParser.STRING)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            case TSqlParser.FAILURECONDITIONLEVEL:
                this.state = 4839;
                this.match(TSqlParser.FAILURECONDITIONLEVEL);
                this.state = 4840;
                this.match(TSqlParser.EQUAL);
                this.state = 4841;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.DEFAULT || _la===TSqlParser.STRING)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            case TSqlParser.HEALTHCHECKTIMEOUT:
                this.state = 4842;
                this.match(TSqlParser.HEALTHCHECKTIMEOUT);
                this.state = 4843;
                this.match(TSqlParser.EQUAL);
                this.state = 4844;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.DEFAULT || _la===TSqlParser.DECIMAL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case TSqlParser.HADR:
            this.state = 4847;
            this.match(TSqlParser.HADR);
            this.state = 4848;
            this.match(TSqlParser.CLUSTER);
            this.state = 4849;
            this.match(TSqlParser.CONTEXT);
            this.state = 4850;
            this.match(TSqlParser.EQUAL);
            this.state = 4851;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.LOCAL || _la===TSqlParser.STRING)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case TSqlParser.BUFFER:
            this.state = 4852;
            this.match(TSqlParser.BUFFER);
            this.state = 4853;
            this.match(TSqlParser.POOL);
            this.state = 4854;
            this.match(TSqlParser.EXTENSION);
            this.state = 4867;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.ON:
                this.state = 4855;
                this.match(TSqlParser.ON);
                this.state = 4856;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 4857;
                this.match(TSqlParser.FILENAME);
                this.state = 4858;
                this.match(TSqlParser.EQUAL);
                this.state = 4859;
                this.match(TSqlParser.STRING);
                this.state = 4860;
                this.match(TSqlParser.COMMA);
                this.state = 4861;
                this.match(TSqlParser.SIZE);
                this.state = 4862;
                this.match(TSqlParser.EQUAL);
                this.state = 4863;
                this.match(TSqlParser.DECIMAL);
                this.state = 4864;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.GB || _la===TSqlParser.KB || _la===TSqlParser.MB)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4865;
                this.match(TSqlParser.RR_BRACKET);
                break;
            case TSqlParser.OFF:
                this.state = 4866;
                this.match(TSqlParser.OFF);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case TSqlParser.SET:
            this.state = 4869;
            this.match(TSqlParser.SET);
            this.state = 4870;
            this.match(TSqlParser.SOFTNUMA);
            this.state = 4871;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_server_roleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_server_role;
    this.server_role_name = null; // IdContext
    this.server_principal = null; // IdContext
    this.new_server_role_name = null; // IdContext
    return this;
}

Alter_server_roleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_server_roleContext.prototype.constructor = Alter_server_roleContext;

Alter_server_roleContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_server_roleContext.prototype.SERVER = function() {
    return this.getToken(TSqlParser.SERVER, 0);
};

Alter_server_roleContext.prototype.ROLE = function() {
    return this.getToken(TSqlParser.ROLE, 0);
};

Alter_server_roleContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_server_roleContext.prototype.MEMBER = function() {
    return this.getToken(TSqlParser.MEMBER, 0);
};

Alter_server_roleContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_server_roleContext.prototype.NAME = function() {
    return this.getToken(TSqlParser.NAME, 0);
};

Alter_server_roleContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Alter_server_roleContext.prototype.ADD = function() {
    return this.getToken(TSqlParser.ADD, 0);
};

Alter_server_roleContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Alter_server_roleContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_server_role(this);
	}
};

Alter_server_roleContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_server_role(this);
	}
};




TSqlParser.Alter_server_roleContext = Alter_server_roleContext;

TSqlParser.prototype.alter_server_role = function() {

    var localctx = new Alter_server_roleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 378, TSqlParser.RULE_alter_server_role);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4874;
        this.match(TSqlParser.ALTER);
        this.state = 4875;
        this.match(TSqlParser.SERVER);
        this.state = 4876;
        this.match(TSqlParser.ROLE);
        this.state = 4877;
        localctx.server_role_name = this.id();
        this.state = 4885;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.ADD:
        case TSqlParser.DROP:
            this.state = 4878;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.ADD || _la===TSqlParser.DROP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 4879;
            this.match(TSqlParser.MEMBER);
            this.state = 4880;
            localctx.server_principal = this.id();
            break;
        case TSqlParser.WITH:
            this.state = 4881;
            this.match(TSqlParser.WITH);
            this.state = 4882;
            this.match(TSqlParser.NAME);
            this.state = 4883;
            this.match(TSqlParser.EQUAL);
            this.state = 4884;
            localctx.new_server_role_name = this.id();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_server_roleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_server_role;
    this.server_role = null; // IdContext
    this.server_principal = null; // IdContext
    return this;
}

Create_server_roleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_server_roleContext.prototype.constructor = Create_server_roleContext;

Create_server_roleContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_server_roleContext.prototype.SERVER = function() {
    return this.getToken(TSqlParser.SERVER, 0);
};

Create_server_roleContext.prototype.ROLE = function() {
    return this.getToken(TSqlParser.ROLE, 0);
};

Create_server_roleContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_server_roleContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Create_server_roleContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_server_role(this);
	}
};

Create_server_roleContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_server_role(this);
	}
};




TSqlParser.Create_server_roleContext = Create_server_roleContext;

TSqlParser.prototype.create_server_role = function() {

    var localctx = new Create_server_roleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 380, TSqlParser.RULE_create_server_role);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4887;
        this.match(TSqlParser.CREATE);
        this.state = 4888;
        this.match(TSqlParser.SERVER);
        this.state = 4889;
        this.match(TSqlParser.ROLE);
        this.state = 4890;
        localctx.server_role = this.id();
        this.state = 4893;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AUTHORIZATION) {
            this.state = 4891;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 4892;
            localctx.server_principal = this.id();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_server_role_pdwContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_server_role_pdw;
    this.server_role_name = null; // IdContext
    this.login = null; // IdContext
    return this;
}

Alter_server_role_pdwContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_server_role_pdwContext.prototype.constructor = Alter_server_role_pdwContext;

Alter_server_role_pdwContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_server_role_pdwContext.prototype.SERVER = function() {
    return this.getToken(TSqlParser.SERVER, 0);
};

Alter_server_role_pdwContext.prototype.ROLE = function() {
    return this.getToken(TSqlParser.ROLE, 0);
};

Alter_server_role_pdwContext.prototype.MEMBER = function() {
    return this.getToken(TSqlParser.MEMBER, 0);
};

Alter_server_role_pdwContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_server_role_pdwContext.prototype.ADD = function() {
    return this.getToken(TSqlParser.ADD, 0);
};

Alter_server_role_pdwContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Alter_server_role_pdwContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_server_role_pdw(this);
	}
};

Alter_server_role_pdwContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_server_role_pdw(this);
	}
};




TSqlParser.Alter_server_role_pdwContext = Alter_server_role_pdwContext;

TSqlParser.prototype.alter_server_role_pdw = function() {

    var localctx = new Alter_server_role_pdwContext(this, this._ctx, this.state);
    this.enterRule(localctx, 382, TSqlParser.RULE_alter_server_role_pdw);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4895;
        this.match(TSqlParser.ALTER);
        this.state = 4896;
        this.match(TSqlParser.SERVER);
        this.state = 4897;
        this.match(TSqlParser.ROLE);
        this.state = 4898;
        localctx.server_role_name = this.id();
        this.state = 4899;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.ADD || _la===TSqlParser.DROP)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 4900;
        this.match(TSqlParser.MEMBER);
        this.state = 4901;
        localctx.login = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_serviceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_service;
    this.modified_service_name = null; // IdContext
    this.schema_name = null; // IdContext
    this.queue_name = null; // IdContext
    this.modified_contract_name = null; // IdContext
    return this;
}

Alter_serviceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_serviceContext.prototype.constructor = Alter_serviceContext;

Alter_serviceContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_serviceContext.prototype.SERVICE = function() {
    return this.getToken(TSqlParser.SERVICE, 0);
};

Alter_serviceContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_serviceContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Alter_serviceContext.prototype.QUEUE = function() {
    return this.getToken(TSqlParser.QUEUE, 0);
};

Alter_serviceContext.prototype.ADD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ADD);
    } else {
        return this.getToken(TSqlParser.ADD, i);
    }
};


Alter_serviceContext.prototype.DROP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DROP);
    } else {
        return this.getToken(TSqlParser.DROP, i);
    }
};


Alter_serviceContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

Alter_serviceContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Alter_serviceContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_service(this);
	}
};

Alter_serviceContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_service(this);
	}
};




TSqlParser.Alter_serviceContext = Alter_serviceContext;

TSqlParser.prototype.alter_service = function() {

    var localctx = new Alter_serviceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 384, TSqlParser.RULE_alter_service);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4903;
        this.match(TSqlParser.ALTER);
        this.state = 4904;
        this.match(TSqlParser.SERVICE);
        this.state = 4905;
        localctx.modified_service_name = this.id();
        this.state = 4913;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.ON) {
            this.state = 4906;
            this.match(TSqlParser.ON);
            this.state = 4907;
            this.match(TSqlParser.QUEUE);

            this.state = 4908;
            localctx.schema_name = this.id();
            this.state = 4909;
            this.match(TSqlParser.DOT);
            this.state = 4911;
            localctx.queue_name = this.id();
        }

        this.state = 4922;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,569,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 4916;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 4915;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 4918;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.ADD || _la===TSqlParser.DROP)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 4919;
                localctx.modified_contract_name = this.id(); 
            }
            this.state = 4924;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,569,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_serviceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_service;
    this.create_service_name = null; // IdContext
    this.owner_name = null; // IdContext
    this.schema_name = null; // IdContext
    this.queue_name = null; // IdContext
    return this;
}

Create_serviceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_serviceContext.prototype.constructor = Create_serviceContext;

Create_serviceContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_serviceContext.prototype.SERVICE = function() {
    return this.getToken(TSqlParser.SERVICE, 0);
};

Create_serviceContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Create_serviceContext.prototype.QUEUE = function() {
    return this.getToken(TSqlParser.QUEUE, 0);
};

Create_serviceContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_serviceContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Create_serviceContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

Create_serviceContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Create_serviceContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Create_serviceContext.prototype.DEFAULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DEFAULT);
    } else {
        return this.getToken(TSqlParser.DEFAULT, i);
    }
};


Create_serviceContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Create_serviceContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_service(this);
	}
};

Create_serviceContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_service(this);
	}
};




TSqlParser.Create_serviceContext = Create_serviceContext;

TSqlParser.prototype.create_service = function() {

    var localctx = new Create_serviceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 386, TSqlParser.RULE_create_service);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4925;
        this.match(TSqlParser.CREATE);
        this.state = 4926;
        this.match(TSqlParser.SERVICE);
        this.state = 4927;
        localctx.create_service_name = this.id();
        this.state = 4930;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AUTHORIZATION) {
            this.state = 4928;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 4929;
            localctx.owner_name = this.id();
        }

        this.state = 4932;
        this.match(TSqlParser.ON);
        this.state = 4933;
        this.match(TSqlParser.QUEUE);
        this.state = 4937;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,571,this._ctx);
        if(la_===1) {
            this.state = 4934;
            localctx.schema_name = this.id();
            this.state = 4935;
            this.match(TSqlParser.DOT);

        }
        this.state = 4939;
        localctx.queue_name = this.id();
        this.state = 4953;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,575,this._ctx);
        if(la_===1) {
            this.state = 4940;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 4948; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 4942;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 4941;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 4946;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.CALLED:
                case TSqlParser.DATA_COMPRESSION:
                case TSqlParser.EVENTDATA:
                case TSqlParser.FILENAME:
                case TSqlParser.FILLFACTOR:
                case TSqlParser.FORCESEEK:
                case TSqlParser.KEY:
                case TSqlParser.MASTER:
                case TSqlParser.MAX_MEMORY:
                case TSqlParser.OFFSETS:
                case TSqlParser.PAGE:
                case TSqlParser.PUBLIC:
                case TSqlParser.RAW:
                case TSqlParser.RETURN:
                case TSqlParser.RETURNS:
                case TSqlParser.ROWCOUNT:
                case TSqlParser.SAFETY:
                case TSqlParser.SERVER:
                case TSqlParser.SID:
                case TSqlParser.SOURCE:
                case TSqlParser.STATE:
                case TSqlParser.TARGET:
                case TSqlParser.ABSOLUTE:
                case TSqlParser.ACTIVE:
                case TSqlParser.ADDRESS:
                case TSqlParser.APPLY:
                case TSqlParser.AUTO:
                case TSqlParser.AVAILABILITY:
                case TSqlParser.AVG:
                case TSqlParser.CALLER:
                case TSqlParser.CAST:
                case TSqlParser.CATCH:
                case TSqlParser.CHECKSUM_AGG:
                case TSqlParser.COMMITTED:
                case TSqlParser.CONCAT:
                case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                case TSqlParser.CONTROL:
                case TSqlParser.COOKIE:
                case TSqlParser.COUNT:
                case TSqlParser.COUNTER:
                case TSqlParser.COUNT_BIG:
                case TSqlParser.DELAY:
                case TSqlParser.DELETED:
                case TSqlParser.DENSE_RANK:
                case TSqlParser.DISABLE:
                case TSqlParser.DYNAMIC:
                case TSqlParser.ENCRYPTION:
                case TSqlParser.EXPAND:
                case TSqlParser.FAST:
                case TSqlParser.FAST_FORWARD:
                case TSqlParser.FIRST:
                case TSqlParser.FOLLOWING:
                case TSqlParser.FORCE:
                case TSqlParser.FORCED:
                case TSqlParser.FORWARD_ONLY:
                case TSqlParser.FULLSCAN:
                case TSqlParser.GLOBAL:
                case TSqlParser.GROUPING:
                case TSqlParser.GROUPING_ID:
                case TSqlParser.HASH:
                case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                case TSqlParser.IMPERSONATE:
                case TSqlParser.INPUT:
                case TSqlParser.INSENSITIVE:
                case TSqlParser.INSERTED:
                case TSqlParser.ISOLATION:
                case TSqlParser.KEEP:
                case TSqlParser.KEEPFIXED:
                case TSqlParser.KEYSET:
                case TSqlParser.LAST:
                case TSqlParser.LEVEL:
                case TSqlParser.LOCAL:
                case TSqlParser.LOCATION:
                case TSqlParser.LOCK_ESCALATION:
                case TSqlParser.LOGIN:
                case TSqlParser.LOOP:
                case TSqlParser.MARK:
                case TSqlParser.MAX:
                case TSqlParser.MAX_ROLLOVER_FILES:
                case TSqlParser.MAXDOP:
                case TSqlParser.MAXRECURSION:
                case TSqlParser.MIN:
                case TSqlParser.MODIFY:
                case TSqlParser.NAME:
                case TSqlParser.NEXT:
                case TSqlParser.NOCOUNT:
                case TSqlParser.NOEXPAND:
                case TSqlParser.NORECOMPUTE:
                case TSqlParser.NTILE:
                case TSqlParser.NUMBER:
                case TSqlParser.OFFSET:
                case TSqlParser.ONLINE:
                case TSqlParser.ONLY:
                case TSqlParser.OPTIMISTIC:
                case TSqlParser.OPTIMIZE:
                case TSqlParser.OUT:
                case TSqlParser.OUTPUT:
                case TSqlParser.OWNER:
                case TSqlParser.PARAMETERIZATION:
                case TSqlParser.PARTITION:
                case TSqlParser.PATH:
                case TSqlParser.PRECEDING:
                case TSqlParser.PRIOR:
                case TSqlParser.PRIVILEGES:
                case TSqlParser.RANGE:
                case TSqlParser.RANK:
                case TSqlParser.READONLY:
                case TSqlParser.READ_ONLY:
                case TSqlParser.RECOMPILE:
                case TSqlParser.RELATIVE:
                case TSqlParser.REMOTE:
                case TSqlParser.REPEATABLE:
                case TSqlParser.ROBUST:
                case TSqlParser.ROOT:
                case TSqlParser.ROW:
                case TSqlParser.ROWGUID:
                case TSqlParser.ROWS:
                case TSqlParser.ROW_NUMBER:
                case TSqlParser.SAMPLE:
                case TSqlParser.SCHEMABINDING:
                case TSqlParser.SCROLL:
                case TSqlParser.SCROLL_LOCKS:
                case TSqlParser.SELF:
                case TSqlParser.SERIALIZABLE:
                case TSqlParser.SIMPLE:
                case TSqlParser.SIZE:
                case TSqlParser.SNAPSHOT:
                case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                case TSqlParser.STATIC:
                case TSqlParser.STATS_STREAM:
                case TSqlParser.STDEV:
                case TSqlParser.STDEVP:
                case TSqlParser.SUM:
                case TSqlParser.TEXTIMAGE_ON:
                case TSqlParser.THROW:
                case TSqlParser.TIES:
                case TSqlParser.TIME:
                case TSqlParser.TRY:
                case TSqlParser.TYPE:
                case TSqlParser.TYPE_WARNING:
                case TSqlParser.UNBOUNDED:
                case TSqlParser.UNCOMMITTED:
                case TSqlParser.UNKNOWN:
                case TSqlParser.USING:
                case TSqlParser.VALUE:
                case TSqlParser.VAR:
                case TSqlParser.VARP:
                case TSqlParser.VIEWS:
                case TSqlParser.VIEW_METADATA:
                case TSqlParser.WORK:
                case TSqlParser.XML:
                case TSqlParser.XMLNAMESPACES:
                case TSqlParser.DOUBLE_QUOTE_ID:
                case TSqlParser.SQUARE_BRACKET_ID:
                case TSqlParser.ID:
                    this.state = 4944;
                    this.id();
                    break;
                case TSqlParser.DEFAULT:
                    this.state = 4945;
                    this.match(TSqlParser.DEFAULT);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 4950; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || _la===TSqlParser.DEFAULT || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0) || _la===TSqlParser.COMMA);
            this.state = 4952;
            this.match(TSqlParser.RR_BRACKET);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_service_master_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_service_master_key;
    this.acold_account_name = null; // Token
    this.old_password = null; // Token
    this.new_account_name = null; // Token
    this.new_password = null; // Token
    return this;
}

Alter_service_master_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_service_master_keyContext.prototype.constructor = Alter_service_master_keyContext;

Alter_service_master_keyContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_service_master_keyContext.prototype.SERVICE = function() {
    return this.getToken(TSqlParser.SERVICE, 0);
};

Alter_service_master_keyContext.prototype.MASTER = function() {
    return this.getToken(TSqlParser.MASTER, 0);
};

Alter_service_master_keyContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Alter_service_master_keyContext.prototype.REGENERATE = function() {
    return this.getToken(TSqlParser.REGENERATE, 0);
};

Alter_service_master_keyContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_service_master_keyContext.prototype.FORCE = function() {
    return this.getToken(TSqlParser.FORCE, 0);
};

Alter_service_master_keyContext.prototype.OLD_ACCOUNT = function() {
    return this.getToken(TSqlParser.OLD_ACCOUNT, 0);
};

Alter_service_master_keyContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Alter_service_master_keyContext.prototype.COMMA = function() {
    return this.getToken(TSqlParser.COMMA, 0);
};

Alter_service_master_keyContext.prototype.OLD_PASSWORD = function() {
    return this.getToken(TSqlParser.OLD_PASSWORD, 0);
};

Alter_service_master_keyContext.prototype.NEW_ACCOUNT = function() {
    return this.getToken(TSqlParser.NEW_ACCOUNT, 0);
};

Alter_service_master_keyContext.prototype.NEW_PASSWORD = function() {
    return this.getToken(TSqlParser.NEW_PASSWORD, 0);
};

Alter_service_master_keyContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Alter_service_master_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_service_master_key(this);
	}
};

Alter_service_master_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_service_master_key(this);
	}
};




TSqlParser.Alter_service_master_keyContext = Alter_service_master_keyContext;

TSqlParser.prototype.alter_service_master_key = function() {

    var localctx = new Alter_service_master_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 388, TSqlParser.RULE_alter_service_master_key);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4955;
        this.match(TSqlParser.ALTER);
        this.state = 4956;
        this.match(TSqlParser.SERVICE);
        this.state = 4957;
        this.match(TSqlParser.MASTER);
        this.state = 4958;
        this.match(TSqlParser.KEY);
        this.state = 4980;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.REGENERATE:
        case TSqlParser.FORCE:
            this.state = 4960;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.FORCE) {
                this.state = 4959;
                this.match(TSqlParser.FORCE);
            }

            this.state = 4962;
            this.match(TSqlParser.REGENERATE);
            break;
        case TSqlParser.WITH:
            this.state = 4963;
            this.match(TSqlParser.WITH);
            this.state = 4978;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case TSqlParser.OLD_ACCOUNT:
            	this.state = 4964;
            	this.match(TSqlParser.OLD_ACCOUNT);
            	this.state = 4965;
            	this.match(TSqlParser.EQUAL);
            	this.state = 4966;
            	localctx.acold_account_name = this.match(TSqlParser.STRING);
            	this.state = 4967;
            	this.match(TSqlParser.COMMA);
            	this.state = 4968;
            	this.match(TSqlParser.OLD_PASSWORD);
            	this.state = 4969;
            	this.match(TSqlParser.EQUAL);
            	this.state = 4970;
            	localctx.old_password = this.match(TSqlParser.STRING);
            	break;
            case TSqlParser.NEW_ACCOUNT:
            	this.state = 4971;
            	this.match(TSqlParser.NEW_ACCOUNT);
            	this.state = 4972;
            	this.match(TSqlParser.EQUAL);
            	this.state = 4973;
            	localctx.new_account_name = this.match(TSqlParser.STRING);
            	this.state = 4974;
            	this.match(TSqlParser.COMMA);
            	this.state = 4975;
            	this.match(TSqlParser.NEW_PASSWORD);
            	this.state = 4976;
            	this.match(TSqlParser.EQUAL);
            	this.state = 4977;
            	localctx.new_password = this.match(TSqlParser.STRING);
            	break;
            case TSqlParser.EOF:
            case TSqlParser.ALTER:
            case TSqlParser.BACKUP:
            case TSqlParser.BEGIN:
            case TSqlParser.BREAK:
            case TSqlParser.CALLED:
            case TSqlParser.CLOSE:
            case TSqlParser.COMMIT:
            case TSqlParser.CONTINUE:
            case TSqlParser.CREATE:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.DBCC:
            case TSqlParser.DEALLOCATE:
            case TSqlParser.DECLARE:
            case TSqlParser.DELETE:
            case TSqlParser.DROP:
            case TSqlParser.ELSE:
            case TSqlParser.END:
            case TSqlParser.EVENTDATA:
            case TSqlParser.EXECUTE:
            case TSqlParser.FETCH:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.GET:
            case TSqlParser.GOTO:
            case TSqlParser.GRANT:
            case TSqlParser.IF:
            case TSqlParser.INSERT:
            case TSqlParser.KEY:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.MERGE:
            case TSqlParser.OFFSETS:
            case TSqlParser.OPEN:
            case TSqlParser.PAGE:
            case TSqlParser.PRINT:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAISERROR:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.REVERT:
            case TSqlParser.ROLLBACK:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SAVE:
            case TSqlParser.SELECT:
            case TSqlParser.SERVER:
            case TSqlParser.SET:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.TARGET:
            case TSqlParser.TRUNCATE:
            case TSqlParser.UPDATE:
            case TSqlParser.USE:
            case TSqlParser.WAITFOR:
            case TSqlParser.WHILE:
            case TSqlParser.WITH:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.APPLY:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENABLE:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GLOBAL:
            case TSqlParser.GO:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAST:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SEND:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.ID:
            case TSqlParser.LR_BRACKET:
            case TSqlParser.SEMI:
            	break;
            default:
            	break;
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_symmetric_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_symmetric_key;
    this.key_name = null; // IdContext
    this.certificate_name = null; // IdContext
    this.password = null; // Token
    this.symmetric_key_name = null; // IdContext
    this.Asym_key_name = null; // IdContext
    return this;
}

Alter_symmetric_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_symmetric_keyContext.prototype.constructor = Alter_symmetric_keyContext;

Alter_symmetric_keyContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_symmetric_keyContext.prototype.SYMMETRIC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SYMMETRIC);
    } else {
        return this.getToken(TSqlParser.SYMMETRIC, i);
    }
};


Alter_symmetric_keyContext.prototype.KEY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.KEY);
    } else {
        return this.getToken(TSqlParser.KEY, i);
    }
};


Alter_symmetric_keyContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_symmetric_keyContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Alter_symmetric_keyContext.prototype.BY = function() {
    return this.getToken(TSqlParser.BY, 0);
};

Alter_symmetric_keyContext.prototype.ADD = function() {
    return this.getToken(TSqlParser.ADD, 0);
};

Alter_symmetric_keyContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Alter_symmetric_keyContext.prototype.CERTIFICATE = function() {
    return this.getToken(TSqlParser.CERTIFICATE, 0);
};

Alter_symmetric_keyContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Alter_symmetric_keyContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Alter_symmetric_keyContext.prototype.ASYMMETRIC = function() {
    return this.getToken(TSqlParser.ASYMMETRIC, 0);
};

Alter_symmetric_keyContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Alter_symmetric_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_symmetric_key(this);
	}
};

Alter_symmetric_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_symmetric_key(this);
	}
};




TSqlParser.Alter_symmetric_keyContext = Alter_symmetric_keyContext;

TSqlParser.prototype.alter_symmetric_key = function() {

    var localctx = new Alter_symmetric_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 390, TSqlParser.RULE_alter_symmetric_key);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 4982;
        this.match(TSqlParser.ALTER);
        this.state = 4983;
        this.match(TSqlParser.SYMMETRIC);
        this.state = 4984;
        this.match(TSqlParser.KEY);
        this.state = 4985;
        localctx.key_name = this.id();

        this.state = 4986;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.ADD || _la===TSqlParser.DROP)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 4987;
        this.match(TSqlParser.ENCRYPTION);
        this.state = 4988;
        this.match(TSqlParser.BY);
        this.state = 5000;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CERTIFICATE:
            this.state = 4989;
            this.match(TSqlParser.CERTIFICATE);
            this.state = 4990;
            localctx.certificate_name = this.id();
            break;
        case TSqlParser.PASSWORD:
            this.state = 4991;
            this.match(TSqlParser.PASSWORD);
            this.state = 4992;
            this.match(TSqlParser.EQUAL);
            this.state = 4993;
            localctx.password = this.match(TSqlParser.STRING);
            break;
        case TSqlParser.SYMMETRIC:
            this.state = 4994;
            this.match(TSqlParser.SYMMETRIC);
            this.state = 4995;
            this.match(TSqlParser.KEY);
            this.state = 4996;
            localctx.symmetric_key_name = this.id();
            break;
        case TSqlParser.ASYMMETRIC:
            this.state = 4997;
            this.match(TSqlParser.ASYMMETRIC);
            this.state = 4998;
            this.match(TSqlParser.KEY);
            this.state = 4999;
            localctx.Asym_key_name = this.id();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_symmetric_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_symmetric_key;
    this.key_name = null; // IdContext
    this.owner_name = null; // IdContext
    this.provider_name = null; // IdContext
    this.key_pass_phrase = null; // Token
    this.identity_phrase = null; // Token
    this.provider_key_name = null; // Token
    this.certificate_name = null; // IdContext
    this.password = null; // Token
    this.symmetric_key_name = null; // IdContext
    this.asym_key_name = null; // IdContext
    return this;
}

Create_symmetric_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_symmetric_keyContext.prototype.constructor = Create_symmetric_keyContext;

Create_symmetric_keyContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Create_symmetric_keyContext.prototype.SYMMETRIC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SYMMETRIC);
    } else {
        return this.getToken(TSqlParser.SYMMETRIC, i);
    }
};


Create_symmetric_keyContext.prototype.KEY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.KEY);
    } else {
        return this.getToken(TSqlParser.KEY, i);
    }
};


Create_symmetric_keyContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_symmetric_keyContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_symmetric_keyContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Create_symmetric_keyContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Create_symmetric_keyContext.prototype.PROVIDER = function() {
    return this.getToken(TSqlParser.PROVIDER, 0);
};

Create_symmetric_keyContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Create_symmetric_keyContext.prototype.BY = function() {
    return this.getToken(TSqlParser.BY, 0);
};

Create_symmetric_keyContext.prototype.KEY_SOURCE = function() {
    return this.getToken(TSqlParser.KEY_SOURCE, 0);
};

Create_symmetric_keyContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Create_symmetric_keyContext.prototype.ALGORITHM = function() {
    return this.getToken(TSqlParser.ALGORITHM, 0);
};

Create_symmetric_keyContext.prototype.IDENTITY_VALUE = function() {
    return this.getToken(TSqlParser.IDENTITY_VALUE, 0);
};

Create_symmetric_keyContext.prototype.PROVIDER_KEY_NAME = function() {
    return this.getToken(TSqlParser.PROVIDER_KEY_NAME, 0);
};

Create_symmetric_keyContext.prototype.CREATION_DISPOSITION = function() {
    return this.getToken(TSqlParser.CREATION_DISPOSITION, 0);
};

Create_symmetric_keyContext.prototype.CERTIFICATE = function() {
    return this.getToken(TSqlParser.CERTIFICATE, 0);
};

Create_symmetric_keyContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Create_symmetric_keyContext.prototype.ASYMMETRIC = function() {
    return this.getToken(TSqlParser.ASYMMETRIC, 0);
};

Create_symmetric_keyContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Create_symmetric_keyContext.prototype.DES = function() {
    return this.getToken(TSqlParser.DES, 0);
};

Create_symmetric_keyContext.prototype.TRIPLE_DES = function() {
    return this.getToken(TSqlParser.TRIPLE_DES, 0);
};

Create_symmetric_keyContext.prototype.TRIPLE_DES_3KEY = function() {
    return this.getToken(TSqlParser.TRIPLE_DES_3KEY, 0);
};

Create_symmetric_keyContext.prototype.RC2 = function() {
    return this.getToken(TSqlParser.RC2, 0);
};

Create_symmetric_keyContext.prototype.RC4 = function() {
    return this.getToken(TSqlParser.RC4, 0);
};

Create_symmetric_keyContext.prototype.RC4_128 = function() {
    return this.getToken(TSqlParser.RC4_128, 0);
};

Create_symmetric_keyContext.prototype.DESX = function() {
    return this.getToken(TSqlParser.DESX, 0);
};

Create_symmetric_keyContext.prototype.AES_128 = function() {
    return this.getToken(TSqlParser.AES_128, 0);
};

Create_symmetric_keyContext.prototype.AES_192 = function() {
    return this.getToken(TSqlParser.AES_192, 0);
};

Create_symmetric_keyContext.prototype.AES_256 = function() {
    return this.getToken(TSqlParser.AES_256, 0);
};

Create_symmetric_keyContext.prototype.CREATE_NEW = function() {
    return this.getToken(TSqlParser.CREATE_NEW, 0);
};

Create_symmetric_keyContext.prototype.OPEN_EXISTING = function() {
    return this.getToken(TSqlParser.OPEN_EXISTING, 0);
};

Create_symmetric_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_symmetric_key(this);
	}
};

Create_symmetric_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_symmetric_key(this);
	}
};




TSqlParser.Create_symmetric_keyContext = Create_symmetric_keyContext;

TSqlParser.prototype.create_symmetric_key = function() {

    var localctx = new Create_symmetric_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 392, TSqlParser.RULE_create_symmetric_key);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5002;
        this.match(TSqlParser.ALTER);
        this.state = 5003;
        this.match(TSqlParser.SYMMETRIC);
        this.state = 5004;
        this.match(TSqlParser.KEY);
        this.state = 5005;
        localctx.key_name = this.id();
        this.state = 5008;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AUTHORIZATION) {
            this.state = 5006;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 5007;
            localctx.owner_name = this.id();
        }

        this.state = 5013;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.FROM) {
            this.state = 5010;
            this.match(TSqlParser.FROM);
            this.state = 5011;
            this.match(TSqlParser.PROVIDER);
            this.state = 5012;
            localctx.provider_name = this.id();
        }

        this.state = 5015;
        this.match(TSqlParser.WITH);
        this.state = 5048;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.ALGORITHM:
        case TSqlParser.CREATION_DISPOSITION:
        case TSqlParser.IDENTITY_VALUE:
        case TSqlParser.KEY_SOURCE:
        case TSqlParser.PROVIDER_KEY_NAME:
            this.state = 5031;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.KEY_SOURCE:
                this.state = 5016;
                this.match(TSqlParser.KEY_SOURCE);
                this.state = 5017;
                this.match(TSqlParser.EQUAL);
                this.state = 5018;
                localctx.key_pass_phrase = this.match(TSqlParser.STRING);
                break;
            case TSqlParser.ALGORITHM:
                this.state = 5019;
                this.match(TSqlParser.ALGORITHM);
                this.state = 5020;
                this.match(TSqlParser.EQUAL);
                this.state = 5021;
                _la = this._input.LA(1);
                if(!(((((_la - 388)) & ~0x1f) == 0 && ((1 << (_la - 388)) & ((1 << (TSqlParser.AES_128 - 388)) | (1 << (TSqlParser.AES_192 - 388)) | (1 << (TSqlParser.AES_256 - 388)))) !== 0) || _la===TSqlParser.DES || _la===TSqlParser.DESX || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (TSqlParser.RC2 - 654)) | (1 << (TSqlParser.RC4 - 654)) | (1 << (TSqlParser.RC4_128 - 654)))) !== 0) || _la===TSqlParser.TRIPLE_DES || _la===TSqlParser.TRIPLE_DES_3KEY)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            case TSqlParser.IDENTITY_VALUE:
                this.state = 5022;
                this.match(TSqlParser.IDENTITY_VALUE);
                this.state = 5023;
                this.match(TSqlParser.EQUAL);
                this.state = 5024;
                localctx.identity_phrase = this.match(TSqlParser.STRING);
                break;
            case TSqlParser.PROVIDER_KEY_NAME:
                this.state = 5025;
                this.match(TSqlParser.PROVIDER_KEY_NAME);
                this.state = 5026;
                this.match(TSqlParser.EQUAL);
                this.state = 5027;
                localctx.provider_key_name = this.match(TSqlParser.STRING);
                break;
            case TSqlParser.CREATION_DISPOSITION:
                this.state = 5028;
                this.match(TSqlParser.CREATION_DISPOSITION);
                this.state = 5029;
                this.match(TSqlParser.EQUAL);
                this.state = 5030;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.CREATE_NEW || _la===TSqlParser.OPEN_EXISTING)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case TSqlParser.ENCRYPTION:
            this.state = 5033;
            this.match(TSqlParser.ENCRYPTION);
            this.state = 5034;
            this.match(TSqlParser.BY);
            this.state = 5046;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.CERTIFICATE:
                this.state = 5035;
                this.match(TSqlParser.CERTIFICATE);
                this.state = 5036;
                localctx.certificate_name = this.id();
                break;
            case TSqlParser.PASSWORD:
                this.state = 5037;
                this.match(TSqlParser.PASSWORD);
                this.state = 5038;
                this.match(TSqlParser.EQUAL);
                this.state = 5039;
                localctx.password = this.match(TSqlParser.STRING);
                break;
            case TSqlParser.SYMMETRIC:
                this.state = 5040;
                this.match(TSqlParser.SYMMETRIC);
                this.state = 5041;
                this.match(TSqlParser.KEY);
                this.state = 5042;
                localctx.symmetric_key_name = this.id();
                break;
            case TSqlParser.ASYMMETRIC:
                this.state = 5043;
                this.match(TSqlParser.ASYMMETRIC);
                this.state = 5044;
                this.match(TSqlParser.KEY);
                this.state = 5045;
                localctx.asym_key_name = this.id();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_synonymContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_synonym;
    this.schema_name_1 = null; // IdContext
    this.synonym_name = null; // IdContext
    this.server_name = null; // IdContext
    this.database_name = null; // IdContext
    this.schema_name_2 = null; // IdContext
    this.object_name = null; // IdContext
    this.database_or_schema2 = null; // IdContext
    this.schema_id_2_or_object_name = null; // IdContext
    return this;
}

Create_synonymContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_synonymContext.prototype.constructor = Create_synonymContext;

Create_synonymContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_synonymContext.prototype.SYNONYM = function() {
    return this.getToken(TSqlParser.SYNONYM, 0);
};

Create_synonymContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Create_synonymContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_synonymContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DOT);
    } else {
        return this.getToken(TSqlParser.DOT, i);
    }
};


Create_synonymContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_synonym(this);
	}
};

Create_synonymContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_synonym(this);
	}
};




TSqlParser.Create_synonymContext = Create_synonymContext;

TSqlParser.prototype.create_synonym = function() {

    var localctx = new Create_synonymContext(this, this._ctx, this.state);
    this.enterRule(localctx, 394, TSqlParser.RULE_create_synonym);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5050;
        this.match(TSqlParser.CREATE);
        this.state = 5051;
        this.match(TSqlParser.SYNONYM);
        this.state = 5055;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,585,this._ctx);
        if(la_===1) {
            this.state = 5052;
            localctx.schema_name_1 = this.id();
            this.state = 5053;
            this.match(TSqlParser.DOT);

        }
        this.state = 5057;
        localctx.synonym_name = this.id();
        this.state = 5058;
        this.match(TSqlParser.FOR);
        this.state = 5085;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,591,this._ctx);
        switch(la_) {
        case 1:
            this.state = 5062;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,586,this._ctx);
            if(la_===1) {
                this.state = 5059;
                localctx.server_name = this.id();
                this.state = 5060;
                this.match(TSqlParser.DOT);

            }
            this.state = 5067;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,587,this._ctx);
            if(la_===1) {
                this.state = 5064;
                localctx.database_name = this.id();
                this.state = 5065;
                this.match(TSqlParser.DOT);

            }
            this.state = 5072;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,588,this._ctx);
            if(la_===1) {
                this.state = 5069;
                localctx.schema_name_2 = this.id();
                this.state = 5070;
                this.match(TSqlParser.DOT);

            }
            this.state = 5074;
            localctx.object_name = this.id();
            break;

        case 2:
            this.state = 5078;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,589,this._ctx);
            if(la_===1) {
                this.state = 5075;
                localctx.database_or_schema2 = this.id();
                this.state = 5076;
                this.match(TSqlParser.DOT);

            }
            this.state = 5083;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,590,this._ctx);
            if(la_===1) {
                this.state = 5080;
                localctx.schema_id_2_or_object_name = this.id();
                this.state = 5081;
                this.match(TSqlParser.DOT);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_userContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_user;
    this.username = null; // IdContext
    this.newusername = null; // IdContext
    this.schema_name = null; // IdContext
    this.loginame = null; // IdContext
    this.lcid = null; // Token
    this.language_name_or_alias = null; // IdContext
    return this;
}

Alter_userContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_userContext.prototype.constructor = Alter_userContext;

Alter_userContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_userContext.prototype.USER = function() {
    return this.getToken(TSqlParser.USER, 0);
};

Alter_userContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_userContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_userContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NAME);
    } else {
        return this.getToken(TSqlParser.NAME, i);
    }
};


Alter_userContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Alter_userContext.prototype.DEFAULT_SCHEMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DEFAULT_SCHEMA);
    } else {
        return this.getToken(TSqlParser.DEFAULT_SCHEMA, i);
    }
};


Alter_userContext.prototype.LOGIN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LOGIN);
    } else {
        return this.getToken(TSqlParser.LOGIN, i);
    }
};


Alter_userContext.prototype.PASSWORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.PASSWORD);
    } else {
        return this.getToken(TSqlParser.PASSWORD, i);
    }
};


Alter_userContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Alter_userContext.prototype.DEFAULT_LANGUAGE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DEFAULT_LANGUAGE);
    } else {
        return this.getToken(TSqlParser.DEFAULT_LANGUAGE, i);
    }
};


Alter_userContext.prototype.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
    } else {
        return this.getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
    }
};


Alter_userContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ON);
    } else {
        return this.getToken(TSqlParser.ON, i);
    }
};


Alter_userContext.prototype.OFF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.OFF);
    } else {
        return this.getToken(TSqlParser.OFF, i);
    }
};


Alter_userContext.prototype.NULL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NULL);
    } else {
        return this.getToken(TSqlParser.NULL, i);
    }
};


Alter_userContext.prototype.NONE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NONE);
    } else {
        return this.getToken(TSqlParser.NONE, i);
    }
};


Alter_userContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Alter_userContext.prototype.OLD_PASSWORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.OLD_PASSWORD);
    } else {
        return this.getToken(TSqlParser.OLD_PASSWORD, i);
    }
};


Alter_userContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Alter_userContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_user(this);
	}
};

Alter_userContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_user(this);
	}
};




TSqlParser.Alter_userContext = Alter_userContext;

TSqlParser.prototype.alter_user = function() {

    var localctx = new Alter_userContext(this, this._ctx, this.state);
    this.enterRule(localctx, 396, TSqlParser.RULE_alter_user);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5087;
        this.match(TSqlParser.ALTER);
        this.state = 5088;
        this.match(TSqlParser.USER);
        this.state = 5089;
        localctx.username = this.id();
        this.state = 5090;
        this.match(TSqlParser.WITH);
        this.state = 5141; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 5141;
        		this._errHandler.sync(this);
        		var la_ = this._interp.adaptivePredict(this._input,601,this._ctx);
        		switch(la_) {
        		case 1:
        		    this.state = 5092;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		    if(_la===TSqlParser.COMMA) {
        		        this.state = 5091;
        		        this.match(TSqlParser.COMMA);
        		    }

        		    this.state = 5094;
        		    this.match(TSqlParser.NAME);
        		    this.state = 5095;
        		    this.match(TSqlParser.EQUAL);
        		    this.state = 5096;
        		    localctx.newusername = this.id();
        		    break;

        		case 2:
        		    this.state = 5098;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		    if(_la===TSqlParser.COMMA) {
        		        this.state = 5097;
        		        this.match(TSqlParser.COMMA);
        		    }

        		    this.state = 5100;
        		    this.match(TSqlParser.DEFAULT_SCHEMA);
        		    this.state = 5101;
        		    this.match(TSqlParser.EQUAL);
        		    this.state = 5104;
        		    this._errHandler.sync(this);
        		    switch(this._input.LA(1)) {
        		    case TSqlParser.CALLED:
        		    case TSqlParser.DATA_COMPRESSION:
        		    case TSqlParser.EVENTDATA:
        		    case TSqlParser.FILENAME:
        		    case TSqlParser.FILLFACTOR:
        		    case TSqlParser.FORCESEEK:
        		    case TSqlParser.KEY:
        		    case TSqlParser.MASTER:
        		    case TSqlParser.MAX_MEMORY:
        		    case TSqlParser.OFFSETS:
        		    case TSqlParser.PAGE:
        		    case TSqlParser.PUBLIC:
        		    case TSqlParser.RAW:
        		    case TSqlParser.RETURN:
        		    case TSqlParser.RETURNS:
        		    case TSqlParser.ROWCOUNT:
        		    case TSqlParser.SAFETY:
        		    case TSqlParser.SERVER:
        		    case TSqlParser.SID:
        		    case TSqlParser.SOURCE:
        		    case TSqlParser.STATE:
        		    case TSqlParser.TARGET:
        		    case TSqlParser.ABSOLUTE:
        		    case TSqlParser.ACTIVE:
        		    case TSqlParser.ADDRESS:
        		    case TSqlParser.APPLY:
        		    case TSqlParser.AUTO:
        		    case TSqlParser.AVAILABILITY:
        		    case TSqlParser.AVG:
        		    case TSqlParser.CALLER:
        		    case TSqlParser.CAST:
        		    case TSqlParser.CATCH:
        		    case TSqlParser.CHECKSUM_AGG:
        		    case TSqlParser.COMMITTED:
        		    case TSqlParser.CONCAT:
        		    case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        		    case TSqlParser.CONTROL:
        		    case TSqlParser.COOKIE:
        		    case TSqlParser.COUNT:
        		    case TSqlParser.COUNTER:
        		    case TSqlParser.COUNT_BIG:
        		    case TSqlParser.DELAY:
        		    case TSqlParser.DELETED:
        		    case TSqlParser.DENSE_RANK:
        		    case TSqlParser.DISABLE:
        		    case TSqlParser.DYNAMIC:
        		    case TSqlParser.ENCRYPTION:
        		    case TSqlParser.EXPAND:
        		    case TSqlParser.FAST:
        		    case TSqlParser.FAST_FORWARD:
        		    case TSqlParser.FIRST:
        		    case TSqlParser.FOLLOWING:
        		    case TSqlParser.FORCE:
        		    case TSqlParser.FORCED:
        		    case TSqlParser.FORWARD_ONLY:
        		    case TSqlParser.FULLSCAN:
        		    case TSqlParser.GLOBAL:
        		    case TSqlParser.GROUPING:
        		    case TSqlParser.GROUPING_ID:
        		    case TSqlParser.HASH:
        		    case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        		    case TSqlParser.IMPERSONATE:
        		    case TSqlParser.INPUT:
        		    case TSqlParser.INSENSITIVE:
        		    case TSqlParser.INSERTED:
        		    case TSqlParser.ISOLATION:
        		    case TSqlParser.KEEP:
        		    case TSqlParser.KEEPFIXED:
        		    case TSqlParser.KEYSET:
        		    case TSqlParser.LAST:
        		    case TSqlParser.LEVEL:
        		    case TSqlParser.LOCAL:
        		    case TSqlParser.LOCATION:
        		    case TSqlParser.LOCK_ESCALATION:
        		    case TSqlParser.LOGIN:
        		    case TSqlParser.LOOP:
        		    case TSqlParser.MARK:
        		    case TSqlParser.MAX:
        		    case TSqlParser.MAX_ROLLOVER_FILES:
        		    case TSqlParser.MAXDOP:
        		    case TSqlParser.MAXRECURSION:
        		    case TSqlParser.MIN:
        		    case TSqlParser.MODIFY:
        		    case TSqlParser.NAME:
        		    case TSqlParser.NEXT:
        		    case TSqlParser.NOCOUNT:
        		    case TSqlParser.NOEXPAND:
        		    case TSqlParser.NORECOMPUTE:
        		    case TSqlParser.NTILE:
        		    case TSqlParser.NUMBER:
        		    case TSqlParser.OFFSET:
        		    case TSqlParser.ONLINE:
        		    case TSqlParser.ONLY:
        		    case TSqlParser.OPTIMISTIC:
        		    case TSqlParser.OPTIMIZE:
        		    case TSqlParser.OUT:
        		    case TSqlParser.OUTPUT:
        		    case TSqlParser.OWNER:
        		    case TSqlParser.PARAMETERIZATION:
        		    case TSqlParser.PARTITION:
        		    case TSqlParser.PATH:
        		    case TSqlParser.PRECEDING:
        		    case TSqlParser.PRIOR:
        		    case TSqlParser.PRIVILEGES:
        		    case TSqlParser.RANGE:
        		    case TSqlParser.RANK:
        		    case TSqlParser.READONLY:
        		    case TSqlParser.READ_ONLY:
        		    case TSqlParser.RECOMPILE:
        		    case TSqlParser.RELATIVE:
        		    case TSqlParser.REMOTE:
        		    case TSqlParser.REPEATABLE:
        		    case TSqlParser.ROBUST:
        		    case TSqlParser.ROOT:
        		    case TSqlParser.ROW:
        		    case TSqlParser.ROWGUID:
        		    case TSqlParser.ROWS:
        		    case TSqlParser.ROW_NUMBER:
        		    case TSqlParser.SAMPLE:
        		    case TSqlParser.SCHEMABINDING:
        		    case TSqlParser.SCROLL:
        		    case TSqlParser.SCROLL_LOCKS:
        		    case TSqlParser.SELF:
        		    case TSqlParser.SERIALIZABLE:
        		    case TSqlParser.SIMPLE:
        		    case TSqlParser.SIZE:
        		    case TSqlParser.SNAPSHOT:
        		    case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        		    case TSqlParser.STATIC:
        		    case TSqlParser.STATS_STREAM:
        		    case TSqlParser.STDEV:
        		    case TSqlParser.STDEVP:
        		    case TSqlParser.SUM:
        		    case TSqlParser.TEXTIMAGE_ON:
        		    case TSqlParser.THROW:
        		    case TSqlParser.TIES:
        		    case TSqlParser.TIME:
        		    case TSqlParser.TRY:
        		    case TSqlParser.TYPE:
        		    case TSqlParser.TYPE_WARNING:
        		    case TSqlParser.UNBOUNDED:
        		    case TSqlParser.UNCOMMITTED:
        		    case TSqlParser.UNKNOWN:
        		    case TSqlParser.USING:
        		    case TSqlParser.VALUE:
        		    case TSqlParser.VAR:
        		    case TSqlParser.VARP:
        		    case TSqlParser.VIEWS:
        		    case TSqlParser.VIEW_METADATA:
        		    case TSqlParser.WORK:
        		    case TSqlParser.XML:
        		    case TSqlParser.XMLNAMESPACES:
        		    case TSqlParser.DOUBLE_QUOTE_ID:
        		    case TSqlParser.SQUARE_BRACKET_ID:
        		    case TSqlParser.ID:
        		        this.state = 5102;
        		        localctx.schema_name = this.id();
        		        break;
        		    case TSqlParser.NULL:
        		        this.state = 5103;
        		        this.match(TSqlParser.NULL);
        		        break;
        		    default:
        		        throw new antlr4.error.NoViableAltException(this);
        		    }
        		    break;

        		case 3:
        		    this.state = 5107;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		    if(_la===TSqlParser.COMMA) {
        		        this.state = 5106;
        		        this.match(TSqlParser.COMMA);
        		    }

        		    this.state = 5109;
        		    this.match(TSqlParser.LOGIN);
        		    this.state = 5110;
        		    this.match(TSqlParser.EQUAL);
        		    this.state = 5111;
        		    localctx.loginame = this.id();
        		    break;

        		case 4:
        		    this.state = 5113;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		    if(_la===TSqlParser.COMMA) {
        		        this.state = 5112;
        		        this.match(TSqlParser.COMMA);
        		    }

        		    this.state = 5115;
        		    this.match(TSqlParser.PASSWORD);
        		    this.state = 5116;
        		    this.match(TSqlParser.EQUAL);
        		    this.state = 5117;
        		    this.match(TSqlParser.STRING);
        		    this.state = 5121; 
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		    do {
        		        this.state = 5118;
        		        this.match(TSqlParser.OLD_PASSWORD);
        		        this.state = 5119;
        		        this.match(TSqlParser.EQUAL);
        		        this.state = 5120;
        		        this.match(TSqlParser.STRING);
        		        this.state = 5123; 
        		        this._errHandler.sync(this);
        		        _la = this._input.LA(1);
        		    } while(_la===TSqlParser.OLD_PASSWORD);
        		    break;

        		case 5:
        		    this.state = 5126;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		    if(_la===TSqlParser.COMMA) {
        		        this.state = 5125;
        		        this.match(TSqlParser.COMMA);
        		    }

        		    this.state = 5128;
        		    this.match(TSqlParser.DEFAULT_LANGUAGE);
        		    this.state = 5129;
        		    this.match(TSqlParser.EQUAL);
        		    this.state = 5133;
        		    this._errHandler.sync(this);
        		    switch(this._input.LA(1)) {
        		    case TSqlParser.NONE:
        		        this.state = 5130;
        		        this.match(TSqlParser.NONE);
        		        break;
        		    case TSqlParser.DECIMAL:
        		        this.state = 5131;
        		        localctx.lcid = this.match(TSqlParser.DECIMAL);
        		        break;
        		    case TSqlParser.CALLED:
        		    case TSqlParser.DATA_COMPRESSION:
        		    case TSqlParser.EVENTDATA:
        		    case TSqlParser.FILENAME:
        		    case TSqlParser.FILLFACTOR:
        		    case TSqlParser.FORCESEEK:
        		    case TSqlParser.KEY:
        		    case TSqlParser.MASTER:
        		    case TSqlParser.MAX_MEMORY:
        		    case TSqlParser.OFFSETS:
        		    case TSqlParser.PAGE:
        		    case TSqlParser.PUBLIC:
        		    case TSqlParser.RAW:
        		    case TSqlParser.RETURN:
        		    case TSqlParser.RETURNS:
        		    case TSqlParser.ROWCOUNT:
        		    case TSqlParser.SAFETY:
        		    case TSqlParser.SERVER:
        		    case TSqlParser.SID:
        		    case TSqlParser.SOURCE:
        		    case TSqlParser.STATE:
        		    case TSqlParser.TARGET:
        		    case TSqlParser.ABSOLUTE:
        		    case TSqlParser.ACTIVE:
        		    case TSqlParser.ADDRESS:
        		    case TSqlParser.APPLY:
        		    case TSqlParser.AUTO:
        		    case TSqlParser.AVAILABILITY:
        		    case TSqlParser.AVG:
        		    case TSqlParser.CALLER:
        		    case TSqlParser.CAST:
        		    case TSqlParser.CATCH:
        		    case TSqlParser.CHECKSUM_AGG:
        		    case TSqlParser.COMMITTED:
        		    case TSqlParser.CONCAT:
        		    case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        		    case TSqlParser.CONTROL:
        		    case TSqlParser.COOKIE:
        		    case TSqlParser.COUNT:
        		    case TSqlParser.COUNTER:
        		    case TSqlParser.COUNT_BIG:
        		    case TSqlParser.DELAY:
        		    case TSqlParser.DELETED:
        		    case TSqlParser.DENSE_RANK:
        		    case TSqlParser.DISABLE:
        		    case TSqlParser.DYNAMIC:
        		    case TSqlParser.ENCRYPTION:
        		    case TSqlParser.EXPAND:
        		    case TSqlParser.FAST:
        		    case TSqlParser.FAST_FORWARD:
        		    case TSqlParser.FIRST:
        		    case TSqlParser.FOLLOWING:
        		    case TSqlParser.FORCE:
        		    case TSqlParser.FORCED:
        		    case TSqlParser.FORWARD_ONLY:
        		    case TSqlParser.FULLSCAN:
        		    case TSqlParser.GLOBAL:
        		    case TSqlParser.GROUPING:
        		    case TSqlParser.GROUPING_ID:
        		    case TSqlParser.HASH:
        		    case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        		    case TSqlParser.IMPERSONATE:
        		    case TSqlParser.INPUT:
        		    case TSqlParser.INSENSITIVE:
        		    case TSqlParser.INSERTED:
        		    case TSqlParser.ISOLATION:
        		    case TSqlParser.KEEP:
        		    case TSqlParser.KEEPFIXED:
        		    case TSqlParser.KEYSET:
        		    case TSqlParser.LAST:
        		    case TSqlParser.LEVEL:
        		    case TSqlParser.LOCAL:
        		    case TSqlParser.LOCATION:
        		    case TSqlParser.LOCK_ESCALATION:
        		    case TSqlParser.LOGIN:
        		    case TSqlParser.LOOP:
        		    case TSqlParser.MARK:
        		    case TSqlParser.MAX:
        		    case TSqlParser.MAX_ROLLOVER_FILES:
        		    case TSqlParser.MAXDOP:
        		    case TSqlParser.MAXRECURSION:
        		    case TSqlParser.MIN:
        		    case TSqlParser.MODIFY:
        		    case TSqlParser.NAME:
        		    case TSqlParser.NEXT:
        		    case TSqlParser.NOCOUNT:
        		    case TSqlParser.NOEXPAND:
        		    case TSqlParser.NORECOMPUTE:
        		    case TSqlParser.NTILE:
        		    case TSqlParser.NUMBER:
        		    case TSqlParser.OFFSET:
        		    case TSqlParser.ONLINE:
        		    case TSqlParser.ONLY:
        		    case TSqlParser.OPTIMISTIC:
        		    case TSqlParser.OPTIMIZE:
        		    case TSqlParser.OUT:
        		    case TSqlParser.OUTPUT:
        		    case TSqlParser.OWNER:
        		    case TSqlParser.PARAMETERIZATION:
        		    case TSqlParser.PARTITION:
        		    case TSqlParser.PATH:
        		    case TSqlParser.PRECEDING:
        		    case TSqlParser.PRIOR:
        		    case TSqlParser.PRIVILEGES:
        		    case TSqlParser.RANGE:
        		    case TSqlParser.RANK:
        		    case TSqlParser.READONLY:
        		    case TSqlParser.READ_ONLY:
        		    case TSqlParser.RECOMPILE:
        		    case TSqlParser.RELATIVE:
        		    case TSqlParser.REMOTE:
        		    case TSqlParser.REPEATABLE:
        		    case TSqlParser.ROBUST:
        		    case TSqlParser.ROOT:
        		    case TSqlParser.ROW:
        		    case TSqlParser.ROWGUID:
        		    case TSqlParser.ROWS:
        		    case TSqlParser.ROW_NUMBER:
        		    case TSqlParser.SAMPLE:
        		    case TSqlParser.SCHEMABINDING:
        		    case TSqlParser.SCROLL:
        		    case TSqlParser.SCROLL_LOCKS:
        		    case TSqlParser.SELF:
        		    case TSqlParser.SERIALIZABLE:
        		    case TSqlParser.SIMPLE:
        		    case TSqlParser.SIZE:
        		    case TSqlParser.SNAPSHOT:
        		    case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        		    case TSqlParser.STATIC:
        		    case TSqlParser.STATS_STREAM:
        		    case TSqlParser.STDEV:
        		    case TSqlParser.STDEVP:
        		    case TSqlParser.SUM:
        		    case TSqlParser.TEXTIMAGE_ON:
        		    case TSqlParser.THROW:
        		    case TSqlParser.TIES:
        		    case TSqlParser.TIME:
        		    case TSqlParser.TRY:
        		    case TSqlParser.TYPE:
        		    case TSqlParser.TYPE_WARNING:
        		    case TSqlParser.UNBOUNDED:
        		    case TSqlParser.UNCOMMITTED:
        		    case TSqlParser.UNKNOWN:
        		    case TSqlParser.USING:
        		    case TSqlParser.VALUE:
        		    case TSqlParser.VAR:
        		    case TSqlParser.VARP:
        		    case TSqlParser.VIEWS:
        		    case TSqlParser.VIEW_METADATA:
        		    case TSqlParser.WORK:
        		    case TSqlParser.XML:
        		    case TSqlParser.XMLNAMESPACES:
        		    case TSqlParser.DOUBLE_QUOTE_ID:
        		    case TSqlParser.SQUARE_BRACKET_ID:
        		    case TSqlParser.ID:
        		        this.state = 5132;
        		        localctx.language_name_or_alias = this.id();
        		        break;
        		    default:
        		        throw new antlr4.error.NoViableAltException(this);
        		    }
        		    break;

        		case 6:
        		    this.state = 5136;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		    if(_la===TSqlParser.COMMA) {
        		        this.state = 5135;
        		        this.match(TSqlParser.COMMA);
        		    }

        		    this.state = 5138;
        		    this.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
        		    this.state = 5139;
        		    this.match(TSqlParser.EQUAL);
        		    this.state = 5140;
        		    _la = this._input.LA(1);
        		    if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
        		    this._errHandler.recoverInline(this);
        		    }
        		    else {
        		    	this._errHandler.reportMatch(this);
        		        this.consume();
        		    }
        		    break;

        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 5143; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,602, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_userContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_user;
    this.user_name = null; // IdContext
    this.login_name = null; // IdContext
    this.schema_name = null; // IdContext
    this.windows_principal = null; // IdContext
    this.language_name_or_alias = null; // IdContext
    this.password = null; // Token
    this.Azure_Active_Directory_principal = null; // IdContext
    this.cert_name = null; // IdContext
    this.asym_key_name = null; // IdContext
    return this;
}

Create_userContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_userContext.prototype.constructor = Create_userContext;

Create_userContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_userContext.prototype.USER = function() {
    return this.getToken(TSqlParser.USER, 0);
};

Create_userContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_userContext.prototype.LOGIN = function() {
    return this.getToken(TSqlParser.LOGIN, 0);
};

Create_userContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_userContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Create_userContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Create_userContext.prototype.DEFAULT_SCHEMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DEFAULT_SCHEMA);
    } else {
        return this.getToken(TSqlParser.DEFAULT_SCHEMA, i);
    }
};


Create_userContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Create_userContext.prototype.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
    } else {
        return this.getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
    }
};


Create_userContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ON);
    } else {
        return this.getToken(TSqlParser.ON, i);
    }
};


Create_userContext.prototype.OFF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.OFF);
    } else {
        return this.getToken(TSqlParser.OFF, i);
    }
};


Create_userContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Create_userContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Create_userContext.prototype.EXTERNAL = function() {
    return this.getToken(TSqlParser.EXTERNAL, 0);
};

Create_userContext.prototype.PROVIDER = function() {
    return this.getToken(TSqlParser.PROVIDER, 0);
};

Create_userContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Create_userContext.prototype.DEFAULT_LANGUAGE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DEFAULT_LANGUAGE);
    } else {
        return this.getToken(TSqlParser.DEFAULT_LANGUAGE, i);
    }
};


Create_userContext.prototype.SID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SID);
    } else {
        return this.getToken(TSqlParser.SID, i);
    }
};


Create_userContext.prototype.BINARY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.BINARY);
    } else {
        return this.getToken(TSqlParser.BINARY, i);
    }
};


Create_userContext.prototype.NONE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NONE);
    } else {
        return this.getToken(TSqlParser.NONE, i);
    }
};


Create_userContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Create_userContext.prototype.WITHOUT = function() {
    return this.getToken(TSqlParser.WITHOUT, 0);
};

Create_userContext.prototype.CERTIFICATE = function() {
    return this.getToken(TSqlParser.CERTIFICATE, 0);
};

Create_userContext.prototype.ASYMMETRIC = function() {
    return this.getToken(TSqlParser.ASYMMETRIC, 0);
};

Create_userContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Create_userContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_user(this);
	}
};

Create_userContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_user(this);
	}
};




TSqlParser.Create_userContext = Create_userContext;

TSqlParser.prototype.create_user = function() {

    var localctx = new Create_userContext(this, this._ctx, this.state);
    this.enterRule(localctx, 398, TSqlParser.RULE_create_user);
    var _la = 0; // Token type
    try {
        this.state = 5291;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,630,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5145;
            this.match(TSqlParser.CREATE);
            this.state = 5146;
            this.match(TSqlParser.USER);
            this.state = 5147;
            localctx.user_name = this.id();
            this.state = 5151;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.FOR || _la===TSqlParser.FROM) {
                this.state = 5148;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.FOR || _la===TSqlParser.FROM)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5149;
                this.match(TSqlParser.LOGIN);
                this.state = 5150;
                localctx.login_name = this.id();
            }

            this.state = 5171;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,608,this._ctx);
            if(la_===1) {
                this.state = 5153;
                this.match(TSqlParser.WITH);
                this.state = 5168;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===TSqlParser.DEFAULT_SCHEMA || _la===TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS || _la===TSqlParser.COMMA) {
                    this.state = 5166;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,606,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 5155;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 5154;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 5157;
                        this.match(TSqlParser.DEFAULT_SCHEMA);
                        this.state = 5158;
                        this.match(TSqlParser.EQUAL);
                        this.state = 5159;
                        localctx.schema_name = this.id();
                        break;

                    case 2:
                        this.state = 5161;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 5160;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 5163;
                        this.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
                        this.state = 5164;
                        this.match(TSqlParser.EQUAL);
                        this.state = 5165;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    }
                    this.state = 5170;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5173;
            this.match(TSqlParser.CREATE);
            this.state = 5174;
            this.match(TSqlParser.USER);
            this.state = 5255;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,624,this._ctx);
            switch(la_) {
            case 1:
                this.state = 5175;
                localctx.windows_principal = this.id();
                this.state = 5210;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,616,this._ctx);
                if(la_===1) {
                    this.state = 5176;
                    this.match(TSqlParser.WITH);
                    this.state = 5207;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,615,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 5205;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input,614,this._ctx);
                            switch(la_) {
                            case 1:
                                this.state = 5178;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if(_la===TSqlParser.COMMA) {
                                    this.state = 5177;
                                    this.match(TSqlParser.COMMA);
                                }

                                this.state = 5180;
                                this.match(TSqlParser.DEFAULT_SCHEMA);
                                this.state = 5181;
                                this.match(TSqlParser.EQUAL);
                                this.state = 5182;
                                localctx.schema_name = this.id();
                                break;

                            case 2:
                                this.state = 5184;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if(_la===TSqlParser.COMMA) {
                                    this.state = 5183;
                                    this.match(TSqlParser.COMMA);
                                }

                                this.state = 5186;
                                this.match(TSqlParser.DEFAULT_LANGUAGE);
                                this.state = 5187;
                                this.match(TSqlParser.EQUAL);
                                this.state = 5191;
                                this._errHandler.sync(this);
                                switch(this._input.LA(1)) {
                                case TSqlParser.NONE:
                                    this.state = 5188;
                                    this.match(TSqlParser.NONE);
                                    break;
                                case TSqlParser.DECIMAL:
                                    this.state = 5189;
                                    this.match(TSqlParser.DECIMAL);
                                    break;
                                case TSqlParser.CALLED:
                                case TSqlParser.DATA_COMPRESSION:
                                case TSqlParser.EVENTDATA:
                                case TSqlParser.FILENAME:
                                case TSqlParser.FILLFACTOR:
                                case TSqlParser.FORCESEEK:
                                case TSqlParser.KEY:
                                case TSqlParser.MASTER:
                                case TSqlParser.MAX_MEMORY:
                                case TSqlParser.OFFSETS:
                                case TSqlParser.PAGE:
                                case TSqlParser.PUBLIC:
                                case TSqlParser.RAW:
                                case TSqlParser.RETURN:
                                case TSqlParser.RETURNS:
                                case TSqlParser.ROWCOUNT:
                                case TSqlParser.SAFETY:
                                case TSqlParser.SERVER:
                                case TSqlParser.SID:
                                case TSqlParser.SOURCE:
                                case TSqlParser.STATE:
                                case TSqlParser.TARGET:
                                case TSqlParser.ABSOLUTE:
                                case TSqlParser.ACTIVE:
                                case TSqlParser.ADDRESS:
                                case TSqlParser.APPLY:
                                case TSqlParser.AUTO:
                                case TSqlParser.AVAILABILITY:
                                case TSqlParser.AVG:
                                case TSqlParser.CALLER:
                                case TSqlParser.CAST:
                                case TSqlParser.CATCH:
                                case TSqlParser.CHECKSUM_AGG:
                                case TSqlParser.COMMITTED:
                                case TSqlParser.CONCAT:
                                case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                                case TSqlParser.CONTROL:
                                case TSqlParser.COOKIE:
                                case TSqlParser.COUNT:
                                case TSqlParser.COUNTER:
                                case TSqlParser.COUNT_BIG:
                                case TSqlParser.DELAY:
                                case TSqlParser.DELETED:
                                case TSqlParser.DENSE_RANK:
                                case TSqlParser.DISABLE:
                                case TSqlParser.DYNAMIC:
                                case TSqlParser.ENCRYPTION:
                                case TSqlParser.EXPAND:
                                case TSqlParser.FAST:
                                case TSqlParser.FAST_FORWARD:
                                case TSqlParser.FIRST:
                                case TSqlParser.FOLLOWING:
                                case TSqlParser.FORCE:
                                case TSqlParser.FORCED:
                                case TSqlParser.FORWARD_ONLY:
                                case TSqlParser.FULLSCAN:
                                case TSqlParser.GLOBAL:
                                case TSqlParser.GROUPING:
                                case TSqlParser.GROUPING_ID:
                                case TSqlParser.HASH:
                                case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                                case TSqlParser.IMPERSONATE:
                                case TSqlParser.INPUT:
                                case TSqlParser.INSENSITIVE:
                                case TSqlParser.INSERTED:
                                case TSqlParser.ISOLATION:
                                case TSqlParser.KEEP:
                                case TSqlParser.KEEPFIXED:
                                case TSqlParser.KEYSET:
                                case TSqlParser.LAST:
                                case TSqlParser.LEVEL:
                                case TSqlParser.LOCAL:
                                case TSqlParser.LOCATION:
                                case TSqlParser.LOCK_ESCALATION:
                                case TSqlParser.LOGIN:
                                case TSqlParser.LOOP:
                                case TSqlParser.MARK:
                                case TSqlParser.MAX:
                                case TSqlParser.MAX_ROLLOVER_FILES:
                                case TSqlParser.MAXDOP:
                                case TSqlParser.MAXRECURSION:
                                case TSqlParser.MIN:
                                case TSqlParser.MODIFY:
                                case TSqlParser.NAME:
                                case TSqlParser.NEXT:
                                case TSqlParser.NOCOUNT:
                                case TSqlParser.NOEXPAND:
                                case TSqlParser.NORECOMPUTE:
                                case TSqlParser.NTILE:
                                case TSqlParser.NUMBER:
                                case TSqlParser.OFFSET:
                                case TSqlParser.ONLINE:
                                case TSqlParser.ONLY:
                                case TSqlParser.OPTIMISTIC:
                                case TSqlParser.OPTIMIZE:
                                case TSqlParser.OUT:
                                case TSqlParser.OUTPUT:
                                case TSqlParser.OWNER:
                                case TSqlParser.PARAMETERIZATION:
                                case TSqlParser.PARTITION:
                                case TSqlParser.PATH:
                                case TSqlParser.PRECEDING:
                                case TSqlParser.PRIOR:
                                case TSqlParser.PRIVILEGES:
                                case TSqlParser.RANGE:
                                case TSqlParser.RANK:
                                case TSqlParser.READONLY:
                                case TSqlParser.READ_ONLY:
                                case TSqlParser.RECOMPILE:
                                case TSqlParser.RELATIVE:
                                case TSqlParser.REMOTE:
                                case TSqlParser.REPEATABLE:
                                case TSqlParser.ROBUST:
                                case TSqlParser.ROOT:
                                case TSqlParser.ROW:
                                case TSqlParser.ROWGUID:
                                case TSqlParser.ROWS:
                                case TSqlParser.ROW_NUMBER:
                                case TSqlParser.SAMPLE:
                                case TSqlParser.SCHEMABINDING:
                                case TSqlParser.SCROLL:
                                case TSqlParser.SCROLL_LOCKS:
                                case TSqlParser.SELF:
                                case TSqlParser.SERIALIZABLE:
                                case TSqlParser.SIMPLE:
                                case TSqlParser.SIZE:
                                case TSqlParser.SNAPSHOT:
                                case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                                case TSqlParser.STATIC:
                                case TSqlParser.STATS_STREAM:
                                case TSqlParser.STDEV:
                                case TSqlParser.STDEVP:
                                case TSqlParser.SUM:
                                case TSqlParser.TEXTIMAGE_ON:
                                case TSqlParser.THROW:
                                case TSqlParser.TIES:
                                case TSqlParser.TIME:
                                case TSqlParser.TRY:
                                case TSqlParser.TYPE:
                                case TSqlParser.TYPE_WARNING:
                                case TSqlParser.UNBOUNDED:
                                case TSqlParser.UNCOMMITTED:
                                case TSqlParser.UNKNOWN:
                                case TSqlParser.USING:
                                case TSqlParser.VALUE:
                                case TSqlParser.VAR:
                                case TSqlParser.VARP:
                                case TSqlParser.VIEWS:
                                case TSqlParser.VIEW_METADATA:
                                case TSqlParser.WORK:
                                case TSqlParser.XML:
                                case TSqlParser.XMLNAMESPACES:
                                case TSqlParser.DOUBLE_QUOTE_ID:
                                case TSqlParser.SQUARE_BRACKET_ID:
                                case TSqlParser.ID:
                                    this.state = 5190;
                                    localctx.language_name_or_alias = this.id();
                                    break;
                                default:
                                    throw new antlr4.error.NoViableAltException(this);
                                }
                                break;

                            case 3:
                                this.state = 5194;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if(_la===TSqlParser.COMMA) {
                                    this.state = 5193;
                                    this.match(TSqlParser.COMMA);
                                }

                                this.state = 5196;
                                this.match(TSqlParser.SID);
                                this.state = 5197;
                                this.match(TSqlParser.EQUAL);
                                this.state = 5198;
                                this.match(TSqlParser.BINARY);
                                break;

                            case 4:
                                this.state = 5200;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if(_la===TSqlParser.COMMA) {
                                    this.state = 5199;
                                    this.match(TSqlParser.COMMA);
                                }

                                this.state = 5202;
                                this.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
                                this.state = 5203;
                                this.match(TSqlParser.EQUAL);
                                this.state = 5204;
                                _la = this._input.LA(1);
                                if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                                this._errHandler.recoverInline(this);
                                }
                                else {
                                	this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                                break;

                            } 
                        }
                        this.state = 5209;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,615,this._ctx);
                    }


                }
                break;

            case 2:
                this.state = 5212;
                localctx.user_name = this.id();
                this.state = 5213;
                this.match(TSqlParser.WITH);
                this.state = 5214;
                this.match(TSqlParser.PASSWORD);
                this.state = 5215;
                this.match(TSqlParser.EQUAL);
                this.state = 5216;
                localctx.password = this.match(TSqlParser.STRING);
                this.state = 5247;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,623,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 5245;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input,622,this._ctx);
                        switch(la_) {
                        case 1:
                            this.state = 5218;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(_la===TSqlParser.COMMA) {
                                this.state = 5217;
                                this.match(TSqlParser.COMMA);
                            }

                            this.state = 5220;
                            this.match(TSqlParser.DEFAULT_SCHEMA);
                            this.state = 5221;
                            this.match(TSqlParser.EQUAL);
                            this.state = 5222;
                            localctx.schema_name = this.id();
                            break;

                        case 2:
                            this.state = 5224;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(_la===TSqlParser.COMMA) {
                                this.state = 5223;
                                this.match(TSqlParser.COMMA);
                            }

                            this.state = 5226;
                            this.match(TSqlParser.DEFAULT_LANGUAGE);
                            this.state = 5227;
                            this.match(TSqlParser.EQUAL);
                            this.state = 5231;
                            this._errHandler.sync(this);
                            switch(this._input.LA(1)) {
                            case TSqlParser.NONE:
                                this.state = 5228;
                                this.match(TSqlParser.NONE);
                                break;
                            case TSqlParser.DECIMAL:
                                this.state = 5229;
                                this.match(TSqlParser.DECIMAL);
                                break;
                            case TSqlParser.CALLED:
                            case TSqlParser.DATA_COMPRESSION:
                            case TSqlParser.EVENTDATA:
                            case TSqlParser.FILENAME:
                            case TSqlParser.FILLFACTOR:
                            case TSqlParser.FORCESEEK:
                            case TSqlParser.KEY:
                            case TSqlParser.MASTER:
                            case TSqlParser.MAX_MEMORY:
                            case TSqlParser.OFFSETS:
                            case TSqlParser.PAGE:
                            case TSqlParser.PUBLIC:
                            case TSqlParser.RAW:
                            case TSqlParser.RETURN:
                            case TSqlParser.RETURNS:
                            case TSqlParser.ROWCOUNT:
                            case TSqlParser.SAFETY:
                            case TSqlParser.SERVER:
                            case TSqlParser.SID:
                            case TSqlParser.SOURCE:
                            case TSqlParser.STATE:
                            case TSqlParser.TARGET:
                            case TSqlParser.ABSOLUTE:
                            case TSqlParser.ACTIVE:
                            case TSqlParser.ADDRESS:
                            case TSqlParser.APPLY:
                            case TSqlParser.AUTO:
                            case TSqlParser.AVAILABILITY:
                            case TSqlParser.AVG:
                            case TSqlParser.CALLER:
                            case TSqlParser.CAST:
                            case TSqlParser.CATCH:
                            case TSqlParser.CHECKSUM_AGG:
                            case TSqlParser.COMMITTED:
                            case TSqlParser.CONCAT:
                            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                            case TSqlParser.CONTROL:
                            case TSqlParser.COOKIE:
                            case TSqlParser.COUNT:
                            case TSqlParser.COUNTER:
                            case TSqlParser.COUNT_BIG:
                            case TSqlParser.DELAY:
                            case TSqlParser.DELETED:
                            case TSqlParser.DENSE_RANK:
                            case TSqlParser.DISABLE:
                            case TSqlParser.DYNAMIC:
                            case TSqlParser.ENCRYPTION:
                            case TSqlParser.EXPAND:
                            case TSqlParser.FAST:
                            case TSqlParser.FAST_FORWARD:
                            case TSqlParser.FIRST:
                            case TSqlParser.FOLLOWING:
                            case TSqlParser.FORCE:
                            case TSqlParser.FORCED:
                            case TSqlParser.FORWARD_ONLY:
                            case TSqlParser.FULLSCAN:
                            case TSqlParser.GLOBAL:
                            case TSqlParser.GROUPING:
                            case TSqlParser.GROUPING_ID:
                            case TSqlParser.HASH:
                            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                            case TSqlParser.IMPERSONATE:
                            case TSqlParser.INPUT:
                            case TSqlParser.INSENSITIVE:
                            case TSqlParser.INSERTED:
                            case TSqlParser.ISOLATION:
                            case TSqlParser.KEEP:
                            case TSqlParser.KEEPFIXED:
                            case TSqlParser.KEYSET:
                            case TSqlParser.LAST:
                            case TSqlParser.LEVEL:
                            case TSqlParser.LOCAL:
                            case TSqlParser.LOCATION:
                            case TSqlParser.LOCK_ESCALATION:
                            case TSqlParser.LOGIN:
                            case TSqlParser.LOOP:
                            case TSqlParser.MARK:
                            case TSqlParser.MAX:
                            case TSqlParser.MAX_ROLLOVER_FILES:
                            case TSqlParser.MAXDOP:
                            case TSqlParser.MAXRECURSION:
                            case TSqlParser.MIN:
                            case TSqlParser.MODIFY:
                            case TSqlParser.NAME:
                            case TSqlParser.NEXT:
                            case TSqlParser.NOCOUNT:
                            case TSqlParser.NOEXPAND:
                            case TSqlParser.NORECOMPUTE:
                            case TSqlParser.NTILE:
                            case TSqlParser.NUMBER:
                            case TSqlParser.OFFSET:
                            case TSqlParser.ONLINE:
                            case TSqlParser.ONLY:
                            case TSqlParser.OPTIMISTIC:
                            case TSqlParser.OPTIMIZE:
                            case TSqlParser.OUT:
                            case TSqlParser.OUTPUT:
                            case TSqlParser.OWNER:
                            case TSqlParser.PARAMETERIZATION:
                            case TSqlParser.PARTITION:
                            case TSqlParser.PATH:
                            case TSqlParser.PRECEDING:
                            case TSqlParser.PRIOR:
                            case TSqlParser.PRIVILEGES:
                            case TSqlParser.RANGE:
                            case TSqlParser.RANK:
                            case TSqlParser.READONLY:
                            case TSqlParser.READ_ONLY:
                            case TSqlParser.RECOMPILE:
                            case TSqlParser.RELATIVE:
                            case TSqlParser.REMOTE:
                            case TSqlParser.REPEATABLE:
                            case TSqlParser.ROBUST:
                            case TSqlParser.ROOT:
                            case TSqlParser.ROW:
                            case TSqlParser.ROWGUID:
                            case TSqlParser.ROWS:
                            case TSqlParser.ROW_NUMBER:
                            case TSqlParser.SAMPLE:
                            case TSqlParser.SCHEMABINDING:
                            case TSqlParser.SCROLL:
                            case TSqlParser.SCROLL_LOCKS:
                            case TSqlParser.SELF:
                            case TSqlParser.SERIALIZABLE:
                            case TSqlParser.SIMPLE:
                            case TSqlParser.SIZE:
                            case TSqlParser.SNAPSHOT:
                            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                            case TSqlParser.STATIC:
                            case TSqlParser.STATS_STREAM:
                            case TSqlParser.STDEV:
                            case TSqlParser.STDEVP:
                            case TSqlParser.SUM:
                            case TSqlParser.TEXTIMAGE_ON:
                            case TSqlParser.THROW:
                            case TSqlParser.TIES:
                            case TSqlParser.TIME:
                            case TSqlParser.TRY:
                            case TSqlParser.TYPE:
                            case TSqlParser.TYPE_WARNING:
                            case TSqlParser.UNBOUNDED:
                            case TSqlParser.UNCOMMITTED:
                            case TSqlParser.UNKNOWN:
                            case TSqlParser.USING:
                            case TSqlParser.VALUE:
                            case TSqlParser.VAR:
                            case TSqlParser.VARP:
                            case TSqlParser.VIEWS:
                            case TSqlParser.VIEW_METADATA:
                            case TSqlParser.WORK:
                            case TSqlParser.XML:
                            case TSqlParser.XMLNAMESPACES:
                            case TSqlParser.DOUBLE_QUOTE_ID:
                            case TSqlParser.SQUARE_BRACKET_ID:
                            case TSqlParser.ID:
                                this.state = 5230;
                                localctx.language_name_or_alias = this.id();
                                break;
                            default:
                                throw new antlr4.error.NoViableAltException(this);
                            }
                            break;

                        case 3:
                            this.state = 5234;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(_la===TSqlParser.COMMA) {
                                this.state = 5233;
                                this.match(TSqlParser.COMMA);
                            }

                            this.state = 5236;
                            this.match(TSqlParser.SID);
                            this.state = 5237;
                            this.match(TSqlParser.EQUAL);
                            this.state = 5238;
                            this.match(TSqlParser.BINARY);
                            break;

                        case 4:
                            this.state = 5240;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if(_la===TSqlParser.COMMA) {
                                this.state = 5239;
                                this.match(TSqlParser.COMMA);
                            }

                            this.state = 5242;
                            this.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
                            this.state = 5243;
                            this.match(TSqlParser.EQUAL);
                            this.state = 5244;
                            _la = this._input.LA(1);
                            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                            this._errHandler.recoverInline(this);
                            }
                            else {
                            	this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            break;

                        } 
                    }
                    this.state = 5249;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,623,this._ctx);
                }

                break;

            case 3:
                this.state = 5250;
                localctx.Azure_Active_Directory_principal = this.id();
                this.state = 5251;
                this.match(TSqlParser.FROM);
                this.state = 5252;
                this.match(TSqlParser.EXTERNAL);
                this.state = 5253;
                this.match(TSqlParser.PROVIDER);
                break;

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 5257;
            this.match(TSqlParser.CREATE);
            this.state = 5258;
            this.match(TSqlParser.USER);
            this.state = 5259;
            localctx.user_name = this.id();
            this.state = 5286;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,629,this._ctx);
            switch(la_) {
            case 1:
                this.state = 5260;
                this.match(TSqlParser.WITHOUT);
                this.state = 5261;
                this.match(TSqlParser.LOGIN);
                this.state = 5276;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===TSqlParser.DEFAULT_SCHEMA || _la===TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS || _la===TSqlParser.COMMA) {
                    this.state = 5274;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,627,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 5263;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 5262;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 5265;
                        this.match(TSqlParser.DEFAULT_SCHEMA);
                        this.state = 5266;
                        this.match(TSqlParser.EQUAL);
                        this.state = 5267;
                        localctx.schema_name = this.id();
                        break;

                    case 2:
                        this.state = 5269;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 5268;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 5271;
                        this.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
                        this.state = 5272;
                        this.match(TSqlParser.EQUAL);
                        this.state = 5273;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    }
                    this.state = 5278;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;

            case 2:
                this.state = 5279;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.FOR || _la===TSqlParser.FROM)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5280;
                this.match(TSqlParser.CERTIFICATE);
                this.state = 5281;
                localctx.cert_name = this.id();
                break;

            case 3:
                this.state = 5282;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.FOR || _la===TSqlParser.FROM)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5283;
                this.match(TSqlParser.ASYMMETRIC);
                this.state = 5284;
                this.match(TSqlParser.KEY);
                this.state = 5285;
                localctx.asym_key_name = this.id();
                break;

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 5288;
            this.match(TSqlParser.CREATE);
            this.state = 5289;
            this.match(TSqlParser.USER);
            this.state = 5290;
            localctx.user_name = this.id();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_user_azure_sql_dwContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_user_azure_sql_dw;
    this.user_name = null; // IdContext
    this.login_name = null; // IdContext
    this.schema_name = null; // IdContext
    this.Azure_Active_Directory_principal = null; // IdContext
    return this;
}

Create_user_azure_sql_dwContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_user_azure_sql_dwContext.prototype.constructor = Create_user_azure_sql_dwContext;

Create_user_azure_sql_dwContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_user_azure_sql_dwContext.prototype.USER = function() {
    return this.getToken(TSqlParser.USER, 0);
};

Create_user_azure_sql_dwContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_user_azure_sql_dwContext.prototype.LOGIN = function() {
    return this.getToken(TSqlParser.LOGIN, 0);
};

Create_user_azure_sql_dwContext.prototype.WITHOUT = function() {
    return this.getToken(TSqlParser.WITHOUT, 0);
};

Create_user_azure_sql_dwContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_user_azure_sql_dwContext.prototype.DEFAULT_SCHEMA = function() {
    return this.getToken(TSqlParser.DEFAULT_SCHEMA, 0);
};

Create_user_azure_sql_dwContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Create_user_azure_sql_dwContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Create_user_azure_sql_dwContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Create_user_azure_sql_dwContext.prototype.EXTERNAL = function() {
    return this.getToken(TSqlParser.EXTERNAL, 0);
};

Create_user_azure_sql_dwContext.prototype.PROVIDER = function() {
    return this.getToken(TSqlParser.PROVIDER, 0);
};

Create_user_azure_sql_dwContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_user_azure_sql_dw(this);
	}
};

Create_user_azure_sql_dwContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_user_azure_sql_dw(this);
	}
};




TSqlParser.Create_user_azure_sql_dwContext = Create_user_azure_sql_dwContext;

TSqlParser.prototype.create_user_azure_sql_dw = function() {

    var localctx = new Create_user_azure_sql_dwContext(this, this._ctx, this.state);
    this.enterRule(localctx, 400, TSqlParser.RULE_create_user_azure_sql_dw);
    var _la = 0; // Token type
    try {
        this.state = 5321;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,634,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5293;
            this.match(TSqlParser.CREATE);
            this.state = 5294;
            this.match(TSqlParser.USER);
            this.state = 5295;
            localctx.user_name = this.id();
            this.state = 5301;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case TSqlParser.FOR:
            case TSqlParser.FROM:
            	this.state = 5296;
            	_la = this._input.LA(1);
            	if(!(_la===TSqlParser.FOR || _la===TSqlParser.FROM)) {
            	this._errHandler.recoverInline(this);
            	}
            	else {
            		this._errHandler.reportMatch(this);
            	    this.consume();
            	}
            	this.state = 5297;
            	this.match(TSqlParser.LOGIN);
            	this.state = 5298;
            	localctx.login_name = this.id();
            	break;
            case TSqlParser.WITHOUT:
            	this.state = 5299;
            	this.match(TSqlParser.WITHOUT);
            	this.state = 5300;
            	this.match(TSqlParser.LOGIN);
            	break;
            case TSqlParser.EOF:
            case TSqlParser.ALTER:
            case TSqlParser.BACKUP:
            case TSqlParser.BEGIN:
            case TSqlParser.BREAK:
            case TSqlParser.CALLED:
            case TSqlParser.CLOSE:
            case TSqlParser.COMMIT:
            case TSqlParser.CONTINUE:
            case TSqlParser.CREATE:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.DBCC:
            case TSqlParser.DEALLOCATE:
            case TSqlParser.DECLARE:
            case TSqlParser.DELETE:
            case TSqlParser.DROP:
            case TSqlParser.ELSE:
            case TSqlParser.END:
            case TSqlParser.EVENTDATA:
            case TSqlParser.EXECUTE:
            case TSqlParser.FETCH:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.GET:
            case TSqlParser.GOTO:
            case TSqlParser.GRANT:
            case TSqlParser.IF:
            case TSqlParser.INSERT:
            case TSqlParser.KEY:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.MERGE:
            case TSqlParser.OFFSETS:
            case TSqlParser.OPEN:
            case TSqlParser.PAGE:
            case TSqlParser.PRINT:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAISERROR:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.REVERT:
            case TSqlParser.ROLLBACK:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SAVE:
            case TSqlParser.SELECT:
            case TSqlParser.SERVER:
            case TSqlParser.SET:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.TARGET:
            case TSqlParser.TRUNCATE:
            case TSqlParser.UPDATE:
            case TSqlParser.USE:
            case TSqlParser.WAITFOR:
            case TSqlParser.WHILE:
            case TSqlParser.WITH:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.APPLY:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENABLE:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GLOBAL:
            case TSqlParser.GO:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAST:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SEND:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.ID:
            case TSqlParser.LR_BRACKET:
            case TSqlParser.SEMI:
            	break;
            default:
            	break;
            }
            this.state = 5307;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,632,this._ctx);
            if(la_===1) {
                this.state = 5303;
                this.match(TSqlParser.WITH);
                this.state = 5304;
                this.match(TSqlParser.DEFAULT_SCHEMA);
                this.state = 5305;
                this.match(TSqlParser.EQUAL);
                this.state = 5306;
                localctx.schema_name = this.id();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5309;
            this.match(TSqlParser.CREATE);
            this.state = 5310;
            this.match(TSqlParser.USER);
            this.state = 5311;
            localctx.Azure_Active_Directory_principal = this.id();
            this.state = 5312;
            this.match(TSqlParser.FROM);
            this.state = 5313;
            this.match(TSqlParser.EXTERNAL);
            this.state = 5314;
            this.match(TSqlParser.PROVIDER);
            this.state = 5319;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,633,this._ctx);
            if(la_===1) {
                this.state = 5315;
                this.match(TSqlParser.WITH);
                this.state = 5316;
                this.match(TSqlParser.DEFAULT_SCHEMA);
                this.state = 5317;
                this.match(TSqlParser.EQUAL);
                this.state = 5318;
                localctx.schema_name = this.id();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_user_azure_sqlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_user_azure_sql;
    this.username = null; // IdContext
    this.newusername = null; // IdContext
    this.schema_name = null; // IdContext
    this.loginame = null; // IdContext
    return this;
}

Alter_user_azure_sqlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_user_azure_sqlContext.prototype.constructor = Alter_user_azure_sqlContext;

Alter_user_azure_sqlContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_user_azure_sqlContext.prototype.USER = function() {
    return this.getToken(TSqlParser.USER, 0);
};

Alter_user_azure_sqlContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_user_azure_sqlContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_user_azure_sqlContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NAME);
    } else {
        return this.getToken(TSqlParser.NAME, i);
    }
};


Alter_user_azure_sqlContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Alter_user_azure_sqlContext.prototype.DEFAULT_SCHEMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DEFAULT_SCHEMA);
    } else {
        return this.getToken(TSqlParser.DEFAULT_SCHEMA, i);
    }
};


Alter_user_azure_sqlContext.prototype.LOGIN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LOGIN);
    } else {
        return this.getToken(TSqlParser.LOGIN, i);
    }
};


Alter_user_azure_sqlContext.prototype.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
    } else {
        return this.getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
    }
};


Alter_user_azure_sqlContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ON);
    } else {
        return this.getToken(TSqlParser.ON, i);
    }
};


Alter_user_azure_sqlContext.prototype.OFF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.OFF);
    } else {
        return this.getToken(TSqlParser.OFF, i);
    }
};


Alter_user_azure_sqlContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Alter_user_azure_sqlContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_user_azure_sql(this);
	}
};

Alter_user_azure_sqlContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_user_azure_sql(this);
	}
};




TSqlParser.Alter_user_azure_sqlContext = Alter_user_azure_sqlContext;

TSqlParser.prototype.alter_user_azure_sql = function() {

    var localctx = new Alter_user_azure_sqlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 402, TSqlParser.RULE_alter_user_azure_sql);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5323;
        this.match(TSqlParser.ALTER);
        this.state = 5324;
        this.match(TSqlParser.USER);
        this.state = 5325;
        localctx.username = this.id();
        this.state = 5326;
        this.match(TSqlParser.WITH);
        this.state = 5351; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 5351;
        		this._errHandler.sync(this);
        		var la_ = this._interp.adaptivePredict(this._input,639,this._ctx);
        		switch(la_) {
        		case 1:
        		    this.state = 5328;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		    if(_la===TSqlParser.COMMA) {
        		        this.state = 5327;
        		        this.match(TSqlParser.COMMA);
        		    }

        		    this.state = 5330;
        		    this.match(TSqlParser.NAME);
        		    this.state = 5331;
        		    this.match(TSqlParser.EQUAL);
        		    this.state = 5332;
        		    localctx.newusername = this.id();
        		    break;

        		case 2:
        		    this.state = 5334;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		    if(_la===TSqlParser.COMMA) {
        		        this.state = 5333;
        		        this.match(TSqlParser.COMMA);
        		    }

        		    this.state = 5336;
        		    this.match(TSqlParser.DEFAULT_SCHEMA);
        		    this.state = 5337;
        		    this.match(TSqlParser.EQUAL);
        		    this.state = 5338;
        		    localctx.schema_name = this.id();
        		    break;

        		case 3:
        		    this.state = 5340;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		    if(_la===TSqlParser.COMMA) {
        		        this.state = 5339;
        		        this.match(TSqlParser.COMMA);
        		    }

        		    this.state = 5342;
        		    this.match(TSqlParser.LOGIN);
        		    this.state = 5343;
        		    this.match(TSqlParser.EQUAL);
        		    this.state = 5344;
        		    localctx.loginame = this.id();
        		    break;

        		case 4:
        		    this.state = 5346;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		    if(_la===TSqlParser.COMMA) {
        		        this.state = 5345;
        		        this.match(TSqlParser.COMMA);
        		    }

        		    this.state = 5348;
        		    this.match(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
        		    this.state = 5349;
        		    this.match(TSqlParser.EQUAL);
        		    this.state = 5350;
        		    _la = this._input.LA(1);
        		    if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
        		    this._errHandler.recoverInline(this);
        		    }
        		    else {
        		    	this._errHandler.reportMatch(this);
        		        this.consume();
        		    }
        		    break;

        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 5353; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,640, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_workload_groupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_workload_group;
    this.workload_group_group_name = null; // IdContext
    this.request_max_memory_grant = null; // Token
    this.request_max_cpu_time_sec = null; // Token
    this.request_memory_grant_timeout_sec = null; // Token
    this.max_dop = null; // Token
    this.group_max_requests = null; // Token
    this.workload_group_pool_name = null; // IdContext
    return this;
}

Alter_workload_groupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_workload_groupContext.prototype.constructor = Alter_workload_groupContext;

Alter_workload_groupContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_workload_groupContext.prototype.WORKLOAD = function() {
    return this.getToken(TSqlParser.WORKLOAD, 0);
};

Alter_workload_groupContext.prototype.GROUP = function() {
    return this.getToken(TSqlParser.GROUP, 0);
};

Alter_workload_groupContext.prototype.DEFAULT_DOUBLE_QUOTE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE);
    } else {
        return this.getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
    }
};


Alter_workload_groupContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_workload_groupContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_workload_groupContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Alter_workload_groupContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Alter_workload_groupContext.prototype.USING = function() {
    return this.getToken(TSqlParser.USING, 0);
};

Alter_workload_groupContext.prototype.IMPORTANCE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.IMPORTANCE);
    } else {
        return this.getToken(TSqlParser.IMPORTANCE, i);
    }
};


Alter_workload_groupContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Alter_workload_groupContext.prototype.REQUEST_MAX_MEMORY_GRANT_PERCENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT);
    } else {
        return this.getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
    }
};


Alter_workload_groupContext.prototype.REQUEST_MAX_CPU_TIME_SEC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC);
    } else {
        return this.getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
    }
};


Alter_workload_groupContext.prototype.REQUEST_MEMORY_GRANT_TIMEOUT_SEC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
    } else {
        return this.getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
    }
};


Alter_workload_groupContext.prototype.MAX_DOP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MAX_DOP);
    } else {
        return this.getToken(TSqlParser.MAX_DOP, i);
    }
};


Alter_workload_groupContext.prototype.GROUP_MAX_REQUESTS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.GROUP_MAX_REQUESTS);
    } else {
        return this.getToken(TSqlParser.GROUP_MAX_REQUESTS, i);
    }
};


Alter_workload_groupContext.prototype.LOW = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LOW);
    } else {
        return this.getToken(TSqlParser.LOW, i);
    }
};


Alter_workload_groupContext.prototype.MEDIUM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MEDIUM);
    } else {
        return this.getToken(TSqlParser.MEDIUM, i);
    }
};


Alter_workload_groupContext.prototype.HIGH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.HIGH);
    } else {
        return this.getToken(TSqlParser.HIGH, i);
    }
};


Alter_workload_groupContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Alter_workload_groupContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Alter_workload_groupContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_workload_group(this);
	}
};

Alter_workload_groupContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_workload_group(this);
	}
};




TSqlParser.Alter_workload_groupContext = Alter_workload_groupContext;

TSqlParser.prototype.alter_workload_group = function() {

    var localctx = new Alter_workload_groupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 404, TSqlParser.RULE_alter_workload_group);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5355;
        this.match(TSqlParser.ALTER);
        this.state = 5356;
        this.match(TSqlParser.WORKLOAD);
        this.state = 5357;
        this.match(TSqlParser.GROUP);
        this.state = 5360;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.state = 5358;
            localctx.workload_group_group_name = this.id();
            break;
        case TSqlParser.DEFAULT_DOUBLE_QUOTE:
            this.state = 5359;
            this.match(TSqlParser.DEFAULT_DOUBLE_QUOTE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 5393;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,646,this._ctx);
        if(la_===1) {
            this.state = 5362;
            this.match(TSqlParser.WITH);
            this.state = 5363;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 5388; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 5388;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,644,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 5364;
                    this.match(TSqlParser.IMPORTANCE);
                    this.state = 5365;
                    this.match(TSqlParser.EQUAL);
                    this.state = 5366;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.HIGH || _la===TSqlParser.LOW || _la===TSqlParser.MEDIUM)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                case 2:
                    this.state = 5368;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 5367;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 5370;
                    this.match(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT);
                    this.state = 5371;
                    this.match(TSqlParser.EQUAL);
                    this.state = 5372;
                    localctx.request_max_memory_grant = this.match(TSqlParser.DECIMAL);
                    break;

                case 3:
                    this.state = 5374;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 5373;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 5376;
                    this.match(TSqlParser.REQUEST_MAX_CPU_TIME_SEC);
                    this.state = 5377;
                    this.match(TSqlParser.EQUAL);
                    this.state = 5378;
                    localctx.request_max_cpu_time_sec = this.match(TSqlParser.DECIMAL);
                    break;

                case 4:
                    this.state = 5379;
                    this.match(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
                    this.state = 5380;
                    this.match(TSqlParser.EQUAL);
                    this.state = 5381;
                    localctx.request_memory_grant_timeout_sec = this.match(TSqlParser.DECIMAL);
                    break;

                case 5:
                    this.state = 5382;
                    this.match(TSqlParser.MAX_DOP);
                    this.state = 5383;
                    this.match(TSqlParser.EQUAL);
                    this.state = 5384;
                    localctx.max_dop = this.match(TSqlParser.DECIMAL);
                    break;

                case 6:
                    this.state = 5385;
                    this.match(TSqlParser.GROUP_MAX_REQUESTS);
                    this.state = 5386;
                    this.match(TSqlParser.EQUAL);
                    this.state = 5387;
                    localctx.group_max_requests = this.match(TSqlParser.DECIMAL);
                    break;

                }
                this.state = 5390; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.GROUP_MAX_REQUESTS || _la===TSqlParser.IMPORTANCE || _la===TSqlParser.MAX_DOP || ((((_la - 675)) & ~0x1f) == 0 && ((1 << (_la - 675)) & ((1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 675)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 675)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 675)))) !== 0) || _la===TSqlParser.COMMA);
            this.state = 5392;
            this.match(TSqlParser.RR_BRACKET);

        }
        this.state = 5400;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,648,this._ctx);
        if(la_===1) {
            this.state = 5395;
            this.match(TSqlParser.USING);
            this.state = 5398;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.CALLED:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.EVENTDATA:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.KEY:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.OFFSETS:
            case TSqlParser.PAGE:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SERVER:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.TARGET:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.APPLY:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GLOBAL:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAST:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.ID:
                this.state = 5396;
                localctx.workload_group_pool_name = this.id();
                break;
            case TSqlParser.DEFAULT_DOUBLE_QUOTE:
                this.state = 5397;
                this.match(TSqlParser.DEFAULT_DOUBLE_QUOTE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_workload_groupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_workload_group;
    this.workload_group_group_name = null; // IdContext
    this.request_max_memory_grant = null; // Token
    this.request_max_cpu_time_sec = null; // Token
    this.request_memory_grant_timeout_sec = null; // Token
    this.max_dop = null; // Token
    this.group_max_requests = null; // Token
    this.workload_group_pool_name = null; // IdContext
    this.external_pool_name = null; // IdContext
    return this;
}

Create_workload_groupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_workload_groupContext.prototype.constructor = Create_workload_groupContext;

Create_workload_groupContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_workload_groupContext.prototype.WORKLOAD = function() {
    return this.getToken(TSqlParser.WORKLOAD, 0);
};

Create_workload_groupContext.prototype.GROUP = function() {
    return this.getToken(TSqlParser.GROUP, 0);
};

Create_workload_groupContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_workload_groupContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_workload_groupContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Create_workload_groupContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Create_workload_groupContext.prototype.USING = function() {
    return this.getToken(TSqlParser.USING, 0);
};

Create_workload_groupContext.prototype.IMPORTANCE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.IMPORTANCE);
    } else {
        return this.getToken(TSqlParser.IMPORTANCE, i);
    }
};


Create_workload_groupContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Create_workload_groupContext.prototype.REQUEST_MAX_MEMORY_GRANT_PERCENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT);
    } else {
        return this.getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
    }
};


Create_workload_groupContext.prototype.REQUEST_MAX_CPU_TIME_SEC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC);
    } else {
        return this.getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
    }
};


Create_workload_groupContext.prototype.REQUEST_MEMORY_GRANT_TIMEOUT_SEC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
    } else {
        return this.getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
    }
};


Create_workload_groupContext.prototype.MAX_DOP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MAX_DOP);
    } else {
        return this.getToken(TSqlParser.MAX_DOP, i);
    }
};


Create_workload_groupContext.prototype.GROUP_MAX_REQUESTS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.GROUP_MAX_REQUESTS);
    } else {
        return this.getToken(TSqlParser.GROUP_MAX_REQUESTS, i);
    }
};


Create_workload_groupContext.prototype.DEFAULT_DOUBLE_QUOTE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE);
    } else {
        return this.getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
    }
};


Create_workload_groupContext.prototype.EXTERNAL = function() {
    return this.getToken(TSqlParser.EXTERNAL, 0);
};

Create_workload_groupContext.prototype.LOW = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LOW);
    } else {
        return this.getToken(TSqlParser.LOW, i);
    }
};


Create_workload_groupContext.prototype.MEDIUM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MEDIUM);
    } else {
        return this.getToken(TSqlParser.MEDIUM, i);
    }
};


Create_workload_groupContext.prototype.HIGH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.HIGH);
    } else {
        return this.getToken(TSqlParser.HIGH, i);
    }
};


Create_workload_groupContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Create_workload_groupContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Create_workload_groupContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_workload_group(this);
	}
};

Create_workload_groupContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_workload_group(this);
	}
};




TSqlParser.Create_workload_groupContext = Create_workload_groupContext;

TSqlParser.prototype.create_workload_group = function() {

    var localctx = new Create_workload_groupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 406, TSqlParser.RULE_create_workload_group);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5402;
        this.match(TSqlParser.CREATE);
        this.state = 5403;
        this.match(TSqlParser.WORKLOAD);
        this.state = 5404;
        this.match(TSqlParser.GROUP);
        this.state = 5405;
        localctx.workload_group_group_name = this.id();
        this.state = 5437;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,653,this._ctx);
        if(la_===1) {
            this.state = 5406;
            this.match(TSqlParser.WITH);
            this.state = 5407;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 5432; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 5432;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,651,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 5408;
                    this.match(TSqlParser.IMPORTANCE);
                    this.state = 5409;
                    this.match(TSqlParser.EQUAL);
                    this.state = 5410;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.HIGH || _la===TSqlParser.LOW || _la===TSqlParser.MEDIUM)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                case 2:
                    this.state = 5412;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 5411;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 5414;
                    this.match(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT);
                    this.state = 5415;
                    this.match(TSqlParser.EQUAL);
                    this.state = 5416;
                    localctx.request_max_memory_grant = this.match(TSqlParser.DECIMAL);
                    break;

                case 3:
                    this.state = 5418;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 5417;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 5420;
                    this.match(TSqlParser.REQUEST_MAX_CPU_TIME_SEC);
                    this.state = 5421;
                    this.match(TSqlParser.EQUAL);
                    this.state = 5422;
                    localctx.request_max_cpu_time_sec = this.match(TSqlParser.DECIMAL);
                    break;

                case 4:
                    this.state = 5423;
                    this.match(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
                    this.state = 5424;
                    this.match(TSqlParser.EQUAL);
                    this.state = 5425;
                    localctx.request_memory_grant_timeout_sec = this.match(TSqlParser.DECIMAL);
                    break;

                case 5:
                    this.state = 5426;
                    this.match(TSqlParser.MAX_DOP);
                    this.state = 5427;
                    this.match(TSqlParser.EQUAL);
                    this.state = 5428;
                    localctx.max_dop = this.match(TSqlParser.DECIMAL);
                    break;

                case 6:
                    this.state = 5429;
                    this.match(TSqlParser.GROUP_MAX_REQUESTS);
                    this.state = 5430;
                    this.match(TSqlParser.EQUAL);
                    this.state = 5431;
                    localctx.group_max_requests = this.match(TSqlParser.DECIMAL);
                    break;

                }
                this.state = 5434; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.GROUP_MAX_REQUESTS || _la===TSqlParser.IMPORTANCE || _la===TSqlParser.MAX_DOP || ((((_la - 675)) & ~0x1f) == 0 && ((1 << (_la - 675)) & ((1 << (TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT - 675)) | (1 << (TSqlParser.REQUEST_MAX_CPU_TIME_SEC - 675)) | (1 << (TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 675)))) !== 0) || _la===TSqlParser.COMMA);
            this.state = 5436;
            this.match(TSqlParser.RR_BRACKET);

        }
        this.state = 5452;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,657,this._ctx);
        if(la_===1) {
            this.state = 5439;
            this.match(TSqlParser.USING);
            this.state = 5442;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,654,this._ctx);
            if(la_===1) {
                this.state = 5440;
                localctx.workload_group_pool_name = this.id();

            } else if(la_===2) {
                this.state = 5441;
                this.match(TSqlParser.DEFAULT_DOUBLE_QUOTE);

            }
            this.state = 5450;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case TSqlParser.EXTERNAL:
            case TSqlParser.COMMA:
            	this.state = 5445;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if(_la===TSqlParser.COMMA) {
            	    this.state = 5444;
            	    this.match(TSqlParser.COMMA);
            	}

            	this.state = 5447;
            	this.match(TSqlParser.EXTERNAL);
            	this.state = 5448;
            	localctx.external_pool_name = this.id();
            	break;
            case TSqlParser.DEFAULT_DOUBLE_QUOTE:
            	this.state = 5449;
            	this.match(TSqlParser.DEFAULT_DOUBLE_QUOTE);
            	break;
            case TSqlParser.EOF:
            case TSqlParser.ALTER:
            case TSqlParser.BACKUP:
            case TSqlParser.BEGIN:
            case TSqlParser.BREAK:
            case TSqlParser.CALLED:
            case TSqlParser.CLOSE:
            case TSqlParser.COMMIT:
            case TSqlParser.CONTINUE:
            case TSqlParser.CREATE:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.DBCC:
            case TSqlParser.DEALLOCATE:
            case TSqlParser.DECLARE:
            case TSqlParser.DELETE:
            case TSqlParser.DROP:
            case TSqlParser.ELSE:
            case TSqlParser.END:
            case TSqlParser.EVENTDATA:
            case TSqlParser.EXECUTE:
            case TSqlParser.FETCH:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.GET:
            case TSqlParser.GOTO:
            case TSqlParser.GRANT:
            case TSqlParser.IF:
            case TSqlParser.INSERT:
            case TSqlParser.KEY:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.MERGE:
            case TSqlParser.OFFSETS:
            case TSqlParser.OPEN:
            case TSqlParser.PAGE:
            case TSqlParser.PRINT:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAISERROR:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.REVERT:
            case TSqlParser.ROLLBACK:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SAVE:
            case TSqlParser.SELECT:
            case TSqlParser.SERVER:
            case TSqlParser.SET:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.TARGET:
            case TSqlParser.TRUNCATE:
            case TSqlParser.UPDATE:
            case TSqlParser.USE:
            case TSqlParser.WAITFOR:
            case TSqlParser.WHILE:
            case TSqlParser.WITH:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.APPLY:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENABLE:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GLOBAL:
            case TSqlParser.GO:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAST:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SEND:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.ID:
            case TSqlParser.LR_BRACKET:
            case TSqlParser.SEMI:
            	break;
            default:
            	break;
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_xml_schema_collectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_xml_schema_collection;
    this.relational_schema = null; // IdContext
    this.sql_identifier = null; // IdContext
    return this;
}

Create_xml_schema_collectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_xml_schema_collectionContext.prototype.constructor = Create_xml_schema_collectionContext;

Create_xml_schema_collectionContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_xml_schema_collectionContext.prototype.XML = function() {
    return this.getToken(TSqlParser.XML, 0);
};

Create_xml_schema_collectionContext.prototype.SCHEMA = function() {
    return this.getToken(TSqlParser.SCHEMA, 0);
};

Create_xml_schema_collectionContext.prototype.COLLECTION = function() {
    return this.getToken(TSqlParser.COLLECTION, 0);
};

Create_xml_schema_collectionContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Create_xml_schema_collectionContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_xml_schema_collectionContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Create_xml_schema_collectionContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Create_xml_schema_collectionContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

Create_xml_schema_collectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_xml_schema_collection(this);
	}
};

Create_xml_schema_collectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_xml_schema_collection(this);
	}
};




TSqlParser.Create_xml_schema_collectionContext = Create_xml_schema_collectionContext;

TSqlParser.prototype.create_xml_schema_collection = function() {

    var localctx = new Create_xml_schema_collectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 408, TSqlParser.RULE_create_xml_schema_collection);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5454;
        this.match(TSqlParser.CREATE);
        this.state = 5455;
        this.match(TSqlParser.XML);
        this.state = 5456;
        this.match(TSqlParser.SCHEMA);
        this.state = 5457;
        this.match(TSqlParser.COLLECTION);
        this.state = 5461;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,658,this._ctx);
        if(la_===1) {
            this.state = 5458;
            localctx.relational_schema = this.id();
            this.state = 5459;
            this.match(TSqlParser.DOT);

        }
        this.state = 5463;
        localctx.sql_identifier = this.id();
        this.state = 5464;
        this.match(TSqlParser.AS);
        this.state = 5468;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.STRING:
            this.state = 5465;
            this.match(TSqlParser.STRING);
            break;
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.state = 5466;
            this.id();
            break;
        case TSqlParser.LOCAL_ID:
            this.state = 5467;
            this.match(TSqlParser.LOCAL_ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_queueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_queue;
    this.queue_name = null; // IdContext
    this.filegroup = null; // IdContext
    return this;
}

Create_queueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_queueContext.prototype.constructor = Create_queueContext;

Create_queueContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_queueContext.prototype.QUEUE = function() {
    return this.getToken(TSqlParser.QUEUE, 0);
};

Create_queueContext.prototype.full_table_name = function() {
    return this.getTypedRuleContext(Full_table_nameContext,0);
};

Create_queueContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_queueContext.prototype.queue_settings = function() {
    return this.getTypedRuleContext(Queue_settingsContext,0);
};

Create_queueContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Create_queueContext.prototype.DEFAULT = function() {
    return this.getToken(TSqlParser.DEFAULT, 0);
};

Create_queueContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_queue(this);
	}
};

Create_queueContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_queue(this);
	}
};




TSqlParser.Create_queueContext = Create_queueContext;

TSqlParser.prototype.create_queue = function() {

    var localctx = new Create_queueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 410, TSqlParser.RULE_create_queue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5470;
        this.match(TSqlParser.CREATE);
        this.state = 5471;
        this.match(TSqlParser.QUEUE);
        this.state = 5474;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,660,this._ctx);
        switch(la_) {
        case 1:
            this.state = 5472;
            this.full_table_name();
            break;

        case 2:
            this.state = 5473;
            localctx.queue_name = this.id();
            break;

        }
        this.state = 5477;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,661,this._ctx);
        if(la_===1) {
            this.state = 5476;
            this.queue_settings();

        }
        this.state = 5482;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case TSqlParser.ON:
        	this.state = 5479;
        	this.match(TSqlParser.ON);
        	this.state = 5480;
        	localctx.filegroup = this.id();
        	break;
        case TSqlParser.DEFAULT:
        	this.state = 5481;
        	this.match(TSqlParser.DEFAULT);
        	break;
        case TSqlParser.EOF:
        case TSqlParser.ALTER:
        case TSqlParser.BACKUP:
        case TSqlParser.BEGIN:
        case TSqlParser.BREAK:
        case TSqlParser.CALLED:
        case TSqlParser.CLOSE:
        case TSqlParser.COMMIT:
        case TSqlParser.CONTINUE:
        case TSqlParser.CREATE:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.DBCC:
        case TSqlParser.DEALLOCATE:
        case TSqlParser.DECLARE:
        case TSqlParser.DELETE:
        case TSqlParser.DROP:
        case TSqlParser.ELSE:
        case TSqlParser.END:
        case TSqlParser.EVENTDATA:
        case TSqlParser.EXECUTE:
        case TSqlParser.FETCH:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.GET:
        case TSqlParser.GOTO:
        case TSqlParser.GRANT:
        case TSqlParser.IF:
        case TSqlParser.INSERT:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.MERGE:
        case TSqlParser.OFFSETS:
        case TSqlParser.OPEN:
        case TSqlParser.PAGE:
        case TSqlParser.PRINT:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAISERROR:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.REVERT:
        case TSqlParser.ROLLBACK:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SAVE:
        case TSqlParser.SELECT:
        case TSqlParser.SERVER:
        case TSqlParser.SET:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.TRUNCATE:
        case TSqlParser.UPDATE:
        case TSqlParser.USE:
        case TSqlParser.WAITFOR:
        case TSqlParser.WHILE:
        case TSqlParser.WITH:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENABLE:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GO:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SEND:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
        case TSqlParser.LR_BRACKET:
        case TSqlParser.SEMI:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Queue_settingsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_queue_settings;
    this.max_readers = null; // Token
    this.user_name = null; // Token
    return this;
}

Queue_settingsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Queue_settingsContext.prototype.constructor = Queue_settingsContext;

Queue_settingsContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Queue_settingsContext.prototype.STATUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STATUS);
    } else {
        return this.getToken(TSqlParser.STATUS, i);
    }
};


Queue_settingsContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Queue_settingsContext.prototype.RETENTION = function() {
    return this.getToken(TSqlParser.RETENTION, 0);
};

Queue_settingsContext.prototype.ACTIVATION = function() {
    return this.getToken(TSqlParser.ACTIVATION, 0);
};

Queue_settingsContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LR_BRACKET);
    } else {
        return this.getToken(TSqlParser.LR_BRACKET, i);
    }
};


Queue_settingsContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RR_BRACKET);
    } else {
        return this.getToken(TSqlParser.RR_BRACKET, i);
    }
};


Queue_settingsContext.prototype.POISON_MESSAGE_HANDLING = function() {
    return this.getToken(TSqlParser.POISON_MESSAGE_HANDLING, 0);
};

Queue_settingsContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ON);
    } else {
        return this.getToken(TSqlParser.ON, i);
    }
};


Queue_settingsContext.prototype.OFF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.OFF);
    } else {
        return this.getToken(TSqlParser.OFF, i);
    }
};


Queue_settingsContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Queue_settingsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Queue_settingsContext.prototype.PROCEDURE_NAME = function() {
    return this.getToken(TSqlParser.PROCEDURE_NAME, 0);
};

Queue_settingsContext.prototype.func_proc_name = function() {
    return this.getTypedRuleContext(Func_proc_nameContext,0);
};

Queue_settingsContext.prototype.MAX_QUEUE_READERS = function() {
    return this.getToken(TSqlParser.MAX_QUEUE_READERS, 0);
};

Queue_settingsContext.prototype.EXECUTE = function() {
    return this.getToken(TSqlParser.EXECUTE, 0);
};

Queue_settingsContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Queue_settingsContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Queue_settingsContext.prototype.SELF = function() {
    return this.getToken(TSqlParser.SELF, 0);
};

Queue_settingsContext.prototype.OWNER = function() {
    return this.getToken(TSqlParser.OWNER, 0);
};

Queue_settingsContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Queue_settingsContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterQueue_settings(this);
	}
};

Queue_settingsContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitQueue_settings(this);
	}
};




TSqlParser.Queue_settingsContext = Queue_settingsContext;

TSqlParser.prototype.queue_settings = function() {

    var localctx = new Queue_settingsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 412, TSqlParser.RULE_queue_settings);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5484;
        this.match(TSqlParser.WITH);
        this.state = 5491;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.STATUS) {
            this.state = 5485;
            this.match(TSqlParser.STATUS);
            this.state = 5486;
            this.match(TSqlParser.EQUAL);
            this.state = 5487;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5489;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 5488;
                this.match(TSqlParser.COMMA);
            }

        }

        this.state = 5499;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.RETENTION) {
            this.state = 5493;
            this.match(TSqlParser.RETENTION);
            this.state = 5494;
            this.match(TSqlParser.EQUAL);
            this.state = 5495;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5497;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 5496;
                this.match(TSqlParser.COMMA);
            }

        }

        this.state = 5546;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.ACTIVATION) {
            this.state = 5501;
            this.match(TSqlParser.ACTIVATION);
            this.state = 5502;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 5540;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.EXECUTE:
            case TSqlParser.MAX_QUEUE_READERS:
            case TSqlParser.PROCEDURE_NAME:
            case TSqlParser.STATUS:
            case TSqlParser.RR_BRACKET:
                this.state = 5509;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.STATUS) {
                    this.state = 5503;
                    this.match(TSqlParser.STATUS);
                    this.state = 5504;
                    this.match(TSqlParser.EQUAL);
                    this.state = 5505;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 5507;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 5506;
                        this.match(TSqlParser.COMMA);
                    }

                }

                this.state = 5517;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.PROCEDURE_NAME) {
                    this.state = 5511;
                    this.match(TSqlParser.PROCEDURE_NAME);
                    this.state = 5512;
                    this.match(TSqlParser.EQUAL);
                    this.state = 5513;
                    this.func_proc_name();
                    this.state = 5515;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 5514;
                        this.match(TSqlParser.COMMA);
                    }

                }

                this.state = 5525;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.MAX_QUEUE_READERS) {
                    this.state = 5519;
                    this.match(TSqlParser.MAX_QUEUE_READERS);
                    this.state = 5520;
                    this.match(TSqlParser.EQUAL);
                    this.state = 5521;
                    localctx.max_readers = this.match(TSqlParser.DECIMAL);
                    this.state = 5523;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 5522;
                        this.match(TSqlParser.COMMA);
                    }

                }

                this.state = 5537;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.EXECUTE) {
                    this.state = 5527;
                    this.match(TSqlParser.EXECUTE);
                    this.state = 5528;
                    this.match(TSqlParser.AS);
                    this.state = 5532;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case TSqlParser.SELF:
                        this.state = 5529;
                        this.match(TSqlParser.SELF);
                        break;
                    case TSqlParser.STRING:
                        this.state = 5530;
                        localctx.user_name = this.match(TSqlParser.STRING);
                        break;
                    case TSqlParser.OWNER:
                        this.state = 5531;
                        this.match(TSqlParser.OWNER);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 5535;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 5534;
                        this.match(TSqlParser.COMMA);
                    }

                }

                break;
            case TSqlParser.DROP:
                this.state = 5539;
                this.match(TSqlParser.DROP);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 5542;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 5544;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 5543;
                this.match(TSqlParser.COMMA);
            }

        }

        this.state = 5555;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.POISON_MESSAGE_HANDLING) {
            this.state = 5548;
            this.match(TSqlParser.POISON_MESSAGE_HANDLING);
            this.state = 5549;
            this.match(TSqlParser.LR_BRACKET);

            this.state = 5550;
            this.match(TSqlParser.STATUS);
            this.state = 5551;
            this.match(TSqlParser.EQUAL);
            this.state = 5552;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5554;
            this.match(TSqlParser.RR_BRACKET);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_queueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_queue;
    this.queue_name = null; // IdContext
    return this;
}

Alter_queueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_queueContext.prototype.constructor = Alter_queueContext;

Alter_queueContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_queueContext.prototype.QUEUE = function() {
    return this.getToken(TSqlParser.QUEUE, 0);
};

Alter_queueContext.prototype.full_table_name = function() {
    return this.getTypedRuleContext(Full_table_nameContext,0);
};

Alter_queueContext.prototype.queue_settings = function() {
    return this.getTypedRuleContext(Queue_settingsContext,0);
};

Alter_queueContext.prototype.queue_action = function() {
    return this.getTypedRuleContext(Queue_actionContext,0);
};

Alter_queueContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Alter_queueContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_queue(this);
	}
};

Alter_queueContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_queue(this);
	}
};




TSqlParser.Alter_queueContext = Alter_queueContext;

TSqlParser.prototype.alter_queue = function() {

    var localctx = new Alter_queueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 414, TSqlParser.RULE_alter_queue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5557;
        this.match(TSqlParser.ALTER);
        this.state = 5558;
        this.match(TSqlParser.QUEUE);
        this.state = 5561;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,680,this._ctx);
        switch(la_) {
        case 1:
            this.state = 5559;
            this.full_table_name();
            break;

        case 2:
            this.state = 5560;
            localctx.queue_name = this.id();
            break;

        }
        this.state = 5565;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.WITH:
            this.state = 5563;
            this.queue_settings();
            break;
        case TSqlParser.MOVE:
        case TSqlParser.REBUILD:
        case TSqlParser.REORGANIZE:
            this.state = 5564;
            this.queue_action();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Queue_actionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_queue_action;
    return this;
}

Queue_actionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Queue_actionContext.prototype.constructor = Queue_actionContext;

Queue_actionContext.prototype.REBUILD = function() {
    return this.getToken(TSqlParser.REBUILD, 0);
};

Queue_actionContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Queue_actionContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Queue_actionContext.prototype.queue_rebuild_options = function() {
    return this.getTypedRuleContext(Queue_rebuild_optionsContext,0);
};

Queue_actionContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Queue_actionContext.prototype.REORGANIZE = function() {
    return this.getToken(TSqlParser.REORGANIZE, 0);
};

Queue_actionContext.prototype.LOB_COMPACTION = function() {
    return this.getToken(TSqlParser.LOB_COMPACTION, 0);
};

Queue_actionContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Queue_actionContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Queue_actionContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Queue_actionContext.prototype.MOVE = function() {
    return this.getToken(TSqlParser.MOVE, 0);
};

Queue_actionContext.prototype.TO = function() {
    return this.getToken(TSqlParser.TO, 0);
};

Queue_actionContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Queue_actionContext.prototype.DEFAULT = function() {
    return this.getToken(TSqlParser.DEFAULT, 0);
};

Queue_actionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterQueue_action(this);
	}
};

Queue_actionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitQueue_action(this);
	}
};




TSqlParser.Queue_actionContext = Queue_actionContext;

TSqlParser.prototype.queue_action = function() {

    var localctx = new Queue_actionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 416, TSqlParser.RULE_queue_action);
    var _la = 0; // Token type
    try {
        this.state = 5588;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.REBUILD:
            this.enterOuterAlt(localctx, 1);
            this.state = 5567;
            this.match(TSqlParser.REBUILD);
            this.state = 5573;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,682,this._ctx);
            if(la_===1) {
                this.state = 5568;
                this.match(TSqlParser.WITH);
                this.state = 5569;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 5570;
                this.queue_rebuild_options();
                this.state = 5571;
                this.match(TSqlParser.RR_BRACKET);

            }
            break;
        case TSqlParser.REORGANIZE:
            this.enterOuterAlt(localctx, 2);
            this.state = 5575;
            this.match(TSqlParser.REORGANIZE);
            this.state = 5580;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,683,this._ctx);
            if(la_===1) {
                this.state = 5576;
                this.match(TSqlParser.WITH);
                this.state = 5577;
                this.match(TSqlParser.LOB_COMPACTION);
                this.state = 5578;
                this.match(TSqlParser.EQUAL);
                this.state = 5579;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            break;
        case TSqlParser.MOVE:
            this.enterOuterAlt(localctx, 3);
            this.state = 5582;
            this.match(TSqlParser.MOVE);
            this.state = 5583;
            this.match(TSqlParser.TO);
            this.state = 5586;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.CALLED:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.EVENTDATA:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.KEY:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.OFFSETS:
            case TSqlParser.PAGE:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SERVER:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.TARGET:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.APPLY:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GLOBAL:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAST:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.ID:
                this.state = 5584;
                this.id();
                break;
            case TSqlParser.DEFAULT:
                this.state = 5585;
                this.match(TSqlParser.DEFAULT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Queue_rebuild_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_queue_rebuild_options;
    return this;
}

Queue_rebuild_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Queue_rebuild_optionsContext.prototype.constructor = Queue_rebuild_optionsContext;

Queue_rebuild_optionsContext.prototype.MAXDOP = function() {
    return this.getToken(TSqlParser.MAXDOP, 0);
};

Queue_rebuild_optionsContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Queue_rebuild_optionsContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Queue_rebuild_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterQueue_rebuild_options(this);
	}
};

Queue_rebuild_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitQueue_rebuild_options(this);
	}
};




TSqlParser.Queue_rebuild_optionsContext = Queue_rebuild_optionsContext;

TSqlParser.prototype.queue_rebuild_options = function() {

    var localctx = new Queue_rebuild_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 418, TSqlParser.RULE_queue_rebuild_options);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5590;
        this.match(TSqlParser.MAXDOP);
        this.state = 5591;
        this.match(TSqlParser.EQUAL);
        this.state = 5592;
        this.match(TSqlParser.DECIMAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_contractContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_contract;
    this.owner_name = null; // IdContext
    this.message_type_name = null; // IdContext
    return this;
}

Create_contractContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_contractContext.prototype.constructor = Create_contractContext;

Create_contractContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_contractContext.prototype.CONTRACT = function() {
    return this.getToken(TSqlParser.CONTRACT, 0);
};

Create_contractContext.prototype.contract_name = function() {
    return this.getTypedRuleContext(Contract_nameContext,0);
};

Create_contractContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Create_contractContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Create_contractContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Create_contractContext.prototype.SENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SENT);
    } else {
        return this.getToken(TSqlParser.SENT, i);
    }
};


Create_contractContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.BY);
    } else {
        return this.getToken(TSqlParser.BY, i);
    }
};


Create_contractContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_contractContext.prototype.INITIATOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.INITIATOR);
    } else {
        return this.getToken(TSqlParser.INITIATOR, i);
    }
};


Create_contractContext.prototype.TARGET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.TARGET);
    } else {
        return this.getToken(TSqlParser.TARGET, i);
    }
};


Create_contractContext.prototype.ANY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ANY);
    } else {
        return this.getToken(TSqlParser.ANY, i);
    }
};


Create_contractContext.prototype.DEFAULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DEFAULT);
    } else {
        return this.getToken(TSqlParser.DEFAULT, i);
    }
};


Create_contractContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Create_contractContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_contract(this);
	}
};

Create_contractContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_contract(this);
	}
};




TSqlParser.Create_contractContext = Create_contractContext;

TSqlParser.prototype.create_contract = function() {

    var localctx = new Create_contractContext(this, this._ctx, this.state);
    this.enterRule(localctx, 420, TSqlParser.RULE_create_contract);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5594;
        this.match(TSqlParser.CREATE);
        this.state = 5595;
        this.match(TSqlParser.CONTRACT);
        this.state = 5596;
        this.contract_name();
        this.state = 5599;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AUTHORIZATION) {
            this.state = 5597;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 5598;
            localctx.owner_name = this.id();
        }

        this.state = 5601;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 5612; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 5604;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.CALLED:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.EVENTDATA:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.KEY:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.OFFSETS:
            case TSqlParser.PAGE:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SERVER:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.TARGET:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.APPLY:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GLOBAL:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAST:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.ID:
                this.state = 5602;
                localctx.message_type_name = this.id();
                break;
            case TSqlParser.DEFAULT:
                this.state = 5603;
                this.match(TSqlParser.DEFAULT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 5606;
            this.match(TSqlParser.SENT);
            this.state = 5607;
            this.match(TSqlParser.BY);
            this.state = 5608;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.ANY || _la===TSqlParser.TARGET || _la===TSqlParser.INITIATOR)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5610;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 5609;
                this.match(TSqlParser.COMMA);
            }

            this.state = 5614; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || _la===TSqlParser.DEFAULT || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0));
        this.state = 5616;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conversation_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_conversation_statement;
    return this;
}

Conversation_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conversation_statementContext.prototype.constructor = Conversation_statementContext;

Conversation_statementContext.prototype.begin_conversation_timer = function() {
    return this.getTypedRuleContext(Begin_conversation_timerContext,0);
};

Conversation_statementContext.prototype.begin_conversation_dialog = function() {
    return this.getTypedRuleContext(Begin_conversation_dialogContext,0);
};

Conversation_statementContext.prototype.end_conversation = function() {
    return this.getTypedRuleContext(End_conversationContext,0);
};

Conversation_statementContext.prototype.get_conversation = function() {
    return this.getTypedRuleContext(Get_conversationContext,0);
};

Conversation_statementContext.prototype.send_conversation = function() {
    return this.getTypedRuleContext(Send_conversationContext,0);
};

Conversation_statementContext.prototype.waitfor_conversation = function() {
    return this.getTypedRuleContext(Waitfor_conversationContext,0);
};

Conversation_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterConversation_statement(this);
	}
};

Conversation_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitConversation_statement(this);
	}
};




TSqlParser.Conversation_statementContext = Conversation_statementContext;

TSqlParser.prototype.conversation_statement = function() {

    var localctx = new Conversation_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 422, TSqlParser.RULE_conversation_statement);
    try {
        this.state = 5624;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,690,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5618;
            this.begin_conversation_timer();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5619;
            this.begin_conversation_dialog();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 5620;
            this.end_conversation();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 5621;
            this.get_conversation();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 5622;
            this.send_conversation();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 5623;
            this.waitfor_conversation();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Message_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_message_statement;
    this.message_type_name = null; // IdContext
    this.owner_name = null; // IdContext
    this.schema_collection_name = null; // IdContext
    return this;
}

Message_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Message_statementContext.prototype.constructor = Message_statementContext;

Message_statementContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Message_statementContext.prototype.MESSAGE = function() {
    return this.getToken(TSqlParser.MESSAGE, 0);
};

Message_statementContext.prototype.TYPE = function() {
    return this.getToken(TSqlParser.TYPE, 0);
};

Message_statementContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Message_statementContext.prototype.VALIDATION = function() {
    return this.getToken(TSqlParser.VALIDATION, 0);
};

Message_statementContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Message_statementContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Message_statementContext.prototype.NONE = function() {
    return this.getToken(TSqlParser.NONE, 0);
};

Message_statementContext.prototype.EMPTY = function() {
    return this.getToken(TSqlParser.EMPTY, 0);
};

Message_statementContext.prototype.WELL_FORMED_XML = function() {
    return this.getToken(TSqlParser.WELL_FORMED_XML, 0);
};

Message_statementContext.prototype.VALID_XML = function() {
    return this.getToken(TSqlParser.VALID_XML, 0);
};

Message_statementContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Message_statementContext.prototype.SCHEMA = function() {
    return this.getToken(TSqlParser.SCHEMA, 0);
};

Message_statementContext.prototype.COLLECTION = function() {
    return this.getToken(TSqlParser.COLLECTION, 0);
};

Message_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterMessage_statement(this);
	}
};

Message_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitMessage_statement(this);
	}
};




TSqlParser.Message_statementContext = Message_statementContext;

TSqlParser.prototype.message_statement = function() {

    var localctx = new Message_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 424, TSqlParser.RULE_message_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5626;
        this.match(TSqlParser.CREATE);
        this.state = 5627;
        this.match(TSqlParser.MESSAGE);
        this.state = 5628;
        this.match(TSqlParser.TYPE);
        this.state = 5629;
        localctx.message_type_name = this.id();
        this.state = 5632;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AUTHORIZATION) {
            this.state = 5630;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 5631;
            localctx.owner_name = this.id();
        }

        this.state = 5634;
        this.match(TSqlParser.VALIDATION);
        this.state = 5635;
        this.match(TSqlParser.EQUAL);
        this.state = 5644;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.NONE:
            this.state = 5636;
            this.match(TSqlParser.NONE);
            break;
        case TSqlParser.EMPTY:
            this.state = 5637;
            this.match(TSqlParser.EMPTY);
            break;
        case TSqlParser.WELL_FORMED_XML:
            this.state = 5638;
            this.match(TSqlParser.WELL_FORMED_XML);
            break;
        case TSqlParser.VALID_XML:
            this.state = 5639;
            this.match(TSqlParser.VALID_XML);
            this.state = 5640;
            this.match(TSqlParser.WITH);
            this.state = 5641;
            this.match(TSqlParser.SCHEMA);
            this.state = 5642;
            this.match(TSqlParser.COLLECTION);
            this.state = 5643;
            localctx.schema_collection_name = this.id();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Merge_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_merge_statement;
    return this;
}

Merge_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Merge_statementContext.prototype.constructor = Merge_statementContext;

Merge_statementContext.prototype.MERGE = function() {
    return this.getToken(TSqlParser.MERGE, 0);
};

Merge_statementContext.prototype.ddl_object = function() {
    return this.getTypedRuleContext(Ddl_objectContext,0);
};

Merge_statementContext.prototype.USING = function() {
    return this.getToken(TSqlParser.USING, 0);
};

Merge_statementContext.prototype.table_sources = function() {
    return this.getTypedRuleContext(Table_sourcesContext,0);
};

Merge_statementContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Merge_statementContext.prototype.search_condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Search_conditionContext);
    } else {
        return this.getTypedRuleContext(Search_conditionContext,i);
    }
};

Merge_statementContext.prototype.with_expression = function() {
    return this.getTypedRuleContext(With_expressionContext,0);
};

Merge_statementContext.prototype.TOP = function() {
    return this.getToken(TSqlParser.TOP, 0);
};

Merge_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Merge_statementContext.prototype.INTO = function() {
    return this.getToken(TSqlParser.INTO, 0);
};

Merge_statementContext.prototype.insert_with_table_hints = function() {
    return this.getTypedRuleContext(Insert_with_table_hintsContext,0);
};

Merge_statementContext.prototype.as_table_alias = function() {
    return this.getTypedRuleContext(As_table_aliasContext,0);
};

Merge_statementContext.prototype.WHEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.WHEN);
    } else {
        return this.getToken(TSqlParser.WHEN, i);
    }
};


Merge_statementContext.prototype.MATCHED = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MATCHED);
    } else {
        return this.getToken(TSqlParser.MATCHED, i);
    }
};


Merge_statementContext.prototype.THEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.THEN);
    } else {
        return this.getToken(TSqlParser.THEN, i);
    }
};


Merge_statementContext.prototype.merge_matched = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Merge_matchedContext);
    } else {
        return this.getTypedRuleContext(Merge_matchedContext,i);
    }
};

Merge_statementContext.prototype.NOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NOT);
    } else {
        return this.getToken(TSqlParser.NOT, i);
    }
};


Merge_statementContext.prototype.merge_not_matched = function() {
    return this.getTypedRuleContext(Merge_not_matchedContext,0);
};

Merge_statementContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.BY);
    } else {
        return this.getToken(TSqlParser.BY, i);
    }
};


Merge_statementContext.prototype.SOURCE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SOURCE);
    } else {
        return this.getToken(TSqlParser.SOURCE, i);
    }
};


Merge_statementContext.prototype.output_clause = function() {
    return this.getTypedRuleContext(Output_clauseContext,0);
};

Merge_statementContext.prototype.option_clause = function() {
    return this.getTypedRuleContext(Option_clauseContext,0);
};

Merge_statementContext.prototype.PERCENT = function() {
    return this.getToken(TSqlParser.PERCENT, 0);
};

Merge_statementContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.AND);
    } else {
        return this.getToken(TSqlParser.AND, i);
    }
};


Merge_statementContext.prototype.TARGET = function() {
    return this.getToken(TSqlParser.TARGET, 0);
};

Merge_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterMerge_statement(this);
	}
};

Merge_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitMerge_statement(this);
	}
};




TSqlParser.Merge_statementContext = Merge_statementContext;

TSqlParser.prototype.merge_statement = function() {

    var localctx = new Merge_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 426, TSqlParser.RULE_merge_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5647;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WITH) {
            this.state = 5646;
            this.with_expression();
        }

        this.state = 5649;
        this.match(TSqlParser.MERGE);
        this.state = 5657;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.TOP) {
            this.state = 5650;
            this.match(TSqlParser.TOP);
            this.state = 5651;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 5652;
            this.expression(0);
            this.state = 5653;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 5655;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.PERCENT) {
                this.state = 5654;
                this.match(TSqlParser.PERCENT);
            }

        }

        this.state = 5660;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.INTO) {
            this.state = 5659;
            this.match(TSqlParser.INTO);
        }

        this.state = 5662;
        this.ddl_object();
        this.state = 5664;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WITH) {
            this.state = 5663;
            this.insert_with_table_hints();
        }

        this.state = 5667;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,698,this._ctx);
        if(la_===1) {
            this.state = 5666;
            this.as_table_alias();

        }
        this.state = 5669;
        this.match(TSqlParser.USING);
        this.state = 5670;
        this.table_sources();
        this.state = 5671;
        this.match(TSqlParser.ON);
        this.state = 5672;
        this.search_condition();
        this.state = 5683;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,700,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 5673;
                this.match(TSqlParser.WHEN);
                this.state = 5674;
                this.match(TSqlParser.MATCHED);
                this.state = 5677;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.AND) {
                    this.state = 5675;
                    this.match(TSqlParser.AND);
                    this.state = 5676;
                    this.search_condition();
                }

                this.state = 5679;
                this.match(TSqlParser.THEN);
                this.state = 5680;
                this.merge_matched(); 
            }
            this.state = 5685;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,700,this._ctx);
        }

        this.state = 5699;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,703,this._ctx);
        if(la_===1) {
            this.state = 5686;
            this.match(TSqlParser.WHEN);
            this.state = 5687;
            this.match(TSqlParser.NOT);
            this.state = 5688;
            this.match(TSqlParser.MATCHED);
            this.state = 5691;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.BY) {
                this.state = 5689;
                this.match(TSqlParser.BY);
                this.state = 5690;
                this.match(TSqlParser.TARGET);
            }

            this.state = 5695;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.AND) {
                this.state = 5693;
                this.match(TSqlParser.AND);
                this.state = 5694;
                this.search_condition();
            }

            this.state = 5697;
            this.match(TSqlParser.THEN);
            this.state = 5698;
            this.merge_not_matched();

        }
        this.state = 5714;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.WHEN) {
            this.state = 5701;
            this.match(TSqlParser.WHEN);
            this.state = 5702;
            this.match(TSqlParser.NOT);
            this.state = 5703;
            this.match(TSqlParser.MATCHED);
            this.state = 5704;
            this.match(TSqlParser.BY);
            this.state = 5705;
            this.match(TSqlParser.SOURCE);
            this.state = 5708;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.AND) {
                this.state = 5706;
                this.match(TSqlParser.AND);
                this.state = 5707;
                this.search_condition();
            }

            this.state = 5710;
            this.match(TSqlParser.THEN);
            this.state = 5711;
            this.merge_matched();
            this.state = 5716;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 5718;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.OUTPUT) {
            this.state = 5717;
            this.output_clause();
        }

        this.state = 5721;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.OPTION) {
            this.state = 5720;
            this.option_clause();
        }

        this.state = 5723;
        this.match(TSqlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Merge_matchedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_merge_matched;
    return this;
}

Merge_matchedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Merge_matchedContext.prototype.constructor = Merge_matchedContext;

Merge_matchedContext.prototype.UPDATE = function() {
    return this.getToken(TSqlParser.UPDATE, 0);
};

Merge_matchedContext.prototype.SET = function() {
    return this.getToken(TSqlParser.SET, 0);
};

Merge_matchedContext.prototype.update_elem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Update_elemContext);
    } else {
        return this.getTypedRuleContext(Update_elemContext,i);
    }
};

Merge_matchedContext.prototype.DELETE = function() {
    return this.getToken(TSqlParser.DELETE, 0);
};

Merge_matchedContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterMerge_matched(this);
	}
};

Merge_matchedContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitMerge_matched(this);
	}
};




TSqlParser.Merge_matchedContext = Merge_matchedContext;

TSqlParser.prototype.merge_matched = function() {

    var localctx = new Merge_matchedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 428, TSqlParser.RULE_merge_matched);
    var _la = 0; // Token type
    try {
        this.state = 5736;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.UPDATE:
            this.enterOuterAlt(localctx, 1);
            this.state = 5725;
            this.match(TSqlParser.UPDATE);
            this.state = 5726;
            this.match(TSqlParser.SET);
            this.state = 5727;
            this.update_elem();
            this.state = 5732;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 5728;
                this.match(TSqlParser.COMMA);
                this.state = 5729;
                this.update_elem();
                this.state = 5734;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case TSqlParser.DELETE:
            this.enterOuterAlt(localctx, 2);
            this.state = 5735;
            this.match(TSqlParser.DELETE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Merge_not_matchedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_merge_not_matched;
    return this;
}

Merge_not_matchedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Merge_not_matchedContext.prototype.constructor = Merge_not_matchedContext;

Merge_not_matchedContext.prototype.INSERT = function() {
    return this.getToken(TSqlParser.INSERT, 0);
};

Merge_not_matchedContext.prototype.table_value_constructor = function() {
    return this.getTypedRuleContext(Table_value_constructorContext,0);
};

Merge_not_matchedContext.prototype.DEFAULT = function() {
    return this.getToken(TSqlParser.DEFAULT, 0);
};

Merge_not_matchedContext.prototype.VALUES = function() {
    return this.getToken(TSqlParser.VALUES, 0);
};

Merge_not_matchedContext.prototype.column_name_list = function() {
    return this.getTypedRuleContext(Column_name_listContext,0);
};

Merge_not_matchedContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterMerge_not_matched(this);
	}
};

Merge_not_matchedContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitMerge_not_matched(this);
	}
};




TSqlParser.Merge_not_matchedContext = Merge_not_matchedContext;

TSqlParser.prototype.merge_not_matched = function() {

    var localctx = new Merge_not_matchedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 430, TSqlParser.RULE_merge_not_matched);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5738;
        this.match(TSqlParser.INSERT);
        this.state = 5743;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.LR_BRACKET) {
            this.state = 5739;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 5740;
            this.column_name_list();
            this.state = 5741;
            this.match(TSqlParser.RR_BRACKET);
        }

        this.state = 5748;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.VALUES:
            this.state = 5745;
            this.table_value_constructor();
            break;
        case TSqlParser.DEFAULT:
            this.state = 5746;
            this.match(TSqlParser.DEFAULT);
            this.state = 5747;
            this.match(TSqlParser.VALUES);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Delete_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_delete_statement;
    this.cursor_var = null; // Token
    return this;
}

Delete_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delete_statementContext.prototype.constructor = Delete_statementContext;

Delete_statementContext.prototype.DELETE = function() {
    return this.getToken(TSqlParser.DELETE, 0);
};

Delete_statementContext.prototype.delete_statement_from = function() {
    return this.getTypedRuleContext(Delete_statement_fromContext,0);
};

Delete_statementContext.prototype.with_expression = function() {
    return this.getTypedRuleContext(With_expressionContext,0);
};

Delete_statementContext.prototype.TOP = function() {
    return this.getToken(TSqlParser.TOP, 0);
};

Delete_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Delete_statementContext.prototype.FROM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.FROM);
    } else {
        return this.getToken(TSqlParser.FROM, i);
    }
};


Delete_statementContext.prototype.insert_with_table_hints = function() {
    return this.getTypedRuleContext(Insert_with_table_hintsContext,0);
};

Delete_statementContext.prototype.output_clause = function() {
    return this.getTypedRuleContext(Output_clauseContext,0);
};

Delete_statementContext.prototype.table_sources = function() {
    return this.getTypedRuleContext(Table_sourcesContext,0);
};

Delete_statementContext.prototype.WHERE = function() {
    return this.getToken(TSqlParser.WHERE, 0);
};

Delete_statementContext.prototype.for_clause = function() {
    return this.getTypedRuleContext(For_clauseContext,0);
};

Delete_statementContext.prototype.option_clause = function() {
    return this.getTypedRuleContext(Option_clauseContext,0);
};

Delete_statementContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Delete_statementContext.prototype.CURRENT = function() {
    return this.getToken(TSqlParser.CURRENT, 0);
};

Delete_statementContext.prototype.OF = function() {
    return this.getToken(TSqlParser.OF, 0);
};

Delete_statementContext.prototype.PERCENT = function() {
    return this.getToken(TSqlParser.PERCENT, 0);
};

Delete_statementContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Delete_statementContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Delete_statementContext.prototype.GLOBAL = function() {
    return this.getToken(TSqlParser.GLOBAL, 0);
};

Delete_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDelete_statement(this);
	}
};

Delete_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDelete_statement(this);
	}
};




TSqlParser.Delete_statementContext = Delete_statementContext;

TSqlParser.prototype.delete_statement = function() {

    var localctx = new Delete_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 432, TSqlParser.RULE_delete_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5751;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WITH) {
            this.state = 5750;
            this.with_expression();
        }

        this.state = 5753;
        this.match(TSqlParser.DELETE);
        this.state = 5761;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.TOP) {
            this.state = 5754;
            this.match(TSqlParser.TOP);
            this.state = 5755;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 5756;
            this.expression(0);
            this.state = 5757;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 5759;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.PERCENT) {
                this.state = 5758;
                this.match(TSqlParser.PERCENT);
            }

        }

        this.state = 5764;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.FROM) {
            this.state = 5763;
            this.match(TSqlParser.FROM);
        }

        this.state = 5766;
        this.delete_statement_from();
        this.state = 5768;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,716,this._ctx);
        if(la_===1) {
            this.state = 5767;
            this.insert_with_table_hints();

        }
        this.state = 5771;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,717,this._ctx);
        if(la_===1) {
            this.state = 5770;
            this.output_clause();

        }
        this.state = 5775;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.FROM) {
            this.state = 5773;
            this.match(TSqlParser.FROM);
            this.state = 5774;
            this.table_sources();
        }

        this.state = 5790;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WHERE) {
            this.state = 5777;
            this.match(TSqlParser.WHERE);
            this.state = 5788;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.BLOCKING_HIERARCHY:
            case TSqlParser.CALLED:
            case TSqlParser.CASE:
            case TSqlParser.COALESCE:
            case TSqlParser.CONVERT:
            case TSqlParser.CURRENT_TIMESTAMP:
            case TSqlParser.CURRENT_USER:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.DEFAULT:
            case TSqlParser.EVENTDATA:
            case TSqlParser.EXISTS:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.IDENTITY:
            case TSqlParser.ISNULL:
            case TSqlParser.KEY:
            case TSqlParser.LEFT:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.NOT:
            case TSqlParser.NULL:
            case TSqlParser.NULLIF:
            case TSqlParser.OFFSETS:
            case TSqlParser.OVER:
            case TSqlParser.PAGE:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.RIGHT:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SERVER:
            case TSqlParser.SESSION_USER:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.SYSTEM_USER:
            case TSqlParser.TARGET:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.ANSI_NULLS:
            case TSqlParser.ANSI_PADDING:
            case TSqlParser.ANSI_WARNINGS:
            case TSqlParser.APPLY:
            case TSqlParser.ARITHABORT:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.BINARY_CHECKSUM:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.COMPATIBILITY_LEVEL:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DATEADD:
            case TSqlParser.DATEDIFF:
            case TSqlParser.DATENAME:
            case TSqlParser.DATEPART:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FIRST_VALUE:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GETDATE:
            case TSqlParser.GETUTCDATE:
            case TSqlParser.GLOBAL:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAG:
            case TSqlParser.LAST:
            case TSqlParser.LAST_VALUE:
            case TSqlParser.LEAD:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MIN_ACTIVE_ROWVERSION:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.QUOTED_IDENTIFIER:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STATUS:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.STUFF:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.LOCAL_ID:
            case TSqlParser.DECIMAL:
            case TSqlParser.ID:
            case TSqlParser.STRING:
            case TSqlParser.BINARY:
            case TSqlParser.FLOAT:
            case TSqlParser.REAL:
            case TSqlParser.DOLLAR:
            case TSqlParser.LR_BRACKET:
            case TSqlParser.PLUS:
            case TSqlParser.MINUS:
            case TSqlParser.BIT_NOT:
                this.state = 5778;
                this.search_condition();
                break;
            case TSqlParser.CURRENT:
                this.state = 5779;
                this.match(TSqlParser.CURRENT);
                this.state = 5780;
                this.match(TSqlParser.OF);
                this.state = 5786;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,720,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 5782;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,719,this._ctx);
                    if(la_===1) {
                        this.state = 5781;
                        this.match(TSqlParser.GLOBAL);

                    }
                    this.state = 5784;
                    this.cursor_name();
                    break;

                case 2:
                    this.state = 5785;
                    localctx.cursor_var = this.match(TSqlParser.LOCAL_ID);
                    break;

                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
        }

        this.state = 5793;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.FOR) {
            this.state = 5792;
            this.for_clause();
        }

        this.state = 5796;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.OPTION) {
            this.state = 5795;
            this.option_clause();
        }

        this.state = 5799;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,725,this._ctx);
        if(la_===1) {
            this.state = 5798;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Delete_statement_fromContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_delete_statement_from;
    this.table_var = null; // Token
    return this;
}

Delete_statement_fromContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delete_statement_fromContext.prototype.constructor = Delete_statement_fromContext;

Delete_statement_fromContext.prototype.ddl_object = function() {
    return this.getTypedRuleContext(Ddl_objectContext,0);
};

Delete_statement_fromContext.prototype.table_alias = function() {
    return this.getTypedRuleContext(Table_aliasContext,0);
};

Delete_statement_fromContext.prototype.rowset_function_limited = function() {
    return this.getTypedRuleContext(Rowset_function_limitedContext,0);
};

Delete_statement_fromContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Delete_statement_fromContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDelete_statement_from(this);
	}
};

Delete_statement_fromContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDelete_statement_from(this);
	}
};




TSqlParser.Delete_statement_fromContext = Delete_statement_fromContext;

TSqlParser.prototype.delete_statement_from = function() {

    var localctx = new Delete_statement_fromContext(this, this._ctx, this.state);
    this.enterRule(localctx, 434, TSqlParser.RULE_delete_statement_from);
    try {
        this.state = 5805;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,726,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5801;
            this.ddl_object();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5802;
            this.table_alias();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 5803;
            this.rowset_function_limited();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 5804;
            localctx.table_var = this.match(TSqlParser.LOCAL_ID);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Insert_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_insert_statement;
    return this;
}

Insert_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Insert_statementContext.prototype.constructor = Insert_statementContext;

Insert_statementContext.prototype.INSERT = function() {
    return this.getToken(TSqlParser.INSERT, 0);
};

Insert_statementContext.prototype.insert_statement_value = function() {
    return this.getTypedRuleContext(Insert_statement_valueContext,0);
};

Insert_statementContext.prototype.ddl_object = function() {
    return this.getTypedRuleContext(Ddl_objectContext,0);
};

Insert_statementContext.prototype.rowset_function_limited = function() {
    return this.getTypedRuleContext(Rowset_function_limitedContext,0);
};

Insert_statementContext.prototype.with_expression = function() {
    return this.getTypedRuleContext(With_expressionContext,0);
};

Insert_statementContext.prototype.TOP = function() {
    return this.getToken(TSqlParser.TOP, 0);
};

Insert_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Insert_statementContext.prototype.INTO = function() {
    return this.getToken(TSqlParser.INTO, 0);
};

Insert_statementContext.prototype.insert_with_table_hints = function() {
    return this.getTypedRuleContext(Insert_with_table_hintsContext,0);
};

Insert_statementContext.prototype.column_name_list = function() {
    return this.getTypedRuleContext(Column_name_listContext,0);
};

Insert_statementContext.prototype.output_clause = function() {
    return this.getTypedRuleContext(Output_clauseContext,0);
};

Insert_statementContext.prototype.for_clause = function() {
    return this.getTypedRuleContext(For_clauseContext,0);
};

Insert_statementContext.prototype.option_clause = function() {
    return this.getTypedRuleContext(Option_clauseContext,0);
};

Insert_statementContext.prototype.PERCENT = function() {
    return this.getToken(TSqlParser.PERCENT, 0);
};

Insert_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterInsert_statement(this);
	}
};

Insert_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitInsert_statement(this);
	}
};




TSqlParser.Insert_statementContext = Insert_statementContext;

TSqlParser.prototype.insert_statement = function() {

    var localctx = new Insert_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 436, TSqlParser.RULE_insert_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5808;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WITH) {
            this.state = 5807;
            this.with_expression();
        }

        this.state = 5810;
        this.match(TSqlParser.INSERT);
        this.state = 5818;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.TOP) {
            this.state = 5811;
            this.match(TSqlParser.TOP);
            this.state = 5812;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 5813;
            this.expression(0);
            this.state = 5814;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 5816;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.PERCENT) {
                this.state = 5815;
                this.match(TSqlParser.PERCENT);
            }

        }

        this.state = 5821;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.INTO) {
            this.state = 5820;
            this.match(TSqlParser.INTO);
        }

        this.state = 5825;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.LOCAL_ID:
        case TSqlParser.ID:
            this.state = 5823;
            this.ddl_object();
            break;
        case TSqlParser.OPENDATASOURCE:
        case TSqlParser.OPENQUERY:
            this.state = 5824;
            this.rowset_function_limited();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 5828;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,732,this._ctx);
        if(la_===1) {
            this.state = 5827;
            this.insert_with_table_hints();

        }
        this.state = 5834;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,733,this._ctx);
        if(la_===1) {
            this.state = 5830;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 5831;
            this.column_name_list();
            this.state = 5832;
            this.match(TSqlParser.RR_BRACKET);

        }
        this.state = 5837;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.OUTPUT) {
            this.state = 5836;
            this.output_clause();
        }

        this.state = 5839;
        this.insert_statement_value();
        this.state = 5841;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.FOR) {
            this.state = 5840;
            this.for_clause();
        }

        this.state = 5844;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.OPTION) {
            this.state = 5843;
            this.option_clause();
        }

        this.state = 5847;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,737,this._ctx);
        if(la_===1) {
            this.state = 5846;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Insert_statement_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_insert_statement_value;
    return this;
}

Insert_statement_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Insert_statement_valueContext.prototype.constructor = Insert_statement_valueContext;

Insert_statement_valueContext.prototype.table_value_constructor = function() {
    return this.getTypedRuleContext(Table_value_constructorContext,0);
};

Insert_statement_valueContext.prototype.derived_table = function() {
    return this.getTypedRuleContext(Derived_tableContext,0);
};

Insert_statement_valueContext.prototype.execute_statement = function() {
    return this.getTypedRuleContext(Execute_statementContext,0);
};

Insert_statement_valueContext.prototype.DEFAULT = function() {
    return this.getToken(TSqlParser.DEFAULT, 0);
};

Insert_statement_valueContext.prototype.VALUES = function() {
    return this.getToken(TSqlParser.VALUES, 0);
};

Insert_statement_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterInsert_statement_value(this);
	}
};

Insert_statement_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitInsert_statement_value(this);
	}
};




TSqlParser.Insert_statement_valueContext = Insert_statement_valueContext;

TSqlParser.prototype.insert_statement_value = function() {

    var localctx = new Insert_statement_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 438, TSqlParser.RULE_insert_statement_value);
    try {
        this.state = 5854;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,738,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 5849;
            this.table_value_constructor();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 5850;
            this.derived_table();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 5851;
            this.execute_statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 5852;
            this.match(TSqlParser.DEFAULT);
            this.state = 5853;
            this.match(TSqlParser.VALUES);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Receive_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_receive_statement;
    this.table_variable = null; // IdContext
    this.where = null; // Search_conditionContext
    return this;
}

Receive_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Receive_statementContext.prototype.constructor = Receive_statementContext;

Receive_statementContext.prototype.RECEIVE = function() {
    return this.getToken(TSqlParser.RECEIVE, 0);
};

Receive_statementContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Receive_statementContext.prototype.full_table_name = function() {
    return this.getTypedRuleContext(Full_table_nameContext,0);
};

Receive_statementContext.prototype.ALL = function() {
    return this.getToken(TSqlParser.ALL, 0);
};

Receive_statementContext.prototype.DISTINCT = function() {
    return this.getToken(TSqlParser.DISTINCT, 0);
};

Receive_statementContext.prototype.top_clause = function() {
    return this.getTypedRuleContext(Top_clauseContext,0);
};

Receive_statementContext.prototype.LOCAL_ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LOCAL_ID);
    } else {
        return this.getToken(TSqlParser.LOCAL_ID, i);
    }
};


Receive_statementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Receive_statementContext.prototype.INTO = function() {
    return this.getToken(TSqlParser.INTO, 0);
};

Receive_statementContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Receive_statementContext.prototype.WHERE = function() {
    return this.getToken(TSqlParser.WHERE, 0);
};

Receive_statementContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Receive_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterReceive_statement(this);
	}
};

Receive_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitReceive_statement(this);
	}
};




TSqlParser.Receive_statementContext = Receive_statementContext;

TSqlParser.prototype.receive_statement = function() {

    var localctx = new Receive_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 440, TSqlParser.RULE_receive_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5857;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.LR_BRACKET) {
            this.state = 5856;
            this.match(TSqlParser.LR_BRACKET);
        }

        this.state = 5859;
        this.match(TSqlParser.RECEIVE);
        this.state = 5864;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.ALL:
            this.state = 5860;
            this.match(TSqlParser.ALL);
            break;
        case TSqlParser.DISTINCT:
            this.state = 5861;
            this.match(TSqlParser.DISTINCT);
            break;
        case TSqlParser.TOP:
            this.state = 5862;
            this.top_clause();
            break;
        case TSqlParser.STAR:
            this.state = 5863;
            this.match(TSqlParser.STAR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 5874;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.LOCAL_ID) {
            this.state = 5866;
            this.match(TSqlParser.LOCAL_ID);
            this.state = 5867;
            this.match(TSqlParser.EQUAL);
            this.state = 5868;
            this.expression(0);
            this.state = 5870;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 5869;
                this.match(TSqlParser.COMMA);
            }

            this.state = 5876;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 5877;
        this.match(TSqlParser.FROM);
        this.state = 5878;
        this.full_table_name();
        this.state = 5884;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.INTO) {
            this.state = 5879;
            this.match(TSqlParser.INTO);
            this.state = 5880;
            localctx.table_variable = this.id();

            this.state = 5881;
            this.match(TSqlParser.WHERE);
            this.state = 5882;
            localctx.where = this.search_condition();
        }

        this.state = 5887;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.RR_BRACKET) {
            this.state = 5886;
            this.match(TSqlParser.RR_BRACKET);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_select_statement;
    return this;
}

Select_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_statementContext.prototype.constructor = Select_statementContext;

Select_statementContext.prototype.query_expression = function() {
    return this.getTypedRuleContext(Query_expressionContext,0);
};

Select_statementContext.prototype.with_expression = function() {
    return this.getTypedRuleContext(With_expressionContext,0);
};

Select_statementContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Select_statementContext.prototype.for_clause = function() {
    return this.getTypedRuleContext(For_clauseContext,0);
};

Select_statementContext.prototype.option_clause = function() {
    return this.getTypedRuleContext(Option_clauseContext,0);
};

Select_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSelect_statement(this);
	}
};

Select_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSelect_statement(this);
	}
};




TSqlParser.Select_statementContext = Select_statementContext;

TSqlParser.prototype.select_statement = function() {

    var localctx = new Select_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 442, TSqlParser.RULE_select_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5890;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WITH) {
            this.state = 5889;
            this.with_expression();
        }

        this.state = 5892;
        this.query_expression();
        this.state = 5894;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,746,this._ctx);
        if(la_===1) {
            this.state = 5893;
            this.order_by_clause();

        }
        this.state = 5897;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,747,this._ctx);
        if(la_===1) {
            this.state = 5896;
            this.for_clause();

        }
        this.state = 5900;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,748,this._ctx);
        if(la_===1) {
            this.state = 5899;
            this.option_clause();

        }
        this.state = 5903;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,749,this._ctx);
        if(la_===1) {
            this.state = 5902;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TimeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_time;
    return this;
}

TimeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimeContext.prototype.constructor = TimeContext;

TimeContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

TimeContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

TimeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTime(this);
	}
};

TimeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTime(this);
	}
};




TSqlParser.TimeContext = TimeContext;

TSqlParser.prototype.time = function() {

    var localctx = new TimeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 444, TSqlParser.RULE_time);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5907;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.LOCAL_ID:
            this.state = 5905;
            this.match(TSqlParser.LOCAL_ID);
            break;
        case TSqlParser.DECIMAL:
        case TSqlParser.STRING:
        case TSqlParser.BINARY:
        case TSqlParser.FLOAT:
        case TSqlParser.REAL:
        case TSqlParser.DOLLAR:
        case TSqlParser.PLUS:
        case TSqlParser.MINUS:
            this.state = 5906;
            this.constant();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Update_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_update_statement;
    this.cursor_var = null; // Token
    return this;
}

Update_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Update_statementContext.prototype.constructor = Update_statementContext;

Update_statementContext.prototype.UPDATE = function() {
    return this.getToken(TSqlParser.UPDATE, 0);
};

Update_statementContext.prototype.SET = function() {
    return this.getToken(TSqlParser.SET, 0);
};

Update_statementContext.prototype.update_elem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Update_elemContext);
    } else {
        return this.getTypedRuleContext(Update_elemContext,i);
    }
};

Update_statementContext.prototype.ddl_object = function() {
    return this.getTypedRuleContext(Ddl_objectContext,0);
};

Update_statementContext.prototype.rowset_function_limited = function() {
    return this.getTypedRuleContext(Rowset_function_limitedContext,0);
};

Update_statementContext.prototype.with_expression = function() {
    return this.getTypedRuleContext(With_expressionContext,0);
};

Update_statementContext.prototype.TOP = function() {
    return this.getToken(TSqlParser.TOP, 0);
};

Update_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Update_statementContext.prototype.with_table_hints = function() {
    return this.getTypedRuleContext(With_table_hintsContext,0);
};

Update_statementContext.prototype.output_clause = function() {
    return this.getTypedRuleContext(Output_clauseContext,0);
};

Update_statementContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Update_statementContext.prototype.table_sources = function() {
    return this.getTypedRuleContext(Table_sourcesContext,0);
};

Update_statementContext.prototype.WHERE = function() {
    return this.getToken(TSqlParser.WHERE, 0);
};

Update_statementContext.prototype.for_clause = function() {
    return this.getTypedRuleContext(For_clauseContext,0);
};

Update_statementContext.prototype.option_clause = function() {
    return this.getTypedRuleContext(Option_clauseContext,0);
};

Update_statementContext.prototype.search_condition_list = function() {
    return this.getTypedRuleContext(Search_condition_listContext,0);
};

Update_statementContext.prototype.CURRENT = function() {
    return this.getToken(TSqlParser.CURRENT, 0);
};

Update_statementContext.prototype.OF = function() {
    return this.getToken(TSqlParser.OF, 0);
};

Update_statementContext.prototype.PERCENT = function() {
    return this.getToken(TSqlParser.PERCENT, 0);
};

Update_statementContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Update_statementContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Update_statementContext.prototype.GLOBAL = function() {
    return this.getToken(TSqlParser.GLOBAL, 0);
};

Update_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterUpdate_statement(this);
	}
};

Update_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitUpdate_statement(this);
	}
};




TSqlParser.Update_statementContext = Update_statementContext;

TSqlParser.prototype.update_statement = function() {

    var localctx = new Update_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 446, TSqlParser.RULE_update_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5910;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WITH) {
            this.state = 5909;
            this.with_expression();
        }

        this.state = 5912;
        this.match(TSqlParser.UPDATE);
        this.state = 5920;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.TOP) {
            this.state = 5913;
            this.match(TSqlParser.TOP);
            this.state = 5914;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 5915;
            this.expression(0);
            this.state = 5916;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 5918;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.PERCENT) {
                this.state = 5917;
                this.match(TSqlParser.PERCENT);
            }

        }

        this.state = 5924;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.LOCAL_ID:
        case TSqlParser.ID:
            this.state = 5922;
            this.ddl_object();
            break;
        case TSqlParser.OPENDATASOURCE:
        case TSqlParser.OPENQUERY:
            this.state = 5923;
            this.rowset_function_limited();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 5927;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WITH || _la===TSqlParser.LR_BRACKET) {
            this.state = 5926;
            this.with_table_hints();
        }

        this.state = 5929;
        this.match(TSqlParser.SET);
        this.state = 5930;
        this.update_elem();
        this.state = 5935;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 5931;
            this.match(TSqlParser.COMMA);
            this.state = 5932;
            this.update_elem();
            this.state = 5937;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 5939;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,757,this._ctx);
        if(la_===1) {
            this.state = 5938;
            this.output_clause();

        }
        this.state = 5943;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.FROM) {
            this.state = 5941;
            this.match(TSqlParser.FROM);
            this.state = 5942;
            this.table_sources();
        }

        this.state = 5958;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WHERE) {
            this.state = 5945;
            this.match(TSqlParser.WHERE);
            this.state = 5956;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.BLOCKING_HIERARCHY:
            case TSqlParser.CALLED:
            case TSqlParser.CASE:
            case TSqlParser.COALESCE:
            case TSqlParser.CONVERT:
            case TSqlParser.CURRENT_TIMESTAMP:
            case TSqlParser.CURRENT_USER:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.DEFAULT:
            case TSqlParser.EVENTDATA:
            case TSqlParser.EXISTS:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.IDENTITY:
            case TSqlParser.ISNULL:
            case TSqlParser.KEY:
            case TSqlParser.LEFT:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.NOT:
            case TSqlParser.NULL:
            case TSqlParser.NULLIF:
            case TSqlParser.OFFSETS:
            case TSqlParser.OVER:
            case TSqlParser.PAGE:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.RIGHT:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SERVER:
            case TSqlParser.SESSION_USER:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.SYSTEM_USER:
            case TSqlParser.TARGET:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.ANSI_NULLS:
            case TSqlParser.ANSI_PADDING:
            case TSqlParser.ANSI_WARNINGS:
            case TSqlParser.APPLY:
            case TSqlParser.ARITHABORT:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.BINARY_CHECKSUM:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.COMPATIBILITY_LEVEL:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DATEADD:
            case TSqlParser.DATEDIFF:
            case TSqlParser.DATENAME:
            case TSqlParser.DATEPART:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FIRST_VALUE:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GETDATE:
            case TSqlParser.GETUTCDATE:
            case TSqlParser.GLOBAL:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAG:
            case TSqlParser.LAST:
            case TSqlParser.LAST_VALUE:
            case TSqlParser.LEAD:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MIN_ACTIVE_ROWVERSION:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.QUOTED_IDENTIFIER:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STATUS:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.STUFF:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.LOCAL_ID:
            case TSqlParser.DECIMAL:
            case TSqlParser.ID:
            case TSqlParser.STRING:
            case TSqlParser.BINARY:
            case TSqlParser.FLOAT:
            case TSqlParser.REAL:
            case TSqlParser.DOLLAR:
            case TSqlParser.LR_BRACKET:
            case TSqlParser.PLUS:
            case TSqlParser.MINUS:
            case TSqlParser.BIT_NOT:
                this.state = 5946;
                this.search_condition_list();
                break;
            case TSqlParser.CURRENT:
                this.state = 5947;
                this.match(TSqlParser.CURRENT);
                this.state = 5948;
                this.match(TSqlParser.OF);
                this.state = 5954;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,760,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 5950;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,759,this._ctx);
                    if(la_===1) {
                        this.state = 5949;
                        this.match(TSqlParser.GLOBAL);

                    }
                    this.state = 5952;
                    this.cursor_name();
                    break;

                case 2:
                    this.state = 5953;
                    localctx.cursor_var = this.match(TSqlParser.LOCAL_ID);
                    break;

                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
        }

        this.state = 5961;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.FOR) {
            this.state = 5960;
            this.for_clause();
        }

        this.state = 5964;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.OPTION) {
            this.state = 5963;
            this.option_clause();
        }

        this.state = 5967;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,765,this._ctx);
        if(la_===1) {
            this.state = 5966;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Output_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_output_clause;
    return this;
}

Output_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Output_clauseContext.prototype.constructor = Output_clauseContext;

Output_clauseContext.prototype.OUTPUT = function() {
    return this.getToken(TSqlParser.OUTPUT, 0);
};

Output_clauseContext.prototype.output_dml_list_elem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Output_dml_list_elemContext);
    } else {
        return this.getTypedRuleContext(Output_dml_list_elemContext,i);
    }
};

Output_clauseContext.prototype.INTO = function() {
    return this.getToken(TSqlParser.INTO, 0);
};

Output_clauseContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Output_clauseContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Output_clauseContext.prototype.column_name_list = function() {
    return this.getTypedRuleContext(Column_name_listContext,0);
};

Output_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterOutput_clause(this);
	}
};

Output_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitOutput_clause(this);
	}
};




TSqlParser.Output_clauseContext = Output_clauseContext;

TSqlParser.prototype.output_clause = function() {

    var localctx = new Output_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 448, TSqlParser.RULE_output_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5969;
        this.match(TSqlParser.OUTPUT);
        this.state = 5970;
        this.output_dml_list_elem();
        this.state = 5975;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 5971;
            this.match(TSqlParser.COMMA);
            this.state = 5972;
            this.output_dml_list_elem();
            this.state = 5977;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 5989;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.INTO) {
            this.state = 5978;
            this.match(TSqlParser.INTO);
            this.state = 5981;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.LOCAL_ID:
                this.state = 5979;
                this.match(TSqlParser.LOCAL_ID);
                break;
            case TSqlParser.BLOCKING_HIERARCHY:
            case TSqlParser.CALLED:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.EVENTDATA:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.KEY:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.OFFSETS:
            case TSqlParser.PAGE:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SERVER:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.TARGET:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.APPLY:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GLOBAL:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAST:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.ID:
                this.state = 5980;
                this.table_name();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 5987;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,768,this._ctx);
            if(la_===1) {
                this.state = 5983;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 5984;
                this.column_name_list();
                this.state = 5985;
                this.match(TSqlParser.RR_BRACKET);

            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Output_dml_list_elemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_output_dml_list_elem;
    return this;
}

Output_dml_list_elemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Output_dml_list_elemContext.prototype.constructor = Output_dml_list_elemContext;

Output_dml_list_elemContext.prototype.output_column_name = function() {
    return this.getTypedRuleContext(Output_column_nameContext,0);
};

Output_dml_list_elemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Output_dml_list_elemContext.prototype.as_column_alias = function() {
    return this.getTypedRuleContext(As_column_aliasContext,0);
};

Output_dml_list_elemContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterOutput_dml_list_elem(this);
	}
};

Output_dml_list_elemContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitOutput_dml_list_elem(this);
	}
};




TSqlParser.Output_dml_list_elemContext = Output_dml_list_elemContext;

TSqlParser.prototype.output_dml_list_elem = function() {

    var localctx = new Output_dml_list_elemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 450, TSqlParser.RULE_output_dml_list_elem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 5993;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,770,this._ctx);
        switch(la_) {
        case 1:
            this.state = 5991;
            this.output_column_name();
            break;

        case 2:
            this.state = 5992;
            this.expression(0);
            break;

        }
        this.state = 5996;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,771,this._ctx);
        if(la_===1) {
            this.state = 5995;
            this.as_column_alias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Output_column_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_output_column_name;
    return this;
}

Output_column_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Output_column_nameContext.prototype.constructor = Output_column_nameContext;

Output_column_nameContext.prototype.DELETED = function() {
    return this.getToken(TSqlParser.DELETED, 0);
};

Output_column_nameContext.prototype.INSERTED = function() {
    return this.getToken(TSqlParser.INSERTED, 0);
};

Output_column_nameContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Output_column_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Output_column_nameContext.prototype.DOLLAR_ACTION = function() {
    return this.getToken(TSqlParser.DOLLAR_ACTION, 0);
};

Output_column_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterOutput_column_name(this);
	}
};

Output_column_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitOutput_column_name(this);
	}
};




TSqlParser.Output_column_nameContext = Output_column_nameContext;

TSqlParser.prototype.output_column_name = function() {

    var localctx = new Output_column_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 452, TSqlParser.RULE_output_column_name);
    try {
        this.state = 6009;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.BLOCKING_HIERARCHY:
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 6001;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,772,this._ctx);
            switch(la_) {
            case 1:
                this.state = 5998;
                this.match(TSqlParser.DELETED);
                break;

            case 2:
                this.state = 5999;
                this.match(TSqlParser.INSERTED);
                break;

            case 3:
                this.state = 6000;
                this.table_name();
                break;

            }
            this.state = 6003;
            this.match(TSqlParser.DOT);
            this.state = 6006;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.STAR:
                this.state = 6004;
                this.match(TSqlParser.STAR);
                break;
            case TSqlParser.CALLED:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.EVENTDATA:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.KEY:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.OFFSETS:
            case TSqlParser.PAGE:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SERVER:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.TARGET:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.APPLY:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GLOBAL:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAST:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.ID:
                this.state = 6005;
                this.id();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case TSqlParser.DOLLAR_ACTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 6008;
            this.match(TSqlParser.DOLLAR_ACTION);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_databaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_database;
    this.database = null; // IdContext
    this.collation_name = null; // IdContext
    return this;
}

Create_databaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_databaseContext.prototype.constructor = Create_databaseContext;

Create_databaseContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_databaseContext.prototype.DATABASE = function() {
    return this.getToken(TSqlParser.DATABASE, 0);
};

Create_databaseContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_databaseContext.prototype.CONTAINMENT = function() {
    return this.getToken(TSqlParser.CONTAINMENT, 0);
};

Create_databaseContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ON);
    } else {
        return this.getToken(TSqlParser.ON, i);
    }
};


Create_databaseContext.prototype.database_file_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Database_file_specContext);
    } else {
        return this.getTypedRuleContext(Database_file_specContext,i);
    }
};

Create_databaseContext.prototype.LOG = function() {
    return this.getToken(TSqlParser.LOG, 0);
};

Create_databaseContext.prototype.COLLATE = function() {
    return this.getToken(TSqlParser.COLLATE, 0);
};

Create_databaseContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_databaseContext.prototype.create_database_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Create_database_optionContext);
    } else {
        return this.getTypedRuleContext(Create_database_optionContext,i);
    }
};

Create_databaseContext.prototype.NONE = function() {
    return this.getToken(TSqlParser.NONE, 0);
};

Create_databaseContext.prototype.PARTIAL = function() {
    return this.getToken(TSqlParser.PARTIAL, 0);
};

Create_databaseContext.prototype.PRIMARY = function() {
    return this.getToken(TSqlParser.PRIMARY, 0);
};

Create_databaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_database(this);
	}
};

Create_databaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_database(this);
	}
};




TSqlParser.Create_databaseContext = Create_databaseContext;

TSqlParser.prototype.create_database = function() {

    var localctx = new Create_databaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 454, TSqlParser.RULE_create_database);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6011;
        this.match(TSqlParser.CREATE);
        this.state = 6012;
        this.match(TSqlParser.DATABASE);

        this.state = 6013;
        localctx.database = this.id();
        this.state = 6017;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.CONTAINMENT) {
            this.state = 6014;
            this.match(TSqlParser.CONTAINMENT);
            this.state = 6015;
            this.match(TSqlParser.EQUAL);
            this.state = 6016;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.NONE || _la===TSqlParser.PARTIAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 6031;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.ON) {
            this.state = 6019;
            this.match(TSqlParser.ON);
            this.state = 6021;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.PRIMARY) {
                this.state = 6020;
                this.match(TSqlParser.PRIMARY);
            }

            this.state = 6023;
            this.database_file_spec();
            this.state = 6028;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 6024;
                this.match(TSqlParser.COMMA);
                this.state = 6025;
                this.database_file_spec();
                this.state = 6030;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 6043;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.LOG) {
            this.state = 6033;
            this.match(TSqlParser.LOG);
            this.state = 6034;
            this.match(TSqlParser.ON);
            this.state = 6035;
            this.database_file_spec();
            this.state = 6040;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 6036;
                this.match(TSqlParser.COMMA);
                this.state = 6037;
                this.database_file_spec();
                this.state = 6042;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 6047;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COLLATE) {
            this.state = 6045;
            this.match(TSqlParser.COLLATE);
            this.state = 6046;
            localctx.collation_name = this.id();
        }

        this.state = 6058;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,783,this._ctx);
        if(la_===1) {
            this.state = 6049;
            this.match(TSqlParser.WITH);
            this.state = 6050;
            this.create_database_option();
            this.state = 6055;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 6051;
                this.match(TSqlParser.COMMA);
                this.state = 6052;
                this.create_database_option();
                this.state = 6057;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_indexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_index;
    this.where = null; // Search_conditionContext
    return this;
}

Create_indexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_indexContext.prototype.constructor = Create_indexContext;

Create_indexContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_indexContext.prototype.INDEX = function() {
    return this.getToken(TSqlParser.INDEX, 0);
};

Create_indexContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_indexContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ON);
    } else {
        return this.getToken(TSqlParser.ON, i);
    }
};


Create_indexContext.prototype.table_name_with_hint = function() {
    return this.getTypedRuleContext(Table_name_with_hintContext,0);
};

Create_indexContext.prototype.column_name_list_with_order = function() {
    return this.getTypedRuleContext(Column_name_list_with_orderContext,0);
};

Create_indexContext.prototype.UNIQUE = function() {
    return this.getToken(TSqlParser.UNIQUE, 0);
};

Create_indexContext.prototype.clustered = function() {
    return this.getTypedRuleContext(ClusteredContext,0);
};

Create_indexContext.prototype.INCLUDE = function() {
    return this.getToken(TSqlParser.INCLUDE, 0);
};

Create_indexContext.prototype.column_name_list = function() {
    return this.getTypedRuleContext(Column_name_listContext,0);
};

Create_indexContext.prototype.WHERE = function() {
    return this.getToken(TSqlParser.WHERE, 0);
};

Create_indexContext.prototype.index_options = function() {
    return this.getTypedRuleContext(Index_optionsContext,0);
};

Create_indexContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Create_indexContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_index(this);
	}
};

Create_indexContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_index(this);
	}
};




TSqlParser.Create_indexContext = Create_indexContext;

TSqlParser.prototype.create_index = function() {

    var localctx = new Create_indexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 456, TSqlParser.RULE_create_index);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6060;
        this.match(TSqlParser.CREATE);
        this.state = 6062;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.UNIQUE) {
            this.state = 6061;
            this.match(TSqlParser.UNIQUE);
        }

        this.state = 6065;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.CLUSTERED || _la===TSqlParser.NONCLUSTERED) {
            this.state = 6064;
            this.clustered();
        }

        this.state = 6067;
        this.match(TSqlParser.INDEX);
        this.state = 6068;
        this.id();
        this.state = 6069;
        this.match(TSqlParser.ON);
        this.state = 6070;
        this.table_name_with_hint();
        this.state = 6071;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 6072;
        this.column_name_list_with_order();
        this.state = 6073;
        this.match(TSqlParser.RR_BRACKET);
        this.state = 6079;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.INCLUDE) {
            this.state = 6074;
            this.match(TSqlParser.INCLUDE);
            this.state = 6075;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 6076;
            this.column_name_list();
            this.state = 6077;
            this.match(TSqlParser.RR_BRACKET);
        }

        this.state = 6083;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WHERE) {
            this.state = 6081;
            this.match(TSqlParser.WHERE);
            this.state = 6082;
            localctx.where = this.search_condition();
        }

        this.state = 6086;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,788,this._ctx);
        if(la_===1) {
            this.state = 6085;
            this.index_options();

        }
        this.state = 6090;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.ON) {
            this.state = 6088;
            this.match(TSqlParser.ON);
            this.state = 6089;
            this.id();
        }

        this.state = 6093;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,790,this._ctx);
        if(la_===1) {
            this.state = 6092;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_or_alter_procedureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_or_alter_procedure;
    this.proc = null; // Token
    return this;
}

Create_or_alter_procedureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_or_alter_procedureContext.prototype.constructor = Create_or_alter_procedureContext;

Create_or_alter_procedureContext.prototype.func_proc_name = function() {
    return this.getTypedRuleContext(Func_proc_nameContext,0);
};

Create_or_alter_procedureContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Create_or_alter_procedureContext.prototype.sql_clauses = function() {
    return this.getTypedRuleContext(Sql_clausesContext,0);
};

Create_or_alter_procedureContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Create_or_alter_procedureContext.prototype.PROC = function() {
    return this.getToken(TSqlParser.PROC, 0);
};

Create_or_alter_procedureContext.prototype.PROCEDURE = function() {
    return this.getToken(TSqlParser.PROCEDURE, 0);
};

Create_or_alter_procedureContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Create_or_alter_procedureContext.prototype.procedure_param = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Procedure_paramContext);
    } else {
        return this.getTypedRuleContext(Procedure_paramContext,i);
    }
};

Create_or_alter_procedureContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_or_alter_procedureContext.prototype.procedure_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Procedure_optionContext);
    } else {
        return this.getTypedRuleContext(Procedure_optionContext,i);
    }
};

Create_or_alter_procedureContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Create_or_alter_procedureContext.prototype.REPLICATION = function() {
    return this.getToken(TSqlParser.REPLICATION, 0);
};

Create_or_alter_procedureContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_or_alter_procedureContext.prototype.OR = function() {
    return this.getToken(TSqlParser.OR, 0);
};

Create_or_alter_procedureContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_or_alter_procedure(this);
	}
};

Create_or_alter_procedureContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_or_alter_procedure(this);
	}
};




TSqlParser.Create_or_alter_procedureContext = Create_or_alter_procedureContext;

TSqlParser.prototype.create_or_alter_procedure = function() {

    var localctx = new Create_or_alter_procedureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 458, TSqlParser.RULE_create_or_alter_procedure);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6101;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CREATE:
            this.state = 6095;
            this.match(TSqlParser.CREATE);
            this.state = 6098;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.OR) {
                this.state = 6096;
                this.match(TSqlParser.OR);
                this.state = 6097;
                this.match(TSqlParser.ALTER);
            }

            break;
        case TSqlParser.ALTER:
            this.state = 6100;
            this.match(TSqlParser.ALTER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 6103;
        localctx.proc = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.PROC || _la===TSqlParser.PROCEDURE)) {
            localctx.proc = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 6104;
        this.func_proc_name();
        this.state = 6107;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.SEMI) {
            this.state = 6105;
            this.match(TSqlParser.SEMI);
            this.state = 6106;
            this.match(TSqlParser.DECIMAL);
        }

        this.state = 6123;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.LOCAL_ID || _la===TSqlParser.LR_BRACKET) {
            this.state = 6110;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.LR_BRACKET) {
                this.state = 6109;
                this.match(TSqlParser.LR_BRACKET);
            }

            this.state = 6112;
            this.procedure_param();
            this.state = 6117;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 6113;
                this.match(TSqlParser.COMMA);
                this.state = 6114;
                this.procedure_param();
                this.state = 6119;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 6121;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.RR_BRACKET) {
                this.state = 6120;
                this.match(TSqlParser.RR_BRACKET);
            }

        }

        this.state = 6134;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WITH) {
            this.state = 6125;
            this.match(TSqlParser.WITH);
            this.state = 6126;
            this.procedure_option();
            this.state = 6131;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 6127;
                this.match(TSqlParser.COMMA);
                this.state = 6128;
                this.procedure_option();
                this.state = 6133;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 6138;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.FOR) {
            this.state = 6136;
            this.match(TSqlParser.FOR);
            this.state = 6137;
            this.match(TSqlParser.REPLICATION);
        }

        this.state = 6140;
        this.match(TSqlParser.AS);
        this.state = 6141;
        this.sql_clauses();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_or_alter_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_or_alter_trigger;
    return this;
}

Create_or_alter_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_or_alter_triggerContext.prototype.constructor = Create_or_alter_triggerContext;

Create_or_alter_triggerContext.prototype.create_or_alter_dml_trigger = function() {
    return this.getTypedRuleContext(Create_or_alter_dml_triggerContext,0);
};

Create_or_alter_triggerContext.prototype.create_or_alter_ddl_trigger = function() {
    return this.getTypedRuleContext(Create_or_alter_ddl_triggerContext,0);
};

Create_or_alter_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_or_alter_trigger(this);
	}
};

Create_or_alter_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_or_alter_trigger(this);
	}
};




TSqlParser.Create_or_alter_triggerContext = Create_or_alter_triggerContext;

TSqlParser.prototype.create_or_alter_trigger = function() {

    var localctx = new Create_or_alter_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 460, TSqlParser.RULE_create_or_alter_trigger);
    try {
        this.state = 6145;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,801,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 6143;
            this.create_or_alter_dml_trigger();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 6144;
            this.create_or_alter_ddl_trigger();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_or_alter_dml_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_or_alter_dml_trigger;
    return this;
}

Create_or_alter_dml_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_or_alter_dml_triggerContext.prototype.constructor = Create_or_alter_dml_triggerContext;

Create_or_alter_dml_triggerContext.prototype.TRIGGER = function() {
    return this.getToken(TSqlParser.TRIGGER, 0);
};

Create_or_alter_dml_triggerContext.prototype.simple_name = function() {
    return this.getTypedRuleContext(Simple_nameContext,0);
};

Create_or_alter_dml_triggerContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Create_or_alter_dml_triggerContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Create_or_alter_dml_triggerContext.prototype.dml_trigger_operation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dml_trigger_operationContext);
    } else {
        return this.getTypedRuleContext(Dml_trigger_operationContext,i);
    }
};

Create_or_alter_dml_triggerContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Create_or_alter_dml_triggerContext.prototype.sql_clauses = function() {
    return this.getTypedRuleContext(Sql_clausesContext,0);
};

Create_or_alter_dml_triggerContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Create_or_alter_dml_triggerContext.prototype.FOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.FOR);
    } else {
        return this.getToken(TSqlParser.FOR, i);
    }
};


Create_or_alter_dml_triggerContext.prototype.AFTER = function() {
    return this.getToken(TSqlParser.AFTER, 0);
};

Create_or_alter_dml_triggerContext.prototype.INSTEAD = function() {
    return this.getToken(TSqlParser.INSTEAD, 0);
};

Create_or_alter_dml_triggerContext.prototype.OF = function() {
    return this.getToken(TSqlParser.OF, 0);
};

Create_or_alter_dml_triggerContext.prototype.WITH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.WITH);
    } else {
        return this.getToken(TSqlParser.WITH, i);
    }
};


Create_or_alter_dml_triggerContext.prototype.dml_trigger_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dml_trigger_optionContext);
    } else {
        return this.getTypedRuleContext(Dml_trigger_optionContext,i);
    }
};

Create_or_alter_dml_triggerContext.prototype.APPEND = function() {
    return this.getToken(TSqlParser.APPEND, 0);
};

Create_or_alter_dml_triggerContext.prototype.NOT = function() {
    return this.getToken(TSqlParser.NOT, 0);
};

Create_or_alter_dml_triggerContext.prototype.REPLICATION = function() {
    return this.getToken(TSqlParser.REPLICATION, 0);
};

Create_or_alter_dml_triggerContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_or_alter_dml_triggerContext.prototype.OR = function() {
    return this.getToken(TSqlParser.OR, 0);
};

Create_or_alter_dml_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_or_alter_dml_trigger(this);
	}
};

Create_or_alter_dml_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_or_alter_dml_trigger(this);
	}
};




TSqlParser.Create_or_alter_dml_triggerContext = Create_or_alter_dml_triggerContext;

TSqlParser.prototype.create_or_alter_dml_trigger = function() {

    var localctx = new Create_or_alter_dml_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 462, TSqlParser.RULE_create_or_alter_dml_trigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6153;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CREATE:
            this.state = 6147;
            this.match(TSqlParser.CREATE);
            this.state = 6150;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.OR) {
                this.state = 6148;
                this.match(TSqlParser.OR);
                this.state = 6149;
                this.match(TSqlParser.ALTER);
            }

            break;
        case TSqlParser.ALTER:
            this.state = 6152;
            this.match(TSqlParser.ALTER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 6155;
        this.match(TSqlParser.TRIGGER);
        this.state = 6156;
        this.simple_name();
        this.state = 6157;
        this.match(TSqlParser.ON);
        this.state = 6158;
        this.table_name();
        this.state = 6168;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WITH) {
            this.state = 6159;
            this.match(TSqlParser.WITH);
            this.state = 6160;
            this.dml_trigger_option();
            this.state = 6165;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 6161;
                this.match(TSqlParser.COMMA);
                this.state = 6162;
                this.dml_trigger_option();
                this.state = 6167;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 6174;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.FOR:
            this.state = 6170;
            this.match(TSqlParser.FOR);
            break;
        case TSqlParser.AFTER:
            this.state = 6171;
            this.match(TSqlParser.AFTER);
            break;
        case TSqlParser.INSTEAD:
            this.state = 6172;
            this.match(TSqlParser.INSTEAD);
            this.state = 6173;
            this.match(TSqlParser.OF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 6176;
        this.dml_trigger_operation();
        this.state = 6181;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 6177;
            this.match(TSqlParser.COMMA);
            this.state = 6178;
            this.dml_trigger_operation();
            this.state = 6183;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 6186;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WITH) {
            this.state = 6184;
            this.match(TSqlParser.WITH);
            this.state = 6185;
            this.match(TSqlParser.APPEND);
        }

        this.state = 6191;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.NOT) {
            this.state = 6188;
            this.match(TSqlParser.NOT);
            this.state = 6189;
            this.match(TSqlParser.FOR);
            this.state = 6190;
            this.match(TSqlParser.REPLICATION);
        }

        this.state = 6193;
        this.match(TSqlParser.AS);
        this.state = 6194;
        this.sql_clauses();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dml_trigger_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_dml_trigger_option;
    return this;
}

Dml_trigger_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dml_trigger_optionContext.prototype.constructor = Dml_trigger_optionContext;

Dml_trigger_optionContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Dml_trigger_optionContext.prototype.execute_clause = function() {
    return this.getTypedRuleContext(Execute_clauseContext,0);
};

Dml_trigger_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDml_trigger_option(this);
	}
};

Dml_trigger_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDml_trigger_option(this);
	}
};




TSqlParser.Dml_trigger_optionContext = Dml_trigger_optionContext;

TSqlParser.prototype.dml_trigger_option = function() {

    var localctx = new Dml_trigger_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 464, TSqlParser.RULE_dml_trigger_option);
    try {
        this.state = 6198;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.ENCRYPTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 6196;
            this.match(TSqlParser.ENCRYPTION);
            break;
        case TSqlParser.EXECUTE:
            this.enterOuterAlt(localctx, 2);
            this.state = 6197;
            this.execute_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dml_trigger_operationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_dml_trigger_operation;
    return this;
}

Dml_trigger_operationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dml_trigger_operationContext.prototype.constructor = Dml_trigger_operationContext;

Dml_trigger_operationContext.prototype.INSERT = function() {
    return this.getToken(TSqlParser.INSERT, 0);
};

Dml_trigger_operationContext.prototype.UPDATE = function() {
    return this.getToken(TSqlParser.UPDATE, 0);
};

Dml_trigger_operationContext.prototype.DELETE = function() {
    return this.getToken(TSqlParser.DELETE, 0);
};

Dml_trigger_operationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDml_trigger_operation(this);
	}
};

Dml_trigger_operationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDml_trigger_operation(this);
	}
};




TSqlParser.Dml_trigger_operationContext = Dml_trigger_operationContext;

TSqlParser.prototype.dml_trigger_operation = function() {

    var localctx = new Dml_trigger_operationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 466, TSqlParser.RULE_dml_trigger_operation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6200;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.DELETE || _la===TSqlParser.INSERT || _la===TSqlParser.UPDATE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_or_alter_ddl_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_or_alter_ddl_trigger;
    return this;
}

Create_or_alter_ddl_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_or_alter_ddl_triggerContext.prototype.constructor = Create_or_alter_ddl_triggerContext;

Create_or_alter_ddl_triggerContext.prototype.TRIGGER = function() {
    return this.getToken(TSqlParser.TRIGGER, 0);
};

Create_or_alter_ddl_triggerContext.prototype.simple_name = function() {
    return this.getTypedRuleContext(Simple_nameContext,0);
};

Create_or_alter_ddl_triggerContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Create_or_alter_ddl_triggerContext.prototype.ddl_trigger_operation = function() {
    return this.getTypedRuleContext(Ddl_trigger_operationContext,0);
};

Create_or_alter_ddl_triggerContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Create_or_alter_ddl_triggerContext.prototype.sql_clauses = function() {
    return this.getTypedRuleContext(Sql_clausesContext,0);
};

Create_or_alter_ddl_triggerContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Create_or_alter_ddl_triggerContext.prototype.AFTER = function() {
    return this.getToken(TSqlParser.AFTER, 0);
};

Create_or_alter_ddl_triggerContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Create_or_alter_ddl_triggerContext.prototype.ALL = function() {
    return this.getToken(TSqlParser.ALL, 0);
};

Create_or_alter_ddl_triggerContext.prototype.SERVER = function() {
    return this.getToken(TSqlParser.SERVER, 0);
};

Create_or_alter_ddl_triggerContext.prototype.DATABASE = function() {
    return this.getToken(TSqlParser.DATABASE, 0);
};

Create_or_alter_ddl_triggerContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_or_alter_ddl_triggerContext.prototype.dml_trigger_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dml_trigger_optionContext);
    } else {
        return this.getTypedRuleContext(Dml_trigger_optionContext,i);
    }
};

Create_or_alter_ddl_triggerContext.prototype.dml_trigger_operation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dml_trigger_operationContext);
    } else {
        return this.getTypedRuleContext(Dml_trigger_operationContext,i);
    }
};

Create_or_alter_ddl_triggerContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_or_alter_ddl_triggerContext.prototype.OR = function() {
    return this.getToken(TSqlParser.OR, 0);
};

Create_or_alter_ddl_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_or_alter_ddl_trigger(this);
	}
};

Create_or_alter_ddl_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_or_alter_ddl_trigger(this);
	}
};




TSqlParser.Create_or_alter_ddl_triggerContext = Create_or_alter_ddl_triggerContext;

TSqlParser.prototype.create_or_alter_ddl_trigger = function() {

    var localctx = new Create_or_alter_ddl_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 468, TSqlParser.RULE_create_or_alter_ddl_trigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6208;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CREATE:
            this.state = 6202;
            this.match(TSqlParser.CREATE);
            this.state = 6205;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.OR) {
                this.state = 6203;
                this.match(TSqlParser.OR);
                this.state = 6204;
                this.match(TSqlParser.ALTER);
            }

            break;
        case TSqlParser.ALTER:
            this.state = 6207;
            this.match(TSqlParser.ALTER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 6210;
        this.match(TSqlParser.TRIGGER);
        this.state = 6211;
        this.simple_name();
        this.state = 6212;
        this.match(TSqlParser.ON);
        this.state = 6216;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.ALL:
            this.state = 6213;
            this.match(TSqlParser.ALL);
            this.state = 6214;
            this.match(TSqlParser.SERVER);
            break;
        case TSqlParser.DATABASE:
            this.state = 6215;
            this.match(TSqlParser.DATABASE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 6227;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WITH) {
            this.state = 6218;
            this.match(TSqlParser.WITH);
            this.state = 6219;
            this.dml_trigger_option();
            this.state = 6224;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 6220;
                this.match(TSqlParser.COMMA);
                this.state = 6221;
                this.dml_trigger_option();
                this.state = 6226;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 6229;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.FOR || _la===TSqlParser.AFTER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 6230;
        this.ddl_trigger_operation();
        this.state = 6235;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 6231;
            this.match(TSqlParser.COMMA);
            this.state = 6232;
            this.dml_trigger_operation();
            this.state = 6237;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 6238;
        this.match(TSqlParser.AS);
        this.state = 6239;
        this.sql_clauses();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ddl_trigger_operationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_ddl_trigger_operation;
    return this;
}

Ddl_trigger_operationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ddl_trigger_operationContext.prototype.constructor = Ddl_trigger_operationContext;

Ddl_trigger_operationContext.prototype.simple_id = function() {
    return this.getTypedRuleContext(Simple_idContext,0);
};

Ddl_trigger_operationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDdl_trigger_operation(this);
	}
};

Ddl_trigger_operationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDdl_trigger_operation(this);
	}
};




TSqlParser.Ddl_trigger_operationContext = Ddl_trigger_operationContext;

TSqlParser.prototype.ddl_trigger_operation = function() {

    var localctx = new Ddl_trigger_operationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 470, TSqlParser.RULE_ddl_trigger_operation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6241;
        this.simple_id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_or_alter_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_or_alter_function;
    return this;
}

Create_or_alter_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_or_alter_functionContext.prototype.constructor = Create_or_alter_functionContext;

Create_or_alter_functionContext.prototype.FUNCTION = function() {
    return this.getToken(TSqlParser.FUNCTION, 0);
};

Create_or_alter_functionContext.prototype.func_proc_name = function() {
    return this.getTypedRuleContext(Func_proc_nameContext,0);
};

Create_or_alter_functionContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Create_or_alter_functionContext.prototype.func_body_returns_select = function() {
    return this.getTypedRuleContext(Func_body_returns_selectContext,0);
};

Create_or_alter_functionContext.prototype.func_body_returns_table = function() {
    return this.getTypedRuleContext(Func_body_returns_tableContext,0);
};

Create_or_alter_functionContext.prototype.func_body_returns_scalar = function() {
    return this.getTypedRuleContext(Func_body_returns_scalarContext,0);
};

Create_or_alter_functionContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_or_alter_functionContext.prototype.procedure_param = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Procedure_paramContext);
    } else {
        return this.getTypedRuleContext(Procedure_paramContext,i);
    }
};

Create_or_alter_functionContext.prototype.OR = function() {
    return this.getToken(TSqlParser.OR, 0);
};

Create_or_alter_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_or_alter_function(this);
	}
};

Create_or_alter_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_or_alter_function(this);
	}
};




TSqlParser.Create_or_alter_functionContext = Create_or_alter_functionContext;

TSqlParser.prototype.create_or_alter_function = function() {

    var localctx = new Create_or_alter_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 472, TSqlParser.RULE_create_or_alter_function);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6249;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CREATE:
            this.state = 6243;
            this.match(TSqlParser.CREATE);
            this.state = 6246;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.OR) {
                this.state = 6244;
                this.match(TSqlParser.OR);
                this.state = 6245;
                this.match(TSqlParser.ALTER);
            }

            break;
        case TSqlParser.ALTER:
            this.state = 6248;
            this.match(TSqlParser.ALTER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 6251;
        this.match(TSqlParser.FUNCTION);
        this.state = 6252;
        this.func_proc_name();
        this.state = 6266;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,820,this._ctx);
        switch(la_) {
        case 1:
            this.state = 6253;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 6254;
            this.procedure_param();
            this.state = 6259;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 6255;
                this.match(TSqlParser.COMMA);
                this.state = 6256;
                this.procedure_param();
                this.state = 6261;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 6262;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 2:
            this.state = 6264;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 6265;
            this.match(TSqlParser.RR_BRACKET);
            break;

        }
        this.state = 6271;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,821,this._ctx);
        switch(la_) {
        case 1:
            this.state = 6268;
            this.func_body_returns_select();
            break;

        case 2:
            this.state = 6269;
            this.func_body_returns_table();
            break;

        case 3:
            this.state = 6270;
            this.func_body_returns_scalar();
            break;

        }
        this.state = 6274;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,822,this._ctx);
        if(la_===1) {
            this.state = 6273;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_body_returns_selectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_func_body_returns_select;
    return this;
}

Func_body_returns_selectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_body_returns_selectContext.prototype.constructor = Func_body_returns_selectContext;

Func_body_returns_selectContext.prototype.RETURNS = function() {
    return this.getToken(TSqlParser.RETURNS, 0);
};

Func_body_returns_selectContext.prototype.TABLE = function() {
    return this.getToken(TSqlParser.TABLE, 0);
};

Func_body_returns_selectContext.prototype.RETURN = function() {
    return this.getToken(TSqlParser.RETURN, 0);
};

Func_body_returns_selectContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Func_body_returns_selectContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Func_body_returns_selectContext.prototype.function_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Function_optionContext);
    } else {
        return this.getTypedRuleContext(Function_optionContext,i);
    }
};

Func_body_returns_selectContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Func_body_returns_selectContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterFunc_body_returns_select(this);
	}
};

Func_body_returns_selectContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitFunc_body_returns_select(this);
	}
};




TSqlParser.Func_body_returns_selectContext = Func_body_returns_selectContext;

TSqlParser.prototype.func_body_returns_select = function() {

    var localctx = new Func_body_returns_selectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 474, TSqlParser.RULE_func_body_returns_select);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6276;
        this.match(TSqlParser.RETURNS);
        this.state = 6277;
        this.match(TSqlParser.TABLE);
        this.state = 6287;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WITH) {
            this.state = 6278;
            this.match(TSqlParser.WITH);
            this.state = 6279;
            this.function_option();
            this.state = 6284;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 6280;
                this.match(TSqlParser.COMMA);
                this.state = 6281;
                this.function_option();
                this.state = 6286;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 6290;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AS) {
            this.state = 6289;
            this.match(TSqlParser.AS);
        }

        this.state = 6292;
        this.match(TSqlParser.RETURN);
        this.state = 6298;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,826,this._ctx);
        switch(la_) {
        case 1:
            this.state = 6293;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 6294;
            this.select_statement();
            this.state = 6295;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 2:
            this.state = 6297;
            this.select_statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_body_returns_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_func_body_returns_table;
    return this;
}

Func_body_returns_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_body_returns_tableContext.prototype.constructor = Func_body_returns_tableContext;

Func_body_returns_tableContext.prototype.RETURNS = function() {
    return this.getToken(TSqlParser.RETURNS, 0);
};

Func_body_returns_tableContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Func_body_returns_tableContext.prototype.table_type_definition = function() {
    return this.getTypedRuleContext(Table_type_definitionContext,0);
};

Func_body_returns_tableContext.prototype.BEGIN = function() {
    return this.getToken(TSqlParser.BEGIN, 0);
};

Func_body_returns_tableContext.prototype.RETURN = function() {
    return this.getToken(TSqlParser.RETURN, 0);
};

Func_body_returns_tableContext.prototype.END = function() {
    return this.getToken(TSqlParser.END, 0);
};

Func_body_returns_tableContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Func_body_returns_tableContext.prototype.function_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Function_optionContext);
    } else {
        return this.getTypedRuleContext(Function_optionContext,i);
    }
};

Func_body_returns_tableContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Func_body_returns_tableContext.prototype.sql_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sql_clauseContext);
    } else {
        return this.getTypedRuleContext(Sql_clauseContext,i);
    }
};

Func_body_returns_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterFunc_body_returns_table(this);
	}
};

Func_body_returns_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitFunc_body_returns_table(this);
	}
};




TSqlParser.Func_body_returns_tableContext = Func_body_returns_tableContext;

TSqlParser.prototype.func_body_returns_table = function() {

    var localctx = new Func_body_returns_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 476, TSqlParser.RULE_func_body_returns_table);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6300;
        this.match(TSqlParser.RETURNS);
        this.state = 6301;
        this.match(TSqlParser.LOCAL_ID);
        this.state = 6302;
        this.table_type_definition();
        this.state = 6312;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WITH) {
            this.state = 6303;
            this.match(TSqlParser.WITH);
            this.state = 6304;
            this.function_option();
            this.state = 6309;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 6305;
                this.match(TSqlParser.COMMA);
                this.state = 6306;
                this.function_option();
                this.state = 6311;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 6315;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AS) {
            this.state = 6314;
            this.match(TSqlParser.AS);
        }

        this.state = 6317;
        this.match(TSqlParser.BEGIN);
        this.state = 6321;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,830,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 6318;
                this.sql_clause(); 
            }
            this.state = 6323;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,830,this._ctx);
        }

        this.state = 6324;
        this.match(TSqlParser.RETURN);
        this.state = 6326;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.SEMI) {
            this.state = 6325;
            this.match(TSqlParser.SEMI);
        }

        this.state = 6328;
        this.match(TSqlParser.END);
        this.state = 6330;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,832,this._ctx);
        if(la_===1) {
            this.state = 6329;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_body_returns_scalarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_func_body_returns_scalar;
    this.ret = null; // ExpressionContext
    return this;
}

Func_body_returns_scalarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_body_returns_scalarContext.prototype.constructor = Func_body_returns_scalarContext;

Func_body_returns_scalarContext.prototype.RETURNS = function() {
    return this.getToken(TSqlParser.RETURNS, 0);
};

Func_body_returns_scalarContext.prototype.data_type = function() {
    return this.getTypedRuleContext(Data_typeContext,0);
};

Func_body_returns_scalarContext.prototype.BEGIN = function() {
    return this.getToken(TSqlParser.BEGIN, 0);
};

Func_body_returns_scalarContext.prototype.RETURN = function() {
    return this.getToken(TSqlParser.RETURN, 0);
};

Func_body_returns_scalarContext.prototype.END = function() {
    return this.getToken(TSqlParser.END, 0);
};

Func_body_returns_scalarContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Func_body_returns_scalarContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Func_body_returns_scalarContext.prototype.function_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Function_optionContext);
    } else {
        return this.getTypedRuleContext(Function_optionContext,i);
    }
};

Func_body_returns_scalarContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Func_body_returns_scalarContext.prototype.sql_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sql_clauseContext);
    } else {
        return this.getTypedRuleContext(Sql_clauseContext,i);
    }
};

Func_body_returns_scalarContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterFunc_body_returns_scalar(this);
	}
};

Func_body_returns_scalarContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitFunc_body_returns_scalar(this);
	}
};




TSqlParser.Func_body_returns_scalarContext = Func_body_returns_scalarContext;

TSqlParser.prototype.func_body_returns_scalar = function() {

    var localctx = new Func_body_returns_scalarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 478, TSqlParser.RULE_func_body_returns_scalar);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6332;
        this.match(TSqlParser.RETURNS);
        this.state = 6333;
        this.data_type();
        this.state = 6343;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WITH) {
            this.state = 6334;
            this.match(TSqlParser.WITH);
            this.state = 6335;
            this.function_option();
            this.state = 6340;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 6336;
                this.match(TSqlParser.COMMA);
                this.state = 6337;
                this.function_option();
                this.state = 6342;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 6346;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AS) {
            this.state = 6345;
            this.match(TSqlParser.AS);
        }

        this.state = 6348;
        this.match(TSqlParser.BEGIN);
        this.state = 6352;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,836,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 6349;
                this.sql_clause(); 
            }
            this.state = 6354;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,836,this._ctx);
        }

        this.state = 6355;
        this.match(TSqlParser.RETURN);
        this.state = 6356;
        localctx.ret = this.expression(0);
        this.state = 6358;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.SEMI) {
            this.state = 6357;
            this.match(TSqlParser.SEMI);
        }

        this.state = 6360;
        this.match(TSqlParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Procedure_paramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_procedure_param;
    this.default_val = null; // Default_valueContext
    return this;
}

Procedure_paramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_paramContext.prototype.constructor = Procedure_paramContext;

Procedure_paramContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Procedure_paramContext.prototype.data_type = function() {
    return this.getTypedRuleContext(Data_typeContext,0);
};

Procedure_paramContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Procedure_paramContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Procedure_paramContext.prototype.VARYING = function() {
    return this.getToken(TSqlParser.VARYING, 0);
};

Procedure_paramContext.prototype.default_value = function() {
    return this.getTypedRuleContext(Default_valueContext,0);
};

Procedure_paramContext.prototype.OUT = function() {
    return this.getToken(TSqlParser.OUT, 0);
};

Procedure_paramContext.prototype.OUTPUT = function() {
    return this.getToken(TSqlParser.OUTPUT, 0);
};

Procedure_paramContext.prototype.READONLY = function() {
    return this.getToken(TSqlParser.READONLY, 0);
};

Procedure_paramContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterProcedure_param(this);
	}
};

Procedure_paramContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitProcedure_param(this);
	}
};




TSqlParser.Procedure_paramContext = Procedure_paramContext;

TSqlParser.prototype.procedure_param = function() {

    var localctx = new Procedure_paramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 480, TSqlParser.RULE_procedure_param);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6362;
        this.match(TSqlParser.LOCAL_ID);
        this.state = 6366;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,838,this._ctx);
        if(la_===1) {
            this.state = 6363;
            this.id();
            this.state = 6364;
            this.match(TSqlParser.DOT);

        }
        this.state = 6369;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AS) {
            this.state = 6368;
            this.match(TSqlParser.AS);
        }

        this.state = 6371;
        this.data_type();
        this.state = 6373;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.VARYING) {
            this.state = 6372;
            this.match(TSqlParser.VARYING);
        }

        this.state = 6377;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.EQUAL) {
            this.state = 6375;
            this.match(TSqlParser.EQUAL);
            this.state = 6376;
            localctx.default_val = this.default_value();
        }

        this.state = 6380;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.OUT || _la===TSqlParser.OUTPUT || _la===TSqlParser.READONLY) {
            this.state = 6379;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OUT || _la===TSqlParser.OUTPUT || _la===TSqlParser.READONLY)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Procedure_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_procedure_option;
    return this;
}

Procedure_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Procedure_optionContext.prototype.constructor = Procedure_optionContext;

Procedure_optionContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Procedure_optionContext.prototype.RECOMPILE = function() {
    return this.getToken(TSqlParser.RECOMPILE, 0);
};

Procedure_optionContext.prototype.execute_clause = function() {
    return this.getTypedRuleContext(Execute_clauseContext,0);
};

Procedure_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterProcedure_option(this);
	}
};

Procedure_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitProcedure_option(this);
	}
};




TSqlParser.Procedure_optionContext = Procedure_optionContext;

TSqlParser.prototype.procedure_option = function() {

    var localctx = new Procedure_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 482, TSqlParser.RULE_procedure_option);
    try {
        this.state = 6385;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.ENCRYPTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 6382;
            this.match(TSqlParser.ENCRYPTION);
            break;
        case TSqlParser.RECOMPILE:
            this.enterOuterAlt(localctx, 2);
            this.state = 6383;
            this.match(TSqlParser.RECOMPILE);
            break;
        case TSqlParser.EXECUTE:
            this.enterOuterAlt(localctx, 3);
            this.state = 6384;
            this.execute_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_function_option;
    return this;
}

Function_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_optionContext.prototype.constructor = Function_optionContext;

Function_optionContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Function_optionContext.prototype.SCHEMABINDING = function() {
    return this.getToken(TSqlParser.SCHEMABINDING, 0);
};

Function_optionContext.prototype.RETURNS = function() {
    return this.getToken(TSqlParser.RETURNS, 0);
};

Function_optionContext.prototype.NULL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NULL);
    } else {
        return this.getToken(TSqlParser.NULL, i);
    }
};


Function_optionContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Function_optionContext.prototype.INPUT = function() {
    return this.getToken(TSqlParser.INPUT, 0);
};

Function_optionContext.prototype.CALLED = function() {
    return this.getToken(TSqlParser.CALLED, 0);
};

Function_optionContext.prototype.execute_clause = function() {
    return this.getTypedRuleContext(Execute_clauseContext,0);
};

Function_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterFunction_option(this);
	}
};

Function_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitFunction_option(this);
	}
};




TSqlParser.Function_optionContext = Function_optionContext;

TSqlParser.prototype.function_option = function() {

    var localctx = new Function_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 484, TSqlParser.RULE_function_option);
    try {
        this.state = 6399;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.ENCRYPTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 6387;
            this.match(TSqlParser.ENCRYPTION);
            break;
        case TSqlParser.SCHEMABINDING:
            this.enterOuterAlt(localctx, 2);
            this.state = 6388;
            this.match(TSqlParser.SCHEMABINDING);
            break;
        case TSqlParser.RETURNS:
            this.enterOuterAlt(localctx, 3);
            this.state = 6389;
            this.match(TSqlParser.RETURNS);
            this.state = 6390;
            this.match(TSqlParser.NULL);
            this.state = 6391;
            this.match(TSqlParser.ON);
            this.state = 6392;
            this.match(TSqlParser.NULL);
            this.state = 6393;
            this.match(TSqlParser.INPUT);
            break;
        case TSqlParser.CALLED:
            this.enterOuterAlt(localctx, 4);
            this.state = 6394;
            this.match(TSqlParser.CALLED);
            this.state = 6395;
            this.match(TSqlParser.ON);
            this.state = 6396;
            this.match(TSqlParser.NULL);
            this.state = 6397;
            this.match(TSqlParser.INPUT);
            break;
        case TSqlParser.EXECUTE:
            this.enterOuterAlt(localctx, 5);
            this.state = 6398;
            this.execute_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_statisticsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_statistics;
    return this;
}

Create_statisticsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_statisticsContext.prototype.constructor = Create_statisticsContext;

Create_statisticsContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_statisticsContext.prototype.STATISTICS = function() {
    return this.getToken(TSqlParser.STATISTICS, 0);
};

Create_statisticsContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Create_statisticsContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Create_statisticsContext.prototype.table_name_with_hint = function() {
    return this.getTypedRuleContext(Table_name_with_hintContext,0);
};

Create_statisticsContext.prototype.column_name_list = function() {
    return this.getTypedRuleContext(Column_name_listContext,0);
};

Create_statisticsContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_statisticsContext.prototype.FULLSCAN = function() {
    return this.getToken(TSqlParser.FULLSCAN, 0);
};

Create_statisticsContext.prototype.SAMPLE = function() {
    return this.getToken(TSqlParser.SAMPLE, 0);
};

Create_statisticsContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Create_statisticsContext.prototype.STATS_STREAM = function() {
    return this.getToken(TSqlParser.STATS_STREAM, 0);
};

Create_statisticsContext.prototype.PERCENT = function() {
    return this.getToken(TSqlParser.PERCENT, 0);
};

Create_statisticsContext.prototype.ROWS = function() {
    return this.getToken(TSqlParser.ROWS, 0);
};

Create_statisticsContext.prototype.NORECOMPUTE = function() {
    return this.getToken(TSqlParser.NORECOMPUTE, 0);
};

Create_statisticsContext.prototype.INCREMENTAL = function() {
    return this.getToken(TSqlParser.INCREMENTAL, 0);
};

Create_statisticsContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Create_statisticsContext.prototype.on_off = function() {
    return this.getTypedRuleContext(On_offContext,0);
};

Create_statisticsContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_statistics(this);
	}
};

Create_statisticsContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_statistics(this);
	}
};




TSqlParser.Create_statisticsContext = Create_statisticsContext;

TSqlParser.prototype.create_statistics = function() {

    var localctx = new Create_statisticsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 486, TSqlParser.RULE_create_statistics);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6401;
        this.match(TSqlParser.CREATE);
        this.state = 6402;
        this.match(TSqlParser.STATISTICS);
        this.state = 6403;
        this.id();
        this.state = 6404;
        this.match(TSqlParser.ON);
        this.state = 6405;
        this.table_name_with_hint();
        this.state = 6406;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 6407;
        this.column_name_list();
        this.state = 6408;
        this.match(TSqlParser.RR_BRACKET);
        this.state = 6427;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,848,this._ctx);
        if(la_===1) {
            this.state = 6409;
            this.match(TSqlParser.WITH);
            this.state = 6415;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.FULLSCAN:
                this.state = 6410;
                this.match(TSqlParser.FULLSCAN);
                break;
            case TSqlParser.SAMPLE:
                this.state = 6411;
                this.match(TSqlParser.SAMPLE);
                this.state = 6412;
                this.match(TSqlParser.DECIMAL);
                this.state = 6413;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.PERCENT || _la===TSqlParser.ROWS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;
            case TSqlParser.STATS_STREAM:
                this.state = 6414;
                this.match(TSqlParser.STATS_STREAM);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 6419;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,846,this._ctx);
            if(la_===1) {
                this.state = 6417;
                this.match(TSqlParser.COMMA);
                this.state = 6418;
                this.match(TSqlParser.NORECOMPUTE);

            }
            this.state = 6425;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 6421;
                this.match(TSqlParser.COMMA);
                this.state = 6422;
                this.match(TSqlParser.INCREMENTAL);
                this.state = 6423;
                this.match(TSqlParser.EQUAL);
                this.state = 6424;
                this.on_off();
            }


        }
        this.state = 6430;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,849,this._ctx);
        if(la_===1) {
            this.state = 6429;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_table;
    return this;
}

Create_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_tableContext.prototype.constructor = Create_tableContext;

Create_tableContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_tableContext.prototype.TABLE = function() {
    return this.getToken(TSqlParser.TABLE, 0);
};

Create_tableContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Create_tableContext.prototype.column_def_table_constraints = function() {
    return this.getTypedRuleContext(Column_def_table_constraintsContext,0);
};

Create_tableContext.prototype.table_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_optionsContext);
    } else {
        return this.getTypedRuleContext(Table_optionsContext,i);
    }
};

Create_tableContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Create_tableContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_tableContext.prototype.DEFAULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DEFAULT);
    } else {
        return this.getToken(TSqlParser.DEFAULT, i);
    }
};


Create_tableContext.prototype.TEXTIMAGE_ON = function() {
    return this.getToken(TSqlParser.TEXTIMAGE_ON, 0);
};

Create_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_table(this);
	}
};

Create_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_table(this);
	}
};




TSqlParser.Create_tableContext = Create_tableContext;

TSqlParser.prototype.create_table = function() {

    var localctx = new Create_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 488, TSqlParser.RULE_create_table);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6432;
        this.match(TSqlParser.CREATE);
        this.state = 6433;
        this.match(TSqlParser.TABLE);
        this.state = 6434;
        this.table_name();
        this.state = 6435;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 6436;
        this.column_def_table_constraints();
        this.state = 6438;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 6437;
            this.match(TSqlParser.COMMA);
        }

        this.state = 6440;
        this.match(TSqlParser.RR_BRACKET);
        this.state = 6444;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,851,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 6441;
                this.table_options(); 
            }
            this.state = 6446;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,851,this._ctx);
        }

        this.state = 6450;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,852,this._ctx);
        if(la_===1) {
            this.state = 6447;
            this.match(TSqlParser.ON);
            this.state = 6448;
            this.id();

        } else if(la_===2) {
            this.state = 6449;
            this.match(TSqlParser.DEFAULT);

        }
        this.state = 6455;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,853,this._ctx);
        if(la_===1) {
            this.state = 6452;
            this.match(TSqlParser.TEXTIMAGE_ON);
            this.state = 6453;
            this.id();

        } else if(la_===2) {
            this.state = 6454;
            this.match(TSqlParser.DEFAULT);

        }
        this.state = 6458;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,854,this._ctx);
        if(la_===1) {
            this.state = 6457;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_table_options;
    return this;
}

Table_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_optionsContext.prototype.constructor = Table_optionsContext;

Table_optionsContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Table_optionsContext.prototype.index_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Index_optionContext);
    } else {
        return this.getTypedRuleContext(Index_optionContext,i);
    }
};

Table_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTable_options(this);
	}
};

Table_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTable_options(this);
	}
};




TSqlParser.Table_optionsContext = Table_optionsContext;

TSqlParser.prototype.table_options = function() {

    var localctx = new Table_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 490, TSqlParser.RULE_table_options);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6460;
        this.match(TSqlParser.WITH);
        this.state = 6461;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 6462;
        this.index_option();
        this.state = 6467;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 6463;
            this.match(TSqlParser.COMMA);
            this.state = 6464;
            this.index_option();
            this.state = 6469;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 6470;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_viewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_view;
    return this;
}

Create_viewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_viewContext.prototype.constructor = Create_viewContext;

Create_viewContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_viewContext.prototype.VIEW = function() {
    return this.getToken(TSqlParser.VIEW, 0);
};

Create_viewContext.prototype.simple_name = function() {
    return this.getTypedRuleContext(Simple_nameContext,0);
};

Create_viewContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Create_viewContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Create_viewContext.prototype.column_name_list = function() {
    return this.getTypedRuleContext(Column_name_listContext,0);
};

Create_viewContext.prototype.WITH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.WITH);
    } else {
        return this.getToken(TSqlParser.WITH, i);
    }
};


Create_viewContext.prototype.view_attribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(View_attributeContext);
    } else {
        return this.getTypedRuleContext(View_attributeContext,i);
    }
};

Create_viewContext.prototype.CHECK = function() {
    return this.getToken(TSqlParser.CHECK, 0);
};

Create_viewContext.prototype.OPTION = function() {
    return this.getToken(TSqlParser.OPTION, 0);
};

Create_viewContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_view(this);
	}
};

Create_viewContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_view(this);
	}
};




TSqlParser.Create_viewContext = Create_viewContext;

TSqlParser.prototype.create_view = function() {

    var localctx = new Create_viewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 492, TSqlParser.RULE_create_view);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6472;
        this.match(TSqlParser.CREATE);
        this.state = 6473;
        this.match(TSqlParser.VIEW);
        this.state = 6474;
        this.simple_name();
        this.state = 6479;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.LR_BRACKET) {
            this.state = 6475;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 6476;
            this.column_name_list();
            this.state = 6477;
            this.match(TSqlParser.RR_BRACKET);
        }

        this.state = 6490;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WITH) {
            this.state = 6481;
            this.match(TSqlParser.WITH);
            this.state = 6482;
            this.view_attribute();
            this.state = 6487;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 6483;
                this.match(TSqlParser.COMMA);
                this.state = 6484;
                this.view_attribute();
                this.state = 6489;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 6492;
        this.match(TSqlParser.AS);
        this.state = 6493;
        this.select_statement();
        this.state = 6497;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,859,this._ctx);
        if(la_===1) {
            this.state = 6494;
            this.match(TSqlParser.WITH);
            this.state = 6495;
            this.match(TSqlParser.CHECK);
            this.state = 6496;
            this.match(TSqlParser.OPTION);

        }
        this.state = 6500;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,860,this._ctx);
        if(la_===1) {
            this.state = 6499;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function View_attributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_view_attribute;
    return this;
}

View_attributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
View_attributeContext.prototype.constructor = View_attributeContext;

View_attributeContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

View_attributeContext.prototype.SCHEMABINDING = function() {
    return this.getToken(TSqlParser.SCHEMABINDING, 0);
};

View_attributeContext.prototype.VIEW_METADATA = function() {
    return this.getToken(TSqlParser.VIEW_METADATA, 0);
};

View_attributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterView_attribute(this);
	}
};

View_attributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitView_attribute(this);
	}
};




TSqlParser.View_attributeContext = View_attributeContext;

TSqlParser.prototype.view_attribute = function() {

    var localctx = new View_attributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 494, TSqlParser.RULE_view_attribute);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6502;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.ENCRYPTION || _la===TSqlParser.SCHEMABINDING || _la===TSqlParser.VIEW_METADATA)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_table;
    this.constraint = null; // IdContext
    this.fk = null; // Column_name_listContext
    this.pk = null; // Column_name_listContext
    return this;
}

Alter_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_tableContext.prototype.constructor = Alter_tableContext;

Alter_tableContext.prototype.ALTER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ALTER);
    } else {
        return this.getToken(TSqlParser.ALTER, i);
    }
};


Alter_tableContext.prototype.TABLE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.TABLE);
    } else {
        return this.getToken(TSqlParser.TABLE, i);
    }
};


Alter_tableContext.prototype.table_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_nameContext);
    } else {
        return this.getTypedRuleContext(Table_nameContext,i);
    }
};

Alter_tableContext.prototype.SET = function() {
    return this.getToken(TSqlParser.SET, 0);
};

Alter_tableContext.prototype.LOCK_ESCALATION = function() {
    return this.getToken(TSqlParser.LOCK_ESCALATION, 0);
};

Alter_tableContext.prototype.ADD = function() {
    return this.getToken(TSqlParser.ADD, 0);
};

Alter_tableContext.prototype.column_def_table_constraint = function() {
    return this.getTypedRuleContext(Column_def_table_constraintContext,0);
};

Alter_tableContext.prototype.COLUMN = function() {
    return this.getToken(TSqlParser.COLUMN, 0);
};

Alter_tableContext.prototype.column_definition = function() {
    return this.getTypedRuleContext(Column_definitionContext,0);
};

Alter_tableContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Alter_tableContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Alter_tableContext.prototype.CONSTRAINT = function() {
    return this.getToken(TSqlParser.CONSTRAINT, 0);
};

Alter_tableContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_tableContext.prototype.CHECK = function() {
    return this.getToken(TSqlParser.CHECK, 0);
};

Alter_tableContext.prototype.FOREIGN = function() {
    return this.getToken(TSqlParser.FOREIGN, 0);
};

Alter_tableContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Alter_tableContext.prototype.REFERENCES = function() {
    return this.getToken(TSqlParser.REFERENCES, 0);
};

Alter_tableContext.prototype.REBUILD = function() {
    return this.getToken(TSqlParser.REBUILD, 0);
};

Alter_tableContext.prototype.table_options = function() {
    return this.getTypedRuleContext(Table_optionsContext,0);
};

Alter_tableContext.prototype.AUTO = function() {
    return this.getToken(TSqlParser.AUTO, 0);
};

Alter_tableContext.prototype.DISABLE = function() {
    return this.getToken(TSqlParser.DISABLE, 0);
};

Alter_tableContext.prototype.column_name_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_name_listContext);
    } else {
        return this.getTypedRuleContext(Column_name_listContext,i);
    }
};

Alter_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_table(this);
	}
};

Alter_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_table(this);
	}
};




TSqlParser.Alter_tableContext = Alter_tableContext;

TSqlParser.prototype.alter_table = function() {

    var localctx = new Alter_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 496, TSqlParser.RULE_alter_table);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6504;
        this.match(TSqlParser.ALTER);
        this.state = 6505;
        this.match(TSqlParser.TABLE);
        this.state = 6506;
        this.table_name();
        this.state = 6545;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,861,this._ctx);
        switch(la_) {
        case 1:
            this.state = 6507;
            this.match(TSqlParser.SET);
            this.state = 6508;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 6509;
            this.match(TSqlParser.LOCK_ESCALATION);
            this.state = 6510;
            this.match(TSqlParser.EQUAL);
            this.state = 6511;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.TABLE || _la===TSqlParser.AUTO || _la===TSqlParser.DISABLE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6512;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 2:
            this.state = 6513;
            this.match(TSqlParser.ADD);
            this.state = 6514;
            this.column_def_table_constraint();
            break;

        case 3:
            this.state = 6515;
            this.match(TSqlParser.ALTER);
            this.state = 6516;
            this.match(TSqlParser.COLUMN);
            this.state = 6517;
            this.column_definition();
            break;

        case 4:
            this.state = 6518;
            this.match(TSqlParser.DROP);
            this.state = 6519;
            this.match(TSqlParser.COLUMN);
            this.state = 6520;
            this.id();
            break;

        case 5:
            this.state = 6521;
            this.match(TSqlParser.DROP);
            this.state = 6522;
            this.match(TSqlParser.CONSTRAINT);
            this.state = 6523;
            localctx.constraint = this.id();
            break;

        case 6:
            this.state = 6524;
            this.match(TSqlParser.WITH);
            this.state = 6525;
            this.match(TSqlParser.CHECK);
            this.state = 6526;
            this.match(TSqlParser.ADD);
            this.state = 6527;
            this.match(TSqlParser.CONSTRAINT);
            this.state = 6528;
            localctx.constraint = this.id();
            this.state = 6529;
            this.match(TSqlParser.FOREIGN);
            this.state = 6530;
            this.match(TSqlParser.KEY);
            this.state = 6531;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 6532;
            localctx.fk = this.column_name_list();
            this.state = 6533;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 6534;
            this.match(TSqlParser.REFERENCES);
            this.state = 6535;
            this.table_name();
            this.state = 6536;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 6537;
            localctx.pk = this.column_name_list();
            this.state = 6538;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 7:
            this.state = 6540;
            this.match(TSqlParser.CHECK);
            this.state = 6541;
            this.match(TSqlParser.CONSTRAINT);
            this.state = 6542;
            localctx.constraint = this.id();
            break;

        case 8:
            this.state = 6543;
            this.match(TSqlParser.REBUILD);
            this.state = 6544;
            this.table_options();
            break;

        }
        this.state = 6548;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,862,this._ctx);
        if(la_===1) {
            this.state = 6547;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_databaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_database;
    this.database = null; // IdContext
    this.new_name = null; // IdContext
    this.collation = null; // IdContext
    return this;
}

Alter_databaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_databaseContext.prototype.constructor = Alter_databaseContext;

Alter_databaseContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_databaseContext.prototype.DATABASE = function() {
    return this.getToken(TSqlParser.DATABASE, 0);
};

Alter_databaseContext.prototype.CURRENT = function() {
    return this.getToken(TSqlParser.CURRENT, 0);
};

Alter_databaseContext.prototype.MODIFY = function() {
    return this.getToken(TSqlParser.MODIFY, 0);
};

Alter_databaseContext.prototype.NAME = function() {
    return this.getToken(TSqlParser.NAME, 0);
};

Alter_databaseContext.prototype.COLLATE = function() {
    return this.getToken(TSqlParser.COLLATE, 0);
};

Alter_databaseContext.prototype.SET = function() {
    return this.getToken(TSqlParser.SET, 0);
};

Alter_databaseContext.prototype.database_optionspec = function() {
    return this.getTypedRuleContext(Database_optionspecContext,0);
};

Alter_databaseContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_databaseContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Alter_databaseContext.prototype.termination = function() {
    return this.getTypedRuleContext(TerminationContext,0);
};

Alter_databaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_database(this);
	}
};

Alter_databaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_database(this);
	}
};




TSqlParser.Alter_databaseContext = Alter_databaseContext;

TSqlParser.prototype.alter_database = function() {

    var localctx = new Alter_databaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 498, TSqlParser.RULE_alter_database);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6550;
        this.match(TSqlParser.ALTER);
        this.state = 6551;
        this.match(TSqlParser.DATABASE);
        this.state = 6554;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.state = 6552;
            localctx.database = this.id();
            break;
        case TSqlParser.CURRENT:
            this.state = 6553;
            this.match(TSqlParser.CURRENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 6568;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.MODIFY:
            this.state = 6556;
            this.match(TSqlParser.MODIFY);
            this.state = 6557;
            this.match(TSqlParser.NAME);
            this.state = 6558;
            this.match(TSqlParser.EQUAL);
            this.state = 6559;
            localctx.new_name = this.id();
            break;
        case TSqlParser.COLLATE:
            this.state = 6560;
            this.match(TSqlParser.COLLATE);
            this.state = 6561;
            localctx.collation = this.id();
            break;
        case TSqlParser.SET:
            this.state = 6562;
            this.match(TSqlParser.SET);
            this.state = 6563;
            this.database_optionspec();
            this.state = 6566;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,864,this._ctx);
            if(la_===1) {
                this.state = 6564;
                this.match(TSqlParser.WITH);
                this.state = 6565;
                this.termination();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 6571;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,866,this._ctx);
        if(la_===1) {
            this.state = 6570;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Database_optionspecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_database_optionspec;
    return this;
}

Database_optionspecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Database_optionspecContext.prototype.constructor = Database_optionspecContext;

Database_optionspecContext.prototype.auto_option = function() {
    return this.getTypedRuleContext(Auto_optionContext,0);
};

Database_optionspecContext.prototype.change_tracking_option = function() {
    return this.getTypedRuleContext(Change_tracking_optionContext,0);
};

Database_optionspecContext.prototype.containment_option = function() {
    return this.getTypedRuleContext(Containment_optionContext,0);
};

Database_optionspecContext.prototype.cursor_option = function() {
    return this.getTypedRuleContext(Cursor_optionContext,0);
};

Database_optionspecContext.prototype.database_mirroring_option = function() {
    return this.getTypedRuleContext(Database_mirroring_optionContext,0);
};

Database_optionspecContext.prototype.date_correlation_optimization_option = function() {
    return this.getTypedRuleContext(Date_correlation_optimization_optionContext,0);
};

Database_optionspecContext.prototype.db_encryption_option = function() {
    return this.getTypedRuleContext(Db_encryption_optionContext,0);
};

Database_optionspecContext.prototype.db_state_option = function() {
    return this.getTypedRuleContext(Db_state_optionContext,0);
};

Database_optionspecContext.prototype.db_update_option = function() {
    return this.getTypedRuleContext(Db_update_optionContext,0);
};

Database_optionspecContext.prototype.db_user_access_option = function() {
    return this.getTypedRuleContext(Db_user_access_optionContext,0);
};

Database_optionspecContext.prototype.delayed_durability_option = function() {
    return this.getTypedRuleContext(Delayed_durability_optionContext,0);
};

Database_optionspecContext.prototype.external_access_option = function() {
    return this.getTypedRuleContext(External_access_optionContext,0);
};

Database_optionspecContext.prototype.FILESTREAM = function() {
    return this.getToken(TSqlParser.FILESTREAM, 0);
};

Database_optionspecContext.prototype.database_filestream_option = function() {
    return this.getTypedRuleContext(Database_filestream_optionContext,0);
};

Database_optionspecContext.prototype.hadr_options = function() {
    return this.getTypedRuleContext(Hadr_optionsContext,0);
};

Database_optionspecContext.prototype.mixed_page_allocation_option = function() {
    return this.getTypedRuleContext(Mixed_page_allocation_optionContext,0);
};

Database_optionspecContext.prototype.parameterization_option = function() {
    return this.getTypedRuleContext(Parameterization_optionContext,0);
};

Database_optionspecContext.prototype.recovery_option = function() {
    return this.getTypedRuleContext(Recovery_optionContext,0);
};

Database_optionspecContext.prototype.service_broker_option = function() {
    return this.getTypedRuleContext(Service_broker_optionContext,0);
};

Database_optionspecContext.prototype.snapshot_option = function() {
    return this.getTypedRuleContext(Snapshot_optionContext,0);
};

Database_optionspecContext.prototype.sql_option = function() {
    return this.getTypedRuleContext(Sql_optionContext,0);
};

Database_optionspecContext.prototype.target_recovery_time_option = function() {
    return this.getTypedRuleContext(Target_recovery_time_optionContext,0);
};

Database_optionspecContext.prototype.termination = function() {
    return this.getTypedRuleContext(TerminationContext,0);
};

Database_optionspecContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDatabase_optionspec(this);
	}
};

Database_optionspecContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDatabase_optionspec(this);
	}
};




TSqlParser.Database_optionspecContext = Database_optionspecContext;

TSqlParser.prototype.database_optionspec = function() {

    var localctx = new Database_optionspecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 500, TSqlParser.RULE_database_optionspec);
    try {
        this.state = 6596;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,867,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 6573;
            this.auto_option();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 6574;
            this.change_tracking_option();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 6575;
            this.containment_option();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 6576;
            this.cursor_option();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 6577;
            this.database_mirroring_option();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 6578;
            this.date_correlation_optimization_option();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 6579;
            this.db_encryption_option();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 6580;
            this.db_state_option();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 6581;
            this.db_update_option();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 6582;
            this.db_user_access_option();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 6583;
            this.delayed_durability_option();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 6584;
            this.external_access_option();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 6585;
            this.match(TSqlParser.FILESTREAM);
            this.state = 6586;
            this.database_filestream_option();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 6587;
            this.hadr_options();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 6588;
            this.mixed_page_allocation_option();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 6589;
            this.parameterization_option();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 6590;
            this.recovery_option();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 6591;
            this.service_broker_option();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 6592;
            this.snapshot_option();
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 6593;
            this.sql_option();
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 6594;
            this.target_recovery_time_option();
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 6595;
            this.termination();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Auto_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_auto_option;
    return this;
}

Auto_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Auto_optionContext.prototype.constructor = Auto_optionContext;

Auto_optionContext.prototype.AUTO_CLOSE = function() {
    return this.getToken(TSqlParser.AUTO_CLOSE, 0);
};

Auto_optionContext.prototype.on_off = function() {
    return this.getTypedRuleContext(On_offContext,0);
};

Auto_optionContext.prototype.AUTO_CREATE_STATISTICS = function() {
    return this.getToken(TSqlParser.AUTO_CREATE_STATISTICS, 0);
};

Auto_optionContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Auto_optionContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ON);
    } else {
        return this.getToken(TSqlParser.ON, i);
    }
};


Auto_optionContext.prototype.INCREMENTAL = function() {
    return this.getToken(TSqlParser.INCREMENTAL, 0);
};

Auto_optionContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Auto_optionContext.prototype.AUTO_SHRINK = function() {
    return this.getToken(TSqlParser.AUTO_SHRINK, 0);
};

Auto_optionContext.prototype.AUTO_UPDATE_STATISTICS = function() {
    return this.getToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0);
};

Auto_optionContext.prototype.AUTO_UPDATE_STATISTICS_ASYNC = function() {
    return this.getToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0);
};

Auto_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAuto_option(this);
	}
};

Auto_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAuto_option(this);
	}
};




TSqlParser.Auto_optionContext = Auto_optionContext;

TSqlParser.prototype.auto_option = function() {

    var localctx = new Auto_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 502, TSqlParser.RULE_auto_option);
    var _la = 0; // Token type
    try {
        this.state = 6615;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.AUTO_CLOSE:
            this.enterOuterAlt(localctx, 1);
            this.state = 6598;
            this.match(TSqlParser.AUTO_CLOSE);
            this.state = 6599;
            this.on_off();
            break;
        case TSqlParser.AUTO_CREATE_STATISTICS:
            this.enterOuterAlt(localctx, 2);
            this.state = 6600;
            this.match(TSqlParser.AUTO_CREATE_STATISTICS);
            this.state = 6601;
            this.match(TSqlParser.OFF);
            break;
        case TSqlParser.ON:
            this.enterOuterAlt(localctx, 3);
            this.state = 6602;
            this.match(TSqlParser.ON);
            this.state = 6607;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.INCREMENTAL:
                this.state = 6603;
                this.match(TSqlParser.INCREMENTAL);
                this.state = 6604;
                this.match(TSqlParser.EQUAL);
                this.state = 6605;
                this.match(TSqlParser.ON);
                break;
            case TSqlParser.OFF:
                this.state = 6606;
                this.match(TSqlParser.OFF);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case TSqlParser.AUTO_SHRINK:
            this.enterOuterAlt(localctx, 4);
            this.state = 6609;
            this.match(TSqlParser.AUTO_SHRINK);
            this.state = 6610;
            this.on_off();
            break;
        case TSqlParser.AUTO_UPDATE_STATISTICS:
            this.enterOuterAlt(localctx, 5);
            this.state = 6611;
            this.match(TSqlParser.AUTO_UPDATE_STATISTICS);
            this.state = 6612;
            this.on_off();
            break;
        case TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC:
            this.enterOuterAlt(localctx, 6);
            this.state = 6613;
            this.match(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC);
            this.state = 6614;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Change_tracking_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_change_tracking_option;
    return this;
}

Change_tracking_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Change_tracking_optionContext.prototype.constructor = Change_tracking_optionContext;

Change_tracking_optionContext.prototype.CHANGE_TRACKING = function() {
    return this.getToken(TSqlParser.CHANGE_TRACKING, 0);
};

Change_tracking_optionContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Change_tracking_optionContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Change_tracking_optionContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Change_tracking_optionContext.prototype.change_tracking_option_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Change_tracking_option_listContext);
    } else {
        return this.getTypedRuleContext(Change_tracking_option_listContext,i);
    }
};

Change_tracking_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterChange_tracking_option(this);
	}
};

Change_tracking_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitChange_tracking_option(this);
	}
};




TSqlParser.Change_tracking_optionContext = Change_tracking_optionContext;

TSqlParser.prototype.change_tracking_option = function() {

    var localctx = new Change_tracking_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 504, TSqlParser.RULE_change_tracking_option);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6617;
        this.match(TSqlParser.CHANGE_TRACKING);
        this.state = 6618;
        this.match(TSqlParser.EQUAL);
        this.state = 6634;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.OFF:
            this.state = 6619;
            this.match(TSqlParser.OFF);
            break;
        case TSqlParser.ON:
            this.state = 6620;
            this.match(TSqlParser.ON);
            this.state = 6631;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.AUTO_CLEANUP || _la===TSqlParser.CHANGE_RETENTION) {
                this.state = 6621;
                this.change_tracking_option_list();
                this.state = 6626;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===TSqlParser.COMMA) {
                    this.state = 6622;
                    this.match(TSqlParser.COMMA);
                    this.state = 6623;
                    this.change_tracking_option_list();
                    this.state = 6628;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 6633;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Change_tracking_option_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_change_tracking_option_list;
    return this;
}

Change_tracking_option_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Change_tracking_option_listContext.prototype.constructor = Change_tracking_option_listContext;

Change_tracking_option_listContext.prototype.AUTO_CLEANUP = function() {
    return this.getToken(TSqlParser.AUTO_CLEANUP, 0);
};

Change_tracking_option_listContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Change_tracking_option_listContext.prototype.on_off = function() {
    return this.getTypedRuleContext(On_offContext,0);
};

Change_tracking_option_listContext.prototype.CHANGE_RETENTION = function() {
    return this.getToken(TSqlParser.CHANGE_RETENTION, 0);
};

Change_tracking_option_listContext.prototype.DAYS = function() {
    return this.getToken(TSqlParser.DAYS, 0);
};

Change_tracking_option_listContext.prototype.HOURS = function() {
    return this.getToken(TSqlParser.HOURS, 0);
};

Change_tracking_option_listContext.prototype.MINUTES = function() {
    return this.getToken(TSqlParser.MINUTES, 0);
};

Change_tracking_option_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterChange_tracking_option_list(this);
	}
};

Change_tracking_option_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitChange_tracking_option_list(this);
	}
};




TSqlParser.Change_tracking_option_listContext = Change_tracking_option_listContext;

TSqlParser.prototype.change_tracking_option_list = function() {

    var localctx = new Change_tracking_option_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 506, TSqlParser.RULE_change_tracking_option_list);
    var _la = 0; // Token type
    try {
        this.state = 6642;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.AUTO_CLEANUP:
            this.enterOuterAlt(localctx, 1);
            this.state = 6636;
            this.match(TSqlParser.AUTO_CLEANUP);
            this.state = 6637;
            this.match(TSqlParser.EQUAL);
            this.state = 6638;
            this.on_off();
            break;
        case TSqlParser.CHANGE_RETENTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 6639;
            this.match(TSqlParser.CHANGE_RETENTION);
            this.state = 6640;
            this.match(TSqlParser.EQUAL);
            this.state = 6641;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.DAYS || _la===TSqlParser.HOURS || _la===TSqlParser.MINUTES)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Containment_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_containment_option;
    return this;
}

Containment_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Containment_optionContext.prototype.constructor = Containment_optionContext;

Containment_optionContext.prototype.CONTAINMENT = function() {
    return this.getToken(TSqlParser.CONTAINMENT, 0);
};

Containment_optionContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Containment_optionContext.prototype.NONE = function() {
    return this.getToken(TSqlParser.NONE, 0);
};

Containment_optionContext.prototype.PARTIAL = function() {
    return this.getToken(TSqlParser.PARTIAL, 0);
};

Containment_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterContainment_option(this);
	}
};

Containment_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitContainment_option(this);
	}
};




TSqlParser.Containment_optionContext = Containment_optionContext;

TSqlParser.prototype.containment_option = function() {

    var localctx = new Containment_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 508, TSqlParser.RULE_containment_option);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6644;
        this.match(TSqlParser.CONTAINMENT);
        this.state = 6645;
        this.match(TSqlParser.EQUAL);
        this.state = 6646;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.NONE || _la===TSqlParser.PARTIAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cursor_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_cursor_option;
    return this;
}

Cursor_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cursor_optionContext.prototype.constructor = Cursor_optionContext;

Cursor_optionContext.prototype.CURSOR_CLOSE_ON_COMMIT = function() {
    return this.getToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0);
};

Cursor_optionContext.prototype.on_off = function() {
    return this.getTypedRuleContext(On_offContext,0);
};

Cursor_optionContext.prototype.CURSOR_DEFAULT = function() {
    return this.getToken(TSqlParser.CURSOR_DEFAULT, 0);
};

Cursor_optionContext.prototype.LOCAL = function() {
    return this.getToken(TSqlParser.LOCAL, 0);
};

Cursor_optionContext.prototype.GLOBAL = function() {
    return this.getToken(TSqlParser.GLOBAL, 0);
};

Cursor_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCursor_option(this);
	}
};

Cursor_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCursor_option(this);
	}
};




TSqlParser.Cursor_optionContext = Cursor_optionContext;

TSqlParser.prototype.cursor_option = function() {

    var localctx = new Cursor_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 510, TSqlParser.RULE_cursor_option);
    var _la = 0; // Token type
    try {
        this.state = 6652;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CURSOR_CLOSE_ON_COMMIT:
            this.enterOuterAlt(localctx, 1);
            this.state = 6648;
            this.match(TSqlParser.CURSOR_CLOSE_ON_COMMIT);
            this.state = 6649;
            this.on_off();
            break;
        case TSqlParser.CURSOR_DEFAULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 6650;
            this.match(TSqlParser.CURSOR_DEFAULT);
            this.state = 6651;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.GLOBAL || _la===TSqlParser.LOCAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_endpointContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_alter_endpoint;
    this.endpointname = null; // IdContext
    this.login = null; // IdContext
    this.state = null; // Token
    this.port = null; // Token
    this.cert_name = null; // IdContext
    return this;
}

Alter_endpointContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_endpointContext.prototype.constructor = Alter_endpointContext;

Alter_endpointContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Alter_endpointContext.prototype.ENDPOINT = function() {
    return this.getToken(TSqlParser.ENDPOINT, 0);
};

Alter_endpointContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Alter_endpointContext.prototype.TCP = function() {
    return this.getToken(TSqlParser.TCP, 0);
};

Alter_endpointContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LR_BRACKET);
    } else {
        return this.getToken(TSqlParser.LR_BRACKET, i);
    }
};


Alter_endpointContext.prototype.LISTENER_PORT = function() {
    return this.getToken(TSqlParser.LISTENER_PORT, 0);
};

Alter_endpointContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Alter_endpointContext.prototype.RR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RR_BRACKET);
    } else {
        return this.getToken(TSqlParser.RR_BRACKET, i);
    }
};


Alter_endpointContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Alter_endpointContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Alter_endpointContext.prototype.TSQL = function() {
    return this.getToken(TSqlParser.TSQL, 0);
};

Alter_endpointContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Alter_endpointContext.prototype.SERVICE_BROKER = function() {
    return this.getToken(TSqlParser.SERVICE_BROKER, 0);
};

Alter_endpointContext.prototype.AUTHENTICATION = function() {
    return this.getToken(TSqlParser.AUTHENTICATION, 0);
};

Alter_endpointContext.prototype.DATABASE_MIRRORING = function() {
    return this.getToken(TSqlParser.DATABASE_MIRRORING, 0);
};

Alter_endpointContext.prototype.ROLE = function() {
    return this.getToken(TSqlParser.ROLE, 0);
};

Alter_endpointContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Alter_endpointContext.prototype.STATE = function() {
    return this.getToken(TSqlParser.STATE, 0);
};

Alter_endpointContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Alter_endpointContext.prototype.LISTENER_IP = function() {
    return this.getToken(TSqlParser.LISTENER_IP, 0);
};

Alter_endpointContext.prototype.WITNESS = function() {
    return this.getToken(TSqlParser.WITNESS, 0);
};

Alter_endpointContext.prototype.PARTNER = function() {
    return this.getToken(TSqlParser.PARTNER, 0);
};

Alter_endpointContext.prototype.ALL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ALL);
    } else {
        return this.getToken(TSqlParser.ALL, i);
    }
};


Alter_endpointContext.prototype.IPV4_ADDR = function() {
    return this.getToken(TSqlParser.IPV4_ADDR, 0);
};

Alter_endpointContext.prototype.IPV6_ADDR = function() {
    return this.getToken(TSqlParser.IPV6_ADDR, 0);
};

Alter_endpointContext.prototype.WINDOWS = function() {
    return this.getToken(TSqlParser.WINDOWS, 0);
};

Alter_endpointContext.prototype.CERTIFICATE = function() {
    return this.getToken(TSqlParser.CERTIFICATE, 0);
};

Alter_endpointContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Alter_endpointContext.prototype.MESSAGE_FORWARDING = function() {
    return this.getToken(TSqlParser.MESSAGE_FORWARDING, 0);
};

Alter_endpointContext.prototype.MESSAGE_FORWARD_SIZE = function() {
    return this.getToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0);
};

Alter_endpointContext.prototype.STARTED = function() {
    return this.getToken(TSqlParser.STARTED, 0);
};

Alter_endpointContext.prototype.STOPPED = function() {
    return this.getToken(TSqlParser.STOPPED, 0);
};

Alter_endpointContext.prototype.DISABLED = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DISABLED);
    } else {
        return this.getToken(TSqlParser.DISABLED, i);
    }
};


Alter_endpointContext.prototype.SUPPORTED = function() {
    return this.getToken(TSqlParser.SUPPORTED, 0);
};

Alter_endpointContext.prototype.REQUIRED = function() {
    return this.getToken(TSqlParser.REQUIRED, 0);
};

Alter_endpointContext.prototype.ENABLED = function() {
    return this.getToken(TSqlParser.ENABLED, 0);
};

Alter_endpointContext.prototype.NTLM = function() {
    return this.getToken(TSqlParser.NTLM, 0);
};

Alter_endpointContext.prototype.KERBEROS = function() {
    return this.getToken(TSqlParser.KERBEROS, 0);
};

Alter_endpointContext.prototype.NEGOTIATE = function() {
    return this.getToken(TSqlParser.NEGOTIATE, 0);
};

Alter_endpointContext.prototype.ALGORITHM = function() {
    return this.getToken(TSqlParser.ALGORITHM, 0);
};

Alter_endpointContext.prototype.AES = function() {
    return this.getToken(TSqlParser.AES, 0);
};

Alter_endpointContext.prototype.RC4 = function() {
    return this.getToken(TSqlParser.RC4, 0);
};

Alter_endpointContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlter_endpoint(this);
	}
};

Alter_endpointContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlter_endpoint(this);
	}
};




TSqlParser.Alter_endpointContext = Alter_endpointContext;

TSqlParser.prototype.alter_endpoint = function() {

    var localctx = new Alter_endpointContext(this, this._ctx, this.state);
    this.enterRule(localctx, 512, TSqlParser.RULE_alter_endpoint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6654;
        this.match(TSqlParser.ALTER);
        this.state = 6655;
        this.match(TSqlParser.ENDPOINT);
        this.state = 6656;
        localctx.endpointname = this.id();
        this.state = 6659;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AUTHORIZATION) {
            this.state = 6657;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 6658;
            localctx.login = this.id();
        }

        this.state = 6668;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.STATE) {
            this.state = 6661;
            this.match(TSqlParser.STATE);
            this.state = 6662;
            this.match(TSqlParser.EQUAL);
            this.state = 6666;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.STARTED:
                this.state = 6663;
                localctx.state = this.match(TSqlParser.STARTED);
                break;
            case TSqlParser.STOPPED:
                this.state = 6664;
                localctx.state = this.match(TSqlParser.STOPPED);
                break;
            case TSqlParser.DISABLED:
                this.state = 6665;
                localctx.state = this.match(TSqlParser.DISABLED);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
        }

        this.state = 6670;
        this.match(TSqlParser.AS);
        this.state = 6671;
        this.match(TSqlParser.TCP);
        this.state = 6672;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 6673;
        this.match(TSqlParser.LISTENER_PORT);
        this.state = 6674;
        this.match(TSqlParser.EQUAL);
        this.state = 6675;
        localctx.port = this.match(TSqlParser.DECIMAL);
        this.state = 6680;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 6676;
            this.match(TSqlParser.COMMA);
            this.state = 6677;
            this.match(TSqlParser.LISTENER_IP);
            this.state = 6678;
            this.match(TSqlParser.EQUAL);
            this.state = 6679;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.ALL || _la===TSqlParser.IPV4_ADDR || _la===TSqlParser.IPV6_ADDR)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 6682;
        this.match(TSqlParser.RR_BRACKET);
        this.state = 6792;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,902,this._ctx);
        switch(la_) {
        case 1:
            this.state = 6683;
            this.match(TSqlParser.TSQL);
            break;

        case 2:
            this.state = 6684;
            this.match(TSqlParser.FOR);
            this.state = 6685;
            this.match(TSqlParser.SERVICE_BROKER);
            this.state = 6686;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 6687;
            this.match(TSqlParser.AUTHENTICATION);
            this.state = 6688;
            this.match(TSqlParser.EQUAL);
            this.state = 6705;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.WINDOWS:
                this.state = 6689;
                this.match(TSqlParser.WINDOWS);
                this.state = 6691;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.KERBEROS || _la===TSqlParser.NEGOTIATE || _la===TSqlParser.NTLM) {
                    this.state = 6690;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.KERBEROS || _la===TSqlParser.NEGOTIATE || _la===TSqlParser.NTLM)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.state = 6695;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.CERTIFICATE) {
                    this.state = 6693;
                    this.match(TSqlParser.CERTIFICATE);
                    this.state = 6694;
                    localctx.cert_name = this.id();
                }

                break;
            case TSqlParser.CERTIFICATE:
                this.state = 6697;
                this.match(TSqlParser.CERTIFICATE);
                this.state = 6698;
                localctx.cert_name = this.id();
                this.state = 6700;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.WINDOWS) {
                    this.state = 6699;
                    this.match(TSqlParser.WINDOWS);
                }

                this.state = 6703;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.KERBEROS || _la===TSqlParser.NEGOTIATE || _la===TSqlParser.NTLM) {
                    this.state = 6702;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.KERBEROS || _la===TSqlParser.NEGOTIATE || _la===TSqlParser.NTLM)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 6724;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,887,this._ctx);
            if(la_===1) {
                this.state = 6708;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 6707;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 6710;
                this.match(TSqlParser.ENCRYPTION);
                this.state = 6711;
                this.match(TSqlParser.EQUAL);
                this.state = 6712;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.REQUIRED || _la===TSqlParser.SUPPORTED || _la===TSqlParser.DISABLED)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6722;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.ALGORITHM) {
                    this.state = 6713;
                    this.match(TSqlParser.ALGORITHM);
                    this.state = 6720;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,885,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 6714;
                        this.match(TSqlParser.AES);
                        break;

                    case 2:
                        this.state = 6715;
                        this.match(TSqlParser.RC4);
                        break;

                    case 3:
                        this.state = 6716;
                        this.match(TSqlParser.AES);
                        this.state = 6717;
                        this.match(TSqlParser.RC4);
                        break;

                    case 4:
                        this.state = 6718;
                        this.match(TSqlParser.RC4);
                        this.state = 6719;
                        this.match(TSqlParser.AES);
                        break;

                    }
                }


            }
            this.state = 6732;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,889,this._ctx);
            if(la_===1) {
                this.state = 6727;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 6726;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 6729;
                this.match(TSqlParser.MESSAGE_FORWARDING);
                this.state = 6730;
                this.match(TSqlParser.EQUAL);
                this.state = 6731;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.ENABLED || _la===TSqlParser.DISABLED)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 6740;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.MESSAGE_FORWARD_SIZE || _la===TSqlParser.COMMA) {
                this.state = 6735;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 6734;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 6737;
                this.match(TSqlParser.MESSAGE_FORWARD_SIZE);
                this.state = 6738;
                this.match(TSqlParser.EQUAL);
                this.state = 6739;
                this.match(TSqlParser.DECIMAL);
            }

            this.state = 6742;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 3:
            this.state = 6743;
            this.match(TSqlParser.FOR);
            this.state = 6744;
            this.match(TSqlParser.DATABASE_MIRRORING);
            this.state = 6745;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 6746;
            this.match(TSqlParser.AUTHENTICATION);
            this.state = 6747;
            this.match(TSqlParser.EQUAL);
            this.state = 6764;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.WINDOWS:
                this.state = 6748;
                this.match(TSqlParser.WINDOWS);
                this.state = 6750;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.KERBEROS || _la===TSqlParser.NEGOTIATE || _la===TSqlParser.NTLM) {
                    this.state = 6749;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.KERBEROS || _la===TSqlParser.NEGOTIATE || _la===TSqlParser.NTLM)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.state = 6754;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.CERTIFICATE) {
                    this.state = 6752;
                    this.match(TSqlParser.CERTIFICATE);
                    this.state = 6753;
                    localctx.cert_name = this.id();
                }

                break;
            case TSqlParser.CERTIFICATE:
                this.state = 6756;
                this.match(TSqlParser.CERTIFICATE);
                this.state = 6757;
                localctx.cert_name = this.id();
                this.state = 6759;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.WINDOWS) {
                    this.state = 6758;
                    this.match(TSqlParser.WINDOWS);
                }

                this.state = 6762;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.KERBEROS || _la===TSqlParser.NEGOTIATE || _la===TSqlParser.NTLM) {
                    this.state = 6761;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.KERBEROS || _la===TSqlParser.NEGOTIATE || _la===TSqlParser.NTLM)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 6783;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,900,this._ctx);
            if(la_===1) {
                this.state = 6767;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 6766;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 6769;
                this.match(TSqlParser.ENCRYPTION);
                this.state = 6770;
                this.match(TSqlParser.EQUAL);
                this.state = 6771;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.REQUIRED || _la===TSqlParser.SUPPORTED || _la===TSqlParser.DISABLED)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 6781;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.ALGORITHM) {
                    this.state = 6772;
                    this.match(TSqlParser.ALGORITHM);
                    this.state = 6779;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,898,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 6773;
                        this.match(TSqlParser.AES);
                        break;

                    case 2:
                        this.state = 6774;
                        this.match(TSqlParser.RC4);
                        break;

                    case 3:
                        this.state = 6775;
                        this.match(TSqlParser.AES);
                        this.state = 6776;
                        this.match(TSqlParser.RC4);
                        break;

                    case 4:
                        this.state = 6777;
                        this.match(TSqlParser.RC4);
                        this.state = 6778;
                        this.match(TSqlParser.AES);
                        break;

                    }
                }


            }
            this.state = 6786;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 6785;
                this.match(TSqlParser.COMMA);
            }

            this.state = 6788;
            this.match(TSqlParser.ROLE);
            this.state = 6789;
            this.match(TSqlParser.EQUAL);
            this.state = 6790;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.ALL || _la===TSqlParser.WITNESS || _la===TSqlParser.PARTNER)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 6791;
            this.match(TSqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Database_mirroring_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_database_mirroring_option;
    return this;
}

Database_mirroring_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Database_mirroring_optionContext.prototype.constructor = Database_mirroring_optionContext;

Database_mirroring_optionContext.prototype.mirroring_set_option = function() {
    return this.getTypedRuleContext(Mirroring_set_optionContext,0);
};

Database_mirroring_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDatabase_mirroring_option(this);
	}
};

Database_mirroring_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDatabase_mirroring_option(this);
	}
};




TSqlParser.Database_mirroring_optionContext = Database_mirroring_optionContext;

TSqlParser.prototype.database_mirroring_option = function() {

    var localctx = new Database_mirroring_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 514, TSqlParser.RULE_database_mirroring_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6794;
        this.mirroring_set_option();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mirroring_set_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_mirroring_set_option;
    return this;
}

Mirroring_set_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mirroring_set_optionContext.prototype.constructor = Mirroring_set_optionContext;

Mirroring_set_optionContext.prototype.mirroring_partner = function() {
    return this.getTypedRuleContext(Mirroring_partnerContext,0);
};

Mirroring_set_optionContext.prototype.partner_option = function() {
    return this.getTypedRuleContext(Partner_optionContext,0);
};

Mirroring_set_optionContext.prototype.mirroring_witness = function() {
    return this.getTypedRuleContext(Mirroring_witnessContext,0);
};

Mirroring_set_optionContext.prototype.witness_option = function() {
    return this.getTypedRuleContext(Witness_optionContext,0);
};

Mirroring_set_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterMirroring_set_option(this);
	}
};

Mirroring_set_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitMirroring_set_option(this);
	}
};




TSqlParser.Mirroring_set_optionContext = Mirroring_set_optionContext;

TSqlParser.prototype.mirroring_set_option = function() {

    var localctx = new Mirroring_set_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 516, TSqlParser.RULE_mirroring_set_option);
    try {
        this.state = 6802;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.PARTNER:
            this.enterOuterAlt(localctx, 1);
            this.state = 6796;
            this.mirroring_partner();
            this.state = 6797;
            this.partner_option();
            break;
        case TSqlParser.WITNESS:
            this.enterOuterAlt(localctx, 2);
            this.state = 6799;
            this.mirroring_witness();
            this.state = 6800;
            this.witness_option();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mirroring_partnerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_mirroring_partner;
    return this;
}

Mirroring_partnerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mirroring_partnerContext.prototype.constructor = Mirroring_partnerContext;

Mirroring_partnerContext.prototype.PARTNER = function() {
    return this.getToken(TSqlParser.PARTNER, 0);
};

Mirroring_partnerContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterMirroring_partner(this);
	}
};

Mirroring_partnerContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitMirroring_partner(this);
	}
};




TSqlParser.Mirroring_partnerContext = Mirroring_partnerContext;

TSqlParser.prototype.mirroring_partner = function() {

    var localctx = new Mirroring_partnerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 518, TSqlParser.RULE_mirroring_partner);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6804;
        this.match(TSqlParser.PARTNER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mirroring_witnessContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_mirroring_witness;
    return this;
}

Mirroring_witnessContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mirroring_witnessContext.prototype.constructor = Mirroring_witnessContext;

Mirroring_witnessContext.prototype.WITNESS = function() {
    return this.getToken(TSqlParser.WITNESS, 0);
};

Mirroring_witnessContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterMirroring_witness(this);
	}
};

Mirroring_witnessContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitMirroring_witness(this);
	}
};




TSqlParser.Mirroring_witnessContext = Mirroring_witnessContext;

TSqlParser.prototype.mirroring_witness = function() {

    var localctx = new Mirroring_witnessContext(this, this._ctx, this.state);
    this.enterRule(localctx, 520, TSqlParser.RULE_mirroring_witness);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6806;
        this.match(TSqlParser.WITNESS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Witness_partner_equalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_witness_partner_equal;
    return this;
}

Witness_partner_equalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Witness_partner_equalContext.prototype.constructor = Witness_partner_equalContext;

Witness_partner_equalContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Witness_partner_equalContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterWitness_partner_equal(this);
	}
};

Witness_partner_equalContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitWitness_partner_equal(this);
	}
};




TSqlParser.Witness_partner_equalContext = Witness_partner_equalContext;

TSqlParser.prototype.witness_partner_equal = function() {

    var localctx = new Witness_partner_equalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 522, TSqlParser.RULE_witness_partner_equal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6808;
        this.match(TSqlParser.EQUAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Partner_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_partner_option;
    return this;
}

Partner_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Partner_optionContext.prototype.constructor = Partner_optionContext;

Partner_optionContext.prototype.witness_partner_equal = function() {
    return this.getTypedRuleContext(Witness_partner_equalContext,0);
};

Partner_optionContext.prototype.partner_server = function() {
    return this.getTypedRuleContext(Partner_serverContext,0);
};

Partner_optionContext.prototype.FAILOVER = function() {
    return this.getToken(TSqlParser.FAILOVER, 0);
};

Partner_optionContext.prototype.FORCE_SERVICE_ALLOW_DATA_LOSS = function() {
    return this.getToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0);
};

Partner_optionContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Partner_optionContext.prototype.RESUME = function() {
    return this.getToken(TSqlParser.RESUME, 0);
};

Partner_optionContext.prototype.SAFETY = function() {
    return this.getToken(TSqlParser.SAFETY, 0);
};

Partner_optionContext.prototype.FULL = function() {
    return this.getToken(TSqlParser.FULL, 0);
};

Partner_optionContext.prototype.SUSPEND = function() {
    return this.getToken(TSqlParser.SUSPEND, 0);
};

Partner_optionContext.prototype.TIMEOUT = function() {
    return this.getToken(TSqlParser.TIMEOUT, 0);
};

Partner_optionContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Partner_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterPartner_option(this);
	}
};

Partner_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitPartner_option(this);
	}
};




TSqlParser.Partner_optionContext = Partner_optionContext;

TSqlParser.prototype.partner_option = function() {

    var localctx = new Partner_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 524, TSqlParser.RULE_partner_option);
    var _la = 0; // Token type
    try {
        this.state = 6822;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.EQUAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 6810;
            this.witness_partner_equal();
            this.state = 6811;
            this.partner_server();
            break;
        case TSqlParser.FAILOVER:
            this.enterOuterAlt(localctx, 2);
            this.state = 6813;
            this.match(TSqlParser.FAILOVER);
            break;
        case TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS:
            this.enterOuterAlt(localctx, 3);
            this.state = 6814;
            this.match(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS);
            break;
        case TSqlParser.OFF:
            this.enterOuterAlt(localctx, 4);
            this.state = 6815;
            this.match(TSqlParser.OFF);
            break;
        case TSqlParser.RESUME:
            this.enterOuterAlt(localctx, 5);
            this.state = 6816;
            this.match(TSqlParser.RESUME);
            break;
        case TSqlParser.SAFETY:
            this.enterOuterAlt(localctx, 6);
            this.state = 6817;
            this.match(TSqlParser.SAFETY);
            this.state = 6818;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.FULL || _la===TSqlParser.OFF)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case TSqlParser.SUSPEND:
            this.enterOuterAlt(localctx, 7);
            this.state = 6819;
            this.match(TSqlParser.SUSPEND);
            break;
        case TSqlParser.TIMEOUT:
            this.enterOuterAlt(localctx, 8);
            this.state = 6820;
            this.match(TSqlParser.TIMEOUT);
            this.state = 6821;
            this.match(TSqlParser.DECIMAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Witness_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_witness_option;
    return this;
}

Witness_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Witness_optionContext.prototype.constructor = Witness_optionContext;

Witness_optionContext.prototype.witness_partner_equal = function() {
    return this.getTypedRuleContext(Witness_partner_equalContext,0);
};

Witness_optionContext.prototype.witness_server = function() {
    return this.getTypedRuleContext(Witness_serverContext,0);
};

Witness_optionContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Witness_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterWitness_option(this);
	}
};

Witness_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitWitness_option(this);
	}
};




TSqlParser.Witness_optionContext = Witness_optionContext;

TSqlParser.prototype.witness_option = function() {

    var localctx = new Witness_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 526, TSqlParser.RULE_witness_option);
    try {
        this.state = 6828;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.EQUAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 6824;
            this.witness_partner_equal();
            this.state = 6825;
            this.witness_server();
            break;
        case TSqlParser.OFF:
            this.enterOuterAlt(localctx, 2);
            this.state = 6827;
            this.match(TSqlParser.OFF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Witness_serverContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_witness_server;
    return this;
}

Witness_serverContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Witness_serverContext.prototype.constructor = Witness_serverContext;

Witness_serverContext.prototype.partner_server = function() {
    return this.getTypedRuleContext(Partner_serverContext,0);
};

Witness_serverContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterWitness_server(this);
	}
};

Witness_serverContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitWitness_server(this);
	}
};




TSqlParser.Witness_serverContext = Witness_serverContext;

TSqlParser.prototype.witness_server = function() {

    var localctx = new Witness_serverContext(this, this._ctx, this.state);
    this.enterRule(localctx, 528, TSqlParser.RULE_witness_server);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6830;
        this.partner_server();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Partner_serverContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_partner_server;
    return this;
}

Partner_serverContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Partner_serverContext.prototype.constructor = Partner_serverContext;

Partner_serverContext.prototype.partner_server_tcp_prefix = function() {
    return this.getTypedRuleContext(Partner_server_tcp_prefixContext,0);
};

Partner_serverContext.prototype.host = function() {
    return this.getTypedRuleContext(HostContext,0);
};

Partner_serverContext.prototype.mirroring_host_port_seperator = function() {
    return this.getTypedRuleContext(Mirroring_host_port_seperatorContext,0);
};

Partner_serverContext.prototype.port_number = function() {
    return this.getTypedRuleContext(Port_numberContext,0);
};

Partner_serverContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterPartner_server(this);
	}
};

Partner_serverContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitPartner_server(this);
	}
};




TSqlParser.Partner_serverContext = Partner_serverContext;

TSqlParser.prototype.partner_server = function() {

    var localctx = new Partner_serverContext(this, this._ctx, this.state);
    this.enterRule(localctx, 530, TSqlParser.RULE_partner_server);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6832;
        this.partner_server_tcp_prefix();
        this.state = 6833;
        this.host();
        this.state = 6834;
        this.mirroring_host_port_seperator();
        this.state = 6835;
        this.port_number();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mirroring_host_port_seperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_mirroring_host_port_seperator;
    return this;
}

Mirroring_host_port_seperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mirroring_host_port_seperatorContext.prototype.constructor = Mirroring_host_port_seperatorContext;

Mirroring_host_port_seperatorContext.prototype.COLON = function() {
    return this.getToken(TSqlParser.COLON, 0);
};

Mirroring_host_port_seperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterMirroring_host_port_seperator(this);
	}
};

Mirroring_host_port_seperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitMirroring_host_port_seperator(this);
	}
};




TSqlParser.Mirroring_host_port_seperatorContext = Mirroring_host_port_seperatorContext;

TSqlParser.prototype.mirroring_host_port_seperator = function() {

    var localctx = new Mirroring_host_port_seperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 532, TSqlParser.RULE_mirroring_host_port_seperator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6837;
        this.match(TSqlParser.COLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Partner_server_tcp_prefixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_partner_server_tcp_prefix;
    return this;
}

Partner_server_tcp_prefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Partner_server_tcp_prefixContext.prototype.constructor = Partner_server_tcp_prefixContext;

Partner_server_tcp_prefixContext.prototype.TCP = function() {
    return this.getToken(TSqlParser.TCP, 0);
};

Partner_server_tcp_prefixContext.prototype.COLON = function() {
    return this.getToken(TSqlParser.COLON, 0);
};

Partner_server_tcp_prefixContext.prototype.DOUBLE_FORWARD_SLASH = function() {
    return this.getToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0);
};

Partner_server_tcp_prefixContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterPartner_server_tcp_prefix(this);
	}
};

Partner_server_tcp_prefixContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitPartner_server_tcp_prefix(this);
	}
};




TSqlParser.Partner_server_tcp_prefixContext = Partner_server_tcp_prefixContext;

TSqlParser.prototype.partner_server_tcp_prefix = function() {

    var localctx = new Partner_server_tcp_prefixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 534, TSqlParser.RULE_partner_server_tcp_prefix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6839;
        this.match(TSqlParser.TCP);
        this.state = 6840;
        this.match(TSqlParser.COLON);
        this.state = 6841;
        this.match(TSqlParser.DOUBLE_FORWARD_SLASH);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Port_numberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_port_number;
    this.port = null; // Token
    return this;
}

Port_numberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Port_numberContext.prototype.constructor = Port_numberContext;

Port_numberContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Port_numberContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterPort_number(this);
	}
};

Port_numberContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitPort_number(this);
	}
};




TSqlParser.Port_numberContext = Port_numberContext;

TSqlParser.prototype.port_number = function() {

    var localctx = new Port_numberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 536, TSqlParser.RULE_port_number);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6843;
        localctx.port = this.match(TSqlParser.DECIMAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HostContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_host;
    return this;
}

HostContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HostContext.prototype.constructor = HostContext;

HostContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

HostContext.prototype.DOT = function() {
    return this.getToken(TSqlParser.DOT, 0);
};

HostContext.prototype.host = function() {
    return this.getTypedRuleContext(HostContext,0);
};

HostContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterHost(this);
	}
};

HostContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitHost(this);
	}
};




TSqlParser.HostContext = HostContext;

TSqlParser.prototype.host = function() {

    var localctx = new HostContext(this, this._ctx, this.state);
    this.enterRule(localctx, 538, TSqlParser.RULE_host);
    try {
        this.state = 6855;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,907,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 6845;
            this.id();
            this.state = 6846;
            this.match(TSqlParser.DOT);
            this.state = 6847;
            this.host();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 6853;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,906,this._ctx);
            switch(la_) {
            case 1:
                this.state = 6849;
                this.id();
                this.state = 6850;
                this.match(TSqlParser.DOT);
                break;

            case 2:
                this.state = 6852;
                this.id();
                break;

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Date_correlation_optimization_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_date_correlation_optimization_option;
    return this;
}

Date_correlation_optimization_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Date_correlation_optimization_optionContext.prototype.constructor = Date_correlation_optimization_optionContext;

Date_correlation_optimization_optionContext.prototype.DATE_CORRELATION_OPTIMIZATION = function() {
    return this.getToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0);
};

Date_correlation_optimization_optionContext.prototype.on_off = function() {
    return this.getTypedRuleContext(On_offContext,0);
};

Date_correlation_optimization_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDate_correlation_optimization_option(this);
	}
};

Date_correlation_optimization_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDate_correlation_optimization_option(this);
	}
};




TSqlParser.Date_correlation_optimization_optionContext = Date_correlation_optimization_optionContext;

TSqlParser.prototype.date_correlation_optimization_option = function() {

    var localctx = new Date_correlation_optimization_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 540, TSqlParser.RULE_date_correlation_optimization_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6857;
        this.match(TSqlParser.DATE_CORRELATION_OPTIMIZATION);
        this.state = 6858;
        this.on_off();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Db_encryption_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_db_encryption_option;
    return this;
}

Db_encryption_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Db_encryption_optionContext.prototype.constructor = Db_encryption_optionContext;

Db_encryption_optionContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Db_encryption_optionContext.prototype.on_off = function() {
    return this.getTypedRuleContext(On_offContext,0);
};

Db_encryption_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDb_encryption_option(this);
	}
};

Db_encryption_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDb_encryption_option(this);
	}
};




TSqlParser.Db_encryption_optionContext = Db_encryption_optionContext;

TSqlParser.prototype.db_encryption_option = function() {

    var localctx = new Db_encryption_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 542, TSqlParser.RULE_db_encryption_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6860;
        this.match(TSqlParser.ENCRYPTION);
        this.state = 6861;
        this.on_off();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Db_state_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_db_state_option;
    return this;
}

Db_state_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Db_state_optionContext.prototype.constructor = Db_state_optionContext;

Db_state_optionContext.prototype.ONLINE = function() {
    return this.getToken(TSqlParser.ONLINE, 0);
};

Db_state_optionContext.prototype.OFFLINE = function() {
    return this.getToken(TSqlParser.OFFLINE, 0);
};

Db_state_optionContext.prototype.EMERGENCY = function() {
    return this.getToken(TSqlParser.EMERGENCY, 0);
};

Db_state_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDb_state_option(this);
	}
};

Db_state_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDb_state_option(this);
	}
};




TSqlParser.Db_state_optionContext = Db_state_optionContext;

TSqlParser.prototype.db_state_option = function() {

    var localctx = new Db_state_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 544, TSqlParser.RULE_db_state_option);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6863;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.EMERGENCY || _la===TSqlParser.OFFLINE || _la===TSqlParser.ONLINE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Db_update_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_db_update_option;
    return this;
}

Db_update_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Db_update_optionContext.prototype.constructor = Db_update_optionContext;

Db_update_optionContext.prototype.READ_ONLY = function() {
    return this.getToken(TSqlParser.READ_ONLY, 0);
};

Db_update_optionContext.prototype.READ_WRITE = function() {
    return this.getToken(TSqlParser.READ_WRITE, 0);
};

Db_update_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDb_update_option(this);
	}
};

Db_update_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDb_update_option(this);
	}
};




TSqlParser.Db_update_optionContext = Db_update_optionContext;

TSqlParser.prototype.db_update_option = function() {

    var localctx = new Db_update_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 546, TSqlParser.RULE_db_update_option);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6865;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.READ_ONLY || _la===TSqlParser.READ_WRITE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Db_user_access_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_db_user_access_option;
    return this;
}

Db_user_access_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Db_user_access_optionContext.prototype.constructor = Db_user_access_optionContext;

Db_user_access_optionContext.prototype.SINGLE_USER = function() {
    return this.getToken(TSqlParser.SINGLE_USER, 0);
};

Db_user_access_optionContext.prototype.RESTRICTED_USER = function() {
    return this.getToken(TSqlParser.RESTRICTED_USER, 0);
};

Db_user_access_optionContext.prototype.MULTI_USER = function() {
    return this.getToken(TSqlParser.MULTI_USER, 0);
};

Db_user_access_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDb_user_access_option(this);
	}
};

Db_user_access_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDb_user_access_option(this);
	}
};




TSqlParser.Db_user_access_optionContext = Db_user_access_optionContext;

TSqlParser.prototype.db_user_access_option = function() {

    var localctx = new Db_user_access_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 548, TSqlParser.RULE_db_user_access_option);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6867;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.MULTI_USER || _la===TSqlParser.RESTRICTED_USER || _la===TSqlParser.SINGLE_USER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Delayed_durability_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_delayed_durability_option;
    return this;
}

Delayed_durability_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delayed_durability_optionContext.prototype.constructor = Delayed_durability_optionContext;

Delayed_durability_optionContext.prototype.DELAYED_DURABILITY = function() {
    return this.getToken(TSqlParser.DELAYED_DURABILITY, 0);
};

Delayed_durability_optionContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Delayed_durability_optionContext.prototype.DISABLED = function() {
    return this.getToken(TSqlParser.DISABLED, 0);
};

Delayed_durability_optionContext.prototype.ALLOWED = function() {
    return this.getToken(TSqlParser.ALLOWED, 0);
};

Delayed_durability_optionContext.prototype.FORCED = function() {
    return this.getToken(TSqlParser.FORCED, 0);
};

Delayed_durability_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDelayed_durability_option(this);
	}
};

Delayed_durability_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDelayed_durability_option(this);
	}
};




TSqlParser.Delayed_durability_optionContext = Delayed_durability_optionContext;

TSqlParser.prototype.delayed_durability_option = function() {

    var localctx = new Delayed_durability_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 550, TSqlParser.RULE_delayed_durability_option);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6869;
        this.match(TSqlParser.DELAYED_DURABILITY);
        this.state = 6870;
        this.match(TSqlParser.EQUAL);
        this.state = 6871;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.ALLOWED || _la===TSqlParser.DISABLED || _la===TSqlParser.FORCED)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function External_access_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_external_access_option;
    return this;
}

External_access_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
External_access_optionContext.prototype.constructor = External_access_optionContext;

External_access_optionContext.prototype.DB_CHAINING = function() {
    return this.getToken(TSqlParser.DB_CHAINING, 0);
};

External_access_optionContext.prototype.on_off = function() {
    return this.getTypedRuleContext(On_offContext,0);
};

External_access_optionContext.prototype.TRUSTWORTHY = function() {
    return this.getToken(TSqlParser.TRUSTWORTHY, 0);
};

External_access_optionContext.prototype.DEFAULT_LANGUAGE = function() {
    return this.getToken(TSqlParser.DEFAULT_LANGUAGE, 0);
};

External_access_optionContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

External_access_optionContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

External_access_optionContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

External_access_optionContext.prototype.DEFAULT_FULLTEXT_LANGUAGE = function() {
    return this.getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0);
};

External_access_optionContext.prototype.NESTED_TRIGGERS = function() {
    return this.getToken(TSqlParser.NESTED_TRIGGERS, 0);
};

External_access_optionContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

External_access_optionContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

External_access_optionContext.prototype.TRANSFORM_NOISE_WORDS = function() {
    return this.getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0);
};

External_access_optionContext.prototype.TWO_DIGIT_YEAR_CUTOFF = function() {
    return this.getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0);
};

External_access_optionContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

External_access_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterExternal_access_option(this);
	}
};

External_access_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitExternal_access_option(this);
	}
};




TSqlParser.External_access_optionContext = External_access_optionContext;

TSqlParser.prototype.external_access_option = function() {

    var localctx = new External_access_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 552, TSqlParser.RULE_external_access_option);
    var _la = 0; // Token type
    try {
        this.state = 6898;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.DB_CHAINING:
            this.enterOuterAlt(localctx, 1);
            this.state = 6873;
            this.match(TSqlParser.DB_CHAINING);
            this.state = 6874;
            this.on_off();
            break;
        case TSqlParser.TRUSTWORTHY:
            this.enterOuterAlt(localctx, 2);
            this.state = 6875;
            this.match(TSqlParser.TRUSTWORTHY);
            this.state = 6876;
            this.on_off();
            break;
        case TSqlParser.DEFAULT_LANGUAGE:
            this.enterOuterAlt(localctx, 3);
            this.state = 6877;
            this.match(TSqlParser.DEFAULT_LANGUAGE);
            this.state = 6878;
            this.match(TSqlParser.EQUAL);
            this.state = 6881;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.CALLED:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.EVENTDATA:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.KEY:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.OFFSETS:
            case TSqlParser.PAGE:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SERVER:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.TARGET:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.APPLY:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GLOBAL:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAST:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.ID:
                this.state = 6879;
                this.id();
                break;
            case TSqlParser.STRING:
                this.state = 6880;
                this.match(TSqlParser.STRING);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
            this.enterOuterAlt(localctx, 4);
            this.state = 6883;
            this.match(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE);
            this.state = 6884;
            this.match(TSqlParser.EQUAL);
            this.state = 6887;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.CALLED:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.EVENTDATA:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.KEY:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.OFFSETS:
            case TSqlParser.PAGE:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SERVER:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.TARGET:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.APPLY:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GLOBAL:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAST:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.ID:
                this.state = 6885;
                this.id();
                break;
            case TSqlParser.STRING:
                this.state = 6886;
                this.match(TSqlParser.STRING);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case TSqlParser.NESTED_TRIGGERS:
            this.enterOuterAlt(localctx, 5);
            this.state = 6889;
            this.match(TSqlParser.NESTED_TRIGGERS);
            this.state = 6890;
            this.match(TSqlParser.EQUAL);
            this.state = 6891;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case TSqlParser.TRANSFORM_NOISE_WORDS:
            this.enterOuterAlt(localctx, 6);
            this.state = 6892;
            this.match(TSqlParser.TRANSFORM_NOISE_WORDS);
            this.state = 6893;
            this.match(TSqlParser.EQUAL);
            this.state = 6894;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
            this.enterOuterAlt(localctx, 7);
            this.state = 6895;
            this.match(TSqlParser.TWO_DIGIT_YEAR_CUTOFF);
            this.state = 6896;
            this.match(TSqlParser.EQUAL);
            this.state = 6897;
            this.match(TSqlParser.DECIMAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Hadr_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_hadr_options;
    this.availability_group_name = null; // IdContext
    return this;
}

Hadr_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hadr_optionsContext.prototype.constructor = Hadr_optionsContext;

Hadr_optionsContext.prototype.HADR = function() {
    return this.getToken(TSqlParser.HADR, 0);
};

Hadr_optionsContext.prototype.SUSPEND = function() {
    return this.getToken(TSqlParser.SUSPEND, 0);
};

Hadr_optionsContext.prototype.RESUME = function() {
    return this.getToken(TSqlParser.RESUME, 0);
};

Hadr_optionsContext.prototype.AVAILABILITY = function() {
    return this.getToken(TSqlParser.AVAILABILITY, 0);
};

Hadr_optionsContext.prototype.GROUP = function() {
    return this.getToken(TSqlParser.GROUP, 0);
};

Hadr_optionsContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Hadr_optionsContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Hadr_optionsContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Hadr_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterHadr_options(this);
	}
};

Hadr_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitHadr_options(this);
	}
};




TSqlParser.Hadr_optionsContext = Hadr_optionsContext;

TSqlParser.prototype.hadr_options = function() {

    var localctx = new Hadr_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 554, TSqlParser.RULE_hadr_options);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6900;
        this.match(TSqlParser.HADR);
        this.state = 6909;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.OFF:
        case TSqlParser.AVAILABILITY:
            this.state = 6906;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.AVAILABILITY:
                this.state = 6901;
                this.match(TSqlParser.AVAILABILITY);
                this.state = 6902;
                this.match(TSqlParser.GROUP);
                this.state = 6903;
                this.match(TSqlParser.EQUAL);
                this.state = 6904;
                localctx.availability_group_name = this.id();
                break;
            case TSqlParser.OFF:
                this.state = 6905;
                this.match(TSqlParser.OFF);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case TSqlParser.RESUME:
        case TSqlParser.SUSPEND:
            this.state = 6908;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.RESUME || _la===TSqlParser.SUSPEND)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mixed_page_allocation_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_mixed_page_allocation_option;
    return this;
}

Mixed_page_allocation_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mixed_page_allocation_optionContext.prototype.constructor = Mixed_page_allocation_optionContext;

Mixed_page_allocation_optionContext.prototype.MIXED_PAGE_ALLOCATION = function() {
    return this.getToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0);
};

Mixed_page_allocation_optionContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Mixed_page_allocation_optionContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Mixed_page_allocation_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterMixed_page_allocation_option(this);
	}
};

Mixed_page_allocation_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitMixed_page_allocation_option(this);
	}
};




TSqlParser.Mixed_page_allocation_optionContext = Mixed_page_allocation_optionContext;

TSqlParser.prototype.mixed_page_allocation_option = function() {

    var localctx = new Mixed_page_allocation_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 556, TSqlParser.RULE_mixed_page_allocation_option);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6911;
        this.match(TSqlParser.MIXED_PAGE_ALLOCATION);
        this.state = 6912;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parameterization_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_parameterization_option;
    return this;
}

Parameterization_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parameterization_optionContext.prototype.constructor = Parameterization_optionContext;

Parameterization_optionContext.prototype.PARAMETERIZATION = function() {
    return this.getToken(TSqlParser.PARAMETERIZATION, 0);
};

Parameterization_optionContext.prototype.SIMPLE = function() {
    return this.getToken(TSqlParser.SIMPLE, 0);
};

Parameterization_optionContext.prototype.FORCED = function() {
    return this.getToken(TSqlParser.FORCED, 0);
};

Parameterization_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterParameterization_option(this);
	}
};

Parameterization_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitParameterization_option(this);
	}
};




TSqlParser.Parameterization_optionContext = Parameterization_optionContext;

TSqlParser.prototype.parameterization_option = function() {

    var localctx = new Parameterization_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 558, TSqlParser.RULE_parameterization_option);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6914;
        this.match(TSqlParser.PARAMETERIZATION);
        this.state = 6915;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.FORCED || _la===TSqlParser.SIMPLE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Recovery_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_recovery_option;
    return this;
}

Recovery_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Recovery_optionContext.prototype.constructor = Recovery_optionContext;

Recovery_optionContext.prototype.RECOVERY = function() {
    return this.getToken(TSqlParser.RECOVERY, 0);
};

Recovery_optionContext.prototype.FULL = function() {
    return this.getToken(TSqlParser.FULL, 0);
};

Recovery_optionContext.prototype.BULK_LOGGED = function() {
    return this.getToken(TSqlParser.BULK_LOGGED, 0);
};

Recovery_optionContext.prototype.SIMPLE = function() {
    return this.getToken(TSqlParser.SIMPLE, 0);
};

Recovery_optionContext.prototype.TORN_PAGE_DETECTION = function() {
    return this.getToken(TSqlParser.TORN_PAGE_DETECTION, 0);
};

Recovery_optionContext.prototype.on_off = function() {
    return this.getTypedRuleContext(On_offContext,0);
};

Recovery_optionContext.prototype.PAGE_VERIFY = function() {
    return this.getToken(TSqlParser.PAGE_VERIFY, 0);
};

Recovery_optionContext.prototype.CHECKSUM = function() {
    return this.getToken(TSqlParser.CHECKSUM, 0);
};

Recovery_optionContext.prototype.NONE = function() {
    return this.getToken(TSqlParser.NONE, 0);
};

Recovery_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterRecovery_option(this);
	}
};

Recovery_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitRecovery_option(this);
	}
};




TSqlParser.Recovery_optionContext = Recovery_optionContext;

TSqlParser.prototype.recovery_option = function() {

    var localctx = new Recovery_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 560, TSqlParser.RULE_recovery_option);
    var _la = 0; // Token type
    try {
        this.state = 6923;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.RECOVERY:
            this.enterOuterAlt(localctx, 1);
            this.state = 6917;
            this.match(TSqlParser.RECOVERY);
            this.state = 6918;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.FULL || _la===TSqlParser.BULK_LOGGED || _la===TSqlParser.SIMPLE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case TSqlParser.TORN_PAGE_DETECTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 6919;
            this.match(TSqlParser.TORN_PAGE_DETECTION);
            this.state = 6920;
            this.on_off();
            break;
        case TSqlParser.PAGE_VERIFY:
            this.enterOuterAlt(localctx, 3);
            this.state = 6921;
            this.match(TSqlParser.PAGE_VERIFY);
            this.state = 6922;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.NONE || _la===TSqlParser.CHECKSUM || _la===TSqlParser.TORN_PAGE_DETECTION)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Service_broker_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_service_broker_option;
    return this;
}

Service_broker_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Service_broker_optionContext.prototype.constructor = Service_broker_optionContext;

Service_broker_optionContext.prototype.ENABLE_BROKER = function() {
    return this.getToken(TSqlParser.ENABLE_BROKER, 0);
};

Service_broker_optionContext.prototype.DISABLE_BROKER = function() {
    return this.getToken(TSqlParser.DISABLE_BROKER, 0);
};

Service_broker_optionContext.prototype.NEW_BROKER = function() {
    return this.getToken(TSqlParser.NEW_BROKER, 0);
};

Service_broker_optionContext.prototype.ERROR_BROKER_CONVERSATIONS = function() {
    return this.getToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0);
};

Service_broker_optionContext.prototype.HONOR_BROKER_PRIORITY = function() {
    return this.getToken(TSqlParser.HONOR_BROKER_PRIORITY, 0);
};

Service_broker_optionContext.prototype.on_off = function() {
    return this.getTypedRuleContext(On_offContext,0);
};

Service_broker_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterService_broker_option(this);
	}
};

Service_broker_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitService_broker_option(this);
	}
};




TSqlParser.Service_broker_optionContext = Service_broker_optionContext;

TSqlParser.prototype.service_broker_option = function() {

    var localctx = new Service_broker_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 562, TSqlParser.RULE_service_broker_option);
    try {
        this.state = 6931;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.ENABLE_BROKER:
            this.enterOuterAlt(localctx, 1);
            this.state = 6925;
            this.match(TSqlParser.ENABLE_BROKER);
            break;
        case TSqlParser.DISABLE_BROKER:
            this.enterOuterAlt(localctx, 2);
            this.state = 6926;
            this.match(TSqlParser.DISABLE_BROKER);
            break;
        case TSqlParser.NEW_BROKER:
            this.enterOuterAlt(localctx, 3);
            this.state = 6927;
            this.match(TSqlParser.NEW_BROKER);
            break;
        case TSqlParser.ERROR_BROKER_CONVERSATIONS:
            this.enterOuterAlt(localctx, 4);
            this.state = 6928;
            this.match(TSqlParser.ERROR_BROKER_CONVERSATIONS);
            break;
        case TSqlParser.HONOR_BROKER_PRIORITY:
            this.enterOuterAlt(localctx, 5);
            this.state = 6929;
            this.match(TSqlParser.HONOR_BROKER_PRIORITY);
            this.state = 6930;
            this.on_off();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Snapshot_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_snapshot_option;
    this.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = null; // Token
    return this;
}

Snapshot_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Snapshot_optionContext.prototype.constructor = Snapshot_optionContext;

Snapshot_optionContext.prototype.ALLOW_SNAPSHOT_ISOLATION = function() {
    return this.getToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0);
};

Snapshot_optionContext.prototype.on_off = function() {
    return this.getTypedRuleContext(On_offContext,0);
};

Snapshot_optionContext.prototype.READ_COMMITTED_SNAPSHOT = function() {
    return this.getToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0);
};

Snapshot_optionContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Snapshot_optionContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Snapshot_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSnapshot_option(this);
	}
};

Snapshot_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSnapshot_option(this);
	}
};




TSqlParser.Snapshot_optionContext = Snapshot_optionContext;

TSqlParser.prototype.snapshot_option = function() {

    var localctx = new Snapshot_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 564, TSqlParser.RULE_snapshot_option);
    var _la = 0; // Token type
    try {
        this.state = 6938;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.ALLOW_SNAPSHOT_ISOLATION:
            this.enterOuterAlt(localctx, 1);
            this.state = 6933;
            this.match(TSqlParser.ALLOW_SNAPSHOT_ISOLATION);
            this.state = 6934;
            this.on_off();
            break;
        case TSqlParser.READ_COMMITTED_SNAPSHOT:
            this.enterOuterAlt(localctx, 2);
            this.state = 6935;
            this.match(TSqlParser.READ_COMMITTED_SNAPSHOT);
            this.state = 6936;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case TSqlParser.OFF:
        case TSqlParser.ON:
            this.enterOuterAlt(localctx, 3);
            this.state = 6937;
            localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_sql_option;
    return this;
}

Sql_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_optionContext.prototype.constructor = Sql_optionContext;

Sql_optionContext.prototype.ANSI_NULL_DEFAULT = function() {
    return this.getToken(TSqlParser.ANSI_NULL_DEFAULT, 0);
};

Sql_optionContext.prototype.on_off = function() {
    return this.getTypedRuleContext(On_offContext,0);
};

Sql_optionContext.prototype.ANSI_NULLS = function() {
    return this.getToken(TSqlParser.ANSI_NULLS, 0);
};

Sql_optionContext.prototype.ANSI_PADDING = function() {
    return this.getToken(TSqlParser.ANSI_PADDING, 0);
};

Sql_optionContext.prototype.ANSI_WARNINGS = function() {
    return this.getToken(TSqlParser.ANSI_WARNINGS, 0);
};

Sql_optionContext.prototype.ARITHABORT = function() {
    return this.getToken(TSqlParser.ARITHABORT, 0);
};

Sql_optionContext.prototype.COMPATIBILITY_LEVEL = function() {
    return this.getToken(TSqlParser.COMPATIBILITY_LEVEL, 0);
};

Sql_optionContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Sql_optionContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Sql_optionContext.prototype.CONCAT_NULL_YIELDS_NULL = function() {
    return this.getToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0);
};

Sql_optionContext.prototype.NUMERIC_ROUNDABORT = function() {
    return this.getToken(TSqlParser.NUMERIC_ROUNDABORT, 0);
};

Sql_optionContext.prototype.QUOTED_IDENTIFIER = function() {
    return this.getToken(TSqlParser.QUOTED_IDENTIFIER, 0);
};

Sql_optionContext.prototype.RECURSIVE_TRIGGERS = function() {
    return this.getToken(TSqlParser.RECURSIVE_TRIGGERS, 0);
};

Sql_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSql_option(this);
	}
};

Sql_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSql_option(this);
	}
};




TSqlParser.Sql_optionContext = Sql_optionContext;

TSqlParser.prototype.sql_option = function() {

    var localctx = new Sql_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 566, TSqlParser.RULE_sql_option);
    try {
        this.state = 6961;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.ANSI_NULL_DEFAULT:
            this.enterOuterAlt(localctx, 1);
            this.state = 6940;
            this.match(TSqlParser.ANSI_NULL_DEFAULT);
            this.state = 6941;
            this.on_off();
            break;
        case TSqlParser.ANSI_NULLS:
            this.enterOuterAlt(localctx, 2);
            this.state = 6942;
            this.match(TSqlParser.ANSI_NULLS);
            this.state = 6943;
            this.on_off();
            break;
        case TSqlParser.ANSI_PADDING:
            this.enterOuterAlt(localctx, 3);
            this.state = 6944;
            this.match(TSqlParser.ANSI_PADDING);
            this.state = 6945;
            this.on_off();
            break;
        case TSqlParser.ANSI_WARNINGS:
            this.enterOuterAlt(localctx, 4);
            this.state = 6946;
            this.match(TSqlParser.ANSI_WARNINGS);
            this.state = 6947;
            this.on_off();
            break;
        case TSqlParser.ARITHABORT:
            this.enterOuterAlt(localctx, 5);
            this.state = 6948;
            this.match(TSqlParser.ARITHABORT);
            this.state = 6949;
            this.on_off();
            break;
        case TSqlParser.COMPATIBILITY_LEVEL:
            this.enterOuterAlt(localctx, 6);
            this.state = 6950;
            this.match(TSqlParser.COMPATIBILITY_LEVEL);
            this.state = 6951;
            this.match(TSqlParser.EQUAL);
            this.state = 6952;
            this.match(TSqlParser.DECIMAL);
            break;
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            this.enterOuterAlt(localctx, 7);
            this.state = 6953;
            this.match(TSqlParser.CONCAT_NULL_YIELDS_NULL);
            this.state = 6954;
            this.on_off();
            break;
        case TSqlParser.NUMERIC_ROUNDABORT:
            this.enterOuterAlt(localctx, 8);
            this.state = 6955;
            this.match(TSqlParser.NUMERIC_ROUNDABORT);
            this.state = 6956;
            this.on_off();
            break;
        case TSqlParser.QUOTED_IDENTIFIER:
            this.enterOuterAlt(localctx, 9);
            this.state = 6957;
            this.match(TSqlParser.QUOTED_IDENTIFIER);
            this.state = 6958;
            this.on_off();
            break;
        case TSqlParser.RECURSIVE_TRIGGERS:
            this.enterOuterAlt(localctx, 10);
            this.state = 6959;
            this.match(TSqlParser.RECURSIVE_TRIGGERS);
            this.state = 6960;
            this.on_off();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Target_recovery_time_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_target_recovery_time_option;
    return this;
}

Target_recovery_time_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Target_recovery_time_optionContext.prototype.constructor = Target_recovery_time_optionContext;

Target_recovery_time_optionContext.prototype.TARGET_RECOVERY_TIME = function() {
    return this.getToken(TSqlParser.TARGET_RECOVERY_TIME, 0);
};

Target_recovery_time_optionContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Target_recovery_time_optionContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Target_recovery_time_optionContext.prototype.SECONDS = function() {
    return this.getToken(TSqlParser.SECONDS, 0);
};

Target_recovery_time_optionContext.prototype.MINUTES = function() {
    return this.getToken(TSqlParser.MINUTES, 0);
};

Target_recovery_time_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTarget_recovery_time_option(this);
	}
};

Target_recovery_time_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTarget_recovery_time_option(this);
	}
};




TSqlParser.Target_recovery_time_optionContext = Target_recovery_time_optionContext;

TSqlParser.prototype.target_recovery_time_option = function() {

    var localctx = new Target_recovery_time_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 568, TSqlParser.RULE_target_recovery_time_option);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6963;
        this.match(TSqlParser.TARGET_RECOVERY_TIME);
        this.state = 6964;
        this.match(TSqlParser.EQUAL);
        this.state = 6965;
        this.match(TSqlParser.DECIMAL);
        this.state = 6966;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.MINUTES || _la===TSqlParser.SECONDS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TerminationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_termination;
    this.seconds = null; // Token
    return this;
}

TerminationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TerminationContext.prototype.constructor = TerminationContext;

TerminationContext.prototype.ROLLBACK = function() {
    return this.getToken(TSqlParser.ROLLBACK, 0);
};

TerminationContext.prototype.AFTER = function() {
    return this.getToken(TSqlParser.AFTER, 0);
};

TerminationContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

TerminationContext.prototype.IMMEDIATE = function() {
    return this.getToken(TSqlParser.IMMEDIATE, 0);
};

TerminationContext.prototype.NO_WAIT = function() {
    return this.getToken(TSqlParser.NO_WAIT, 0);
};

TerminationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTermination(this);
	}
};

TerminationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTermination(this);
	}
};




TSqlParser.TerminationContext = TerminationContext;

TSqlParser.prototype.termination = function() {

    var localctx = new TerminationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 570, TSqlParser.RULE_termination);
    try {
        this.state = 6974;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,917,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 6968;
            this.match(TSqlParser.ROLLBACK);
            this.state = 6969;
            this.match(TSqlParser.AFTER);
            this.state = 6970;
            localctx.seconds = this.match(TSqlParser.DECIMAL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 6971;
            this.match(TSqlParser.ROLLBACK);
            this.state = 6972;
            this.match(TSqlParser.IMMEDIATE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 6973;
            this.match(TSqlParser.NO_WAIT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_indexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_index;
    return this;
}

Drop_indexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_indexContext.prototype.constructor = Drop_indexContext;

Drop_indexContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_indexContext.prototype.INDEX = function() {
    return this.getToken(TSqlParser.INDEX, 0);
};

Drop_indexContext.prototype.drop_relational_or_xml_or_spatial_index = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Drop_relational_or_xml_or_spatial_indexContext);
    } else {
        return this.getTypedRuleContext(Drop_relational_or_xml_or_spatial_indexContext,i);
    }
};

Drop_indexContext.prototype.drop_backward_compatible_index = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Drop_backward_compatible_indexContext);
    } else {
        return this.getTypedRuleContext(Drop_backward_compatible_indexContext,i);
    }
};

Drop_indexContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

Drop_indexContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

Drop_indexContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_index(this);
	}
};

Drop_indexContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_index(this);
	}
};




TSqlParser.Drop_indexContext = Drop_indexContext;

TSqlParser.prototype.drop_index = function() {

    var localctx = new Drop_indexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 572, TSqlParser.RULE_drop_index);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 6976;
        this.match(TSqlParser.DROP);
        this.state = 6977;
        this.match(TSqlParser.INDEX);
        this.state = 6980;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.IF) {
            this.state = 6978;
            this.match(TSqlParser.IF);
            this.state = 6979;
            this.match(TSqlParser.EXISTS);
        }

        this.state = 6998;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,921,this._ctx);
        switch(la_) {
        case 1:
            this.state = 6982;
            this.drop_relational_or_xml_or_spatial_index();
            this.state = 6987;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 6983;
                this.match(TSqlParser.COMMA);
                this.state = 6984;
                this.drop_relational_or_xml_or_spatial_index();
                this.state = 6989;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.state = 6990;
            this.drop_backward_compatible_index();
            this.state = 6995;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 6991;
                this.match(TSqlParser.COMMA);
                this.state = 6992;
                this.drop_backward_compatible_index();
                this.state = 6997;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        }
        this.state = 7001;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,922,this._ctx);
        if(la_===1) {
            this.state = 7000;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_relational_or_xml_or_spatial_indexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_relational_or_xml_or_spatial_index;
    this.index_name = null; // IdContext
    return this;
}

Drop_relational_or_xml_or_spatial_indexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_relational_or_xml_or_spatial_indexContext.prototype.constructor = Drop_relational_or_xml_or_spatial_indexContext;

Drop_relational_or_xml_or_spatial_indexContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Drop_relational_or_xml_or_spatial_indexContext.prototype.full_table_name = function() {
    return this.getTypedRuleContext(Full_table_nameContext,0);
};

Drop_relational_or_xml_or_spatial_indexContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Drop_relational_or_xml_or_spatial_indexContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_relational_or_xml_or_spatial_index(this);
	}
};

Drop_relational_or_xml_or_spatial_indexContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_relational_or_xml_or_spatial_index(this);
	}
};




TSqlParser.Drop_relational_or_xml_or_spatial_indexContext = Drop_relational_or_xml_or_spatial_indexContext;

TSqlParser.prototype.drop_relational_or_xml_or_spatial_index = function() {

    var localctx = new Drop_relational_or_xml_or_spatial_indexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 574, TSqlParser.RULE_drop_relational_or_xml_or_spatial_index);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7003;
        localctx.index_name = this.id();
        this.state = 7004;
        this.match(TSqlParser.ON);
        this.state = 7005;
        this.full_table_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_backward_compatible_indexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_backward_compatible_index;
    this.owner_name = null; // IdContext
    this.table_or_view_name = null; // IdContext
    this.index_name = null; // IdContext
    return this;
}

Drop_backward_compatible_indexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_backward_compatible_indexContext.prototype.constructor = Drop_backward_compatible_indexContext;

Drop_backward_compatible_indexContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Drop_backward_compatible_indexContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_backward_compatible_index(this);
	}
};

Drop_backward_compatible_indexContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_backward_compatible_index(this);
	}
};




TSqlParser.Drop_backward_compatible_indexContext = Drop_backward_compatible_indexContext;

TSqlParser.prototype.drop_backward_compatible_index = function() {

    var localctx = new Drop_backward_compatible_indexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 576, TSqlParser.RULE_drop_backward_compatible_index);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7010;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,923,this._ctx);
        if(la_===1) {
            this.state = 7007;
            localctx.owner_name = this.id();
            this.state = 7008;
            this.match(TSqlParser.DOT);

        }
        this.state = 7012;
        localctx.table_or_view_name = this.id();
        this.state = 7013;
        this.match(TSqlParser.DOT);
        this.state = 7014;
        localctx.index_name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_procedureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_procedure;
    this.proc = null; // Token
    return this;
}

Drop_procedureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_procedureContext.prototype.constructor = Drop_procedureContext;

Drop_procedureContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_procedureContext.prototype.func_proc_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Func_proc_nameContext);
    } else {
        return this.getTypedRuleContext(Func_proc_nameContext,i);
    }
};

Drop_procedureContext.prototype.PROC = function() {
    return this.getToken(TSqlParser.PROC, 0);
};

Drop_procedureContext.prototype.PROCEDURE = function() {
    return this.getToken(TSqlParser.PROCEDURE, 0);
};

Drop_procedureContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

Drop_procedureContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

Drop_procedureContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_procedure(this);
	}
};

Drop_procedureContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_procedure(this);
	}
};




TSqlParser.Drop_procedureContext = Drop_procedureContext;

TSqlParser.prototype.drop_procedure = function() {

    var localctx = new Drop_procedureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 578, TSqlParser.RULE_drop_procedure);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7016;
        this.match(TSqlParser.DROP);
        this.state = 7017;
        localctx.proc = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.PROC || _la===TSqlParser.PROCEDURE)) {
            localctx.proc = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 7020;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.IF) {
            this.state = 7018;
            this.match(TSqlParser.IF);
            this.state = 7019;
            this.match(TSqlParser.EXISTS);
        }

        this.state = 7022;
        this.func_proc_name();
        this.state = 7027;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 7023;
            this.match(TSqlParser.COMMA);
            this.state = 7024;
            this.func_proc_name();
            this.state = 7029;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 7031;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,926,this._ctx);
        if(la_===1) {
            this.state = 7030;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_trigger;
    return this;
}

Drop_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_triggerContext.prototype.constructor = Drop_triggerContext;

Drop_triggerContext.prototype.drop_dml_trigger = function() {
    return this.getTypedRuleContext(Drop_dml_triggerContext,0);
};

Drop_triggerContext.prototype.drop_ddl_trigger = function() {
    return this.getTypedRuleContext(Drop_ddl_triggerContext,0);
};

Drop_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_trigger(this);
	}
};

Drop_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_trigger(this);
	}
};




TSqlParser.Drop_triggerContext = Drop_triggerContext;

TSqlParser.prototype.drop_trigger = function() {

    var localctx = new Drop_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 580, TSqlParser.RULE_drop_trigger);
    try {
        this.state = 7035;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,927,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7033;
            this.drop_dml_trigger();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7034;
            this.drop_ddl_trigger();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_dml_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_dml_trigger;
    return this;
}

Drop_dml_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_dml_triggerContext.prototype.constructor = Drop_dml_triggerContext;

Drop_dml_triggerContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_dml_triggerContext.prototype.TRIGGER = function() {
    return this.getToken(TSqlParser.TRIGGER, 0);
};

Drop_dml_triggerContext.prototype.simple_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simple_nameContext);
    } else {
        return this.getTypedRuleContext(Simple_nameContext,i);
    }
};

Drop_dml_triggerContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

Drop_dml_triggerContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

Drop_dml_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_dml_trigger(this);
	}
};

Drop_dml_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_dml_trigger(this);
	}
};




TSqlParser.Drop_dml_triggerContext = Drop_dml_triggerContext;

TSqlParser.prototype.drop_dml_trigger = function() {

    var localctx = new Drop_dml_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 582, TSqlParser.RULE_drop_dml_trigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7037;
        this.match(TSqlParser.DROP);
        this.state = 7038;
        this.match(TSqlParser.TRIGGER);
        this.state = 7041;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.IF) {
            this.state = 7039;
            this.match(TSqlParser.IF);
            this.state = 7040;
            this.match(TSqlParser.EXISTS);
        }

        this.state = 7043;
        this.simple_name();
        this.state = 7048;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 7044;
            this.match(TSqlParser.COMMA);
            this.state = 7045;
            this.simple_name();
            this.state = 7050;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 7052;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,930,this._ctx);
        if(la_===1) {
            this.state = 7051;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_ddl_triggerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_ddl_trigger;
    return this;
}

Drop_ddl_triggerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_ddl_triggerContext.prototype.constructor = Drop_ddl_triggerContext;

Drop_ddl_triggerContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_ddl_triggerContext.prototype.TRIGGER = function() {
    return this.getToken(TSqlParser.TRIGGER, 0);
};

Drop_ddl_triggerContext.prototype.simple_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simple_nameContext);
    } else {
        return this.getTypedRuleContext(Simple_nameContext,i);
    }
};

Drop_ddl_triggerContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Drop_ddl_triggerContext.prototype.DATABASE = function() {
    return this.getToken(TSqlParser.DATABASE, 0);
};

Drop_ddl_triggerContext.prototype.ALL = function() {
    return this.getToken(TSqlParser.ALL, 0);
};

Drop_ddl_triggerContext.prototype.SERVER = function() {
    return this.getToken(TSqlParser.SERVER, 0);
};

Drop_ddl_triggerContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

Drop_ddl_triggerContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

Drop_ddl_triggerContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_ddl_trigger(this);
	}
};

Drop_ddl_triggerContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_ddl_trigger(this);
	}
};




TSqlParser.Drop_ddl_triggerContext = Drop_ddl_triggerContext;

TSqlParser.prototype.drop_ddl_trigger = function() {

    var localctx = new Drop_ddl_triggerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 584, TSqlParser.RULE_drop_ddl_trigger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7054;
        this.match(TSqlParser.DROP);
        this.state = 7055;
        this.match(TSqlParser.TRIGGER);
        this.state = 7058;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.IF) {
            this.state = 7056;
            this.match(TSqlParser.IF);
            this.state = 7057;
            this.match(TSqlParser.EXISTS);
        }

        this.state = 7060;
        this.simple_name();
        this.state = 7065;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 7061;
            this.match(TSqlParser.COMMA);
            this.state = 7062;
            this.simple_name();
            this.state = 7067;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 7068;
        this.match(TSqlParser.ON);
        this.state = 7072;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.DATABASE:
            this.state = 7069;
            this.match(TSqlParser.DATABASE);
            break;
        case TSqlParser.ALL:
            this.state = 7070;
            this.match(TSqlParser.ALL);
            this.state = 7071;
            this.match(TSqlParser.SERVER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 7075;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,934,this._ctx);
        if(la_===1) {
            this.state = 7074;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_function;
    return this;
}

Drop_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_functionContext.prototype.constructor = Drop_functionContext;

Drop_functionContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_functionContext.prototype.FUNCTION = function() {
    return this.getToken(TSqlParser.FUNCTION, 0);
};

Drop_functionContext.prototype.func_proc_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Func_proc_nameContext);
    } else {
        return this.getTypedRuleContext(Func_proc_nameContext,i);
    }
};

Drop_functionContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

Drop_functionContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

Drop_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_function(this);
	}
};

Drop_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_function(this);
	}
};




TSqlParser.Drop_functionContext = Drop_functionContext;

TSqlParser.prototype.drop_function = function() {

    var localctx = new Drop_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 586, TSqlParser.RULE_drop_function);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7077;
        this.match(TSqlParser.DROP);
        this.state = 7078;
        this.match(TSqlParser.FUNCTION);
        this.state = 7081;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.IF) {
            this.state = 7079;
            this.match(TSqlParser.IF);
            this.state = 7080;
            this.match(TSqlParser.EXISTS);
        }

        this.state = 7083;
        this.func_proc_name();
        this.state = 7088;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 7084;
            this.match(TSqlParser.COMMA);
            this.state = 7085;
            this.func_proc_name();
            this.state = 7090;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 7092;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,937,this._ctx);
        if(la_===1) {
            this.state = 7091;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_statisticsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_statistics;
    this.name = null; // IdContext
    return this;
}

Drop_statisticsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_statisticsContext.prototype.constructor = Drop_statisticsContext;

Drop_statisticsContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_statisticsContext.prototype.STATISTICS = function() {
    return this.getToken(TSqlParser.STATISTICS, 0);
};

Drop_statisticsContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Drop_statisticsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Drop_statisticsContext.prototype.table_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_nameContext);
    } else {
        return this.getTypedRuleContext(Table_nameContext,i);
    }
};

Drop_statisticsContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_statistics(this);
	}
};

Drop_statisticsContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_statistics(this);
	}
};




TSqlParser.Drop_statisticsContext = Drop_statisticsContext;

TSqlParser.prototype.drop_statistics = function() {

    var localctx = new Drop_statisticsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 588, TSqlParser.RULE_drop_statistics);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7094;
        this.match(TSqlParser.DROP);
        this.state = 7095;
        this.match(TSqlParser.STATISTICS);
        this.state = 7105; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 7097;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 7096;
                this.match(TSqlParser.COMMA);
            }

            this.state = 7102;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,939,this._ctx);
            if(la_===1) {
                this.state = 7099;
                this.table_name();
                this.state = 7100;
                this.match(TSqlParser.DOT);

            }
            this.state = 7104;
            localctx.name = this.id();
            this.state = 7107; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===TSqlParser.BLOCKING_HIERARCHY || _la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0) || _la===TSqlParser.COMMA);
        this.state = 7109;
        this.match(TSqlParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_table;
    return this;
}

Drop_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_tableContext.prototype.constructor = Drop_tableContext;

Drop_tableContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_tableContext.prototype.TABLE = function() {
    return this.getToken(TSqlParser.TABLE, 0);
};

Drop_tableContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Drop_tableContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

Drop_tableContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

Drop_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_table(this);
	}
};

Drop_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_table(this);
	}
};




TSqlParser.Drop_tableContext = Drop_tableContext;

TSqlParser.prototype.drop_table = function() {

    var localctx = new Drop_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 590, TSqlParser.RULE_drop_table);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7111;
        this.match(TSqlParser.DROP);
        this.state = 7112;
        this.match(TSqlParser.TABLE);
        this.state = 7115;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.IF) {
            this.state = 7113;
            this.match(TSqlParser.IF);
            this.state = 7114;
            this.match(TSqlParser.EXISTS);
        }

        this.state = 7117;
        this.table_name();
        this.state = 7119;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,942,this._ctx);
        if(la_===1) {
            this.state = 7118;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_viewContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_view;
    return this;
}

Drop_viewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_viewContext.prototype.constructor = Drop_viewContext;

Drop_viewContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_viewContext.prototype.VIEW = function() {
    return this.getToken(TSqlParser.VIEW, 0);
};

Drop_viewContext.prototype.simple_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simple_nameContext);
    } else {
        return this.getTypedRuleContext(Simple_nameContext,i);
    }
};

Drop_viewContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

Drop_viewContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

Drop_viewContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_view(this);
	}
};

Drop_viewContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_view(this);
	}
};




TSqlParser.Drop_viewContext = Drop_viewContext;

TSqlParser.prototype.drop_view = function() {

    var localctx = new Drop_viewContext(this, this._ctx, this.state);
    this.enterRule(localctx, 592, TSqlParser.RULE_drop_view);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7121;
        this.match(TSqlParser.DROP);
        this.state = 7122;
        this.match(TSqlParser.VIEW);
        this.state = 7125;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.IF) {
            this.state = 7123;
            this.match(TSqlParser.IF);
            this.state = 7124;
            this.match(TSqlParser.EXISTS);
        }

        this.state = 7127;
        this.simple_name();
        this.state = 7132;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 7128;
            this.match(TSqlParser.COMMA);
            this.state = 7129;
            this.simple_name();
            this.state = 7134;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 7136;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,945,this._ctx);
        if(la_===1) {
            this.state = 7135;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_type;
    this.name = null; // Simple_nameContext
    return this;
}

Create_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_typeContext.prototype.constructor = Create_typeContext;

Create_typeContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_typeContext.prototype.TYPE = function() {
    return this.getToken(TSqlParser.TYPE, 0);
};

Create_typeContext.prototype.simple_name = function() {
    return this.getTypedRuleContext(Simple_nameContext,0);
};

Create_typeContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Create_typeContext.prototype.data_type = function() {
    return this.getTypedRuleContext(Data_typeContext,0);
};

Create_typeContext.prototype.default_value = function() {
    return this.getTypedRuleContext(Default_valueContext,0);
};

Create_typeContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Create_typeContext.prototype.TABLE = function() {
    return this.getToken(TSqlParser.TABLE, 0);
};

Create_typeContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Create_typeContext.prototype.column_def_table_constraints = function() {
    return this.getTypedRuleContext(Column_def_table_constraintsContext,0);
};

Create_typeContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Create_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_type(this);
	}
};

Create_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_type(this);
	}
};




TSqlParser.Create_typeContext = Create_typeContext;

TSqlParser.prototype.create_type = function() {

    var localctx = new Create_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 594, TSqlParser.RULE_create_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7138;
        this.match(TSqlParser.CREATE);
        this.state = 7139;
        this.match(TSqlParser.TYPE);
        this.state = 7140;
        localctx.name = this.simple_name();
        this.state = 7145;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.FROM) {
            this.state = 7141;
            this.match(TSqlParser.FROM);
            this.state = 7142;
            this.data_type();
            this.state = 7143;
            this.default_value();
        }

        this.state = 7153;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AS) {
            this.state = 7147;
            this.match(TSqlParser.AS);
            this.state = 7148;
            this.match(TSqlParser.TABLE);
            this.state = 7149;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 7150;
            this.column_def_table_constraints();
            this.state = 7151;
            this.match(TSqlParser.RR_BRACKET);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_drop_type;
    this.name = null; // Simple_nameContext
    return this;
}

Drop_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_typeContext.prototype.constructor = Drop_typeContext;

Drop_typeContext.prototype.DROP = function() {
    return this.getToken(TSqlParser.DROP, 0);
};

Drop_typeContext.prototype.TYPE = function() {
    return this.getToken(TSqlParser.TYPE, 0);
};

Drop_typeContext.prototype.simple_name = function() {
    return this.getTypedRuleContext(Simple_nameContext,0);
};

Drop_typeContext.prototype.IF = function() {
    return this.getToken(TSqlParser.IF, 0);
};

Drop_typeContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

Drop_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDrop_type(this);
	}
};

Drop_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDrop_type(this);
	}
};




TSqlParser.Drop_typeContext = Drop_typeContext;

TSqlParser.prototype.drop_type = function() {

    var localctx = new Drop_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 596, TSqlParser.RULE_drop_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7155;
        this.match(TSqlParser.DROP);
        this.state = 7156;
        this.match(TSqlParser.TYPE);
        this.state = 7159;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.IF) {
            this.state = 7157;
            this.match(TSqlParser.IF);
            this.state = 7158;
            this.match(TSqlParser.EXISTS);
        }

        this.state = 7161;
        localctx.name = this.simple_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rowset_function_limitedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_rowset_function_limited;
    return this;
}

Rowset_function_limitedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rowset_function_limitedContext.prototype.constructor = Rowset_function_limitedContext;

Rowset_function_limitedContext.prototype.openquery = function() {
    return this.getTypedRuleContext(OpenqueryContext,0);
};

Rowset_function_limitedContext.prototype.opendatasource = function() {
    return this.getTypedRuleContext(OpendatasourceContext,0);
};

Rowset_function_limitedContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterRowset_function_limited(this);
	}
};

Rowset_function_limitedContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitRowset_function_limited(this);
	}
};




TSqlParser.Rowset_function_limitedContext = Rowset_function_limitedContext;

TSqlParser.prototype.rowset_function_limited = function() {

    var localctx = new Rowset_function_limitedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 598, TSqlParser.RULE_rowset_function_limited);
    try {
        this.state = 7165;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.OPENQUERY:
            this.enterOuterAlt(localctx, 1);
            this.state = 7163;
            this.openquery();
            break;
        case TSqlParser.OPENDATASOURCE:
            this.enterOuterAlt(localctx, 2);
            this.state = 7164;
            this.opendatasource();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OpenqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_openquery;
    this.linked_server = null; // IdContext
    this.query = null; // Token
    return this;
}

OpenqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpenqueryContext.prototype.constructor = OpenqueryContext;

OpenqueryContext.prototype.OPENQUERY = function() {
    return this.getToken(TSqlParser.OPENQUERY, 0);
};

OpenqueryContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

OpenqueryContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

OpenqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterOpenquery(this);
	}
};

OpenqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitOpenquery(this);
	}
};




TSqlParser.OpenqueryContext = OpenqueryContext;

TSqlParser.prototype.openquery = function() {

    var localctx = new OpenqueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 600, TSqlParser.RULE_openquery);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7167;
        this.match(TSqlParser.OPENQUERY);
        this.state = 7168;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 7169;
        localctx.linked_server = this.id();
        this.state = 7170;
        this.match(TSqlParser.COMMA);
        this.state = 7171;
        localctx.query = this.match(TSqlParser.STRING);
        this.state = 7172;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OpendatasourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_opendatasource;
    this.provider = null; // Token
    this.init = null; // Token
    this.database = null; // IdContext
    this.scheme = null; // IdContext
    this.table = null; // IdContext
    return this;
}

OpendatasourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OpendatasourceContext.prototype.constructor = OpendatasourceContext;

OpendatasourceContext.prototype.OPENDATASOURCE = function() {
    return this.getToken(TSqlParser.OPENDATASOURCE, 0);
};

OpendatasourceContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


OpendatasourceContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

OpendatasourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterOpendatasource(this);
	}
};

OpendatasourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitOpendatasource(this);
	}
};




TSqlParser.OpendatasourceContext = OpendatasourceContext;

TSqlParser.prototype.opendatasource = function() {

    var localctx = new OpendatasourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 602, TSqlParser.RULE_opendatasource);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7174;
        this.match(TSqlParser.OPENDATASOURCE);
        this.state = 7175;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 7176;
        localctx.provider = this.match(TSqlParser.STRING);
        this.state = 7177;
        this.match(TSqlParser.COMMA);
        this.state = 7178;
        localctx.init = this.match(TSqlParser.STRING);
        this.state = 7179;
        this.match(TSqlParser.RR_BRACKET);
        this.state = 7180;
        this.match(TSqlParser.DOT);
        this.state = 7182;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0)) {
            this.state = 7181;
            localctx.database = this.id();
        }

        this.state = 7184;
        this.match(TSqlParser.DOT);
        this.state = 7186;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0)) {
            this.state = 7185;
            localctx.scheme = this.id();
        }

        this.state = 7188;
        this.match(TSqlParser.DOT);

        this.state = 7189;
        localctx.table = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declare_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_declare_statement;
    this.xml_namespace_uri = null; // Token
    return this;
}

Declare_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declare_statementContext.prototype.constructor = Declare_statementContext;

Declare_statementContext.prototype.DECLARE = function() {
    return this.getToken(TSqlParser.DECLARE, 0);
};

Declare_statementContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Declare_statementContext.prototype.table_type_definition = function() {
    return this.getTypedRuleContext(Table_type_definitionContext,0);
};

Declare_statementContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Declare_statementContext.prototype.declare_local = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_localContext);
    } else {
        return this.getTypedRuleContext(Declare_localContext,i);
    }
};

Declare_statementContext.prototype.xml_type_definition = function() {
    return this.getTypedRuleContext(Xml_type_definitionContext,0);
};

Declare_statementContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Declare_statementContext.prototype.XMLNAMESPACES = function() {
    return this.getToken(TSqlParser.XMLNAMESPACES, 0);
};

Declare_statementContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Declare_statementContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Declare_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDeclare_statement(this);
	}
};

Declare_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDeclare_statement(this);
	}
};




TSqlParser.Declare_statementContext = Declare_statementContext;

TSqlParser.prototype.declare_statement = function() {

    var localctx = new Declare_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 604, TSqlParser.RULE_declare_statement);
    var _la = 0; // Token type
    try {
        this.state = 7234;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,960,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7191;
            this.match(TSqlParser.DECLARE);
            this.state = 7192;
            this.match(TSqlParser.LOCAL_ID);
            this.state = 7194;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.AS) {
                this.state = 7193;
                this.match(TSqlParser.AS);
            }

            this.state = 7196;
            this.table_type_definition();
            this.state = 7198;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,953,this._ctx);
            if(la_===1) {
                this.state = 7197;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7200;
            this.match(TSqlParser.DECLARE);
            this.state = 7201;
            this.declare_local();
            this.state = 7206;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 7202;
                this.match(TSqlParser.COMMA);
                this.state = 7203;
                this.declare_local();
                this.state = 7208;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 7210;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,955,this._ctx);
            if(la_===1) {
                this.state = 7209;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 7212;
            this.match(TSqlParser.DECLARE);
            this.state = 7213;
            this.match(TSqlParser.LOCAL_ID);
            this.state = 7215;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.AS) {
                this.state = 7214;
                this.match(TSqlParser.AS);
            }

            this.state = 7217;
            this.xml_type_definition();
            this.state = 7219;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,957,this._ctx);
            if(la_===1) {
                this.state = 7218;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 7221;
            this.match(TSqlParser.WITH);
            this.state = 7222;
            this.match(TSqlParser.XMLNAMESPACES);
            this.state = 7223;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 7224;
            localctx.xml_namespace_uri = this.match(TSqlParser.STRING);
            this.state = 7226;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 7225;
                this.match(TSqlParser.COMMA);
            }

            this.state = 7228;
            this.match(TSqlParser.AS);
            this.state = 7229;
            this.id();
            this.state = 7230;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 7232;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,959,this._ctx);
            if(la_===1) {
                this.state = 7231;
                this.match(TSqlParser.SEMI);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cursor_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_cursor_statement;
    return this;
}

Cursor_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cursor_statementContext.prototype.constructor = Cursor_statementContext;

Cursor_statementContext.prototype.CLOSE = function() {
    return this.getToken(TSqlParser.CLOSE, 0);
};

Cursor_statementContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Cursor_statementContext.prototype.GLOBAL = function() {
    return this.getToken(TSqlParser.GLOBAL, 0);
};

Cursor_statementContext.prototype.DEALLOCATE = function() {
    return this.getToken(TSqlParser.DEALLOCATE, 0);
};

Cursor_statementContext.prototype.declare_cursor = function() {
    return this.getTypedRuleContext(Declare_cursorContext,0);
};

Cursor_statementContext.prototype.fetch_cursor = function() {
    return this.getTypedRuleContext(Fetch_cursorContext,0);
};

Cursor_statementContext.prototype.OPEN = function() {
    return this.getToken(TSqlParser.OPEN, 0);
};

Cursor_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCursor_statement(this);
	}
};

Cursor_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCursor_statement(this);
	}
};




TSqlParser.Cursor_statementContext = Cursor_statementContext;

TSqlParser.prototype.cursor_statement = function() {

    var localctx = new Cursor_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 606, TSqlParser.RULE_cursor_statement);
    try {
        this.state = 7262;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CLOSE:
            this.enterOuterAlt(localctx, 1);
            this.state = 7236;
            this.match(TSqlParser.CLOSE);
            this.state = 7238;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,961,this._ctx);
            if(la_===1) {
                this.state = 7237;
                this.match(TSqlParser.GLOBAL);

            }
            this.state = 7240;
            this.cursor_name();
            this.state = 7242;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,962,this._ctx);
            if(la_===1) {
                this.state = 7241;
                this.match(TSqlParser.SEMI);

            }
            break;
        case TSqlParser.DEALLOCATE:
            this.enterOuterAlt(localctx, 2);
            this.state = 7244;
            this.match(TSqlParser.DEALLOCATE);
            this.state = 7246;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,963,this._ctx);
            if(la_===1) {
                this.state = 7245;
                this.match(TSqlParser.GLOBAL);

            }
            this.state = 7248;
            this.cursor_name();
            this.state = 7250;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,964,this._ctx);
            if(la_===1) {
                this.state = 7249;
                this.match(TSqlParser.SEMI);

            }
            break;
        case TSqlParser.DECLARE:
            this.enterOuterAlt(localctx, 3);
            this.state = 7252;
            this.declare_cursor();
            break;
        case TSqlParser.FETCH:
            this.enterOuterAlt(localctx, 4);
            this.state = 7253;
            this.fetch_cursor();
            break;
        case TSqlParser.OPEN:
            this.enterOuterAlt(localctx, 5);
            this.state = 7254;
            this.match(TSqlParser.OPEN);
            this.state = 7256;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,965,this._ctx);
            if(la_===1) {
                this.state = 7255;
                this.match(TSqlParser.GLOBAL);

            }
            this.state = 7258;
            this.cursor_name();
            this.state = 7260;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,966,this._ctx);
            if(la_===1) {
                this.state = 7259;
                this.match(TSqlParser.SEMI);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Backup_databaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_backup_database;
    this.database_name = null; // IdContext
    this.file_or_filegroup = null; // Token
    this.logical_device_name = null; // IdContext
    this.backup_set_name = null; // IdContext
    this.medianame = null; // Token
    this.stats_percent = null; // Token
    this.encryptor_name = null; // IdContext
    return this;
}

Backup_databaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Backup_databaseContext.prototype.constructor = Backup_databaseContext;

Backup_databaseContext.prototype.BACKUP = function() {
    return this.getToken(TSqlParser.BACKUP, 0);
};

Backup_databaseContext.prototype.DATABASE = function() {
    return this.getToken(TSqlParser.DATABASE, 0);
};

Backup_databaseContext.prototype.TO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.TO);
    } else {
        return this.getToken(TSqlParser.TO, i);
    }
};


Backup_databaseContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Backup_databaseContext.prototype.READ_WRITE_FILEGROUPS = function() {
    return this.getToken(TSqlParser.READ_WRITE_FILEGROUPS, 0);
};

Backup_databaseContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Backup_databaseContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Backup_databaseContext.prototype.FILE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.FILE);
    } else {
        return this.getToken(TSqlParser.FILE, i);
    }
};


Backup_databaseContext.prototype.FILEGROUP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.FILEGROUP);
    } else {
        return this.getToken(TSqlParser.FILEGROUP, i);
    }
};


Backup_databaseContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Backup_databaseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Backup_databaseContext.prototype.DISK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DISK);
    } else {
        return this.getToken(TSqlParser.DISK, i);
    }
};


Backup_databaseContext.prototype.TAPE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.TAPE);
    } else {
        return this.getToken(TSqlParser.TAPE, i);
    }
};


Backup_databaseContext.prototype.URL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.URL);
    } else {
        return this.getToken(TSqlParser.URL, i);
    }
};


Backup_databaseContext.prototype.MIRROR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MIRROR);
    } else {
        return this.getToken(TSqlParser.MIRROR, i);
    }
};


Backup_databaseContext.prototype.DIFFERENTIAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DIFFERENTIAL);
    } else {
        return this.getToken(TSqlParser.DIFFERENTIAL, i);
    }
};


Backup_databaseContext.prototype.COPY_ONLY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COPY_ONLY);
    } else {
        return this.getToken(TSqlParser.COPY_ONLY, i);
    }
};


Backup_databaseContext.prototype.DESCRIPTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DESCRIPTION);
    } else {
        return this.getToken(TSqlParser.DESCRIPTION, i);
    }
};


Backup_databaseContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NAME);
    } else {
        return this.getToken(TSqlParser.NAME, i);
    }
};


Backup_databaseContext.prototype.CREDENTIAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.CREDENTIAL);
    } else {
        return this.getToken(TSqlParser.CREDENTIAL, i);
    }
};


Backup_databaseContext.prototype.FILE_SNAPSHOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.FILE_SNAPSHOT);
    } else {
        return this.getToken(TSqlParser.FILE_SNAPSHOT, i);
    }
};


Backup_databaseContext.prototype.MEDIADESCRIPTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MEDIADESCRIPTION);
    } else {
        return this.getToken(TSqlParser.MEDIADESCRIPTION, i);
    }
};


Backup_databaseContext.prototype.MEDIANAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MEDIANAME);
    } else {
        return this.getToken(TSqlParser.MEDIANAME, i);
    }
};


Backup_databaseContext.prototype.BLOCKSIZE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.BLOCKSIZE);
    } else {
        return this.getToken(TSqlParser.BLOCKSIZE, i);
    }
};


Backup_databaseContext.prototype.BUFFERCOUNT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.BUFFERCOUNT);
    } else {
        return this.getToken(TSqlParser.BUFFERCOUNT, i);
    }
};


Backup_databaseContext.prototype.MAXTRANSFER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MAXTRANSFER);
    } else {
        return this.getToken(TSqlParser.MAXTRANSFER, i);
    }
};


Backup_databaseContext.prototype.RESTART = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RESTART);
    } else {
        return this.getToken(TSqlParser.RESTART, i);
    }
};


Backup_databaseContext.prototype.STATS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STATS);
    } else {
        return this.getToken(TSqlParser.STATS, i);
    }
};


Backup_databaseContext.prototype.ENCRYPTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ENCRYPTION);
    } else {
        return this.getToken(TSqlParser.ENCRYPTION, i);
    }
};


Backup_databaseContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LR_BRACKET);
    } else {
        return this.getToken(TSqlParser.LR_BRACKET, i);
    }
};


Backup_databaseContext.prototype.ALGORITHM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ALGORITHM);
    } else {
        return this.getToken(TSqlParser.ALGORITHM, i);
    }
};


Backup_databaseContext.prototype.SERVER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SERVER);
    } else {
        return this.getToken(TSqlParser.SERVER, i);
    }
};


Backup_databaseContext.prototype.CERTIFICATE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.CERTIFICATE);
    } else {
        return this.getToken(TSqlParser.CERTIFICATE, i);
    }
};


Backup_databaseContext.prototype.COMPRESSION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMPRESSION);
    } else {
        return this.getToken(TSqlParser.COMPRESSION, i);
    }
};


Backup_databaseContext.prototype.NO_COMPRESSION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NO_COMPRESSION);
    } else {
        return this.getToken(TSqlParser.NO_COMPRESSION, i);
    }
};


Backup_databaseContext.prototype.NOINIT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NOINIT);
    } else {
        return this.getToken(TSqlParser.NOINIT, i);
    }
};


Backup_databaseContext.prototype.INIT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.INIT);
    } else {
        return this.getToken(TSqlParser.INIT, i);
    }
};


Backup_databaseContext.prototype.NOSKIP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NOSKIP);
    } else {
        return this.getToken(TSqlParser.NOSKIP, i);
    }
};


Backup_databaseContext.prototype.SKIP_KEYWORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SKIP_KEYWORD);
    } else {
        return this.getToken(TSqlParser.SKIP_KEYWORD, i);
    }
};


Backup_databaseContext.prototype.NOFORMAT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NOFORMAT);
    } else {
        return this.getToken(TSqlParser.NOFORMAT, i);
    }
};


Backup_databaseContext.prototype.FORMAT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.FORMAT);
    } else {
        return this.getToken(TSqlParser.FORMAT, i);
    }
};


Backup_databaseContext.prototype.NO_CHECKSUM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NO_CHECKSUM);
    } else {
        return this.getToken(TSqlParser.NO_CHECKSUM, i);
    }
};


Backup_databaseContext.prototype.CHECKSUM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.CHECKSUM);
    } else {
        return this.getToken(TSqlParser.CHECKSUM, i);
    }
};


Backup_databaseContext.prototype.STOP_ON_ERROR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STOP_ON_ERROR);
    } else {
        return this.getToken(TSqlParser.STOP_ON_ERROR, i);
    }
};


Backup_databaseContext.prototype.CONTINUE_AFTER_ERROR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.CONTINUE_AFTER_ERROR);
    } else {
        return this.getToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
    }
};


Backup_databaseContext.prototype.REWIND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.REWIND);
    } else {
        return this.getToken(TSqlParser.REWIND, i);
    }
};


Backup_databaseContext.prototype.NOREWIND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NOREWIND);
    } else {
        return this.getToken(TSqlParser.NOREWIND, i);
    }
};


Backup_databaseContext.prototype.LOAD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LOAD);
    } else {
        return this.getToken(TSqlParser.LOAD, i);
    }
};


Backup_databaseContext.prototype.NOUNLOAD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NOUNLOAD);
    } else {
        return this.getToken(TSqlParser.NOUNLOAD, i);
    }
};


Backup_databaseContext.prototype.AES_128 = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.AES_128);
    } else {
        return this.getToken(TSqlParser.AES_128, i);
    }
};


Backup_databaseContext.prototype.AES_192 = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.AES_192);
    } else {
        return this.getToken(TSqlParser.AES_192, i);
    }
};


Backup_databaseContext.prototype.AES_256 = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.AES_256);
    } else {
        return this.getToken(TSqlParser.AES_256, i);
    }
};


Backup_databaseContext.prototype.TRIPLE_DES_3KEY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.TRIPLE_DES_3KEY);
    } else {
        return this.getToken(TSqlParser.TRIPLE_DES_3KEY, i);
    }
};


Backup_databaseContext.prototype.EXPIREDATE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EXPIREDATE);
    } else {
        return this.getToken(TSqlParser.EXPIREDATE, i);
    }
};


Backup_databaseContext.prototype.RETAINDAYS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RETAINDAYS);
    } else {
        return this.getToken(TSqlParser.RETAINDAYS, i);
    }
};


Backup_databaseContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Backup_databaseContext.prototype.ASYMMETRIC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ASYMMETRIC);
    } else {
        return this.getToken(TSqlParser.ASYMMETRIC, i);
    }
};


Backup_databaseContext.prototype.KEY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.KEY);
    } else {
        return this.getToken(TSqlParser.KEY, i);
    }
};


Backup_databaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterBackup_database(this);
	}
};

Backup_databaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitBackup_database(this);
	}
};




TSqlParser.Backup_databaseContext = Backup_databaseContext;

TSqlParser.prototype.backup_database = function() {

    var localctx = new Backup_databaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 608, TSqlParser.RULE_backup_database);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7264;
        this.match(TSqlParser.BACKUP);
        this.state = 7265;
        this.match(TSqlParser.DATABASE);

        this.state = 7266;
        localctx.database_name = this.id();
        this.state = 7279;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.READ_WRITE_FILEGROUPS) {
            this.state = 7267;
            this.match(TSqlParser.READ_WRITE_FILEGROUPS);
            this.state = 7276;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,969,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 7269;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 7268;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 7271;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.FILE || _la===TSqlParser.FILEGROUP)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 7272;
                    this.match(TSqlParser.EQUAL);
                    this.state = 7273;
                    localctx.file_or_filegroup = this.match(TSqlParser.STRING); 
                }
                this.state = 7278;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,969,this._ctx);
            }

        }

        this.state = 7289;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.FILE || _la===TSqlParser.FILEGROUP || _la===TSqlParser.COMMA) {
            this.state = 7282;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 7281;
                this.match(TSqlParser.COMMA);
            }

            this.state = 7284;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.FILE || _la===TSqlParser.FILEGROUP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 7285;
            this.match(TSqlParser.EQUAL);
            this.state = 7286;
            localctx.file_or_filegroup = this.match(TSqlParser.STRING);
            this.state = 7291;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 7315;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,978,this._ctx);
        switch(la_) {
        case 1:
            this.state = 7292;
            this.match(TSqlParser.TO);
            this.state = 7297; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 7294;
            		this._errHandler.sync(this);
            		_la = this._input.LA(1);
            		if(_la===TSqlParser.COMMA) {
            		    this.state = 7293;
            		    this.match(TSqlParser.COMMA);
            		}

            		this.state = 7296;
            		localctx.logical_device_name = this.id();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 7299; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,974, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 2:
            this.state = 7301;
            this.match(TSqlParser.TO);
            this.state = 7311; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 7303;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 7302;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 7305;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.DISK || _la===TSqlParser.TAPE || _la===TSqlParser.URL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7306;
                this.match(TSqlParser.EQUAL);
                this.state = 7309;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.STRING:
                    this.state = 7307;
                    this.match(TSqlParser.STRING);
                    break;
                case TSqlParser.CALLED:
                case TSqlParser.DATA_COMPRESSION:
                case TSqlParser.EVENTDATA:
                case TSqlParser.FILENAME:
                case TSqlParser.FILLFACTOR:
                case TSqlParser.FORCESEEK:
                case TSqlParser.KEY:
                case TSqlParser.MASTER:
                case TSqlParser.MAX_MEMORY:
                case TSqlParser.OFFSETS:
                case TSqlParser.PAGE:
                case TSqlParser.PUBLIC:
                case TSqlParser.RAW:
                case TSqlParser.RETURN:
                case TSqlParser.RETURNS:
                case TSqlParser.ROWCOUNT:
                case TSqlParser.SAFETY:
                case TSqlParser.SERVER:
                case TSqlParser.SID:
                case TSqlParser.SOURCE:
                case TSqlParser.STATE:
                case TSqlParser.TARGET:
                case TSqlParser.ABSOLUTE:
                case TSqlParser.ACTIVE:
                case TSqlParser.ADDRESS:
                case TSqlParser.APPLY:
                case TSqlParser.AUTO:
                case TSqlParser.AVAILABILITY:
                case TSqlParser.AVG:
                case TSqlParser.CALLER:
                case TSqlParser.CAST:
                case TSqlParser.CATCH:
                case TSqlParser.CHECKSUM_AGG:
                case TSqlParser.COMMITTED:
                case TSqlParser.CONCAT:
                case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                case TSqlParser.CONTROL:
                case TSqlParser.COOKIE:
                case TSqlParser.COUNT:
                case TSqlParser.COUNTER:
                case TSqlParser.COUNT_BIG:
                case TSqlParser.DELAY:
                case TSqlParser.DELETED:
                case TSqlParser.DENSE_RANK:
                case TSqlParser.DISABLE:
                case TSqlParser.DYNAMIC:
                case TSqlParser.ENCRYPTION:
                case TSqlParser.EXPAND:
                case TSqlParser.FAST:
                case TSqlParser.FAST_FORWARD:
                case TSqlParser.FIRST:
                case TSqlParser.FOLLOWING:
                case TSqlParser.FORCE:
                case TSqlParser.FORCED:
                case TSqlParser.FORWARD_ONLY:
                case TSqlParser.FULLSCAN:
                case TSqlParser.GLOBAL:
                case TSqlParser.GROUPING:
                case TSqlParser.GROUPING_ID:
                case TSqlParser.HASH:
                case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                case TSqlParser.IMPERSONATE:
                case TSqlParser.INPUT:
                case TSqlParser.INSENSITIVE:
                case TSqlParser.INSERTED:
                case TSqlParser.ISOLATION:
                case TSqlParser.KEEP:
                case TSqlParser.KEEPFIXED:
                case TSqlParser.KEYSET:
                case TSqlParser.LAST:
                case TSqlParser.LEVEL:
                case TSqlParser.LOCAL:
                case TSqlParser.LOCATION:
                case TSqlParser.LOCK_ESCALATION:
                case TSqlParser.LOGIN:
                case TSqlParser.LOOP:
                case TSqlParser.MARK:
                case TSqlParser.MAX:
                case TSqlParser.MAX_ROLLOVER_FILES:
                case TSqlParser.MAXDOP:
                case TSqlParser.MAXRECURSION:
                case TSqlParser.MIN:
                case TSqlParser.MODIFY:
                case TSqlParser.NAME:
                case TSqlParser.NEXT:
                case TSqlParser.NOCOUNT:
                case TSqlParser.NOEXPAND:
                case TSqlParser.NORECOMPUTE:
                case TSqlParser.NTILE:
                case TSqlParser.NUMBER:
                case TSqlParser.OFFSET:
                case TSqlParser.ONLINE:
                case TSqlParser.ONLY:
                case TSqlParser.OPTIMISTIC:
                case TSqlParser.OPTIMIZE:
                case TSqlParser.OUT:
                case TSqlParser.OUTPUT:
                case TSqlParser.OWNER:
                case TSqlParser.PARAMETERIZATION:
                case TSqlParser.PARTITION:
                case TSqlParser.PATH:
                case TSqlParser.PRECEDING:
                case TSqlParser.PRIOR:
                case TSqlParser.PRIVILEGES:
                case TSqlParser.RANGE:
                case TSqlParser.RANK:
                case TSqlParser.READONLY:
                case TSqlParser.READ_ONLY:
                case TSqlParser.RECOMPILE:
                case TSqlParser.RELATIVE:
                case TSqlParser.REMOTE:
                case TSqlParser.REPEATABLE:
                case TSqlParser.ROBUST:
                case TSqlParser.ROOT:
                case TSqlParser.ROW:
                case TSqlParser.ROWGUID:
                case TSqlParser.ROWS:
                case TSqlParser.ROW_NUMBER:
                case TSqlParser.SAMPLE:
                case TSqlParser.SCHEMABINDING:
                case TSqlParser.SCROLL:
                case TSqlParser.SCROLL_LOCKS:
                case TSqlParser.SELF:
                case TSqlParser.SERIALIZABLE:
                case TSqlParser.SIMPLE:
                case TSqlParser.SIZE:
                case TSqlParser.SNAPSHOT:
                case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                case TSqlParser.STATIC:
                case TSqlParser.STATS_STREAM:
                case TSqlParser.STDEV:
                case TSqlParser.STDEVP:
                case TSqlParser.SUM:
                case TSqlParser.TEXTIMAGE_ON:
                case TSqlParser.THROW:
                case TSqlParser.TIES:
                case TSqlParser.TIME:
                case TSqlParser.TRY:
                case TSqlParser.TYPE:
                case TSqlParser.TYPE_WARNING:
                case TSqlParser.UNBOUNDED:
                case TSqlParser.UNCOMMITTED:
                case TSqlParser.UNKNOWN:
                case TSqlParser.USING:
                case TSqlParser.VALUE:
                case TSqlParser.VAR:
                case TSqlParser.VARP:
                case TSqlParser.VIEWS:
                case TSqlParser.VIEW_METADATA:
                case TSqlParser.WORK:
                case TSqlParser.XML:
                case TSqlParser.XMLNAMESPACES:
                case TSqlParser.DOUBLE_QUOTE_ID:
                case TSqlParser.SQUARE_BRACKET_ID:
                case TSqlParser.ID:
                    this.state = 7308;
                    this.id();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 7313; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.DISK || _la===TSqlParser.TAPE || _la===TSqlParser.URL || _la===TSqlParser.COMMA);
            break;

        }
        this.state = 7350;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,986,this._ctx);
        if(la_===1) {
            this.state = 7327; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 7317;
                this.match(TSqlParser.MIRROR);
                this.state = 7318;
                this.match(TSqlParser.TO);
                this.state = 7323; 
                this._errHandler.sync(this);
                var _alt = 1;
                do {
                	switch (_alt) {
                	case 1:
                		this.state = 7320;
                		this._errHandler.sync(this);
                		_la = this._input.LA(1);
                		if(_la===TSqlParser.COMMA) {
                		    this.state = 7319;
                		    this.match(TSqlParser.COMMA);
                		}

                		this.state = 7322;
                		localctx.logical_device_name = this.id();
                		break;
                	default:
                		throw new antlr4.error.NoViableAltException(this);
                	}
                	this.state = 7325; 
                	this._errHandler.sync(this);
                	_alt = this._interp.adaptivePredict(this._input,980, this._ctx);
                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                this.state = 7329; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.MIRROR);

        } else if(la_===2) {
            this.state = 7346; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 7331;
                this.match(TSqlParser.MIRROR);
                this.state = 7332;
                this.match(TSqlParser.TO);
                this.state = 7342; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 7334;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 7333;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 7336;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.DISK || _la===TSqlParser.TAPE || _la===TSqlParser.URL)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 7337;
                    this.match(TSqlParser.EQUAL);
                    this.state = 7340;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case TSqlParser.STRING:
                        this.state = 7338;
                        this.match(TSqlParser.STRING);
                        break;
                    case TSqlParser.CALLED:
                    case TSqlParser.DATA_COMPRESSION:
                    case TSqlParser.EVENTDATA:
                    case TSqlParser.FILENAME:
                    case TSqlParser.FILLFACTOR:
                    case TSqlParser.FORCESEEK:
                    case TSqlParser.KEY:
                    case TSqlParser.MASTER:
                    case TSqlParser.MAX_MEMORY:
                    case TSqlParser.OFFSETS:
                    case TSqlParser.PAGE:
                    case TSqlParser.PUBLIC:
                    case TSqlParser.RAW:
                    case TSqlParser.RETURN:
                    case TSqlParser.RETURNS:
                    case TSqlParser.ROWCOUNT:
                    case TSqlParser.SAFETY:
                    case TSqlParser.SERVER:
                    case TSqlParser.SID:
                    case TSqlParser.SOURCE:
                    case TSqlParser.STATE:
                    case TSqlParser.TARGET:
                    case TSqlParser.ABSOLUTE:
                    case TSqlParser.ACTIVE:
                    case TSqlParser.ADDRESS:
                    case TSqlParser.APPLY:
                    case TSqlParser.AUTO:
                    case TSqlParser.AVAILABILITY:
                    case TSqlParser.AVG:
                    case TSqlParser.CALLER:
                    case TSqlParser.CAST:
                    case TSqlParser.CATCH:
                    case TSqlParser.CHECKSUM_AGG:
                    case TSqlParser.COMMITTED:
                    case TSqlParser.CONCAT:
                    case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                    case TSqlParser.CONTROL:
                    case TSqlParser.COOKIE:
                    case TSqlParser.COUNT:
                    case TSqlParser.COUNTER:
                    case TSqlParser.COUNT_BIG:
                    case TSqlParser.DELAY:
                    case TSqlParser.DELETED:
                    case TSqlParser.DENSE_RANK:
                    case TSqlParser.DISABLE:
                    case TSqlParser.DYNAMIC:
                    case TSqlParser.ENCRYPTION:
                    case TSqlParser.EXPAND:
                    case TSqlParser.FAST:
                    case TSqlParser.FAST_FORWARD:
                    case TSqlParser.FIRST:
                    case TSqlParser.FOLLOWING:
                    case TSqlParser.FORCE:
                    case TSqlParser.FORCED:
                    case TSqlParser.FORWARD_ONLY:
                    case TSqlParser.FULLSCAN:
                    case TSqlParser.GLOBAL:
                    case TSqlParser.GROUPING:
                    case TSqlParser.GROUPING_ID:
                    case TSqlParser.HASH:
                    case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                    case TSqlParser.IMPERSONATE:
                    case TSqlParser.INPUT:
                    case TSqlParser.INSENSITIVE:
                    case TSqlParser.INSERTED:
                    case TSqlParser.ISOLATION:
                    case TSqlParser.KEEP:
                    case TSqlParser.KEEPFIXED:
                    case TSqlParser.KEYSET:
                    case TSqlParser.LAST:
                    case TSqlParser.LEVEL:
                    case TSqlParser.LOCAL:
                    case TSqlParser.LOCATION:
                    case TSqlParser.LOCK_ESCALATION:
                    case TSqlParser.LOGIN:
                    case TSqlParser.LOOP:
                    case TSqlParser.MARK:
                    case TSqlParser.MAX:
                    case TSqlParser.MAX_ROLLOVER_FILES:
                    case TSqlParser.MAXDOP:
                    case TSqlParser.MAXRECURSION:
                    case TSqlParser.MIN:
                    case TSqlParser.MODIFY:
                    case TSqlParser.NAME:
                    case TSqlParser.NEXT:
                    case TSqlParser.NOCOUNT:
                    case TSqlParser.NOEXPAND:
                    case TSqlParser.NORECOMPUTE:
                    case TSqlParser.NTILE:
                    case TSqlParser.NUMBER:
                    case TSqlParser.OFFSET:
                    case TSqlParser.ONLINE:
                    case TSqlParser.ONLY:
                    case TSqlParser.OPTIMISTIC:
                    case TSqlParser.OPTIMIZE:
                    case TSqlParser.OUT:
                    case TSqlParser.OUTPUT:
                    case TSqlParser.OWNER:
                    case TSqlParser.PARAMETERIZATION:
                    case TSqlParser.PARTITION:
                    case TSqlParser.PATH:
                    case TSqlParser.PRECEDING:
                    case TSqlParser.PRIOR:
                    case TSqlParser.PRIVILEGES:
                    case TSqlParser.RANGE:
                    case TSqlParser.RANK:
                    case TSqlParser.READONLY:
                    case TSqlParser.READ_ONLY:
                    case TSqlParser.RECOMPILE:
                    case TSqlParser.RELATIVE:
                    case TSqlParser.REMOTE:
                    case TSqlParser.REPEATABLE:
                    case TSqlParser.ROBUST:
                    case TSqlParser.ROOT:
                    case TSqlParser.ROW:
                    case TSqlParser.ROWGUID:
                    case TSqlParser.ROWS:
                    case TSqlParser.ROW_NUMBER:
                    case TSqlParser.SAMPLE:
                    case TSqlParser.SCHEMABINDING:
                    case TSqlParser.SCROLL:
                    case TSqlParser.SCROLL_LOCKS:
                    case TSqlParser.SELF:
                    case TSqlParser.SERIALIZABLE:
                    case TSqlParser.SIMPLE:
                    case TSqlParser.SIZE:
                    case TSqlParser.SNAPSHOT:
                    case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                    case TSqlParser.STATIC:
                    case TSqlParser.STATS_STREAM:
                    case TSqlParser.STDEV:
                    case TSqlParser.STDEVP:
                    case TSqlParser.SUM:
                    case TSqlParser.TEXTIMAGE_ON:
                    case TSqlParser.THROW:
                    case TSqlParser.TIES:
                    case TSqlParser.TIME:
                    case TSqlParser.TRY:
                    case TSqlParser.TYPE:
                    case TSqlParser.TYPE_WARNING:
                    case TSqlParser.UNBOUNDED:
                    case TSqlParser.UNCOMMITTED:
                    case TSqlParser.UNKNOWN:
                    case TSqlParser.USING:
                    case TSqlParser.VALUE:
                    case TSqlParser.VAR:
                    case TSqlParser.VARP:
                    case TSqlParser.VIEWS:
                    case TSqlParser.VIEW_METADATA:
                    case TSqlParser.WORK:
                    case TSqlParser.XML:
                    case TSqlParser.XMLNAMESPACES:
                    case TSqlParser.DOUBLE_QUOTE_ID:
                    case TSqlParser.SQUARE_BRACKET_ID:
                    case TSqlParser.ID:
                        this.state = 7339;
                        this.id();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 7344; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===TSqlParser.DISK || _la===TSqlParser.TAPE || _la===TSqlParser.URL || _la===TSqlParser.COMMA);
                this.state = 7348; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.MIRROR);

        }
        this.state = 7512;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1022,this._ctx);
        if(la_===1) {
            this.state = 7352;
            this.match(TSqlParser.WITH);
            this.state = 7509;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,1021,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 7507;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,1020,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 7354;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7353;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7356;
                        this.match(TSqlParser.DIFFERENTIAL);
                        break;

                    case 2:
                        this.state = 7358;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7357;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7360;
                        this.match(TSqlParser.COPY_ONLY);
                        break;

                    case 3:
                        this.state = 7362;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7361;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7364;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.COMPRESSION || _la===TSqlParser.NO_COMPRESSION)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 4:
                        this.state = 7366;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7365;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7368;
                        this.match(TSqlParser.DESCRIPTION);
                        this.state = 7369;
                        this.match(TSqlParser.EQUAL);
                        this.state = 7372;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case TSqlParser.STRING:
                            this.state = 7370;
                            this.match(TSqlParser.STRING);
                            break;
                        case TSqlParser.CALLED:
                        case TSqlParser.DATA_COMPRESSION:
                        case TSqlParser.EVENTDATA:
                        case TSqlParser.FILENAME:
                        case TSqlParser.FILLFACTOR:
                        case TSqlParser.FORCESEEK:
                        case TSqlParser.KEY:
                        case TSqlParser.MASTER:
                        case TSqlParser.MAX_MEMORY:
                        case TSqlParser.OFFSETS:
                        case TSqlParser.PAGE:
                        case TSqlParser.PUBLIC:
                        case TSqlParser.RAW:
                        case TSqlParser.RETURN:
                        case TSqlParser.RETURNS:
                        case TSqlParser.ROWCOUNT:
                        case TSqlParser.SAFETY:
                        case TSqlParser.SERVER:
                        case TSqlParser.SID:
                        case TSqlParser.SOURCE:
                        case TSqlParser.STATE:
                        case TSqlParser.TARGET:
                        case TSqlParser.ABSOLUTE:
                        case TSqlParser.ACTIVE:
                        case TSqlParser.ADDRESS:
                        case TSqlParser.APPLY:
                        case TSqlParser.AUTO:
                        case TSqlParser.AVAILABILITY:
                        case TSqlParser.AVG:
                        case TSqlParser.CALLER:
                        case TSqlParser.CAST:
                        case TSqlParser.CATCH:
                        case TSqlParser.CHECKSUM_AGG:
                        case TSqlParser.COMMITTED:
                        case TSqlParser.CONCAT:
                        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                        case TSqlParser.CONTROL:
                        case TSqlParser.COOKIE:
                        case TSqlParser.COUNT:
                        case TSqlParser.COUNTER:
                        case TSqlParser.COUNT_BIG:
                        case TSqlParser.DELAY:
                        case TSqlParser.DELETED:
                        case TSqlParser.DENSE_RANK:
                        case TSqlParser.DISABLE:
                        case TSqlParser.DYNAMIC:
                        case TSqlParser.ENCRYPTION:
                        case TSqlParser.EXPAND:
                        case TSqlParser.FAST:
                        case TSqlParser.FAST_FORWARD:
                        case TSqlParser.FIRST:
                        case TSqlParser.FOLLOWING:
                        case TSqlParser.FORCE:
                        case TSqlParser.FORCED:
                        case TSqlParser.FORWARD_ONLY:
                        case TSqlParser.FULLSCAN:
                        case TSqlParser.GLOBAL:
                        case TSqlParser.GROUPING:
                        case TSqlParser.GROUPING_ID:
                        case TSqlParser.HASH:
                        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                        case TSqlParser.IMPERSONATE:
                        case TSqlParser.INPUT:
                        case TSqlParser.INSENSITIVE:
                        case TSqlParser.INSERTED:
                        case TSqlParser.ISOLATION:
                        case TSqlParser.KEEP:
                        case TSqlParser.KEEPFIXED:
                        case TSqlParser.KEYSET:
                        case TSqlParser.LAST:
                        case TSqlParser.LEVEL:
                        case TSqlParser.LOCAL:
                        case TSqlParser.LOCATION:
                        case TSqlParser.LOCK_ESCALATION:
                        case TSqlParser.LOGIN:
                        case TSqlParser.LOOP:
                        case TSqlParser.MARK:
                        case TSqlParser.MAX:
                        case TSqlParser.MAX_ROLLOVER_FILES:
                        case TSqlParser.MAXDOP:
                        case TSqlParser.MAXRECURSION:
                        case TSqlParser.MIN:
                        case TSqlParser.MODIFY:
                        case TSqlParser.NAME:
                        case TSqlParser.NEXT:
                        case TSqlParser.NOCOUNT:
                        case TSqlParser.NOEXPAND:
                        case TSqlParser.NORECOMPUTE:
                        case TSqlParser.NTILE:
                        case TSqlParser.NUMBER:
                        case TSqlParser.OFFSET:
                        case TSqlParser.ONLINE:
                        case TSqlParser.ONLY:
                        case TSqlParser.OPTIMISTIC:
                        case TSqlParser.OPTIMIZE:
                        case TSqlParser.OUT:
                        case TSqlParser.OUTPUT:
                        case TSqlParser.OWNER:
                        case TSqlParser.PARAMETERIZATION:
                        case TSqlParser.PARTITION:
                        case TSqlParser.PATH:
                        case TSqlParser.PRECEDING:
                        case TSqlParser.PRIOR:
                        case TSqlParser.PRIVILEGES:
                        case TSqlParser.RANGE:
                        case TSqlParser.RANK:
                        case TSqlParser.READONLY:
                        case TSqlParser.READ_ONLY:
                        case TSqlParser.RECOMPILE:
                        case TSqlParser.RELATIVE:
                        case TSqlParser.REMOTE:
                        case TSqlParser.REPEATABLE:
                        case TSqlParser.ROBUST:
                        case TSqlParser.ROOT:
                        case TSqlParser.ROW:
                        case TSqlParser.ROWGUID:
                        case TSqlParser.ROWS:
                        case TSqlParser.ROW_NUMBER:
                        case TSqlParser.SAMPLE:
                        case TSqlParser.SCHEMABINDING:
                        case TSqlParser.SCROLL:
                        case TSqlParser.SCROLL_LOCKS:
                        case TSqlParser.SELF:
                        case TSqlParser.SERIALIZABLE:
                        case TSqlParser.SIMPLE:
                        case TSqlParser.SIZE:
                        case TSqlParser.SNAPSHOT:
                        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                        case TSqlParser.STATIC:
                        case TSqlParser.STATS_STREAM:
                        case TSqlParser.STDEV:
                        case TSqlParser.STDEVP:
                        case TSqlParser.SUM:
                        case TSqlParser.TEXTIMAGE_ON:
                        case TSqlParser.THROW:
                        case TSqlParser.TIES:
                        case TSqlParser.TIME:
                        case TSqlParser.TRY:
                        case TSqlParser.TYPE:
                        case TSqlParser.TYPE_WARNING:
                        case TSqlParser.UNBOUNDED:
                        case TSqlParser.UNCOMMITTED:
                        case TSqlParser.UNKNOWN:
                        case TSqlParser.USING:
                        case TSqlParser.VALUE:
                        case TSqlParser.VAR:
                        case TSqlParser.VARP:
                        case TSqlParser.VIEWS:
                        case TSqlParser.VIEW_METADATA:
                        case TSqlParser.WORK:
                        case TSqlParser.XML:
                        case TSqlParser.XMLNAMESPACES:
                        case TSqlParser.DOUBLE_QUOTE_ID:
                        case TSqlParser.SQUARE_BRACKET_ID:
                        case TSqlParser.ID:
                            this.state = 7371;
                            this.id();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        }
                        break;

                    case 5:
                        this.state = 7375;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7374;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7377;
                        this.match(TSqlParser.NAME);
                        this.state = 7378;
                        this.match(TSqlParser.EQUAL);
                        this.state = 7379;
                        localctx.backup_set_name = this.id();
                        break;

                    case 6:
                        this.state = 7381;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7380;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7383;
                        this.match(TSqlParser.CREDENTIAL);
                        break;

                    case 7:
                        this.state = 7385;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7384;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7387;
                        this.match(TSqlParser.FILE_SNAPSHOT);
                        break;

                    case 8:
                        this.state = 7389;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7388;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7403;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case TSqlParser.EXPIREDATE:
                            this.state = 7391;
                            this.match(TSqlParser.EXPIREDATE);
                            this.state = 7392;
                            this.match(TSqlParser.EQUAL);
                            this.state = 7395;
                            this._errHandler.sync(this);
                            switch(this._input.LA(1)) {
                            case TSqlParser.STRING:
                                this.state = 7393;
                                this.match(TSqlParser.STRING);
                                break;
                            case TSqlParser.CALLED:
                            case TSqlParser.DATA_COMPRESSION:
                            case TSqlParser.EVENTDATA:
                            case TSqlParser.FILENAME:
                            case TSqlParser.FILLFACTOR:
                            case TSqlParser.FORCESEEK:
                            case TSqlParser.KEY:
                            case TSqlParser.MASTER:
                            case TSqlParser.MAX_MEMORY:
                            case TSqlParser.OFFSETS:
                            case TSqlParser.PAGE:
                            case TSqlParser.PUBLIC:
                            case TSqlParser.RAW:
                            case TSqlParser.RETURN:
                            case TSqlParser.RETURNS:
                            case TSqlParser.ROWCOUNT:
                            case TSqlParser.SAFETY:
                            case TSqlParser.SERVER:
                            case TSqlParser.SID:
                            case TSqlParser.SOURCE:
                            case TSqlParser.STATE:
                            case TSqlParser.TARGET:
                            case TSqlParser.ABSOLUTE:
                            case TSqlParser.ACTIVE:
                            case TSqlParser.ADDRESS:
                            case TSqlParser.APPLY:
                            case TSqlParser.AUTO:
                            case TSqlParser.AVAILABILITY:
                            case TSqlParser.AVG:
                            case TSqlParser.CALLER:
                            case TSqlParser.CAST:
                            case TSqlParser.CATCH:
                            case TSqlParser.CHECKSUM_AGG:
                            case TSqlParser.COMMITTED:
                            case TSqlParser.CONCAT:
                            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                            case TSqlParser.CONTROL:
                            case TSqlParser.COOKIE:
                            case TSqlParser.COUNT:
                            case TSqlParser.COUNTER:
                            case TSqlParser.COUNT_BIG:
                            case TSqlParser.DELAY:
                            case TSqlParser.DELETED:
                            case TSqlParser.DENSE_RANK:
                            case TSqlParser.DISABLE:
                            case TSqlParser.DYNAMIC:
                            case TSqlParser.ENCRYPTION:
                            case TSqlParser.EXPAND:
                            case TSqlParser.FAST:
                            case TSqlParser.FAST_FORWARD:
                            case TSqlParser.FIRST:
                            case TSqlParser.FOLLOWING:
                            case TSqlParser.FORCE:
                            case TSqlParser.FORCED:
                            case TSqlParser.FORWARD_ONLY:
                            case TSqlParser.FULLSCAN:
                            case TSqlParser.GLOBAL:
                            case TSqlParser.GROUPING:
                            case TSqlParser.GROUPING_ID:
                            case TSqlParser.HASH:
                            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                            case TSqlParser.IMPERSONATE:
                            case TSqlParser.INPUT:
                            case TSqlParser.INSENSITIVE:
                            case TSqlParser.INSERTED:
                            case TSqlParser.ISOLATION:
                            case TSqlParser.KEEP:
                            case TSqlParser.KEEPFIXED:
                            case TSqlParser.KEYSET:
                            case TSqlParser.LAST:
                            case TSqlParser.LEVEL:
                            case TSqlParser.LOCAL:
                            case TSqlParser.LOCATION:
                            case TSqlParser.LOCK_ESCALATION:
                            case TSqlParser.LOGIN:
                            case TSqlParser.LOOP:
                            case TSqlParser.MARK:
                            case TSqlParser.MAX:
                            case TSqlParser.MAX_ROLLOVER_FILES:
                            case TSqlParser.MAXDOP:
                            case TSqlParser.MAXRECURSION:
                            case TSqlParser.MIN:
                            case TSqlParser.MODIFY:
                            case TSqlParser.NAME:
                            case TSqlParser.NEXT:
                            case TSqlParser.NOCOUNT:
                            case TSqlParser.NOEXPAND:
                            case TSqlParser.NORECOMPUTE:
                            case TSqlParser.NTILE:
                            case TSqlParser.NUMBER:
                            case TSqlParser.OFFSET:
                            case TSqlParser.ONLINE:
                            case TSqlParser.ONLY:
                            case TSqlParser.OPTIMISTIC:
                            case TSqlParser.OPTIMIZE:
                            case TSqlParser.OUT:
                            case TSqlParser.OUTPUT:
                            case TSqlParser.OWNER:
                            case TSqlParser.PARAMETERIZATION:
                            case TSqlParser.PARTITION:
                            case TSqlParser.PATH:
                            case TSqlParser.PRECEDING:
                            case TSqlParser.PRIOR:
                            case TSqlParser.PRIVILEGES:
                            case TSqlParser.RANGE:
                            case TSqlParser.RANK:
                            case TSqlParser.READONLY:
                            case TSqlParser.READ_ONLY:
                            case TSqlParser.RECOMPILE:
                            case TSqlParser.RELATIVE:
                            case TSqlParser.REMOTE:
                            case TSqlParser.REPEATABLE:
                            case TSqlParser.ROBUST:
                            case TSqlParser.ROOT:
                            case TSqlParser.ROW:
                            case TSqlParser.ROWGUID:
                            case TSqlParser.ROWS:
                            case TSqlParser.ROW_NUMBER:
                            case TSqlParser.SAMPLE:
                            case TSqlParser.SCHEMABINDING:
                            case TSqlParser.SCROLL:
                            case TSqlParser.SCROLL_LOCKS:
                            case TSqlParser.SELF:
                            case TSqlParser.SERIALIZABLE:
                            case TSqlParser.SIMPLE:
                            case TSqlParser.SIZE:
                            case TSqlParser.SNAPSHOT:
                            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                            case TSqlParser.STATIC:
                            case TSqlParser.STATS_STREAM:
                            case TSqlParser.STDEV:
                            case TSqlParser.STDEVP:
                            case TSqlParser.SUM:
                            case TSqlParser.TEXTIMAGE_ON:
                            case TSqlParser.THROW:
                            case TSqlParser.TIES:
                            case TSqlParser.TIME:
                            case TSqlParser.TRY:
                            case TSqlParser.TYPE:
                            case TSqlParser.TYPE_WARNING:
                            case TSqlParser.UNBOUNDED:
                            case TSqlParser.UNCOMMITTED:
                            case TSqlParser.UNKNOWN:
                            case TSqlParser.USING:
                            case TSqlParser.VALUE:
                            case TSqlParser.VAR:
                            case TSqlParser.VARP:
                            case TSqlParser.VIEWS:
                            case TSqlParser.VIEW_METADATA:
                            case TSqlParser.WORK:
                            case TSqlParser.XML:
                            case TSqlParser.XMLNAMESPACES:
                            case TSqlParser.DOUBLE_QUOTE_ID:
                            case TSqlParser.SQUARE_BRACKET_ID:
                            case TSqlParser.ID:
                                this.state = 7394;
                                this.id();
                                break;
                            default:
                                throw new antlr4.error.NoViableAltException(this);
                            }
                            break;
                        case TSqlParser.RETAINDAYS:
                            this.state = 7397;
                            this.match(TSqlParser.RETAINDAYS);
                            this.state = 7398;
                            this.match(TSqlParser.EQUAL);
                            this.state = 7401;
                            this._errHandler.sync(this);
                            switch(this._input.LA(1)) {
                            case TSqlParser.DECIMAL:
                                this.state = 7399;
                                this.match(TSqlParser.DECIMAL);
                                break;
                            case TSqlParser.CALLED:
                            case TSqlParser.DATA_COMPRESSION:
                            case TSqlParser.EVENTDATA:
                            case TSqlParser.FILENAME:
                            case TSqlParser.FILLFACTOR:
                            case TSqlParser.FORCESEEK:
                            case TSqlParser.KEY:
                            case TSqlParser.MASTER:
                            case TSqlParser.MAX_MEMORY:
                            case TSqlParser.OFFSETS:
                            case TSqlParser.PAGE:
                            case TSqlParser.PUBLIC:
                            case TSqlParser.RAW:
                            case TSqlParser.RETURN:
                            case TSqlParser.RETURNS:
                            case TSqlParser.ROWCOUNT:
                            case TSqlParser.SAFETY:
                            case TSqlParser.SERVER:
                            case TSqlParser.SID:
                            case TSqlParser.SOURCE:
                            case TSqlParser.STATE:
                            case TSqlParser.TARGET:
                            case TSqlParser.ABSOLUTE:
                            case TSqlParser.ACTIVE:
                            case TSqlParser.ADDRESS:
                            case TSqlParser.APPLY:
                            case TSqlParser.AUTO:
                            case TSqlParser.AVAILABILITY:
                            case TSqlParser.AVG:
                            case TSqlParser.CALLER:
                            case TSqlParser.CAST:
                            case TSqlParser.CATCH:
                            case TSqlParser.CHECKSUM_AGG:
                            case TSqlParser.COMMITTED:
                            case TSqlParser.CONCAT:
                            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                            case TSqlParser.CONTROL:
                            case TSqlParser.COOKIE:
                            case TSqlParser.COUNT:
                            case TSqlParser.COUNTER:
                            case TSqlParser.COUNT_BIG:
                            case TSqlParser.DELAY:
                            case TSqlParser.DELETED:
                            case TSqlParser.DENSE_RANK:
                            case TSqlParser.DISABLE:
                            case TSqlParser.DYNAMIC:
                            case TSqlParser.ENCRYPTION:
                            case TSqlParser.EXPAND:
                            case TSqlParser.FAST:
                            case TSqlParser.FAST_FORWARD:
                            case TSqlParser.FIRST:
                            case TSqlParser.FOLLOWING:
                            case TSqlParser.FORCE:
                            case TSqlParser.FORCED:
                            case TSqlParser.FORWARD_ONLY:
                            case TSqlParser.FULLSCAN:
                            case TSqlParser.GLOBAL:
                            case TSqlParser.GROUPING:
                            case TSqlParser.GROUPING_ID:
                            case TSqlParser.HASH:
                            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                            case TSqlParser.IMPERSONATE:
                            case TSqlParser.INPUT:
                            case TSqlParser.INSENSITIVE:
                            case TSqlParser.INSERTED:
                            case TSqlParser.ISOLATION:
                            case TSqlParser.KEEP:
                            case TSqlParser.KEEPFIXED:
                            case TSqlParser.KEYSET:
                            case TSqlParser.LAST:
                            case TSqlParser.LEVEL:
                            case TSqlParser.LOCAL:
                            case TSqlParser.LOCATION:
                            case TSqlParser.LOCK_ESCALATION:
                            case TSqlParser.LOGIN:
                            case TSqlParser.LOOP:
                            case TSqlParser.MARK:
                            case TSqlParser.MAX:
                            case TSqlParser.MAX_ROLLOVER_FILES:
                            case TSqlParser.MAXDOP:
                            case TSqlParser.MAXRECURSION:
                            case TSqlParser.MIN:
                            case TSqlParser.MODIFY:
                            case TSqlParser.NAME:
                            case TSqlParser.NEXT:
                            case TSqlParser.NOCOUNT:
                            case TSqlParser.NOEXPAND:
                            case TSqlParser.NORECOMPUTE:
                            case TSqlParser.NTILE:
                            case TSqlParser.NUMBER:
                            case TSqlParser.OFFSET:
                            case TSqlParser.ONLINE:
                            case TSqlParser.ONLY:
                            case TSqlParser.OPTIMISTIC:
                            case TSqlParser.OPTIMIZE:
                            case TSqlParser.OUT:
                            case TSqlParser.OUTPUT:
                            case TSqlParser.OWNER:
                            case TSqlParser.PARAMETERIZATION:
                            case TSqlParser.PARTITION:
                            case TSqlParser.PATH:
                            case TSqlParser.PRECEDING:
                            case TSqlParser.PRIOR:
                            case TSqlParser.PRIVILEGES:
                            case TSqlParser.RANGE:
                            case TSqlParser.RANK:
                            case TSqlParser.READONLY:
                            case TSqlParser.READ_ONLY:
                            case TSqlParser.RECOMPILE:
                            case TSqlParser.RELATIVE:
                            case TSqlParser.REMOTE:
                            case TSqlParser.REPEATABLE:
                            case TSqlParser.ROBUST:
                            case TSqlParser.ROOT:
                            case TSqlParser.ROW:
                            case TSqlParser.ROWGUID:
                            case TSqlParser.ROWS:
                            case TSqlParser.ROW_NUMBER:
                            case TSqlParser.SAMPLE:
                            case TSqlParser.SCHEMABINDING:
                            case TSqlParser.SCROLL:
                            case TSqlParser.SCROLL_LOCKS:
                            case TSqlParser.SELF:
                            case TSqlParser.SERIALIZABLE:
                            case TSqlParser.SIMPLE:
                            case TSqlParser.SIZE:
                            case TSqlParser.SNAPSHOT:
                            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                            case TSqlParser.STATIC:
                            case TSqlParser.STATS_STREAM:
                            case TSqlParser.STDEV:
                            case TSqlParser.STDEVP:
                            case TSqlParser.SUM:
                            case TSqlParser.TEXTIMAGE_ON:
                            case TSqlParser.THROW:
                            case TSqlParser.TIES:
                            case TSqlParser.TIME:
                            case TSqlParser.TRY:
                            case TSqlParser.TYPE:
                            case TSqlParser.TYPE_WARNING:
                            case TSqlParser.UNBOUNDED:
                            case TSqlParser.UNCOMMITTED:
                            case TSqlParser.UNKNOWN:
                            case TSqlParser.USING:
                            case TSqlParser.VALUE:
                            case TSqlParser.VAR:
                            case TSqlParser.VARP:
                            case TSqlParser.VIEWS:
                            case TSqlParser.VIEW_METADATA:
                            case TSqlParser.WORK:
                            case TSqlParser.XML:
                            case TSqlParser.XMLNAMESPACES:
                            case TSqlParser.DOUBLE_QUOTE_ID:
                            case TSqlParser.SQUARE_BRACKET_ID:
                            case TSqlParser.ID:
                                this.state = 7400;
                                this.id();
                                break;
                            default:
                                throw new antlr4.error.NoViableAltException(this);
                            }
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        }
                        break;

                    case 9:
                        this.state = 7406;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7405;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7408;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.INIT || _la===TSqlParser.NOINIT)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 10:
                        this.state = 7410;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7409;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7412;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.NOSKIP || _la===TSqlParser.SKIP_KEYWORD)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 11:
                        this.state = 7414;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7413;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7416;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.NOFORMAT || _la===TSqlParser.FORMAT)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 12:
                        this.state = 7418;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7417;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7420;
                        this.match(TSqlParser.MEDIADESCRIPTION);
                        this.state = 7421;
                        this.match(TSqlParser.EQUAL);
                        this.state = 7424;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case TSqlParser.STRING:
                            this.state = 7422;
                            this.match(TSqlParser.STRING);
                            break;
                        case TSqlParser.CALLED:
                        case TSqlParser.DATA_COMPRESSION:
                        case TSqlParser.EVENTDATA:
                        case TSqlParser.FILENAME:
                        case TSqlParser.FILLFACTOR:
                        case TSqlParser.FORCESEEK:
                        case TSqlParser.KEY:
                        case TSqlParser.MASTER:
                        case TSqlParser.MAX_MEMORY:
                        case TSqlParser.OFFSETS:
                        case TSqlParser.PAGE:
                        case TSqlParser.PUBLIC:
                        case TSqlParser.RAW:
                        case TSqlParser.RETURN:
                        case TSqlParser.RETURNS:
                        case TSqlParser.ROWCOUNT:
                        case TSqlParser.SAFETY:
                        case TSqlParser.SERVER:
                        case TSqlParser.SID:
                        case TSqlParser.SOURCE:
                        case TSqlParser.STATE:
                        case TSqlParser.TARGET:
                        case TSqlParser.ABSOLUTE:
                        case TSqlParser.ACTIVE:
                        case TSqlParser.ADDRESS:
                        case TSqlParser.APPLY:
                        case TSqlParser.AUTO:
                        case TSqlParser.AVAILABILITY:
                        case TSqlParser.AVG:
                        case TSqlParser.CALLER:
                        case TSqlParser.CAST:
                        case TSqlParser.CATCH:
                        case TSqlParser.CHECKSUM_AGG:
                        case TSqlParser.COMMITTED:
                        case TSqlParser.CONCAT:
                        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                        case TSqlParser.CONTROL:
                        case TSqlParser.COOKIE:
                        case TSqlParser.COUNT:
                        case TSqlParser.COUNTER:
                        case TSqlParser.COUNT_BIG:
                        case TSqlParser.DELAY:
                        case TSqlParser.DELETED:
                        case TSqlParser.DENSE_RANK:
                        case TSqlParser.DISABLE:
                        case TSqlParser.DYNAMIC:
                        case TSqlParser.ENCRYPTION:
                        case TSqlParser.EXPAND:
                        case TSqlParser.FAST:
                        case TSqlParser.FAST_FORWARD:
                        case TSqlParser.FIRST:
                        case TSqlParser.FOLLOWING:
                        case TSqlParser.FORCE:
                        case TSqlParser.FORCED:
                        case TSqlParser.FORWARD_ONLY:
                        case TSqlParser.FULLSCAN:
                        case TSqlParser.GLOBAL:
                        case TSqlParser.GROUPING:
                        case TSqlParser.GROUPING_ID:
                        case TSqlParser.HASH:
                        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                        case TSqlParser.IMPERSONATE:
                        case TSqlParser.INPUT:
                        case TSqlParser.INSENSITIVE:
                        case TSqlParser.INSERTED:
                        case TSqlParser.ISOLATION:
                        case TSqlParser.KEEP:
                        case TSqlParser.KEEPFIXED:
                        case TSqlParser.KEYSET:
                        case TSqlParser.LAST:
                        case TSqlParser.LEVEL:
                        case TSqlParser.LOCAL:
                        case TSqlParser.LOCATION:
                        case TSqlParser.LOCK_ESCALATION:
                        case TSqlParser.LOGIN:
                        case TSqlParser.LOOP:
                        case TSqlParser.MARK:
                        case TSqlParser.MAX:
                        case TSqlParser.MAX_ROLLOVER_FILES:
                        case TSqlParser.MAXDOP:
                        case TSqlParser.MAXRECURSION:
                        case TSqlParser.MIN:
                        case TSqlParser.MODIFY:
                        case TSqlParser.NAME:
                        case TSqlParser.NEXT:
                        case TSqlParser.NOCOUNT:
                        case TSqlParser.NOEXPAND:
                        case TSqlParser.NORECOMPUTE:
                        case TSqlParser.NTILE:
                        case TSqlParser.NUMBER:
                        case TSqlParser.OFFSET:
                        case TSqlParser.ONLINE:
                        case TSqlParser.ONLY:
                        case TSqlParser.OPTIMISTIC:
                        case TSqlParser.OPTIMIZE:
                        case TSqlParser.OUT:
                        case TSqlParser.OUTPUT:
                        case TSqlParser.OWNER:
                        case TSqlParser.PARAMETERIZATION:
                        case TSqlParser.PARTITION:
                        case TSqlParser.PATH:
                        case TSqlParser.PRECEDING:
                        case TSqlParser.PRIOR:
                        case TSqlParser.PRIVILEGES:
                        case TSqlParser.RANGE:
                        case TSqlParser.RANK:
                        case TSqlParser.READONLY:
                        case TSqlParser.READ_ONLY:
                        case TSqlParser.RECOMPILE:
                        case TSqlParser.RELATIVE:
                        case TSqlParser.REMOTE:
                        case TSqlParser.REPEATABLE:
                        case TSqlParser.ROBUST:
                        case TSqlParser.ROOT:
                        case TSqlParser.ROW:
                        case TSqlParser.ROWGUID:
                        case TSqlParser.ROWS:
                        case TSqlParser.ROW_NUMBER:
                        case TSqlParser.SAMPLE:
                        case TSqlParser.SCHEMABINDING:
                        case TSqlParser.SCROLL:
                        case TSqlParser.SCROLL_LOCKS:
                        case TSqlParser.SELF:
                        case TSqlParser.SERIALIZABLE:
                        case TSqlParser.SIMPLE:
                        case TSqlParser.SIZE:
                        case TSqlParser.SNAPSHOT:
                        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                        case TSqlParser.STATIC:
                        case TSqlParser.STATS_STREAM:
                        case TSqlParser.STDEV:
                        case TSqlParser.STDEVP:
                        case TSqlParser.SUM:
                        case TSqlParser.TEXTIMAGE_ON:
                        case TSqlParser.THROW:
                        case TSqlParser.TIES:
                        case TSqlParser.TIME:
                        case TSqlParser.TRY:
                        case TSqlParser.TYPE:
                        case TSqlParser.TYPE_WARNING:
                        case TSqlParser.UNBOUNDED:
                        case TSqlParser.UNCOMMITTED:
                        case TSqlParser.UNKNOWN:
                        case TSqlParser.USING:
                        case TSqlParser.VALUE:
                        case TSqlParser.VAR:
                        case TSqlParser.VARP:
                        case TSqlParser.VIEWS:
                        case TSqlParser.VIEW_METADATA:
                        case TSqlParser.WORK:
                        case TSqlParser.XML:
                        case TSqlParser.XMLNAMESPACES:
                        case TSqlParser.DOUBLE_QUOTE_ID:
                        case TSqlParser.SQUARE_BRACKET_ID:
                        case TSqlParser.ID:
                            this.state = 7423;
                            this.id();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        }
                        break;

                    case 13:
                        this.state = 7427;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7426;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7429;
                        this.match(TSqlParser.MEDIANAME);
                        this.state = 7430;
                        this.match(TSqlParser.EQUAL);

                        this.state = 7431;
                        localctx.medianame = this.match(TSqlParser.STRING);
                        break;

                    case 14:
                        this.state = 7433;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7432;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7435;
                        this.match(TSqlParser.BLOCKSIZE);
                        this.state = 7436;
                        this.match(TSqlParser.EQUAL);
                        this.state = 7439;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case TSqlParser.DECIMAL:
                            this.state = 7437;
                            this.match(TSqlParser.DECIMAL);
                            break;
                        case TSqlParser.CALLED:
                        case TSqlParser.DATA_COMPRESSION:
                        case TSqlParser.EVENTDATA:
                        case TSqlParser.FILENAME:
                        case TSqlParser.FILLFACTOR:
                        case TSqlParser.FORCESEEK:
                        case TSqlParser.KEY:
                        case TSqlParser.MASTER:
                        case TSqlParser.MAX_MEMORY:
                        case TSqlParser.OFFSETS:
                        case TSqlParser.PAGE:
                        case TSqlParser.PUBLIC:
                        case TSqlParser.RAW:
                        case TSqlParser.RETURN:
                        case TSqlParser.RETURNS:
                        case TSqlParser.ROWCOUNT:
                        case TSqlParser.SAFETY:
                        case TSqlParser.SERVER:
                        case TSqlParser.SID:
                        case TSqlParser.SOURCE:
                        case TSqlParser.STATE:
                        case TSqlParser.TARGET:
                        case TSqlParser.ABSOLUTE:
                        case TSqlParser.ACTIVE:
                        case TSqlParser.ADDRESS:
                        case TSqlParser.APPLY:
                        case TSqlParser.AUTO:
                        case TSqlParser.AVAILABILITY:
                        case TSqlParser.AVG:
                        case TSqlParser.CALLER:
                        case TSqlParser.CAST:
                        case TSqlParser.CATCH:
                        case TSqlParser.CHECKSUM_AGG:
                        case TSqlParser.COMMITTED:
                        case TSqlParser.CONCAT:
                        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                        case TSqlParser.CONTROL:
                        case TSqlParser.COOKIE:
                        case TSqlParser.COUNT:
                        case TSqlParser.COUNTER:
                        case TSqlParser.COUNT_BIG:
                        case TSqlParser.DELAY:
                        case TSqlParser.DELETED:
                        case TSqlParser.DENSE_RANK:
                        case TSqlParser.DISABLE:
                        case TSqlParser.DYNAMIC:
                        case TSqlParser.ENCRYPTION:
                        case TSqlParser.EXPAND:
                        case TSqlParser.FAST:
                        case TSqlParser.FAST_FORWARD:
                        case TSqlParser.FIRST:
                        case TSqlParser.FOLLOWING:
                        case TSqlParser.FORCE:
                        case TSqlParser.FORCED:
                        case TSqlParser.FORWARD_ONLY:
                        case TSqlParser.FULLSCAN:
                        case TSqlParser.GLOBAL:
                        case TSqlParser.GROUPING:
                        case TSqlParser.GROUPING_ID:
                        case TSqlParser.HASH:
                        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                        case TSqlParser.IMPERSONATE:
                        case TSqlParser.INPUT:
                        case TSqlParser.INSENSITIVE:
                        case TSqlParser.INSERTED:
                        case TSqlParser.ISOLATION:
                        case TSqlParser.KEEP:
                        case TSqlParser.KEEPFIXED:
                        case TSqlParser.KEYSET:
                        case TSqlParser.LAST:
                        case TSqlParser.LEVEL:
                        case TSqlParser.LOCAL:
                        case TSqlParser.LOCATION:
                        case TSqlParser.LOCK_ESCALATION:
                        case TSqlParser.LOGIN:
                        case TSqlParser.LOOP:
                        case TSqlParser.MARK:
                        case TSqlParser.MAX:
                        case TSqlParser.MAX_ROLLOVER_FILES:
                        case TSqlParser.MAXDOP:
                        case TSqlParser.MAXRECURSION:
                        case TSqlParser.MIN:
                        case TSqlParser.MODIFY:
                        case TSqlParser.NAME:
                        case TSqlParser.NEXT:
                        case TSqlParser.NOCOUNT:
                        case TSqlParser.NOEXPAND:
                        case TSqlParser.NORECOMPUTE:
                        case TSqlParser.NTILE:
                        case TSqlParser.NUMBER:
                        case TSqlParser.OFFSET:
                        case TSqlParser.ONLINE:
                        case TSqlParser.ONLY:
                        case TSqlParser.OPTIMISTIC:
                        case TSqlParser.OPTIMIZE:
                        case TSqlParser.OUT:
                        case TSqlParser.OUTPUT:
                        case TSqlParser.OWNER:
                        case TSqlParser.PARAMETERIZATION:
                        case TSqlParser.PARTITION:
                        case TSqlParser.PATH:
                        case TSqlParser.PRECEDING:
                        case TSqlParser.PRIOR:
                        case TSqlParser.PRIVILEGES:
                        case TSqlParser.RANGE:
                        case TSqlParser.RANK:
                        case TSqlParser.READONLY:
                        case TSqlParser.READ_ONLY:
                        case TSqlParser.RECOMPILE:
                        case TSqlParser.RELATIVE:
                        case TSqlParser.REMOTE:
                        case TSqlParser.REPEATABLE:
                        case TSqlParser.ROBUST:
                        case TSqlParser.ROOT:
                        case TSqlParser.ROW:
                        case TSqlParser.ROWGUID:
                        case TSqlParser.ROWS:
                        case TSqlParser.ROW_NUMBER:
                        case TSqlParser.SAMPLE:
                        case TSqlParser.SCHEMABINDING:
                        case TSqlParser.SCROLL:
                        case TSqlParser.SCROLL_LOCKS:
                        case TSqlParser.SELF:
                        case TSqlParser.SERIALIZABLE:
                        case TSqlParser.SIMPLE:
                        case TSqlParser.SIZE:
                        case TSqlParser.SNAPSHOT:
                        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                        case TSqlParser.STATIC:
                        case TSqlParser.STATS_STREAM:
                        case TSqlParser.STDEV:
                        case TSqlParser.STDEVP:
                        case TSqlParser.SUM:
                        case TSqlParser.TEXTIMAGE_ON:
                        case TSqlParser.THROW:
                        case TSqlParser.TIES:
                        case TSqlParser.TIME:
                        case TSqlParser.TRY:
                        case TSqlParser.TYPE:
                        case TSqlParser.TYPE_WARNING:
                        case TSqlParser.UNBOUNDED:
                        case TSqlParser.UNCOMMITTED:
                        case TSqlParser.UNKNOWN:
                        case TSqlParser.USING:
                        case TSqlParser.VALUE:
                        case TSqlParser.VAR:
                        case TSqlParser.VARP:
                        case TSqlParser.VIEWS:
                        case TSqlParser.VIEW_METADATA:
                        case TSqlParser.WORK:
                        case TSqlParser.XML:
                        case TSqlParser.XMLNAMESPACES:
                        case TSqlParser.DOUBLE_QUOTE_ID:
                        case TSqlParser.SQUARE_BRACKET_ID:
                        case TSqlParser.ID:
                            this.state = 7438;
                            this.id();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        }
                        break;

                    case 15:
                        this.state = 7442;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7441;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7444;
                        this.match(TSqlParser.BUFFERCOUNT);
                        this.state = 7445;
                        this.match(TSqlParser.EQUAL);
                        this.state = 7448;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case TSqlParser.DECIMAL:
                            this.state = 7446;
                            this.match(TSqlParser.DECIMAL);
                            break;
                        case TSqlParser.CALLED:
                        case TSqlParser.DATA_COMPRESSION:
                        case TSqlParser.EVENTDATA:
                        case TSqlParser.FILENAME:
                        case TSqlParser.FILLFACTOR:
                        case TSqlParser.FORCESEEK:
                        case TSqlParser.KEY:
                        case TSqlParser.MASTER:
                        case TSqlParser.MAX_MEMORY:
                        case TSqlParser.OFFSETS:
                        case TSqlParser.PAGE:
                        case TSqlParser.PUBLIC:
                        case TSqlParser.RAW:
                        case TSqlParser.RETURN:
                        case TSqlParser.RETURNS:
                        case TSqlParser.ROWCOUNT:
                        case TSqlParser.SAFETY:
                        case TSqlParser.SERVER:
                        case TSqlParser.SID:
                        case TSqlParser.SOURCE:
                        case TSqlParser.STATE:
                        case TSqlParser.TARGET:
                        case TSqlParser.ABSOLUTE:
                        case TSqlParser.ACTIVE:
                        case TSqlParser.ADDRESS:
                        case TSqlParser.APPLY:
                        case TSqlParser.AUTO:
                        case TSqlParser.AVAILABILITY:
                        case TSqlParser.AVG:
                        case TSqlParser.CALLER:
                        case TSqlParser.CAST:
                        case TSqlParser.CATCH:
                        case TSqlParser.CHECKSUM_AGG:
                        case TSqlParser.COMMITTED:
                        case TSqlParser.CONCAT:
                        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                        case TSqlParser.CONTROL:
                        case TSqlParser.COOKIE:
                        case TSqlParser.COUNT:
                        case TSqlParser.COUNTER:
                        case TSqlParser.COUNT_BIG:
                        case TSqlParser.DELAY:
                        case TSqlParser.DELETED:
                        case TSqlParser.DENSE_RANK:
                        case TSqlParser.DISABLE:
                        case TSqlParser.DYNAMIC:
                        case TSqlParser.ENCRYPTION:
                        case TSqlParser.EXPAND:
                        case TSqlParser.FAST:
                        case TSqlParser.FAST_FORWARD:
                        case TSqlParser.FIRST:
                        case TSqlParser.FOLLOWING:
                        case TSqlParser.FORCE:
                        case TSqlParser.FORCED:
                        case TSqlParser.FORWARD_ONLY:
                        case TSqlParser.FULLSCAN:
                        case TSqlParser.GLOBAL:
                        case TSqlParser.GROUPING:
                        case TSqlParser.GROUPING_ID:
                        case TSqlParser.HASH:
                        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                        case TSqlParser.IMPERSONATE:
                        case TSqlParser.INPUT:
                        case TSqlParser.INSENSITIVE:
                        case TSqlParser.INSERTED:
                        case TSqlParser.ISOLATION:
                        case TSqlParser.KEEP:
                        case TSqlParser.KEEPFIXED:
                        case TSqlParser.KEYSET:
                        case TSqlParser.LAST:
                        case TSqlParser.LEVEL:
                        case TSqlParser.LOCAL:
                        case TSqlParser.LOCATION:
                        case TSqlParser.LOCK_ESCALATION:
                        case TSqlParser.LOGIN:
                        case TSqlParser.LOOP:
                        case TSqlParser.MARK:
                        case TSqlParser.MAX:
                        case TSqlParser.MAX_ROLLOVER_FILES:
                        case TSqlParser.MAXDOP:
                        case TSqlParser.MAXRECURSION:
                        case TSqlParser.MIN:
                        case TSqlParser.MODIFY:
                        case TSqlParser.NAME:
                        case TSqlParser.NEXT:
                        case TSqlParser.NOCOUNT:
                        case TSqlParser.NOEXPAND:
                        case TSqlParser.NORECOMPUTE:
                        case TSqlParser.NTILE:
                        case TSqlParser.NUMBER:
                        case TSqlParser.OFFSET:
                        case TSqlParser.ONLINE:
                        case TSqlParser.ONLY:
                        case TSqlParser.OPTIMISTIC:
                        case TSqlParser.OPTIMIZE:
                        case TSqlParser.OUT:
                        case TSqlParser.OUTPUT:
                        case TSqlParser.OWNER:
                        case TSqlParser.PARAMETERIZATION:
                        case TSqlParser.PARTITION:
                        case TSqlParser.PATH:
                        case TSqlParser.PRECEDING:
                        case TSqlParser.PRIOR:
                        case TSqlParser.PRIVILEGES:
                        case TSqlParser.RANGE:
                        case TSqlParser.RANK:
                        case TSqlParser.READONLY:
                        case TSqlParser.READ_ONLY:
                        case TSqlParser.RECOMPILE:
                        case TSqlParser.RELATIVE:
                        case TSqlParser.REMOTE:
                        case TSqlParser.REPEATABLE:
                        case TSqlParser.ROBUST:
                        case TSqlParser.ROOT:
                        case TSqlParser.ROW:
                        case TSqlParser.ROWGUID:
                        case TSqlParser.ROWS:
                        case TSqlParser.ROW_NUMBER:
                        case TSqlParser.SAMPLE:
                        case TSqlParser.SCHEMABINDING:
                        case TSqlParser.SCROLL:
                        case TSqlParser.SCROLL_LOCKS:
                        case TSqlParser.SELF:
                        case TSqlParser.SERIALIZABLE:
                        case TSqlParser.SIMPLE:
                        case TSqlParser.SIZE:
                        case TSqlParser.SNAPSHOT:
                        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                        case TSqlParser.STATIC:
                        case TSqlParser.STATS_STREAM:
                        case TSqlParser.STDEV:
                        case TSqlParser.STDEVP:
                        case TSqlParser.SUM:
                        case TSqlParser.TEXTIMAGE_ON:
                        case TSqlParser.THROW:
                        case TSqlParser.TIES:
                        case TSqlParser.TIME:
                        case TSqlParser.TRY:
                        case TSqlParser.TYPE:
                        case TSqlParser.TYPE_WARNING:
                        case TSqlParser.UNBOUNDED:
                        case TSqlParser.UNCOMMITTED:
                        case TSqlParser.UNKNOWN:
                        case TSqlParser.USING:
                        case TSqlParser.VALUE:
                        case TSqlParser.VAR:
                        case TSqlParser.VARP:
                        case TSqlParser.VIEWS:
                        case TSqlParser.VIEW_METADATA:
                        case TSqlParser.WORK:
                        case TSqlParser.XML:
                        case TSqlParser.XMLNAMESPACES:
                        case TSqlParser.DOUBLE_QUOTE_ID:
                        case TSqlParser.SQUARE_BRACKET_ID:
                        case TSqlParser.ID:
                            this.state = 7447;
                            this.id();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        }
                        break;

                    case 16:
                        this.state = 7451;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7450;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7453;
                        this.match(TSqlParser.MAXTRANSFER);
                        this.state = 7454;
                        this.match(TSqlParser.EQUAL);
                        this.state = 7457;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case TSqlParser.DECIMAL:
                            this.state = 7455;
                            this.match(TSqlParser.DECIMAL);
                            break;
                        case TSqlParser.CALLED:
                        case TSqlParser.DATA_COMPRESSION:
                        case TSqlParser.EVENTDATA:
                        case TSqlParser.FILENAME:
                        case TSqlParser.FILLFACTOR:
                        case TSqlParser.FORCESEEK:
                        case TSqlParser.KEY:
                        case TSqlParser.MASTER:
                        case TSqlParser.MAX_MEMORY:
                        case TSqlParser.OFFSETS:
                        case TSqlParser.PAGE:
                        case TSqlParser.PUBLIC:
                        case TSqlParser.RAW:
                        case TSqlParser.RETURN:
                        case TSqlParser.RETURNS:
                        case TSqlParser.ROWCOUNT:
                        case TSqlParser.SAFETY:
                        case TSqlParser.SERVER:
                        case TSqlParser.SID:
                        case TSqlParser.SOURCE:
                        case TSqlParser.STATE:
                        case TSqlParser.TARGET:
                        case TSqlParser.ABSOLUTE:
                        case TSqlParser.ACTIVE:
                        case TSqlParser.ADDRESS:
                        case TSqlParser.APPLY:
                        case TSqlParser.AUTO:
                        case TSqlParser.AVAILABILITY:
                        case TSqlParser.AVG:
                        case TSqlParser.CALLER:
                        case TSqlParser.CAST:
                        case TSqlParser.CATCH:
                        case TSqlParser.CHECKSUM_AGG:
                        case TSqlParser.COMMITTED:
                        case TSqlParser.CONCAT:
                        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                        case TSqlParser.CONTROL:
                        case TSqlParser.COOKIE:
                        case TSqlParser.COUNT:
                        case TSqlParser.COUNTER:
                        case TSqlParser.COUNT_BIG:
                        case TSqlParser.DELAY:
                        case TSqlParser.DELETED:
                        case TSqlParser.DENSE_RANK:
                        case TSqlParser.DISABLE:
                        case TSqlParser.DYNAMIC:
                        case TSqlParser.ENCRYPTION:
                        case TSqlParser.EXPAND:
                        case TSqlParser.FAST:
                        case TSqlParser.FAST_FORWARD:
                        case TSqlParser.FIRST:
                        case TSqlParser.FOLLOWING:
                        case TSqlParser.FORCE:
                        case TSqlParser.FORCED:
                        case TSqlParser.FORWARD_ONLY:
                        case TSqlParser.FULLSCAN:
                        case TSqlParser.GLOBAL:
                        case TSqlParser.GROUPING:
                        case TSqlParser.GROUPING_ID:
                        case TSqlParser.HASH:
                        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                        case TSqlParser.IMPERSONATE:
                        case TSqlParser.INPUT:
                        case TSqlParser.INSENSITIVE:
                        case TSqlParser.INSERTED:
                        case TSqlParser.ISOLATION:
                        case TSqlParser.KEEP:
                        case TSqlParser.KEEPFIXED:
                        case TSqlParser.KEYSET:
                        case TSqlParser.LAST:
                        case TSqlParser.LEVEL:
                        case TSqlParser.LOCAL:
                        case TSqlParser.LOCATION:
                        case TSqlParser.LOCK_ESCALATION:
                        case TSqlParser.LOGIN:
                        case TSqlParser.LOOP:
                        case TSqlParser.MARK:
                        case TSqlParser.MAX:
                        case TSqlParser.MAX_ROLLOVER_FILES:
                        case TSqlParser.MAXDOP:
                        case TSqlParser.MAXRECURSION:
                        case TSqlParser.MIN:
                        case TSqlParser.MODIFY:
                        case TSqlParser.NAME:
                        case TSqlParser.NEXT:
                        case TSqlParser.NOCOUNT:
                        case TSqlParser.NOEXPAND:
                        case TSqlParser.NORECOMPUTE:
                        case TSqlParser.NTILE:
                        case TSqlParser.NUMBER:
                        case TSqlParser.OFFSET:
                        case TSqlParser.ONLINE:
                        case TSqlParser.ONLY:
                        case TSqlParser.OPTIMISTIC:
                        case TSqlParser.OPTIMIZE:
                        case TSqlParser.OUT:
                        case TSqlParser.OUTPUT:
                        case TSqlParser.OWNER:
                        case TSqlParser.PARAMETERIZATION:
                        case TSqlParser.PARTITION:
                        case TSqlParser.PATH:
                        case TSqlParser.PRECEDING:
                        case TSqlParser.PRIOR:
                        case TSqlParser.PRIVILEGES:
                        case TSqlParser.RANGE:
                        case TSqlParser.RANK:
                        case TSqlParser.READONLY:
                        case TSqlParser.READ_ONLY:
                        case TSqlParser.RECOMPILE:
                        case TSqlParser.RELATIVE:
                        case TSqlParser.REMOTE:
                        case TSqlParser.REPEATABLE:
                        case TSqlParser.ROBUST:
                        case TSqlParser.ROOT:
                        case TSqlParser.ROW:
                        case TSqlParser.ROWGUID:
                        case TSqlParser.ROWS:
                        case TSqlParser.ROW_NUMBER:
                        case TSqlParser.SAMPLE:
                        case TSqlParser.SCHEMABINDING:
                        case TSqlParser.SCROLL:
                        case TSqlParser.SCROLL_LOCKS:
                        case TSqlParser.SELF:
                        case TSqlParser.SERIALIZABLE:
                        case TSqlParser.SIMPLE:
                        case TSqlParser.SIZE:
                        case TSqlParser.SNAPSHOT:
                        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                        case TSqlParser.STATIC:
                        case TSqlParser.STATS_STREAM:
                        case TSqlParser.STDEV:
                        case TSqlParser.STDEVP:
                        case TSqlParser.SUM:
                        case TSqlParser.TEXTIMAGE_ON:
                        case TSqlParser.THROW:
                        case TSqlParser.TIES:
                        case TSqlParser.TIME:
                        case TSqlParser.TRY:
                        case TSqlParser.TYPE:
                        case TSqlParser.TYPE_WARNING:
                        case TSqlParser.UNBOUNDED:
                        case TSqlParser.UNCOMMITTED:
                        case TSqlParser.UNKNOWN:
                        case TSqlParser.USING:
                        case TSqlParser.VALUE:
                        case TSqlParser.VAR:
                        case TSqlParser.VARP:
                        case TSqlParser.VIEWS:
                        case TSqlParser.VIEW_METADATA:
                        case TSqlParser.WORK:
                        case TSqlParser.XML:
                        case TSqlParser.XMLNAMESPACES:
                        case TSqlParser.DOUBLE_QUOTE_ID:
                        case TSqlParser.SQUARE_BRACKET_ID:
                        case TSqlParser.ID:
                            this.state = 7456;
                            this.id();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        }
                        break;

                    case 17:
                        this.state = 7460;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7459;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7462;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.NO_CHECKSUM || _la===TSqlParser.CHECKSUM)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 18:
                        this.state = 7464;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7463;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7466;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.CONTINUE_AFTER_ERROR || _la===TSqlParser.STOP_ON_ERROR)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 19:
                        this.state = 7468;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7467;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7470;
                        this.match(TSqlParser.RESTART);
                        break;

                    case 20:
                        this.state = 7472;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7471;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7474;
                        this.match(TSqlParser.STATS);
                        this.state = 7477;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.EQUAL) {
                            this.state = 7475;
                            this.match(TSqlParser.EQUAL);
                            this.state = 7476;
                            localctx.stats_percent = this.match(TSqlParser.DECIMAL);
                        }

                        break;

                    case 21:
                        this.state = 7480;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7479;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7482;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.NOREWIND || _la===TSqlParser.REWIND)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 22:
                        this.state = 7484;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7483;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7486;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.LOAD || _la===TSqlParser.NOUNLOAD)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 23:
                        this.state = 7488;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7487;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7490;
                        this.match(TSqlParser.ENCRYPTION);
                        this.state = 7491;
                        this.match(TSqlParser.LR_BRACKET);
                        this.state = 7492;
                        this.match(TSqlParser.ALGORITHM);
                        this.state = 7493;
                        this.match(TSqlParser.EQUAL);
                        this.state = 7494;
                        _la = this._input.LA(1);
                        if(!(((((_la - 388)) & ~0x1f) == 0 && ((1 << (_la - 388)) & ((1 << (TSqlParser.AES_128 - 388)) | (1 << (TSqlParser.AES_192 - 388)) | (1 << (TSqlParser.AES_256 - 388)))) !== 0) || _la===TSqlParser.TRIPLE_DES_3KEY)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 7495;
                        this.match(TSqlParser.COMMA);
                        this.state = 7496;
                        this.match(TSqlParser.SERVER);
                        this.state = 7497;
                        this.match(TSqlParser.CERTIFICATE);
                        this.state = 7498;
                        this.match(TSqlParser.EQUAL);
                        this.state = 7505;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input,1019,this._ctx);
                        switch(la_) {
                        case 1:
                            this.state = 7499;
                            localctx.encryptor_name = this.id();
                            break;

                        case 2:
                            this.state = 7500;
                            this.match(TSqlParser.SERVER);
                            this.state = 7501;
                            this.match(TSqlParser.ASYMMETRIC);
                            this.state = 7502;
                            this.match(TSqlParser.KEY);
                            this.state = 7503;
                            this.match(TSqlParser.EQUAL);
                            this.state = 7504;
                            localctx.encryptor_name = this.id();
                            break;

                        }
                        break;

                    } 
                }
                this.state = 7511;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,1021,this._ctx);
            }


        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Backup_logContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_backup_log;
    this.database_name = null; // IdContext
    this.logical_device_name = null; // IdContext
    this.backup_set_name = null; // IdContext
    this.medianame = null; // Token
    this.stats_percent = null; // Token
    this.undo_file_name = null; // Token
    this.encryptor_name = null; // IdContext
    return this;
}

Backup_logContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Backup_logContext.prototype.constructor = Backup_logContext;

Backup_logContext.prototype.BACKUP = function() {
    return this.getToken(TSqlParser.BACKUP, 0);
};

Backup_logContext.prototype.LOG = function() {
    return this.getToken(TSqlParser.LOG, 0);
};

Backup_logContext.prototype.TO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.TO);
    } else {
        return this.getToken(TSqlParser.TO, i);
    }
};


Backup_logContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Backup_logContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Backup_logContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Backup_logContext.prototype.DISK = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DISK);
    } else {
        return this.getToken(TSqlParser.DISK, i);
    }
};


Backup_logContext.prototype.TAPE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.TAPE);
    } else {
        return this.getToken(TSqlParser.TAPE, i);
    }
};


Backup_logContext.prototype.URL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.URL);
    } else {
        return this.getToken(TSqlParser.URL, i);
    }
};


Backup_logContext.prototype.MIRROR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MIRROR);
    } else {
        return this.getToken(TSqlParser.MIRROR, i);
    }
};


Backup_logContext.prototype.DIFFERENTIAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DIFFERENTIAL);
    } else {
        return this.getToken(TSqlParser.DIFFERENTIAL, i);
    }
};


Backup_logContext.prototype.COPY_ONLY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COPY_ONLY);
    } else {
        return this.getToken(TSqlParser.COPY_ONLY, i);
    }
};


Backup_logContext.prototype.DESCRIPTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DESCRIPTION);
    } else {
        return this.getToken(TSqlParser.DESCRIPTION, i);
    }
};


Backup_logContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NAME);
    } else {
        return this.getToken(TSqlParser.NAME, i);
    }
};


Backup_logContext.prototype.CREDENTIAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.CREDENTIAL);
    } else {
        return this.getToken(TSqlParser.CREDENTIAL, i);
    }
};


Backup_logContext.prototype.FILE_SNAPSHOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.FILE_SNAPSHOT);
    } else {
        return this.getToken(TSqlParser.FILE_SNAPSHOT, i);
    }
};


Backup_logContext.prototype.MEDIADESCRIPTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MEDIADESCRIPTION);
    } else {
        return this.getToken(TSqlParser.MEDIADESCRIPTION, i);
    }
};


Backup_logContext.prototype.MEDIANAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MEDIANAME);
    } else {
        return this.getToken(TSqlParser.MEDIANAME, i);
    }
};


Backup_logContext.prototype.BLOCKSIZE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.BLOCKSIZE);
    } else {
        return this.getToken(TSqlParser.BLOCKSIZE, i);
    }
};


Backup_logContext.prototype.BUFFERCOUNT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.BUFFERCOUNT);
    } else {
        return this.getToken(TSqlParser.BUFFERCOUNT, i);
    }
};


Backup_logContext.prototype.MAXTRANSFER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.MAXTRANSFER);
    } else {
        return this.getToken(TSqlParser.MAXTRANSFER, i);
    }
};


Backup_logContext.prototype.RESTART = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RESTART);
    } else {
        return this.getToken(TSqlParser.RESTART, i);
    }
};


Backup_logContext.prototype.STATS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STATS);
    } else {
        return this.getToken(TSqlParser.STATS, i);
    }
};


Backup_logContext.prototype.NO_TRUNCATE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NO_TRUNCATE);
    } else {
        return this.getToken(TSqlParser.NO_TRUNCATE, i);
    }
};


Backup_logContext.prototype.ENCRYPTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ENCRYPTION);
    } else {
        return this.getToken(TSqlParser.ENCRYPTION, i);
    }
};


Backup_logContext.prototype.LR_BRACKET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LR_BRACKET);
    } else {
        return this.getToken(TSqlParser.LR_BRACKET, i);
    }
};


Backup_logContext.prototype.ALGORITHM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ALGORITHM);
    } else {
        return this.getToken(TSqlParser.ALGORITHM, i);
    }
};


Backup_logContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Backup_logContext.prototype.SERVER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SERVER);
    } else {
        return this.getToken(TSqlParser.SERVER, i);
    }
};


Backup_logContext.prototype.CERTIFICATE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.CERTIFICATE);
    } else {
        return this.getToken(TSqlParser.CERTIFICATE, i);
    }
};


Backup_logContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Backup_logContext.prototype.COMPRESSION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMPRESSION);
    } else {
        return this.getToken(TSqlParser.COMPRESSION, i);
    }
};


Backup_logContext.prototype.NO_COMPRESSION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NO_COMPRESSION);
    } else {
        return this.getToken(TSqlParser.NO_COMPRESSION, i);
    }
};


Backup_logContext.prototype.NOINIT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NOINIT);
    } else {
        return this.getToken(TSqlParser.NOINIT, i);
    }
};


Backup_logContext.prototype.INIT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.INIT);
    } else {
        return this.getToken(TSqlParser.INIT, i);
    }
};


Backup_logContext.prototype.NOSKIP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NOSKIP);
    } else {
        return this.getToken(TSqlParser.NOSKIP, i);
    }
};


Backup_logContext.prototype.SKIP_KEYWORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SKIP_KEYWORD);
    } else {
        return this.getToken(TSqlParser.SKIP_KEYWORD, i);
    }
};


Backup_logContext.prototype.NOFORMAT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NOFORMAT);
    } else {
        return this.getToken(TSqlParser.NOFORMAT, i);
    }
};


Backup_logContext.prototype.FORMAT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.FORMAT);
    } else {
        return this.getToken(TSqlParser.FORMAT, i);
    }
};


Backup_logContext.prototype.NO_CHECKSUM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NO_CHECKSUM);
    } else {
        return this.getToken(TSqlParser.NO_CHECKSUM, i);
    }
};


Backup_logContext.prototype.CHECKSUM = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.CHECKSUM);
    } else {
        return this.getToken(TSqlParser.CHECKSUM, i);
    }
};


Backup_logContext.prototype.STOP_ON_ERROR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STOP_ON_ERROR);
    } else {
        return this.getToken(TSqlParser.STOP_ON_ERROR, i);
    }
};


Backup_logContext.prototype.CONTINUE_AFTER_ERROR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.CONTINUE_AFTER_ERROR);
    } else {
        return this.getToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
    }
};


Backup_logContext.prototype.REWIND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.REWIND);
    } else {
        return this.getToken(TSqlParser.REWIND, i);
    }
};


Backup_logContext.prototype.NOREWIND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NOREWIND);
    } else {
        return this.getToken(TSqlParser.NOREWIND, i);
    }
};


Backup_logContext.prototype.LOAD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LOAD);
    } else {
        return this.getToken(TSqlParser.LOAD, i);
    }
};


Backup_logContext.prototype.NOUNLOAD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NOUNLOAD);
    } else {
        return this.getToken(TSqlParser.NOUNLOAD, i);
    }
};


Backup_logContext.prototype.AES_128 = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.AES_128);
    } else {
        return this.getToken(TSqlParser.AES_128, i);
    }
};


Backup_logContext.prototype.AES_192 = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.AES_192);
    } else {
        return this.getToken(TSqlParser.AES_192, i);
    }
};


Backup_logContext.prototype.AES_256 = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.AES_256);
    } else {
        return this.getToken(TSqlParser.AES_256, i);
    }
};


Backup_logContext.prototype.TRIPLE_DES_3KEY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.TRIPLE_DES_3KEY);
    } else {
        return this.getToken(TSqlParser.TRIPLE_DES_3KEY, i);
    }
};


Backup_logContext.prototype.EXPIREDATE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EXPIREDATE);
    } else {
        return this.getToken(TSqlParser.EXPIREDATE, i);
    }
};


Backup_logContext.prototype.RETAINDAYS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.RETAINDAYS);
    } else {
        return this.getToken(TSqlParser.RETAINDAYS, i);
    }
};


Backup_logContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Backup_logContext.prototype.NORECOVERY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.NORECOVERY);
    } else {
        return this.getToken(TSqlParser.NORECOVERY, i);
    }
};


Backup_logContext.prototype.STANDBY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STANDBY);
    } else {
        return this.getToken(TSqlParser.STANDBY, i);
    }
};


Backup_logContext.prototype.ASYMMETRIC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ASYMMETRIC);
    } else {
        return this.getToken(TSqlParser.ASYMMETRIC, i);
    }
};


Backup_logContext.prototype.KEY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.KEY);
    } else {
        return this.getToken(TSqlParser.KEY, i);
    }
};


Backup_logContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterBackup_log(this);
	}
};

Backup_logContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitBackup_log(this);
	}
};




TSqlParser.Backup_logContext = Backup_logContext;

TSqlParser.prototype.backup_log = function() {

    var localctx = new Backup_logContext(this, this._ctx, this.state);
    this.enterRule(localctx, 610, TSqlParser.RULE_backup_log);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7514;
        this.match(TSqlParser.BACKUP);
        this.state = 7515;
        this.match(TSqlParser.LOG);

        this.state = 7516;
        localctx.database_name = this.id();
        this.state = 7540;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1028,this._ctx);
        switch(la_) {
        case 1:
            this.state = 7517;
            this.match(TSqlParser.TO);
            this.state = 7522; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 7519;
            		this._errHandler.sync(this);
            		_la = this._input.LA(1);
            		if(_la===TSqlParser.COMMA) {
            		    this.state = 7518;
            		    this.match(TSqlParser.COMMA);
            		}

            		this.state = 7521;
            		localctx.logical_device_name = this.id();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 7524; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,1024, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 2:
            this.state = 7526;
            this.match(TSqlParser.TO);
            this.state = 7536; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 7528;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 7527;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 7530;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.DISK || _la===TSqlParser.TAPE || _la===TSqlParser.URL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7531;
                this.match(TSqlParser.EQUAL);
                this.state = 7534;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.STRING:
                    this.state = 7532;
                    this.match(TSqlParser.STRING);
                    break;
                case TSqlParser.CALLED:
                case TSqlParser.DATA_COMPRESSION:
                case TSqlParser.EVENTDATA:
                case TSqlParser.FILENAME:
                case TSqlParser.FILLFACTOR:
                case TSqlParser.FORCESEEK:
                case TSqlParser.KEY:
                case TSqlParser.MASTER:
                case TSqlParser.MAX_MEMORY:
                case TSqlParser.OFFSETS:
                case TSqlParser.PAGE:
                case TSqlParser.PUBLIC:
                case TSqlParser.RAW:
                case TSqlParser.RETURN:
                case TSqlParser.RETURNS:
                case TSqlParser.ROWCOUNT:
                case TSqlParser.SAFETY:
                case TSqlParser.SERVER:
                case TSqlParser.SID:
                case TSqlParser.SOURCE:
                case TSqlParser.STATE:
                case TSqlParser.TARGET:
                case TSqlParser.ABSOLUTE:
                case TSqlParser.ACTIVE:
                case TSqlParser.ADDRESS:
                case TSqlParser.APPLY:
                case TSqlParser.AUTO:
                case TSqlParser.AVAILABILITY:
                case TSqlParser.AVG:
                case TSqlParser.CALLER:
                case TSqlParser.CAST:
                case TSqlParser.CATCH:
                case TSqlParser.CHECKSUM_AGG:
                case TSqlParser.COMMITTED:
                case TSqlParser.CONCAT:
                case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                case TSqlParser.CONTROL:
                case TSqlParser.COOKIE:
                case TSqlParser.COUNT:
                case TSqlParser.COUNTER:
                case TSqlParser.COUNT_BIG:
                case TSqlParser.DELAY:
                case TSqlParser.DELETED:
                case TSqlParser.DENSE_RANK:
                case TSqlParser.DISABLE:
                case TSqlParser.DYNAMIC:
                case TSqlParser.ENCRYPTION:
                case TSqlParser.EXPAND:
                case TSqlParser.FAST:
                case TSqlParser.FAST_FORWARD:
                case TSqlParser.FIRST:
                case TSqlParser.FOLLOWING:
                case TSqlParser.FORCE:
                case TSqlParser.FORCED:
                case TSqlParser.FORWARD_ONLY:
                case TSqlParser.FULLSCAN:
                case TSqlParser.GLOBAL:
                case TSqlParser.GROUPING:
                case TSqlParser.GROUPING_ID:
                case TSqlParser.HASH:
                case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                case TSqlParser.IMPERSONATE:
                case TSqlParser.INPUT:
                case TSqlParser.INSENSITIVE:
                case TSqlParser.INSERTED:
                case TSqlParser.ISOLATION:
                case TSqlParser.KEEP:
                case TSqlParser.KEEPFIXED:
                case TSqlParser.KEYSET:
                case TSqlParser.LAST:
                case TSqlParser.LEVEL:
                case TSqlParser.LOCAL:
                case TSqlParser.LOCATION:
                case TSqlParser.LOCK_ESCALATION:
                case TSqlParser.LOGIN:
                case TSqlParser.LOOP:
                case TSqlParser.MARK:
                case TSqlParser.MAX:
                case TSqlParser.MAX_ROLLOVER_FILES:
                case TSqlParser.MAXDOP:
                case TSqlParser.MAXRECURSION:
                case TSqlParser.MIN:
                case TSqlParser.MODIFY:
                case TSqlParser.NAME:
                case TSqlParser.NEXT:
                case TSqlParser.NOCOUNT:
                case TSqlParser.NOEXPAND:
                case TSqlParser.NORECOMPUTE:
                case TSqlParser.NTILE:
                case TSqlParser.NUMBER:
                case TSqlParser.OFFSET:
                case TSqlParser.ONLINE:
                case TSqlParser.ONLY:
                case TSqlParser.OPTIMISTIC:
                case TSqlParser.OPTIMIZE:
                case TSqlParser.OUT:
                case TSqlParser.OUTPUT:
                case TSqlParser.OWNER:
                case TSqlParser.PARAMETERIZATION:
                case TSqlParser.PARTITION:
                case TSqlParser.PATH:
                case TSqlParser.PRECEDING:
                case TSqlParser.PRIOR:
                case TSqlParser.PRIVILEGES:
                case TSqlParser.RANGE:
                case TSqlParser.RANK:
                case TSqlParser.READONLY:
                case TSqlParser.READ_ONLY:
                case TSqlParser.RECOMPILE:
                case TSqlParser.RELATIVE:
                case TSqlParser.REMOTE:
                case TSqlParser.REPEATABLE:
                case TSqlParser.ROBUST:
                case TSqlParser.ROOT:
                case TSqlParser.ROW:
                case TSqlParser.ROWGUID:
                case TSqlParser.ROWS:
                case TSqlParser.ROW_NUMBER:
                case TSqlParser.SAMPLE:
                case TSqlParser.SCHEMABINDING:
                case TSqlParser.SCROLL:
                case TSqlParser.SCROLL_LOCKS:
                case TSqlParser.SELF:
                case TSqlParser.SERIALIZABLE:
                case TSqlParser.SIMPLE:
                case TSqlParser.SIZE:
                case TSqlParser.SNAPSHOT:
                case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                case TSqlParser.STATIC:
                case TSqlParser.STATS_STREAM:
                case TSqlParser.STDEV:
                case TSqlParser.STDEVP:
                case TSqlParser.SUM:
                case TSqlParser.TEXTIMAGE_ON:
                case TSqlParser.THROW:
                case TSqlParser.TIES:
                case TSqlParser.TIME:
                case TSqlParser.TRY:
                case TSqlParser.TYPE:
                case TSqlParser.TYPE_WARNING:
                case TSqlParser.UNBOUNDED:
                case TSqlParser.UNCOMMITTED:
                case TSqlParser.UNKNOWN:
                case TSqlParser.USING:
                case TSqlParser.VALUE:
                case TSqlParser.VAR:
                case TSqlParser.VARP:
                case TSqlParser.VIEWS:
                case TSqlParser.VIEW_METADATA:
                case TSqlParser.WORK:
                case TSqlParser.XML:
                case TSqlParser.XMLNAMESPACES:
                case TSqlParser.DOUBLE_QUOTE_ID:
                case TSqlParser.SQUARE_BRACKET_ID:
                case TSqlParser.ID:
                    this.state = 7533;
                    this.id();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 7538; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.DISK || _la===TSqlParser.TAPE || _la===TSqlParser.URL || _la===TSqlParser.COMMA);
            break;

        }
        this.state = 7575;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1036,this._ctx);
        if(la_===1) {
            this.state = 7552; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 7542;
                this.match(TSqlParser.MIRROR);
                this.state = 7543;
                this.match(TSqlParser.TO);
                this.state = 7548; 
                this._errHandler.sync(this);
                var _alt = 1;
                do {
                	switch (_alt) {
                	case 1:
                		this.state = 7545;
                		this._errHandler.sync(this);
                		_la = this._input.LA(1);
                		if(_la===TSqlParser.COMMA) {
                		    this.state = 7544;
                		    this.match(TSqlParser.COMMA);
                		}

                		this.state = 7547;
                		localctx.logical_device_name = this.id();
                		break;
                	default:
                		throw new antlr4.error.NoViableAltException(this);
                	}
                	this.state = 7550; 
                	this._errHandler.sync(this);
                	_alt = this._interp.adaptivePredict(this._input,1030, this._ctx);
                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
                this.state = 7554; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.MIRROR);

        } else if(la_===2) {
            this.state = 7571; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 7556;
                this.match(TSqlParser.MIRROR);
                this.state = 7557;
                this.match(TSqlParser.TO);
                this.state = 7567; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 7559;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 7558;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 7561;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.DISK || _la===TSqlParser.TAPE || _la===TSqlParser.URL)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 7562;
                    this.match(TSqlParser.EQUAL);
                    this.state = 7565;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case TSqlParser.STRING:
                        this.state = 7563;
                        this.match(TSqlParser.STRING);
                        break;
                    case TSqlParser.CALLED:
                    case TSqlParser.DATA_COMPRESSION:
                    case TSqlParser.EVENTDATA:
                    case TSqlParser.FILENAME:
                    case TSqlParser.FILLFACTOR:
                    case TSqlParser.FORCESEEK:
                    case TSqlParser.KEY:
                    case TSqlParser.MASTER:
                    case TSqlParser.MAX_MEMORY:
                    case TSqlParser.OFFSETS:
                    case TSqlParser.PAGE:
                    case TSqlParser.PUBLIC:
                    case TSqlParser.RAW:
                    case TSqlParser.RETURN:
                    case TSqlParser.RETURNS:
                    case TSqlParser.ROWCOUNT:
                    case TSqlParser.SAFETY:
                    case TSqlParser.SERVER:
                    case TSqlParser.SID:
                    case TSqlParser.SOURCE:
                    case TSqlParser.STATE:
                    case TSqlParser.TARGET:
                    case TSqlParser.ABSOLUTE:
                    case TSqlParser.ACTIVE:
                    case TSqlParser.ADDRESS:
                    case TSqlParser.APPLY:
                    case TSqlParser.AUTO:
                    case TSqlParser.AVAILABILITY:
                    case TSqlParser.AVG:
                    case TSqlParser.CALLER:
                    case TSqlParser.CAST:
                    case TSqlParser.CATCH:
                    case TSqlParser.CHECKSUM_AGG:
                    case TSqlParser.COMMITTED:
                    case TSqlParser.CONCAT:
                    case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                    case TSqlParser.CONTROL:
                    case TSqlParser.COOKIE:
                    case TSqlParser.COUNT:
                    case TSqlParser.COUNTER:
                    case TSqlParser.COUNT_BIG:
                    case TSqlParser.DELAY:
                    case TSqlParser.DELETED:
                    case TSqlParser.DENSE_RANK:
                    case TSqlParser.DISABLE:
                    case TSqlParser.DYNAMIC:
                    case TSqlParser.ENCRYPTION:
                    case TSqlParser.EXPAND:
                    case TSqlParser.FAST:
                    case TSqlParser.FAST_FORWARD:
                    case TSqlParser.FIRST:
                    case TSqlParser.FOLLOWING:
                    case TSqlParser.FORCE:
                    case TSqlParser.FORCED:
                    case TSqlParser.FORWARD_ONLY:
                    case TSqlParser.FULLSCAN:
                    case TSqlParser.GLOBAL:
                    case TSqlParser.GROUPING:
                    case TSqlParser.GROUPING_ID:
                    case TSqlParser.HASH:
                    case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                    case TSqlParser.IMPERSONATE:
                    case TSqlParser.INPUT:
                    case TSqlParser.INSENSITIVE:
                    case TSqlParser.INSERTED:
                    case TSqlParser.ISOLATION:
                    case TSqlParser.KEEP:
                    case TSqlParser.KEEPFIXED:
                    case TSqlParser.KEYSET:
                    case TSqlParser.LAST:
                    case TSqlParser.LEVEL:
                    case TSqlParser.LOCAL:
                    case TSqlParser.LOCATION:
                    case TSqlParser.LOCK_ESCALATION:
                    case TSqlParser.LOGIN:
                    case TSqlParser.LOOP:
                    case TSqlParser.MARK:
                    case TSqlParser.MAX:
                    case TSqlParser.MAX_ROLLOVER_FILES:
                    case TSqlParser.MAXDOP:
                    case TSqlParser.MAXRECURSION:
                    case TSqlParser.MIN:
                    case TSqlParser.MODIFY:
                    case TSqlParser.NAME:
                    case TSqlParser.NEXT:
                    case TSqlParser.NOCOUNT:
                    case TSqlParser.NOEXPAND:
                    case TSqlParser.NORECOMPUTE:
                    case TSqlParser.NTILE:
                    case TSqlParser.NUMBER:
                    case TSqlParser.OFFSET:
                    case TSqlParser.ONLINE:
                    case TSqlParser.ONLY:
                    case TSqlParser.OPTIMISTIC:
                    case TSqlParser.OPTIMIZE:
                    case TSqlParser.OUT:
                    case TSqlParser.OUTPUT:
                    case TSqlParser.OWNER:
                    case TSqlParser.PARAMETERIZATION:
                    case TSqlParser.PARTITION:
                    case TSqlParser.PATH:
                    case TSqlParser.PRECEDING:
                    case TSqlParser.PRIOR:
                    case TSqlParser.PRIVILEGES:
                    case TSqlParser.RANGE:
                    case TSqlParser.RANK:
                    case TSqlParser.READONLY:
                    case TSqlParser.READ_ONLY:
                    case TSqlParser.RECOMPILE:
                    case TSqlParser.RELATIVE:
                    case TSqlParser.REMOTE:
                    case TSqlParser.REPEATABLE:
                    case TSqlParser.ROBUST:
                    case TSqlParser.ROOT:
                    case TSqlParser.ROW:
                    case TSqlParser.ROWGUID:
                    case TSqlParser.ROWS:
                    case TSqlParser.ROW_NUMBER:
                    case TSqlParser.SAMPLE:
                    case TSqlParser.SCHEMABINDING:
                    case TSqlParser.SCROLL:
                    case TSqlParser.SCROLL_LOCKS:
                    case TSqlParser.SELF:
                    case TSqlParser.SERIALIZABLE:
                    case TSqlParser.SIMPLE:
                    case TSqlParser.SIZE:
                    case TSqlParser.SNAPSHOT:
                    case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                    case TSqlParser.STATIC:
                    case TSqlParser.STATS_STREAM:
                    case TSqlParser.STDEV:
                    case TSqlParser.STDEVP:
                    case TSqlParser.SUM:
                    case TSqlParser.TEXTIMAGE_ON:
                    case TSqlParser.THROW:
                    case TSqlParser.TIES:
                    case TSqlParser.TIME:
                    case TSqlParser.TRY:
                    case TSqlParser.TYPE:
                    case TSqlParser.TYPE_WARNING:
                    case TSqlParser.UNBOUNDED:
                    case TSqlParser.UNCOMMITTED:
                    case TSqlParser.UNKNOWN:
                    case TSqlParser.USING:
                    case TSqlParser.VALUE:
                    case TSqlParser.VAR:
                    case TSqlParser.VARP:
                    case TSqlParser.VIEWS:
                    case TSqlParser.VIEW_METADATA:
                    case TSqlParser.WORK:
                    case TSqlParser.XML:
                    case TSqlParser.XMLNAMESPACES:
                    case TSqlParser.DOUBLE_QUOTE_ID:
                    case TSqlParser.SQUARE_BRACKET_ID:
                    case TSqlParser.ID:
                        this.state = 7564;
                        this.id();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 7569; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===TSqlParser.DISK || _la===TSqlParser.TAPE || _la===TSqlParser.URL || _la===TSqlParser.COMMA);
                this.state = 7573; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.MIRROR);

        }
        this.state = 7750;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1075,this._ctx);
        if(la_===1) {
            this.state = 7577;
            this.match(TSqlParser.WITH);
            this.state = 7747;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,1074,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 7745;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,1073,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 7579;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7578;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7581;
                        this.match(TSqlParser.DIFFERENTIAL);
                        break;

                    case 2:
                        this.state = 7583;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7582;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7585;
                        this.match(TSqlParser.COPY_ONLY);
                        break;

                    case 3:
                        this.state = 7587;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7586;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7589;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.COMPRESSION || _la===TSqlParser.NO_COMPRESSION)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 4:
                        this.state = 7591;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7590;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7593;
                        this.match(TSqlParser.DESCRIPTION);
                        this.state = 7594;
                        this.match(TSqlParser.EQUAL);
                        this.state = 7597;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case TSqlParser.STRING:
                            this.state = 7595;
                            this.match(TSqlParser.STRING);
                            break;
                        case TSqlParser.CALLED:
                        case TSqlParser.DATA_COMPRESSION:
                        case TSqlParser.EVENTDATA:
                        case TSqlParser.FILENAME:
                        case TSqlParser.FILLFACTOR:
                        case TSqlParser.FORCESEEK:
                        case TSqlParser.KEY:
                        case TSqlParser.MASTER:
                        case TSqlParser.MAX_MEMORY:
                        case TSqlParser.OFFSETS:
                        case TSqlParser.PAGE:
                        case TSqlParser.PUBLIC:
                        case TSqlParser.RAW:
                        case TSqlParser.RETURN:
                        case TSqlParser.RETURNS:
                        case TSqlParser.ROWCOUNT:
                        case TSqlParser.SAFETY:
                        case TSqlParser.SERVER:
                        case TSqlParser.SID:
                        case TSqlParser.SOURCE:
                        case TSqlParser.STATE:
                        case TSqlParser.TARGET:
                        case TSqlParser.ABSOLUTE:
                        case TSqlParser.ACTIVE:
                        case TSqlParser.ADDRESS:
                        case TSqlParser.APPLY:
                        case TSqlParser.AUTO:
                        case TSqlParser.AVAILABILITY:
                        case TSqlParser.AVG:
                        case TSqlParser.CALLER:
                        case TSqlParser.CAST:
                        case TSqlParser.CATCH:
                        case TSqlParser.CHECKSUM_AGG:
                        case TSqlParser.COMMITTED:
                        case TSqlParser.CONCAT:
                        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                        case TSqlParser.CONTROL:
                        case TSqlParser.COOKIE:
                        case TSqlParser.COUNT:
                        case TSqlParser.COUNTER:
                        case TSqlParser.COUNT_BIG:
                        case TSqlParser.DELAY:
                        case TSqlParser.DELETED:
                        case TSqlParser.DENSE_RANK:
                        case TSqlParser.DISABLE:
                        case TSqlParser.DYNAMIC:
                        case TSqlParser.ENCRYPTION:
                        case TSqlParser.EXPAND:
                        case TSqlParser.FAST:
                        case TSqlParser.FAST_FORWARD:
                        case TSqlParser.FIRST:
                        case TSqlParser.FOLLOWING:
                        case TSqlParser.FORCE:
                        case TSqlParser.FORCED:
                        case TSqlParser.FORWARD_ONLY:
                        case TSqlParser.FULLSCAN:
                        case TSqlParser.GLOBAL:
                        case TSqlParser.GROUPING:
                        case TSqlParser.GROUPING_ID:
                        case TSqlParser.HASH:
                        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                        case TSqlParser.IMPERSONATE:
                        case TSqlParser.INPUT:
                        case TSqlParser.INSENSITIVE:
                        case TSqlParser.INSERTED:
                        case TSqlParser.ISOLATION:
                        case TSqlParser.KEEP:
                        case TSqlParser.KEEPFIXED:
                        case TSqlParser.KEYSET:
                        case TSqlParser.LAST:
                        case TSqlParser.LEVEL:
                        case TSqlParser.LOCAL:
                        case TSqlParser.LOCATION:
                        case TSqlParser.LOCK_ESCALATION:
                        case TSqlParser.LOGIN:
                        case TSqlParser.LOOP:
                        case TSqlParser.MARK:
                        case TSqlParser.MAX:
                        case TSqlParser.MAX_ROLLOVER_FILES:
                        case TSqlParser.MAXDOP:
                        case TSqlParser.MAXRECURSION:
                        case TSqlParser.MIN:
                        case TSqlParser.MODIFY:
                        case TSqlParser.NAME:
                        case TSqlParser.NEXT:
                        case TSqlParser.NOCOUNT:
                        case TSqlParser.NOEXPAND:
                        case TSqlParser.NORECOMPUTE:
                        case TSqlParser.NTILE:
                        case TSqlParser.NUMBER:
                        case TSqlParser.OFFSET:
                        case TSqlParser.ONLINE:
                        case TSqlParser.ONLY:
                        case TSqlParser.OPTIMISTIC:
                        case TSqlParser.OPTIMIZE:
                        case TSqlParser.OUT:
                        case TSqlParser.OUTPUT:
                        case TSqlParser.OWNER:
                        case TSqlParser.PARAMETERIZATION:
                        case TSqlParser.PARTITION:
                        case TSqlParser.PATH:
                        case TSqlParser.PRECEDING:
                        case TSqlParser.PRIOR:
                        case TSqlParser.PRIVILEGES:
                        case TSqlParser.RANGE:
                        case TSqlParser.RANK:
                        case TSqlParser.READONLY:
                        case TSqlParser.READ_ONLY:
                        case TSqlParser.RECOMPILE:
                        case TSqlParser.RELATIVE:
                        case TSqlParser.REMOTE:
                        case TSqlParser.REPEATABLE:
                        case TSqlParser.ROBUST:
                        case TSqlParser.ROOT:
                        case TSqlParser.ROW:
                        case TSqlParser.ROWGUID:
                        case TSqlParser.ROWS:
                        case TSqlParser.ROW_NUMBER:
                        case TSqlParser.SAMPLE:
                        case TSqlParser.SCHEMABINDING:
                        case TSqlParser.SCROLL:
                        case TSqlParser.SCROLL_LOCKS:
                        case TSqlParser.SELF:
                        case TSqlParser.SERIALIZABLE:
                        case TSqlParser.SIMPLE:
                        case TSqlParser.SIZE:
                        case TSqlParser.SNAPSHOT:
                        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                        case TSqlParser.STATIC:
                        case TSqlParser.STATS_STREAM:
                        case TSqlParser.STDEV:
                        case TSqlParser.STDEVP:
                        case TSqlParser.SUM:
                        case TSqlParser.TEXTIMAGE_ON:
                        case TSqlParser.THROW:
                        case TSqlParser.TIES:
                        case TSqlParser.TIME:
                        case TSqlParser.TRY:
                        case TSqlParser.TYPE:
                        case TSqlParser.TYPE_WARNING:
                        case TSqlParser.UNBOUNDED:
                        case TSqlParser.UNCOMMITTED:
                        case TSqlParser.UNKNOWN:
                        case TSqlParser.USING:
                        case TSqlParser.VALUE:
                        case TSqlParser.VAR:
                        case TSqlParser.VARP:
                        case TSqlParser.VIEWS:
                        case TSqlParser.VIEW_METADATA:
                        case TSqlParser.WORK:
                        case TSqlParser.XML:
                        case TSqlParser.XMLNAMESPACES:
                        case TSqlParser.DOUBLE_QUOTE_ID:
                        case TSqlParser.SQUARE_BRACKET_ID:
                        case TSqlParser.ID:
                            this.state = 7596;
                            this.id();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        }
                        break;

                    case 5:
                        this.state = 7600;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7599;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7602;
                        this.match(TSqlParser.NAME);
                        this.state = 7603;
                        this.match(TSqlParser.EQUAL);
                        this.state = 7604;
                        localctx.backup_set_name = this.id();
                        break;

                    case 6:
                        this.state = 7606;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7605;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7608;
                        this.match(TSqlParser.CREDENTIAL);
                        break;

                    case 7:
                        this.state = 7610;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7609;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7612;
                        this.match(TSqlParser.FILE_SNAPSHOT);
                        break;

                    case 8:
                        this.state = 7614;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7613;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7628;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case TSqlParser.EXPIREDATE:
                            this.state = 7616;
                            this.match(TSqlParser.EXPIREDATE);
                            this.state = 7617;
                            this.match(TSqlParser.EQUAL);
                            this.state = 7620;
                            this._errHandler.sync(this);
                            switch(this._input.LA(1)) {
                            case TSqlParser.STRING:
                                this.state = 7618;
                                this.match(TSqlParser.STRING);
                                break;
                            case TSqlParser.CALLED:
                            case TSqlParser.DATA_COMPRESSION:
                            case TSqlParser.EVENTDATA:
                            case TSqlParser.FILENAME:
                            case TSqlParser.FILLFACTOR:
                            case TSqlParser.FORCESEEK:
                            case TSqlParser.KEY:
                            case TSqlParser.MASTER:
                            case TSqlParser.MAX_MEMORY:
                            case TSqlParser.OFFSETS:
                            case TSqlParser.PAGE:
                            case TSqlParser.PUBLIC:
                            case TSqlParser.RAW:
                            case TSqlParser.RETURN:
                            case TSqlParser.RETURNS:
                            case TSqlParser.ROWCOUNT:
                            case TSqlParser.SAFETY:
                            case TSqlParser.SERVER:
                            case TSqlParser.SID:
                            case TSqlParser.SOURCE:
                            case TSqlParser.STATE:
                            case TSqlParser.TARGET:
                            case TSqlParser.ABSOLUTE:
                            case TSqlParser.ACTIVE:
                            case TSqlParser.ADDRESS:
                            case TSqlParser.APPLY:
                            case TSqlParser.AUTO:
                            case TSqlParser.AVAILABILITY:
                            case TSqlParser.AVG:
                            case TSqlParser.CALLER:
                            case TSqlParser.CAST:
                            case TSqlParser.CATCH:
                            case TSqlParser.CHECKSUM_AGG:
                            case TSqlParser.COMMITTED:
                            case TSqlParser.CONCAT:
                            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                            case TSqlParser.CONTROL:
                            case TSqlParser.COOKIE:
                            case TSqlParser.COUNT:
                            case TSqlParser.COUNTER:
                            case TSqlParser.COUNT_BIG:
                            case TSqlParser.DELAY:
                            case TSqlParser.DELETED:
                            case TSqlParser.DENSE_RANK:
                            case TSqlParser.DISABLE:
                            case TSqlParser.DYNAMIC:
                            case TSqlParser.ENCRYPTION:
                            case TSqlParser.EXPAND:
                            case TSqlParser.FAST:
                            case TSqlParser.FAST_FORWARD:
                            case TSqlParser.FIRST:
                            case TSqlParser.FOLLOWING:
                            case TSqlParser.FORCE:
                            case TSqlParser.FORCED:
                            case TSqlParser.FORWARD_ONLY:
                            case TSqlParser.FULLSCAN:
                            case TSqlParser.GLOBAL:
                            case TSqlParser.GROUPING:
                            case TSqlParser.GROUPING_ID:
                            case TSqlParser.HASH:
                            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                            case TSqlParser.IMPERSONATE:
                            case TSqlParser.INPUT:
                            case TSqlParser.INSENSITIVE:
                            case TSqlParser.INSERTED:
                            case TSqlParser.ISOLATION:
                            case TSqlParser.KEEP:
                            case TSqlParser.KEEPFIXED:
                            case TSqlParser.KEYSET:
                            case TSqlParser.LAST:
                            case TSqlParser.LEVEL:
                            case TSqlParser.LOCAL:
                            case TSqlParser.LOCATION:
                            case TSqlParser.LOCK_ESCALATION:
                            case TSqlParser.LOGIN:
                            case TSqlParser.LOOP:
                            case TSqlParser.MARK:
                            case TSqlParser.MAX:
                            case TSqlParser.MAX_ROLLOVER_FILES:
                            case TSqlParser.MAXDOP:
                            case TSqlParser.MAXRECURSION:
                            case TSqlParser.MIN:
                            case TSqlParser.MODIFY:
                            case TSqlParser.NAME:
                            case TSqlParser.NEXT:
                            case TSqlParser.NOCOUNT:
                            case TSqlParser.NOEXPAND:
                            case TSqlParser.NORECOMPUTE:
                            case TSqlParser.NTILE:
                            case TSqlParser.NUMBER:
                            case TSqlParser.OFFSET:
                            case TSqlParser.ONLINE:
                            case TSqlParser.ONLY:
                            case TSqlParser.OPTIMISTIC:
                            case TSqlParser.OPTIMIZE:
                            case TSqlParser.OUT:
                            case TSqlParser.OUTPUT:
                            case TSqlParser.OWNER:
                            case TSqlParser.PARAMETERIZATION:
                            case TSqlParser.PARTITION:
                            case TSqlParser.PATH:
                            case TSqlParser.PRECEDING:
                            case TSqlParser.PRIOR:
                            case TSqlParser.PRIVILEGES:
                            case TSqlParser.RANGE:
                            case TSqlParser.RANK:
                            case TSqlParser.READONLY:
                            case TSqlParser.READ_ONLY:
                            case TSqlParser.RECOMPILE:
                            case TSqlParser.RELATIVE:
                            case TSqlParser.REMOTE:
                            case TSqlParser.REPEATABLE:
                            case TSqlParser.ROBUST:
                            case TSqlParser.ROOT:
                            case TSqlParser.ROW:
                            case TSqlParser.ROWGUID:
                            case TSqlParser.ROWS:
                            case TSqlParser.ROW_NUMBER:
                            case TSqlParser.SAMPLE:
                            case TSqlParser.SCHEMABINDING:
                            case TSqlParser.SCROLL:
                            case TSqlParser.SCROLL_LOCKS:
                            case TSqlParser.SELF:
                            case TSqlParser.SERIALIZABLE:
                            case TSqlParser.SIMPLE:
                            case TSqlParser.SIZE:
                            case TSqlParser.SNAPSHOT:
                            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                            case TSqlParser.STATIC:
                            case TSqlParser.STATS_STREAM:
                            case TSqlParser.STDEV:
                            case TSqlParser.STDEVP:
                            case TSqlParser.SUM:
                            case TSqlParser.TEXTIMAGE_ON:
                            case TSqlParser.THROW:
                            case TSqlParser.TIES:
                            case TSqlParser.TIME:
                            case TSqlParser.TRY:
                            case TSqlParser.TYPE:
                            case TSqlParser.TYPE_WARNING:
                            case TSqlParser.UNBOUNDED:
                            case TSqlParser.UNCOMMITTED:
                            case TSqlParser.UNKNOWN:
                            case TSqlParser.USING:
                            case TSqlParser.VALUE:
                            case TSqlParser.VAR:
                            case TSqlParser.VARP:
                            case TSqlParser.VIEWS:
                            case TSqlParser.VIEW_METADATA:
                            case TSqlParser.WORK:
                            case TSqlParser.XML:
                            case TSqlParser.XMLNAMESPACES:
                            case TSqlParser.DOUBLE_QUOTE_ID:
                            case TSqlParser.SQUARE_BRACKET_ID:
                            case TSqlParser.ID:
                                this.state = 7619;
                                this.id();
                                break;
                            default:
                                throw new antlr4.error.NoViableAltException(this);
                            }
                            break;
                        case TSqlParser.RETAINDAYS:
                            this.state = 7622;
                            this.match(TSqlParser.RETAINDAYS);
                            this.state = 7623;
                            this.match(TSqlParser.EQUAL);
                            this.state = 7626;
                            this._errHandler.sync(this);
                            switch(this._input.LA(1)) {
                            case TSqlParser.DECIMAL:
                                this.state = 7624;
                                this.match(TSqlParser.DECIMAL);
                                break;
                            case TSqlParser.CALLED:
                            case TSqlParser.DATA_COMPRESSION:
                            case TSqlParser.EVENTDATA:
                            case TSqlParser.FILENAME:
                            case TSqlParser.FILLFACTOR:
                            case TSqlParser.FORCESEEK:
                            case TSqlParser.KEY:
                            case TSqlParser.MASTER:
                            case TSqlParser.MAX_MEMORY:
                            case TSqlParser.OFFSETS:
                            case TSqlParser.PAGE:
                            case TSqlParser.PUBLIC:
                            case TSqlParser.RAW:
                            case TSqlParser.RETURN:
                            case TSqlParser.RETURNS:
                            case TSqlParser.ROWCOUNT:
                            case TSqlParser.SAFETY:
                            case TSqlParser.SERVER:
                            case TSqlParser.SID:
                            case TSqlParser.SOURCE:
                            case TSqlParser.STATE:
                            case TSqlParser.TARGET:
                            case TSqlParser.ABSOLUTE:
                            case TSqlParser.ACTIVE:
                            case TSqlParser.ADDRESS:
                            case TSqlParser.APPLY:
                            case TSqlParser.AUTO:
                            case TSqlParser.AVAILABILITY:
                            case TSqlParser.AVG:
                            case TSqlParser.CALLER:
                            case TSqlParser.CAST:
                            case TSqlParser.CATCH:
                            case TSqlParser.CHECKSUM_AGG:
                            case TSqlParser.COMMITTED:
                            case TSqlParser.CONCAT:
                            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                            case TSqlParser.CONTROL:
                            case TSqlParser.COOKIE:
                            case TSqlParser.COUNT:
                            case TSqlParser.COUNTER:
                            case TSqlParser.COUNT_BIG:
                            case TSqlParser.DELAY:
                            case TSqlParser.DELETED:
                            case TSqlParser.DENSE_RANK:
                            case TSqlParser.DISABLE:
                            case TSqlParser.DYNAMIC:
                            case TSqlParser.ENCRYPTION:
                            case TSqlParser.EXPAND:
                            case TSqlParser.FAST:
                            case TSqlParser.FAST_FORWARD:
                            case TSqlParser.FIRST:
                            case TSqlParser.FOLLOWING:
                            case TSqlParser.FORCE:
                            case TSqlParser.FORCED:
                            case TSqlParser.FORWARD_ONLY:
                            case TSqlParser.FULLSCAN:
                            case TSqlParser.GLOBAL:
                            case TSqlParser.GROUPING:
                            case TSqlParser.GROUPING_ID:
                            case TSqlParser.HASH:
                            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                            case TSqlParser.IMPERSONATE:
                            case TSqlParser.INPUT:
                            case TSqlParser.INSENSITIVE:
                            case TSqlParser.INSERTED:
                            case TSqlParser.ISOLATION:
                            case TSqlParser.KEEP:
                            case TSqlParser.KEEPFIXED:
                            case TSqlParser.KEYSET:
                            case TSqlParser.LAST:
                            case TSqlParser.LEVEL:
                            case TSqlParser.LOCAL:
                            case TSqlParser.LOCATION:
                            case TSqlParser.LOCK_ESCALATION:
                            case TSqlParser.LOGIN:
                            case TSqlParser.LOOP:
                            case TSqlParser.MARK:
                            case TSqlParser.MAX:
                            case TSqlParser.MAX_ROLLOVER_FILES:
                            case TSqlParser.MAXDOP:
                            case TSqlParser.MAXRECURSION:
                            case TSqlParser.MIN:
                            case TSqlParser.MODIFY:
                            case TSqlParser.NAME:
                            case TSqlParser.NEXT:
                            case TSqlParser.NOCOUNT:
                            case TSqlParser.NOEXPAND:
                            case TSqlParser.NORECOMPUTE:
                            case TSqlParser.NTILE:
                            case TSqlParser.NUMBER:
                            case TSqlParser.OFFSET:
                            case TSqlParser.ONLINE:
                            case TSqlParser.ONLY:
                            case TSqlParser.OPTIMISTIC:
                            case TSqlParser.OPTIMIZE:
                            case TSqlParser.OUT:
                            case TSqlParser.OUTPUT:
                            case TSqlParser.OWNER:
                            case TSqlParser.PARAMETERIZATION:
                            case TSqlParser.PARTITION:
                            case TSqlParser.PATH:
                            case TSqlParser.PRECEDING:
                            case TSqlParser.PRIOR:
                            case TSqlParser.PRIVILEGES:
                            case TSqlParser.RANGE:
                            case TSqlParser.RANK:
                            case TSqlParser.READONLY:
                            case TSqlParser.READ_ONLY:
                            case TSqlParser.RECOMPILE:
                            case TSqlParser.RELATIVE:
                            case TSqlParser.REMOTE:
                            case TSqlParser.REPEATABLE:
                            case TSqlParser.ROBUST:
                            case TSqlParser.ROOT:
                            case TSqlParser.ROW:
                            case TSqlParser.ROWGUID:
                            case TSqlParser.ROWS:
                            case TSqlParser.ROW_NUMBER:
                            case TSqlParser.SAMPLE:
                            case TSqlParser.SCHEMABINDING:
                            case TSqlParser.SCROLL:
                            case TSqlParser.SCROLL_LOCKS:
                            case TSqlParser.SELF:
                            case TSqlParser.SERIALIZABLE:
                            case TSqlParser.SIMPLE:
                            case TSqlParser.SIZE:
                            case TSqlParser.SNAPSHOT:
                            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                            case TSqlParser.STATIC:
                            case TSqlParser.STATS_STREAM:
                            case TSqlParser.STDEV:
                            case TSqlParser.STDEVP:
                            case TSqlParser.SUM:
                            case TSqlParser.TEXTIMAGE_ON:
                            case TSqlParser.THROW:
                            case TSqlParser.TIES:
                            case TSqlParser.TIME:
                            case TSqlParser.TRY:
                            case TSqlParser.TYPE:
                            case TSqlParser.TYPE_WARNING:
                            case TSqlParser.UNBOUNDED:
                            case TSqlParser.UNCOMMITTED:
                            case TSqlParser.UNKNOWN:
                            case TSqlParser.USING:
                            case TSqlParser.VALUE:
                            case TSqlParser.VAR:
                            case TSqlParser.VARP:
                            case TSqlParser.VIEWS:
                            case TSqlParser.VIEW_METADATA:
                            case TSqlParser.WORK:
                            case TSqlParser.XML:
                            case TSqlParser.XMLNAMESPACES:
                            case TSqlParser.DOUBLE_QUOTE_ID:
                            case TSqlParser.SQUARE_BRACKET_ID:
                            case TSqlParser.ID:
                                this.state = 7625;
                                this.id();
                                break;
                            default:
                                throw new antlr4.error.NoViableAltException(this);
                            }
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        }
                        break;

                    case 9:
                        this.state = 7631;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7630;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7633;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.INIT || _la===TSqlParser.NOINIT)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 10:
                        this.state = 7635;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7634;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7637;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.NOSKIP || _la===TSqlParser.SKIP_KEYWORD)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 11:
                        this.state = 7639;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7638;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7641;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.NOFORMAT || _la===TSqlParser.FORMAT)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 12:
                        this.state = 7643;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7642;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7645;
                        this.match(TSqlParser.MEDIADESCRIPTION);
                        this.state = 7646;
                        this.match(TSqlParser.EQUAL);
                        this.state = 7649;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case TSqlParser.STRING:
                            this.state = 7647;
                            this.match(TSqlParser.STRING);
                            break;
                        case TSqlParser.CALLED:
                        case TSqlParser.DATA_COMPRESSION:
                        case TSqlParser.EVENTDATA:
                        case TSqlParser.FILENAME:
                        case TSqlParser.FILLFACTOR:
                        case TSqlParser.FORCESEEK:
                        case TSqlParser.KEY:
                        case TSqlParser.MASTER:
                        case TSqlParser.MAX_MEMORY:
                        case TSqlParser.OFFSETS:
                        case TSqlParser.PAGE:
                        case TSqlParser.PUBLIC:
                        case TSqlParser.RAW:
                        case TSqlParser.RETURN:
                        case TSqlParser.RETURNS:
                        case TSqlParser.ROWCOUNT:
                        case TSqlParser.SAFETY:
                        case TSqlParser.SERVER:
                        case TSqlParser.SID:
                        case TSqlParser.SOURCE:
                        case TSqlParser.STATE:
                        case TSqlParser.TARGET:
                        case TSqlParser.ABSOLUTE:
                        case TSqlParser.ACTIVE:
                        case TSqlParser.ADDRESS:
                        case TSqlParser.APPLY:
                        case TSqlParser.AUTO:
                        case TSqlParser.AVAILABILITY:
                        case TSqlParser.AVG:
                        case TSqlParser.CALLER:
                        case TSqlParser.CAST:
                        case TSqlParser.CATCH:
                        case TSqlParser.CHECKSUM_AGG:
                        case TSqlParser.COMMITTED:
                        case TSqlParser.CONCAT:
                        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                        case TSqlParser.CONTROL:
                        case TSqlParser.COOKIE:
                        case TSqlParser.COUNT:
                        case TSqlParser.COUNTER:
                        case TSqlParser.COUNT_BIG:
                        case TSqlParser.DELAY:
                        case TSqlParser.DELETED:
                        case TSqlParser.DENSE_RANK:
                        case TSqlParser.DISABLE:
                        case TSqlParser.DYNAMIC:
                        case TSqlParser.ENCRYPTION:
                        case TSqlParser.EXPAND:
                        case TSqlParser.FAST:
                        case TSqlParser.FAST_FORWARD:
                        case TSqlParser.FIRST:
                        case TSqlParser.FOLLOWING:
                        case TSqlParser.FORCE:
                        case TSqlParser.FORCED:
                        case TSqlParser.FORWARD_ONLY:
                        case TSqlParser.FULLSCAN:
                        case TSqlParser.GLOBAL:
                        case TSqlParser.GROUPING:
                        case TSqlParser.GROUPING_ID:
                        case TSqlParser.HASH:
                        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                        case TSqlParser.IMPERSONATE:
                        case TSqlParser.INPUT:
                        case TSqlParser.INSENSITIVE:
                        case TSqlParser.INSERTED:
                        case TSqlParser.ISOLATION:
                        case TSqlParser.KEEP:
                        case TSqlParser.KEEPFIXED:
                        case TSqlParser.KEYSET:
                        case TSqlParser.LAST:
                        case TSqlParser.LEVEL:
                        case TSqlParser.LOCAL:
                        case TSqlParser.LOCATION:
                        case TSqlParser.LOCK_ESCALATION:
                        case TSqlParser.LOGIN:
                        case TSqlParser.LOOP:
                        case TSqlParser.MARK:
                        case TSqlParser.MAX:
                        case TSqlParser.MAX_ROLLOVER_FILES:
                        case TSqlParser.MAXDOP:
                        case TSqlParser.MAXRECURSION:
                        case TSqlParser.MIN:
                        case TSqlParser.MODIFY:
                        case TSqlParser.NAME:
                        case TSqlParser.NEXT:
                        case TSqlParser.NOCOUNT:
                        case TSqlParser.NOEXPAND:
                        case TSqlParser.NORECOMPUTE:
                        case TSqlParser.NTILE:
                        case TSqlParser.NUMBER:
                        case TSqlParser.OFFSET:
                        case TSqlParser.ONLINE:
                        case TSqlParser.ONLY:
                        case TSqlParser.OPTIMISTIC:
                        case TSqlParser.OPTIMIZE:
                        case TSqlParser.OUT:
                        case TSqlParser.OUTPUT:
                        case TSqlParser.OWNER:
                        case TSqlParser.PARAMETERIZATION:
                        case TSqlParser.PARTITION:
                        case TSqlParser.PATH:
                        case TSqlParser.PRECEDING:
                        case TSqlParser.PRIOR:
                        case TSqlParser.PRIVILEGES:
                        case TSqlParser.RANGE:
                        case TSqlParser.RANK:
                        case TSqlParser.READONLY:
                        case TSqlParser.READ_ONLY:
                        case TSqlParser.RECOMPILE:
                        case TSqlParser.RELATIVE:
                        case TSqlParser.REMOTE:
                        case TSqlParser.REPEATABLE:
                        case TSqlParser.ROBUST:
                        case TSqlParser.ROOT:
                        case TSqlParser.ROW:
                        case TSqlParser.ROWGUID:
                        case TSqlParser.ROWS:
                        case TSqlParser.ROW_NUMBER:
                        case TSqlParser.SAMPLE:
                        case TSqlParser.SCHEMABINDING:
                        case TSqlParser.SCROLL:
                        case TSqlParser.SCROLL_LOCKS:
                        case TSqlParser.SELF:
                        case TSqlParser.SERIALIZABLE:
                        case TSqlParser.SIMPLE:
                        case TSqlParser.SIZE:
                        case TSqlParser.SNAPSHOT:
                        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                        case TSqlParser.STATIC:
                        case TSqlParser.STATS_STREAM:
                        case TSqlParser.STDEV:
                        case TSqlParser.STDEVP:
                        case TSqlParser.SUM:
                        case TSqlParser.TEXTIMAGE_ON:
                        case TSqlParser.THROW:
                        case TSqlParser.TIES:
                        case TSqlParser.TIME:
                        case TSqlParser.TRY:
                        case TSqlParser.TYPE:
                        case TSqlParser.TYPE_WARNING:
                        case TSqlParser.UNBOUNDED:
                        case TSqlParser.UNCOMMITTED:
                        case TSqlParser.UNKNOWN:
                        case TSqlParser.USING:
                        case TSqlParser.VALUE:
                        case TSqlParser.VAR:
                        case TSqlParser.VARP:
                        case TSqlParser.VIEWS:
                        case TSqlParser.VIEW_METADATA:
                        case TSqlParser.WORK:
                        case TSqlParser.XML:
                        case TSqlParser.XMLNAMESPACES:
                        case TSqlParser.DOUBLE_QUOTE_ID:
                        case TSqlParser.SQUARE_BRACKET_ID:
                        case TSqlParser.ID:
                            this.state = 7648;
                            this.id();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        }
                        break;

                    case 13:
                        this.state = 7652;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7651;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7654;
                        this.match(TSqlParser.MEDIANAME);
                        this.state = 7655;
                        this.match(TSqlParser.EQUAL);

                        this.state = 7656;
                        localctx.medianame = this.match(TSqlParser.STRING);
                        break;

                    case 14:
                        this.state = 7658;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7657;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7660;
                        this.match(TSqlParser.BLOCKSIZE);
                        this.state = 7661;
                        this.match(TSqlParser.EQUAL);
                        this.state = 7664;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case TSqlParser.DECIMAL:
                            this.state = 7662;
                            this.match(TSqlParser.DECIMAL);
                            break;
                        case TSqlParser.CALLED:
                        case TSqlParser.DATA_COMPRESSION:
                        case TSqlParser.EVENTDATA:
                        case TSqlParser.FILENAME:
                        case TSqlParser.FILLFACTOR:
                        case TSqlParser.FORCESEEK:
                        case TSqlParser.KEY:
                        case TSqlParser.MASTER:
                        case TSqlParser.MAX_MEMORY:
                        case TSqlParser.OFFSETS:
                        case TSqlParser.PAGE:
                        case TSqlParser.PUBLIC:
                        case TSqlParser.RAW:
                        case TSqlParser.RETURN:
                        case TSqlParser.RETURNS:
                        case TSqlParser.ROWCOUNT:
                        case TSqlParser.SAFETY:
                        case TSqlParser.SERVER:
                        case TSqlParser.SID:
                        case TSqlParser.SOURCE:
                        case TSqlParser.STATE:
                        case TSqlParser.TARGET:
                        case TSqlParser.ABSOLUTE:
                        case TSqlParser.ACTIVE:
                        case TSqlParser.ADDRESS:
                        case TSqlParser.APPLY:
                        case TSqlParser.AUTO:
                        case TSqlParser.AVAILABILITY:
                        case TSqlParser.AVG:
                        case TSqlParser.CALLER:
                        case TSqlParser.CAST:
                        case TSqlParser.CATCH:
                        case TSqlParser.CHECKSUM_AGG:
                        case TSqlParser.COMMITTED:
                        case TSqlParser.CONCAT:
                        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                        case TSqlParser.CONTROL:
                        case TSqlParser.COOKIE:
                        case TSqlParser.COUNT:
                        case TSqlParser.COUNTER:
                        case TSqlParser.COUNT_BIG:
                        case TSqlParser.DELAY:
                        case TSqlParser.DELETED:
                        case TSqlParser.DENSE_RANK:
                        case TSqlParser.DISABLE:
                        case TSqlParser.DYNAMIC:
                        case TSqlParser.ENCRYPTION:
                        case TSqlParser.EXPAND:
                        case TSqlParser.FAST:
                        case TSqlParser.FAST_FORWARD:
                        case TSqlParser.FIRST:
                        case TSqlParser.FOLLOWING:
                        case TSqlParser.FORCE:
                        case TSqlParser.FORCED:
                        case TSqlParser.FORWARD_ONLY:
                        case TSqlParser.FULLSCAN:
                        case TSqlParser.GLOBAL:
                        case TSqlParser.GROUPING:
                        case TSqlParser.GROUPING_ID:
                        case TSqlParser.HASH:
                        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                        case TSqlParser.IMPERSONATE:
                        case TSqlParser.INPUT:
                        case TSqlParser.INSENSITIVE:
                        case TSqlParser.INSERTED:
                        case TSqlParser.ISOLATION:
                        case TSqlParser.KEEP:
                        case TSqlParser.KEEPFIXED:
                        case TSqlParser.KEYSET:
                        case TSqlParser.LAST:
                        case TSqlParser.LEVEL:
                        case TSqlParser.LOCAL:
                        case TSqlParser.LOCATION:
                        case TSqlParser.LOCK_ESCALATION:
                        case TSqlParser.LOGIN:
                        case TSqlParser.LOOP:
                        case TSqlParser.MARK:
                        case TSqlParser.MAX:
                        case TSqlParser.MAX_ROLLOVER_FILES:
                        case TSqlParser.MAXDOP:
                        case TSqlParser.MAXRECURSION:
                        case TSqlParser.MIN:
                        case TSqlParser.MODIFY:
                        case TSqlParser.NAME:
                        case TSqlParser.NEXT:
                        case TSqlParser.NOCOUNT:
                        case TSqlParser.NOEXPAND:
                        case TSqlParser.NORECOMPUTE:
                        case TSqlParser.NTILE:
                        case TSqlParser.NUMBER:
                        case TSqlParser.OFFSET:
                        case TSqlParser.ONLINE:
                        case TSqlParser.ONLY:
                        case TSqlParser.OPTIMISTIC:
                        case TSqlParser.OPTIMIZE:
                        case TSqlParser.OUT:
                        case TSqlParser.OUTPUT:
                        case TSqlParser.OWNER:
                        case TSqlParser.PARAMETERIZATION:
                        case TSqlParser.PARTITION:
                        case TSqlParser.PATH:
                        case TSqlParser.PRECEDING:
                        case TSqlParser.PRIOR:
                        case TSqlParser.PRIVILEGES:
                        case TSqlParser.RANGE:
                        case TSqlParser.RANK:
                        case TSqlParser.READONLY:
                        case TSqlParser.READ_ONLY:
                        case TSqlParser.RECOMPILE:
                        case TSqlParser.RELATIVE:
                        case TSqlParser.REMOTE:
                        case TSqlParser.REPEATABLE:
                        case TSqlParser.ROBUST:
                        case TSqlParser.ROOT:
                        case TSqlParser.ROW:
                        case TSqlParser.ROWGUID:
                        case TSqlParser.ROWS:
                        case TSqlParser.ROW_NUMBER:
                        case TSqlParser.SAMPLE:
                        case TSqlParser.SCHEMABINDING:
                        case TSqlParser.SCROLL:
                        case TSqlParser.SCROLL_LOCKS:
                        case TSqlParser.SELF:
                        case TSqlParser.SERIALIZABLE:
                        case TSqlParser.SIMPLE:
                        case TSqlParser.SIZE:
                        case TSqlParser.SNAPSHOT:
                        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                        case TSqlParser.STATIC:
                        case TSqlParser.STATS_STREAM:
                        case TSqlParser.STDEV:
                        case TSqlParser.STDEVP:
                        case TSqlParser.SUM:
                        case TSqlParser.TEXTIMAGE_ON:
                        case TSqlParser.THROW:
                        case TSqlParser.TIES:
                        case TSqlParser.TIME:
                        case TSqlParser.TRY:
                        case TSqlParser.TYPE:
                        case TSqlParser.TYPE_WARNING:
                        case TSqlParser.UNBOUNDED:
                        case TSqlParser.UNCOMMITTED:
                        case TSqlParser.UNKNOWN:
                        case TSqlParser.USING:
                        case TSqlParser.VALUE:
                        case TSqlParser.VAR:
                        case TSqlParser.VARP:
                        case TSqlParser.VIEWS:
                        case TSqlParser.VIEW_METADATA:
                        case TSqlParser.WORK:
                        case TSqlParser.XML:
                        case TSqlParser.XMLNAMESPACES:
                        case TSqlParser.DOUBLE_QUOTE_ID:
                        case TSqlParser.SQUARE_BRACKET_ID:
                        case TSqlParser.ID:
                            this.state = 7663;
                            this.id();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        }
                        break;

                    case 15:
                        this.state = 7667;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7666;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7669;
                        this.match(TSqlParser.BUFFERCOUNT);
                        this.state = 7670;
                        this.match(TSqlParser.EQUAL);
                        this.state = 7673;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case TSqlParser.DECIMAL:
                            this.state = 7671;
                            this.match(TSqlParser.DECIMAL);
                            break;
                        case TSqlParser.CALLED:
                        case TSqlParser.DATA_COMPRESSION:
                        case TSqlParser.EVENTDATA:
                        case TSqlParser.FILENAME:
                        case TSqlParser.FILLFACTOR:
                        case TSqlParser.FORCESEEK:
                        case TSqlParser.KEY:
                        case TSqlParser.MASTER:
                        case TSqlParser.MAX_MEMORY:
                        case TSqlParser.OFFSETS:
                        case TSqlParser.PAGE:
                        case TSqlParser.PUBLIC:
                        case TSqlParser.RAW:
                        case TSqlParser.RETURN:
                        case TSqlParser.RETURNS:
                        case TSqlParser.ROWCOUNT:
                        case TSqlParser.SAFETY:
                        case TSqlParser.SERVER:
                        case TSqlParser.SID:
                        case TSqlParser.SOURCE:
                        case TSqlParser.STATE:
                        case TSqlParser.TARGET:
                        case TSqlParser.ABSOLUTE:
                        case TSqlParser.ACTIVE:
                        case TSqlParser.ADDRESS:
                        case TSqlParser.APPLY:
                        case TSqlParser.AUTO:
                        case TSqlParser.AVAILABILITY:
                        case TSqlParser.AVG:
                        case TSqlParser.CALLER:
                        case TSqlParser.CAST:
                        case TSqlParser.CATCH:
                        case TSqlParser.CHECKSUM_AGG:
                        case TSqlParser.COMMITTED:
                        case TSqlParser.CONCAT:
                        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                        case TSqlParser.CONTROL:
                        case TSqlParser.COOKIE:
                        case TSqlParser.COUNT:
                        case TSqlParser.COUNTER:
                        case TSqlParser.COUNT_BIG:
                        case TSqlParser.DELAY:
                        case TSqlParser.DELETED:
                        case TSqlParser.DENSE_RANK:
                        case TSqlParser.DISABLE:
                        case TSqlParser.DYNAMIC:
                        case TSqlParser.ENCRYPTION:
                        case TSqlParser.EXPAND:
                        case TSqlParser.FAST:
                        case TSqlParser.FAST_FORWARD:
                        case TSqlParser.FIRST:
                        case TSqlParser.FOLLOWING:
                        case TSqlParser.FORCE:
                        case TSqlParser.FORCED:
                        case TSqlParser.FORWARD_ONLY:
                        case TSqlParser.FULLSCAN:
                        case TSqlParser.GLOBAL:
                        case TSqlParser.GROUPING:
                        case TSqlParser.GROUPING_ID:
                        case TSqlParser.HASH:
                        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                        case TSqlParser.IMPERSONATE:
                        case TSqlParser.INPUT:
                        case TSqlParser.INSENSITIVE:
                        case TSqlParser.INSERTED:
                        case TSqlParser.ISOLATION:
                        case TSqlParser.KEEP:
                        case TSqlParser.KEEPFIXED:
                        case TSqlParser.KEYSET:
                        case TSqlParser.LAST:
                        case TSqlParser.LEVEL:
                        case TSqlParser.LOCAL:
                        case TSqlParser.LOCATION:
                        case TSqlParser.LOCK_ESCALATION:
                        case TSqlParser.LOGIN:
                        case TSqlParser.LOOP:
                        case TSqlParser.MARK:
                        case TSqlParser.MAX:
                        case TSqlParser.MAX_ROLLOVER_FILES:
                        case TSqlParser.MAXDOP:
                        case TSqlParser.MAXRECURSION:
                        case TSqlParser.MIN:
                        case TSqlParser.MODIFY:
                        case TSqlParser.NAME:
                        case TSqlParser.NEXT:
                        case TSqlParser.NOCOUNT:
                        case TSqlParser.NOEXPAND:
                        case TSqlParser.NORECOMPUTE:
                        case TSqlParser.NTILE:
                        case TSqlParser.NUMBER:
                        case TSqlParser.OFFSET:
                        case TSqlParser.ONLINE:
                        case TSqlParser.ONLY:
                        case TSqlParser.OPTIMISTIC:
                        case TSqlParser.OPTIMIZE:
                        case TSqlParser.OUT:
                        case TSqlParser.OUTPUT:
                        case TSqlParser.OWNER:
                        case TSqlParser.PARAMETERIZATION:
                        case TSqlParser.PARTITION:
                        case TSqlParser.PATH:
                        case TSqlParser.PRECEDING:
                        case TSqlParser.PRIOR:
                        case TSqlParser.PRIVILEGES:
                        case TSqlParser.RANGE:
                        case TSqlParser.RANK:
                        case TSqlParser.READONLY:
                        case TSqlParser.READ_ONLY:
                        case TSqlParser.RECOMPILE:
                        case TSqlParser.RELATIVE:
                        case TSqlParser.REMOTE:
                        case TSqlParser.REPEATABLE:
                        case TSqlParser.ROBUST:
                        case TSqlParser.ROOT:
                        case TSqlParser.ROW:
                        case TSqlParser.ROWGUID:
                        case TSqlParser.ROWS:
                        case TSqlParser.ROW_NUMBER:
                        case TSqlParser.SAMPLE:
                        case TSqlParser.SCHEMABINDING:
                        case TSqlParser.SCROLL:
                        case TSqlParser.SCROLL_LOCKS:
                        case TSqlParser.SELF:
                        case TSqlParser.SERIALIZABLE:
                        case TSqlParser.SIMPLE:
                        case TSqlParser.SIZE:
                        case TSqlParser.SNAPSHOT:
                        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                        case TSqlParser.STATIC:
                        case TSqlParser.STATS_STREAM:
                        case TSqlParser.STDEV:
                        case TSqlParser.STDEVP:
                        case TSqlParser.SUM:
                        case TSqlParser.TEXTIMAGE_ON:
                        case TSqlParser.THROW:
                        case TSqlParser.TIES:
                        case TSqlParser.TIME:
                        case TSqlParser.TRY:
                        case TSqlParser.TYPE:
                        case TSqlParser.TYPE_WARNING:
                        case TSqlParser.UNBOUNDED:
                        case TSqlParser.UNCOMMITTED:
                        case TSqlParser.UNKNOWN:
                        case TSqlParser.USING:
                        case TSqlParser.VALUE:
                        case TSqlParser.VAR:
                        case TSqlParser.VARP:
                        case TSqlParser.VIEWS:
                        case TSqlParser.VIEW_METADATA:
                        case TSqlParser.WORK:
                        case TSqlParser.XML:
                        case TSqlParser.XMLNAMESPACES:
                        case TSqlParser.DOUBLE_QUOTE_ID:
                        case TSqlParser.SQUARE_BRACKET_ID:
                        case TSqlParser.ID:
                            this.state = 7672;
                            this.id();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        }
                        break;

                    case 16:
                        this.state = 7676;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7675;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7678;
                        this.match(TSqlParser.MAXTRANSFER);
                        this.state = 7679;
                        this.match(TSqlParser.EQUAL);
                        this.state = 7682;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case TSqlParser.DECIMAL:
                            this.state = 7680;
                            this.match(TSqlParser.DECIMAL);
                            break;
                        case TSqlParser.CALLED:
                        case TSqlParser.DATA_COMPRESSION:
                        case TSqlParser.EVENTDATA:
                        case TSqlParser.FILENAME:
                        case TSqlParser.FILLFACTOR:
                        case TSqlParser.FORCESEEK:
                        case TSqlParser.KEY:
                        case TSqlParser.MASTER:
                        case TSqlParser.MAX_MEMORY:
                        case TSqlParser.OFFSETS:
                        case TSqlParser.PAGE:
                        case TSqlParser.PUBLIC:
                        case TSqlParser.RAW:
                        case TSqlParser.RETURN:
                        case TSqlParser.RETURNS:
                        case TSqlParser.ROWCOUNT:
                        case TSqlParser.SAFETY:
                        case TSqlParser.SERVER:
                        case TSqlParser.SID:
                        case TSqlParser.SOURCE:
                        case TSqlParser.STATE:
                        case TSqlParser.TARGET:
                        case TSqlParser.ABSOLUTE:
                        case TSqlParser.ACTIVE:
                        case TSqlParser.ADDRESS:
                        case TSqlParser.APPLY:
                        case TSqlParser.AUTO:
                        case TSqlParser.AVAILABILITY:
                        case TSqlParser.AVG:
                        case TSqlParser.CALLER:
                        case TSqlParser.CAST:
                        case TSqlParser.CATCH:
                        case TSqlParser.CHECKSUM_AGG:
                        case TSqlParser.COMMITTED:
                        case TSqlParser.CONCAT:
                        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                        case TSqlParser.CONTROL:
                        case TSqlParser.COOKIE:
                        case TSqlParser.COUNT:
                        case TSqlParser.COUNTER:
                        case TSqlParser.COUNT_BIG:
                        case TSqlParser.DELAY:
                        case TSqlParser.DELETED:
                        case TSqlParser.DENSE_RANK:
                        case TSqlParser.DISABLE:
                        case TSqlParser.DYNAMIC:
                        case TSqlParser.ENCRYPTION:
                        case TSqlParser.EXPAND:
                        case TSqlParser.FAST:
                        case TSqlParser.FAST_FORWARD:
                        case TSqlParser.FIRST:
                        case TSqlParser.FOLLOWING:
                        case TSqlParser.FORCE:
                        case TSqlParser.FORCED:
                        case TSqlParser.FORWARD_ONLY:
                        case TSqlParser.FULLSCAN:
                        case TSqlParser.GLOBAL:
                        case TSqlParser.GROUPING:
                        case TSqlParser.GROUPING_ID:
                        case TSqlParser.HASH:
                        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                        case TSqlParser.IMPERSONATE:
                        case TSqlParser.INPUT:
                        case TSqlParser.INSENSITIVE:
                        case TSqlParser.INSERTED:
                        case TSqlParser.ISOLATION:
                        case TSqlParser.KEEP:
                        case TSqlParser.KEEPFIXED:
                        case TSqlParser.KEYSET:
                        case TSqlParser.LAST:
                        case TSqlParser.LEVEL:
                        case TSqlParser.LOCAL:
                        case TSqlParser.LOCATION:
                        case TSqlParser.LOCK_ESCALATION:
                        case TSqlParser.LOGIN:
                        case TSqlParser.LOOP:
                        case TSqlParser.MARK:
                        case TSqlParser.MAX:
                        case TSqlParser.MAX_ROLLOVER_FILES:
                        case TSqlParser.MAXDOP:
                        case TSqlParser.MAXRECURSION:
                        case TSqlParser.MIN:
                        case TSqlParser.MODIFY:
                        case TSqlParser.NAME:
                        case TSqlParser.NEXT:
                        case TSqlParser.NOCOUNT:
                        case TSqlParser.NOEXPAND:
                        case TSqlParser.NORECOMPUTE:
                        case TSqlParser.NTILE:
                        case TSqlParser.NUMBER:
                        case TSqlParser.OFFSET:
                        case TSqlParser.ONLINE:
                        case TSqlParser.ONLY:
                        case TSqlParser.OPTIMISTIC:
                        case TSqlParser.OPTIMIZE:
                        case TSqlParser.OUT:
                        case TSqlParser.OUTPUT:
                        case TSqlParser.OWNER:
                        case TSqlParser.PARAMETERIZATION:
                        case TSqlParser.PARTITION:
                        case TSqlParser.PATH:
                        case TSqlParser.PRECEDING:
                        case TSqlParser.PRIOR:
                        case TSqlParser.PRIVILEGES:
                        case TSqlParser.RANGE:
                        case TSqlParser.RANK:
                        case TSqlParser.READONLY:
                        case TSqlParser.READ_ONLY:
                        case TSqlParser.RECOMPILE:
                        case TSqlParser.RELATIVE:
                        case TSqlParser.REMOTE:
                        case TSqlParser.REPEATABLE:
                        case TSqlParser.ROBUST:
                        case TSqlParser.ROOT:
                        case TSqlParser.ROW:
                        case TSqlParser.ROWGUID:
                        case TSqlParser.ROWS:
                        case TSqlParser.ROW_NUMBER:
                        case TSqlParser.SAMPLE:
                        case TSqlParser.SCHEMABINDING:
                        case TSqlParser.SCROLL:
                        case TSqlParser.SCROLL_LOCKS:
                        case TSqlParser.SELF:
                        case TSqlParser.SERIALIZABLE:
                        case TSqlParser.SIMPLE:
                        case TSqlParser.SIZE:
                        case TSqlParser.SNAPSHOT:
                        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                        case TSqlParser.STATIC:
                        case TSqlParser.STATS_STREAM:
                        case TSqlParser.STDEV:
                        case TSqlParser.STDEVP:
                        case TSqlParser.SUM:
                        case TSqlParser.TEXTIMAGE_ON:
                        case TSqlParser.THROW:
                        case TSqlParser.TIES:
                        case TSqlParser.TIME:
                        case TSqlParser.TRY:
                        case TSqlParser.TYPE:
                        case TSqlParser.TYPE_WARNING:
                        case TSqlParser.UNBOUNDED:
                        case TSqlParser.UNCOMMITTED:
                        case TSqlParser.UNKNOWN:
                        case TSqlParser.USING:
                        case TSqlParser.VALUE:
                        case TSqlParser.VAR:
                        case TSqlParser.VARP:
                        case TSqlParser.VIEWS:
                        case TSqlParser.VIEW_METADATA:
                        case TSqlParser.WORK:
                        case TSqlParser.XML:
                        case TSqlParser.XMLNAMESPACES:
                        case TSqlParser.DOUBLE_QUOTE_ID:
                        case TSqlParser.SQUARE_BRACKET_ID:
                        case TSqlParser.ID:
                            this.state = 7681;
                            this.id();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        }
                        break;

                    case 17:
                        this.state = 7685;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7684;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7687;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.NO_CHECKSUM || _la===TSqlParser.CHECKSUM)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 18:
                        this.state = 7689;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7688;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7691;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.CONTINUE_AFTER_ERROR || _la===TSqlParser.STOP_ON_ERROR)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 19:
                        this.state = 7693;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7692;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7695;
                        this.match(TSqlParser.RESTART);
                        break;

                    case 20:
                        this.state = 7697;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7696;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7699;
                        this.match(TSqlParser.STATS);
                        this.state = 7702;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.EQUAL) {
                            this.state = 7700;
                            this.match(TSqlParser.EQUAL);
                            this.state = 7701;
                            localctx.stats_percent = this.match(TSqlParser.DECIMAL);
                        }

                        break;

                    case 21:
                        this.state = 7705;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7704;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7707;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.NOREWIND || _la===TSqlParser.REWIND)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 22:
                        this.state = 7709;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7708;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7711;
                        _la = this._input.LA(1);
                        if(!(_la===TSqlParser.LOAD || _la===TSqlParser.NOUNLOAD)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    case 23:
                        this.state = 7713;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7712;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7719;
                        this._errHandler.sync(this);
                        switch(this._input.LA(1)) {
                        case TSqlParser.NORECOVERY:
                            this.state = 7715;
                            this.match(TSqlParser.NORECOVERY);
                            break;
                        case TSqlParser.STANDBY:
                            this.state = 7716;
                            this.match(TSqlParser.STANDBY);
                            this.state = 7717;
                            this.match(TSqlParser.EQUAL);
                            this.state = 7718;
                            localctx.undo_file_name = this.match(TSqlParser.STRING);
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        }
                        break;

                    case 24:
                        this.state = 7722;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7721;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7724;
                        this.match(TSqlParser.NO_TRUNCATE);
                        break;

                    case 25:
                        this.state = 7726;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===TSqlParser.COMMA) {
                            this.state = 7725;
                            this.match(TSqlParser.COMMA);
                        }

                        this.state = 7728;
                        this.match(TSqlParser.ENCRYPTION);
                        this.state = 7729;
                        this.match(TSqlParser.LR_BRACKET);
                        this.state = 7730;
                        this.match(TSqlParser.ALGORITHM);
                        this.state = 7731;
                        this.match(TSqlParser.EQUAL);
                        this.state = 7732;
                        _la = this._input.LA(1);
                        if(!(((((_la - 388)) & ~0x1f) == 0 && ((1 << (_la - 388)) & ((1 << (TSqlParser.AES_128 - 388)) | (1 << (TSqlParser.AES_192 - 388)) | (1 << (TSqlParser.AES_256 - 388)))) !== 0) || _la===TSqlParser.TRIPLE_DES_3KEY)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 7733;
                        this.match(TSqlParser.COMMA);
                        this.state = 7734;
                        this.match(TSqlParser.SERVER);
                        this.state = 7735;
                        this.match(TSqlParser.CERTIFICATE);
                        this.state = 7736;
                        this.match(TSqlParser.EQUAL);
                        this.state = 7743;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input,1072,this._ctx);
                        switch(la_) {
                        case 1:
                            this.state = 7737;
                            localctx.encryptor_name = this.id();
                            break;

                        case 2:
                            this.state = 7738;
                            this.match(TSqlParser.SERVER);
                            this.state = 7739;
                            this.match(TSqlParser.ASYMMETRIC);
                            this.state = 7740;
                            this.match(TSqlParser.KEY);
                            this.state = 7741;
                            this.match(TSqlParser.EQUAL);
                            this.state = 7742;
                            localctx.encryptor_name = this.id();
                            break;

                        }
                        break;

                    } 
                }
                this.state = 7749;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,1074,this._ctx);
            }


        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Backup_certificateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_backup_certificate;
    this.certname = null; // IdContext
    this.cert_file = null; // Token
    this.private_key_file = null; // Token
    this.encryption_password = null; // Token
    this.decryption_pasword = null; // Token
    return this;
}

Backup_certificateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Backup_certificateContext.prototype.constructor = Backup_certificateContext;

Backup_certificateContext.prototype.BACKUP = function() {
    return this.getToken(TSqlParser.BACKUP, 0);
};

Backup_certificateContext.prototype.CERTIFICATE = function() {
    return this.getToken(TSqlParser.CERTIFICATE, 0);
};

Backup_certificateContext.prototype.TO = function() {
    return this.getToken(TSqlParser.TO, 0);
};

Backup_certificateContext.prototype.FILE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.FILE);
    } else {
        return this.getToken(TSqlParser.FILE, i);
    }
};


Backup_certificateContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Backup_certificateContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Backup_certificateContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Backup_certificateContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Backup_certificateContext.prototype.PRIVATE = function() {
    return this.getToken(TSqlParser.PRIVATE, 0);
};

Backup_certificateContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Backup_certificateContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Backup_certificateContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Backup_certificateContext.prototype.ENCRYPTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ENCRYPTION);
    } else {
        return this.getToken(TSqlParser.ENCRYPTION, i);
    }
};


Backup_certificateContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.BY);
    } else {
        return this.getToken(TSqlParser.BY, i);
    }
};


Backup_certificateContext.prototype.PASSWORD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.PASSWORD);
    } else {
        return this.getToken(TSqlParser.PASSWORD, i);
    }
};


Backup_certificateContext.prototype.DECRYPTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECRYPTION);
    } else {
        return this.getToken(TSqlParser.DECRYPTION, i);
    }
};


Backup_certificateContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Backup_certificateContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterBackup_certificate(this);
	}
};

Backup_certificateContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitBackup_certificate(this);
	}
};




TSqlParser.Backup_certificateContext = Backup_certificateContext;

TSqlParser.prototype.backup_certificate = function() {

    var localctx = new Backup_certificateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 612, TSqlParser.RULE_backup_certificate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7752;
        this.match(TSqlParser.BACKUP);
        this.state = 7753;
        this.match(TSqlParser.CERTIFICATE);
        this.state = 7754;
        localctx.certname = this.id();
        this.state = 7755;
        this.match(TSqlParser.TO);
        this.state = 7756;
        this.match(TSqlParser.FILE);
        this.state = 7757;
        this.match(TSqlParser.EQUAL);
        this.state = 7758;
        localctx.cert_file = this.match(TSqlParser.STRING);
        this.state = 7790;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1081,this._ctx);
        if(la_===1) {
            this.state = 7759;
            this.match(TSqlParser.WITH);
            this.state = 7760;
            this.match(TSqlParser.PRIVATE);
            this.state = 7761;
            this.match(TSqlParser.KEY);
            this.state = 7762;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 7785; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 7785;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,1079,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 7764;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 7763;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 7766;
                    this.match(TSqlParser.FILE);
                    this.state = 7767;
                    this.match(TSqlParser.EQUAL);
                    this.state = 7768;
                    localctx.private_key_file = this.match(TSqlParser.STRING);
                    break;

                case 2:
                    this.state = 7770;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 7769;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 7772;
                    this.match(TSqlParser.ENCRYPTION);
                    this.state = 7773;
                    this.match(TSqlParser.BY);
                    this.state = 7774;
                    this.match(TSqlParser.PASSWORD);
                    this.state = 7775;
                    this.match(TSqlParser.EQUAL);
                    this.state = 7776;
                    localctx.encryption_password = this.match(TSqlParser.STRING);
                    break;

                case 3:
                    this.state = 7778;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.COMMA) {
                        this.state = 7777;
                        this.match(TSqlParser.COMMA);
                    }

                    this.state = 7780;
                    this.match(TSqlParser.DECRYPTION);
                    this.state = 7781;
                    this.match(TSqlParser.BY);
                    this.state = 7782;
                    this.match(TSqlParser.PASSWORD);
                    this.state = 7783;
                    this.match(TSqlParser.EQUAL);
                    this.state = 7784;
                    localctx.decryption_pasword = this.match(TSqlParser.STRING);
                    break;

                }
                this.state = 7787; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.FILE || _la===TSqlParser.DECRYPTION || _la===TSqlParser.ENCRYPTION || _la===TSqlParser.COMMA);
            this.state = 7789;
            this.match(TSqlParser.RR_BRACKET);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Backup_master_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_backup_master_key;
    this.master_key_backup_file = null; // Token
    this.encryption_password = null; // Token
    return this;
}

Backup_master_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Backup_master_keyContext.prototype.constructor = Backup_master_keyContext;

Backup_master_keyContext.prototype.BACKUP = function() {
    return this.getToken(TSqlParser.BACKUP, 0);
};

Backup_master_keyContext.prototype.MASTER = function() {
    return this.getToken(TSqlParser.MASTER, 0);
};

Backup_master_keyContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Backup_master_keyContext.prototype.TO = function() {
    return this.getToken(TSqlParser.TO, 0);
};

Backup_master_keyContext.prototype.FILE = function() {
    return this.getToken(TSqlParser.FILE, 0);
};

Backup_master_keyContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Backup_master_keyContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Backup_master_keyContext.prototype.BY = function() {
    return this.getToken(TSqlParser.BY, 0);
};

Backup_master_keyContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Backup_master_keyContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Backup_master_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterBackup_master_key(this);
	}
};

Backup_master_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitBackup_master_key(this);
	}
};




TSqlParser.Backup_master_keyContext = Backup_master_keyContext;

TSqlParser.prototype.backup_master_key = function() {

    var localctx = new Backup_master_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 614, TSqlParser.RULE_backup_master_key);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7792;
        this.match(TSqlParser.BACKUP);
        this.state = 7793;
        this.match(TSqlParser.MASTER);
        this.state = 7794;
        this.match(TSqlParser.KEY);
        this.state = 7795;
        this.match(TSqlParser.TO);
        this.state = 7796;
        this.match(TSqlParser.FILE);
        this.state = 7797;
        this.match(TSqlParser.EQUAL);
        this.state = 7798;
        localctx.master_key_backup_file = this.match(TSqlParser.STRING);
        this.state = 7799;
        this.match(TSqlParser.ENCRYPTION);
        this.state = 7800;
        this.match(TSqlParser.BY);
        this.state = 7801;
        this.match(TSqlParser.PASSWORD);
        this.state = 7802;
        this.match(TSqlParser.EQUAL);
        this.state = 7803;
        localctx.encryption_password = this.match(TSqlParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Backup_service_master_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_backup_service_master_key;
    this.service_master_key_backup_file = null; // Token
    this.encryption_password = null; // Token
    return this;
}

Backup_service_master_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Backup_service_master_keyContext.prototype.constructor = Backup_service_master_keyContext;

Backup_service_master_keyContext.prototype.BACKUP = function() {
    return this.getToken(TSqlParser.BACKUP, 0);
};

Backup_service_master_keyContext.prototype.SERVICE = function() {
    return this.getToken(TSqlParser.SERVICE, 0);
};

Backup_service_master_keyContext.prototype.MASTER = function() {
    return this.getToken(TSqlParser.MASTER, 0);
};

Backup_service_master_keyContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Backup_service_master_keyContext.prototype.TO = function() {
    return this.getToken(TSqlParser.TO, 0);
};

Backup_service_master_keyContext.prototype.FILE = function() {
    return this.getToken(TSqlParser.FILE, 0);
};

Backup_service_master_keyContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


Backup_service_master_keyContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Backup_service_master_keyContext.prototype.BY = function() {
    return this.getToken(TSqlParser.BY, 0);
};

Backup_service_master_keyContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Backup_service_master_keyContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Backup_service_master_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterBackup_service_master_key(this);
	}
};

Backup_service_master_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitBackup_service_master_key(this);
	}
};




TSqlParser.Backup_service_master_keyContext = Backup_service_master_keyContext;

TSqlParser.prototype.backup_service_master_key = function() {

    var localctx = new Backup_service_master_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 616, TSqlParser.RULE_backup_service_master_key);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7805;
        this.match(TSqlParser.BACKUP);
        this.state = 7806;
        this.match(TSqlParser.SERVICE);
        this.state = 7807;
        this.match(TSqlParser.MASTER);
        this.state = 7808;
        this.match(TSqlParser.KEY);
        this.state = 7809;
        this.match(TSqlParser.TO);
        this.state = 7810;
        this.match(TSqlParser.FILE);
        this.state = 7811;
        this.match(TSqlParser.EQUAL);
        this.state = 7812;
        localctx.service_master_key_backup_file = this.match(TSqlParser.STRING);
        this.state = 7813;
        this.match(TSqlParser.ENCRYPTION);
        this.state = 7814;
        this.match(TSqlParser.BY);
        this.state = 7815;
        this.match(TSqlParser.PASSWORD);
        this.state = 7816;
        this.match(TSqlParser.EQUAL);
        this.state = 7817;
        localctx.encryption_password = this.match(TSqlParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Execute_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_execute_statement;
    this.return_status = null; // Token
    return this;
}

Execute_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Execute_statementContext.prototype.constructor = Execute_statementContext;

Execute_statementContext.prototype.EXECUTE = function() {
    return this.getToken(TSqlParser.EXECUTE, 0);
};

Execute_statementContext.prototype.func_proc_name = function() {
    return this.getTypedRuleContext(Func_proc_nameContext,0);
};

Execute_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Execute_statementContext.prototype.execute_statement_arg = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Execute_statement_argContext);
    } else {
        return this.getTypedRuleContext(Execute_statement_argContext,i);
    }
};

Execute_statementContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Execute_statementContext.prototype.execute_var_string = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Execute_var_stringContext);
    } else {
        return this.getTypedRuleContext(Execute_var_stringContext,i);
    }
};

Execute_statementContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Execute_statementContext.prototype.LOGIN = function() {
    return this.getToken(TSqlParser.LOGIN, 0);
};

Execute_statementContext.prototype.USER = function() {
    return this.getToken(TSqlParser.USER, 0);
};

Execute_statementContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Execute_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterExecute_statement(this);
	}
};

Execute_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitExecute_statement(this);
	}
};




TSqlParser.Execute_statementContext = Execute_statementContext;

TSqlParser.prototype.execute_statement = function() {

    var localctx = new Execute_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 618, TSqlParser.RULE_execute_statement);
    var _la = 0; // Token type
    try {
        this.state = 7863;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1091,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7819;
            this.match(TSqlParser.EXECUTE);
            this.state = 7822;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1082,this._ctx);
            if(la_===1) {
                this.state = 7820;
                localctx.return_status = this.match(TSqlParser.LOCAL_ID);
                this.state = 7821;
                this.match(TSqlParser.EQUAL);

            }
            this.state = 7826;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1083,this._ctx);
            switch(la_) {
            case 1:
                this.state = 7824;
                this.func_proc_name();
                break;

            case 2:
                this.state = 7825;
                this.expression(0);
                break;

            }
            this.state = 7836;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1085,this._ctx);
            if(la_===1) {
                this.state = 7828;
                this.execute_statement_arg();
                this.state = 7833;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===TSqlParser.COMMA) {
                    this.state = 7829;
                    this.match(TSqlParser.COMMA);
                    this.state = 7830;
                    this.execute_statement_arg();
                    this.state = 7835;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }

            }
            this.state = 7839;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1086,this._ctx);
            if(la_===1) {
                this.state = 7838;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7841;
            this.match(TSqlParser.EXECUTE);
            this.state = 7842;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 7843;
            this.execute_var_string();
            this.state = 7848;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.PLUS) {
                this.state = 7844;
                this.match(TSqlParser.PLUS);
                this.state = 7845;
                this.execute_var_string();
                this.state = 7850;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 7851;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 7858;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1089,this._ctx);
            if(la_===1) {
                this.state = 7853;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.AS) {
                    this.state = 7852;
                    this.match(TSqlParser.AS);
                }

                this.state = 7855;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.USER || _la===TSqlParser.LOGIN)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 7856;
                this.match(TSqlParser.EQUAL);
                this.state = 7857;
                this.match(TSqlParser.STRING);

            }
            this.state = 7861;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1090,this._ctx);
            if(la_===1) {
                this.state = 7860;
                this.match(TSqlParser.SEMI);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Execute_statement_argContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_execute_statement_arg;
    this.parameter = null; // Token
    return this;
}

Execute_statement_argContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Execute_statement_argContext.prototype.constructor = Execute_statement_argContext;

Execute_statement_argContext.prototype.DEFAULT = function() {
    return this.getToken(TSqlParser.DEFAULT, 0);
};

Execute_statement_argContext.prototype.NULL = function() {
    return this.getToken(TSqlParser.NULL, 0);
};

Execute_statement_argContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Execute_statement_argContext.prototype.constant_LOCAL_ID = function() {
    return this.getTypedRuleContext(Constant_LOCAL_IDContext,0);
};

Execute_statement_argContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Execute_statement_argContext.prototype.OUTPUT = function() {
    return this.getToken(TSqlParser.OUTPUT, 0);
};

Execute_statement_argContext.prototype.OUT = function() {
    return this.getToken(TSqlParser.OUT, 0);
};

Execute_statement_argContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterExecute_statement_arg(this);
	}
};

Execute_statement_argContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitExecute_statement_arg(this);
	}
};




TSqlParser.Execute_statement_argContext = Execute_statement_argContext;

TSqlParser.prototype.execute_statement_arg = function() {

    var localctx = new Execute_statement_argContext(this, this._ctx, this.state);
    this.enterRule(localctx, 620, TSqlParser.RULE_execute_statement_arg);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7867;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1092,this._ctx);
        if(la_===1) {
            this.state = 7865;
            localctx.parameter = this.match(TSqlParser.LOCAL_ID);
            this.state = 7866;
            this.match(TSqlParser.EQUAL);

        }
        this.state = 7878;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.LOCAL_ID:
        case TSqlParser.DECIMAL:
        case TSqlParser.ID:
        case TSqlParser.STRING:
        case TSqlParser.BINARY:
        case TSqlParser.FLOAT:
        case TSqlParser.REAL:
        case TSqlParser.DOLLAR:
        case TSqlParser.PLUS:
        case TSqlParser.MINUS:
            this.state = 7871;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.LOCAL_ID:
            case TSqlParser.DECIMAL:
            case TSqlParser.STRING:
            case TSqlParser.BINARY:
            case TSqlParser.FLOAT:
            case TSqlParser.REAL:
            case TSqlParser.DOLLAR:
            case TSqlParser.PLUS:
            case TSqlParser.MINUS:
                this.state = 7869;
                this.constant_LOCAL_ID();
                break;
            case TSqlParser.CALLED:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.EVENTDATA:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.KEY:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.OFFSETS:
            case TSqlParser.PAGE:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SERVER:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.TARGET:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.APPLY:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GLOBAL:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAST:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.ID:
                this.state = 7870;
                this.id();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 7874;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1094,this._ctx);
            if(la_===1) {
                this.state = 7873;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.OUT || _la===TSqlParser.OUTPUT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            break;
        case TSqlParser.DEFAULT:
            this.state = 7876;
            this.match(TSqlParser.DEFAULT);
            break;
        case TSqlParser.NULL:
            this.state = 7877;
            this.match(TSqlParser.NULL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Execute_var_stringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_execute_var_string;
    return this;
}

Execute_var_stringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Execute_var_stringContext.prototype.constructor = Execute_var_stringContext;

Execute_var_stringContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Execute_var_stringContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Execute_var_stringContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterExecute_var_string(this);
	}
};

Execute_var_stringContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitExecute_var_string(this);
	}
};




TSqlParser.Execute_var_stringContext = Execute_var_stringContext;

TSqlParser.prototype.execute_var_string = function() {

    var localctx = new Execute_var_stringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 622, TSqlParser.RULE_execute_var_string);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7880;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.LOCAL_ID || _la===TSqlParser.STRING)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Security_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_security_statement;
    this.on_id = null; // Table_nameContext
    this._id = null; // IdContext
    this.to_principal = []; // of IdContexts
    this.as_principal = null; // IdContext
    return this;
}

Security_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Security_statementContext.prototype.constructor = Security_statementContext;

Security_statementContext.prototype.execute_clause = function() {
    return this.getTypedRuleContext(Execute_clauseContext,0);
};

Security_statementContext.prototype.GRANT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.GRANT);
    } else {
        return this.getToken(TSqlParser.GRANT, i);
    }
};


Security_statementContext.prototype.TO = function() {
    return this.getToken(TSqlParser.TO, 0);
};

Security_statementContext.prototype.ALL = function() {
    return this.getToken(TSqlParser.ALL, 0);
};

Security_statementContext.prototype.grant_permission = function() {
    return this.getTypedRuleContext(Grant_permissionContext,0);
};

Security_statementContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Security_statementContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Security_statementContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Security_statementContext.prototype.OPTION = function() {
    return this.getToken(TSqlParser.OPTION, 0);
};

Security_statementContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Security_statementContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Security_statementContext.prototype.PRIVILEGES = function() {
    return this.getToken(TSqlParser.PRIVILEGES, 0);
};

Security_statementContext.prototype.column_name_list = function() {
    return this.getTypedRuleContext(Column_name_listContext,0);
};

Security_statementContext.prototype.REVERT = function() {
    return this.getToken(TSqlParser.REVERT, 0);
};

Security_statementContext.prototype.COOKIE = function() {
    return this.getToken(TSqlParser.COOKIE, 0);
};

Security_statementContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Security_statementContext.prototype.open_key = function() {
    return this.getTypedRuleContext(Open_keyContext,0);
};

Security_statementContext.prototype.close_key = function() {
    return this.getTypedRuleContext(Close_keyContext,0);
};

Security_statementContext.prototype.create_key = function() {
    return this.getTypedRuleContext(Create_keyContext,0);
};

Security_statementContext.prototype.create_certificate = function() {
    return this.getTypedRuleContext(Create_certificateContext,0);
};

Security_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSecurity_statement(this);
	}
};

Security_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSecurity_statement(this);
	}
};




TSqlParser.Security_statementContext = Security_statementContext;

TSqlParser.prototype.security_statement = function() {

    var localctx = new Security_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 624, TSqlParser.RULE_security_statement);
    var _la = 0; // Token type
    try {
        this.state = 7941;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1107,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 7882;
            this.execute_clause();
            this.state = 7884;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1096,this._ctx);
            if(la_===1) {
                this.state = 7883;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 7886;
            this.match(TSqlParser.GRANT);
            this.state = 7898;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.ALL:
                this.state = 7887;
                this.match(TSqlParser.ALL);
                this.state = 7889;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.PRIVILEGES) {
                    this.state = 7888;
                    this.match(TSqlParser.PRIVILEGES);
                }

                break;
            case TSqlParser.ALTER:
            case TSqlParser.CREATE:
            case TSqlParser.EXECUTE:
            case TSqlParser.INSERT:
            case TSqlParser.REFERENCES:
            case TSqlParser.SELECT:
            case TSqlParser.VIEW:
            case TSqlParser.CONTROL:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.SHOWPLAN:
            case TSqlParser.TAKE:
                this.state = 7891;
                this.grant_permission();
                this.state = 7896;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.LR_BRACKET) {
                    this.state = 7892;
                    this.match(TSqlParser.LR_BRACKET);
                    this.state = 7893;
                    this.column_name_list();
                    this.state = 7894;
                    this.match(TSqlParser.RR_BRACKET);
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 7902;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.ON) {
                this.state = 7900;
                this.match(TSqlParser.ON);
                this.state = 7901;
                localctx.on_id = this.table_name();
            }

            this.state = 7904;
            this.match(TSqlParser.TO);

            this.state = 7905;
            localctx._id = this.id();
            localctx.to_principal.push(localctx._id);
            this.state = 7910;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 7906;
                this.match(TSqlParser.COMMA);
                this.state = 7907;
                localctx._id = this.id();
                localctx.to_principal.push(localctx._id);
                this.state = 7912;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 7916;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1102,this._ctx);
            if(la_===1) {
                this.state = 7913;
                this.match(TSqlParser.WITH);
                this.state = 7914;
                this.match(TSqlParser.GRANT);
                this.state = 7915;
                this.match(TSqlParser.OPTION);

            }
            this.state = 7920;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.AS) {
                this.state = 7918;
                this.match(TSqlParser.AS);
                this.state = 7919;
                localctx.as_principal = this.id();
            }

            this.state = 7923;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1104,this._ctx);
            if(la_===1) {
                this.state = 7922;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 7925;
            this.match(TSqlParser.REVERT);
            this.state = 7932;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1105,this._ctx);
            if(la_===1) {
                this.state = 7926;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 7927;
                this.match(TSqlParser.WITH);
                this.state = 7928;
                this.match(TSqlParser.COOKIE);
                this.state = 7929;
                this.match(TSqlParser.EQUAL);
                this.state = 7930;
                this.match(TSqlParser.LOCAL_ID);
                this.state = 7931;
                this.match(TSqlParser.RR_BRACKET);

            }
            this.state = 7935;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1106,this._ctx);
            if(la_===1) {
                this.state = 7934;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 7937;
            this.open_key();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 7938;
            this.close_key();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 7939;
            this.create_key();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 7940;
            this.create_certificate();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_certificateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_certificate;
    this.certificate_name = null; // IdContext
    this.user_name = null; // IdContext
    return this;
}

Create_certificateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_certificateContext.prototype.constructor = Create_certificateContext;

Create_certificateContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_certificateContext.prototype.CERTIFICATE = function() {
    return this.getToken(TSqlParser.CERTIFICATE, 0);
};

Create_certificateContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_certificateContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Create_certificateContext.prototype.existing_keys = function() {
    return this.getTypedRuleContext(Existing_keysContext,0);
};

Create_certificateContext.prototype.generate_new_keys = function() {
    return this.getTypedRuleContext(Generate_new_keysContext,0);
};

Create_certificateContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Create_certificateContext.prototype.ACTIVE = function() {
    return this.getToken(TSqlParser.ACTIVE, 0);
};

Create_certificateContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Create_certificateContext.prototype.BEGIN = function() {
    return this.getToken(TSqlParser.BEGIN, 0);
};

Create_certificateContext.prototype.DIALOG = function() {
    return this.getToken(TSqlParser.DIALOG, 0);
};

Create_certificateContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Create_certificateContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Create_certificateContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_certificate(this);
	}
};

Create_certificateContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_certificate(this);
	}
};




TSqlParser.Create_certificateContext = Create_certificateContext;

TSqlParser.prototype.create_certificate = function() {

    var localctx = new Create_certificateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 626, TSqlParser.RULE_create_certificate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7943;
        this.match(TSqlParser.CREATE);
        this.state = 7944;
        this.match(TSqlParser.CERTIFICATE);
        this.state = 7945;
        localctx.certificate_name = this.id();
        this.state = 7948;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AUTHORIZATION) {
            this.state = 7946;
            this.match(TSqlParser.AUTHORIZATION);
            this.state = 7947;
            localctx.user_name = this.id();
        }

        this.state = 7953;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.FROM:
            this.state = 7950;
            this.match(TSqlParser.FROM);
            this.state = 7951;
            this.existing_keys();
            break;
        case TSqlParser.WITH:
        case TSqlParser.ENCRYPTION:
            this.state = 7952;
            this.generate_new_keys();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 7961;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1110,this._ctx);
        if(la_===1) {
            this.state = 7955;
            this.match(TSqlParser.ACTIVE);
            this.state = 7956;
            this.match(TSqlParser.FOR);
            this.state = 7957;
            this.match(TSqlParser.BEGIN);
            this.state = 7958;
            this.match(TSqlParser.DIALOG);
            this.state = 7959;
            this.match(TSqlParser.EQUAL);
            this.state = 7960;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Existing_keysContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_existing_keys;
    this.assembly_name = null; // IdContext
    this.path_to_file = null; // Token
    return this;
}

Existing_keysContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Existing_keysContext.prototype.constructor = Existing_keysContext;

Existing_keysContext.prototype.ASSEMBLY = function() {
    return this.getToken(TSqlParser.ASSEMBLY, 0);
};

Existing_keysContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Existing_keysContext.prototype.FILE = function() {
    return this.getToken(TSqlParser.FILE, 0);
};

Existing_keysContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Existing_keysContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Existing_keysContext.prototype.EXECUTABLE = function() {
    return this.getToken(TSqlParser.EXECUTABLE, 0);
};

Existing_keysContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Existing_keysContext.prototype.PRIVATE = function() {
    return this.getToken(TSqlParser.PRIVATE, 0);
};

Existing_keysContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Existing_keysContext.prototype.private_key_options = function() {
    return this.getTypedRuleContext(Private_key_optionsContext,0);
};

Existing_keysContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterExisting_keys(this);
	}
};

Existing_keysContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitExisting_keys(this);
	}
};




TSqlParser.Existing_keysContext = Existing_keysContext;

TSqlParser.prototype.existing_keys = function() {

    var localctx = new Existing_keysContext(this, this._ctx, this.state);
    this.enterRule(localctx, 628, TSqlParser.RULE_existing_keys);
    var _la = 0; // Token type
    try {
        this.state = 7980;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.ASSEMBLY:
            this.enterOuterAlt(localctx, 1);
            this.state = 7963;
            this.match(TSqlParser.ASSEMBLY);
            this.state = 7964;
            localctx.assembly_name = this.id();
            break;
        case TSqlParser.FILE:
        case TSqlParser.EXECUTABLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 7966;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.EXECUTABLE) {
                this.state = 7965;
                this.match(TSqlParser.EXECUTABLE);
            }

            this.state = 7968;
            this.match(TSqlParser.FILE);
            this.state = 7969;
            this.match(TSqlParser.EQUAL);
            this.state = 7970;
            localctx.path_to_file = this.match(TSqlParser.STRING);
            this.state = 7978;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1112,this._ctx);
            if(la_===1) {
                this.state = 7971;
                this.match(TSqlParser.WITH);
                this.state = 7972;
                this.match(TSqlParser.PRIVATE);
                this.state = 7973;
                this.match(TSqlParser.KEY);
                this.state = 7974;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 7975;
                this.private_key_options();
                this.state = 7976;
                this.match(TSqlParser.RR_BRACKET);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Private_key_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_private_key_options;
    this.path = null; // Token
    this.password = null; // Token
    return this;
}

Private_key_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Private_key_optionsContext.prototype.constructor = Private_key_optionsContext;

Private_key_optionsContext.prototype.FILE = function() {
    return this.getToken(TSqlParser.FILE, 0);
};

Private_key_optionsContext.prototype.BINARY = function() {
    return this.getToken(TSqlParser.BINARY, 0);
};

Private_key_optionsContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Private_key_optionsContext.prototype.BY = function() {
    return this.getToken(TSqlParser.BY, 0);
};

Private_key_optionsContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Private_key_optionsContext.prototype.DECRYPTION = function() {
    return this.getToken(TSqlParser.DECRYPTION, 0);
};

Private_key_optionsContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Private_key_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterPrivate_key_options(this);
	}
};

Private_key_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitPrivate_key_options(this);
	}
};




TSqlParser.Private_key_optionsContext = Private_key_optionsContext;

TSqlParser.prototype.private_key_options = function() {

    var localctx = new Private_key_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 630, TSqlParser.RULE_private_key_options);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7982;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.FILE || _la===TSqlParser.BINARY)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 7983;
        this.match(TSqlParser.EQUAL);
        this.state = 7984;
        localctx.path = this.match(TSqlParser.STRING);
        this.state = 7991;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 7985;
            this.match(TSqlParser.COMMA);
            this.state = 7986;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.DECRYPTION || _la===TSqlParser.ENCRYPTION)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 7987;
            this.match(TSqlParser.BY);
            this.state = 7988;
            this.match(TSqlParser.PASSWORD);
            this.state = 7989;
            this.match(TSqlParser.EQUAL);
            this.state = 7990;
            localctx.password = this.match(TSqlParser.STRING);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Generate_new_keysContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_generate_new_keys;
    this.password = null; // Token
    this.certificate_subject_name = null; // Token
    return this;
}

Generate_new_keysContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Generate_new_keysContext.prototype.constructor = Generate_new_keysContext;

Generate_new_keysContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Generate_new_keysContext.prototype.SUBJECT = function() {
    return this.getToken(TSqlParser.SUBJECT, 0);
};

Generate_new_keysContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Generate_new_keysContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Generate_new_keysContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Generate_new_keysContext.prototype.BY = function() {
    return this.getToken(TSqlParser.BY, 0);
};

Generate_new_keysContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Generate_new_keysContext.prototype.date_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Date_optionsContext);
    } else {
        return this.getTypedRuleContext(Date_optionsContext,i);
    }
};

Generate_new_keysContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterGenerate_new_keys(this);
	}
};

Generate_new_keysContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitGenerate_new_keys(this);
	}
};




TSqlParser.Generate_new_keysContext = Generate_new_keysContext;

TSqlParser.prototype.generate_new_keys = function() {

    var localctx = new Generate_new_keysContext(this, this._ctx, this.state);
    this.enterRule(localctx, 632, TSqlParser.RULE_generate_new_keys);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 7998;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.ENCRYPTION) {
            this.state = 7993;
            this.match(TSqlParser.ENCRYPTION);
            this.state = 7994;
            this.match(TSqlParser.BY);
            this.state = 7995;
            this.match(TSqlParser.PASSWORD);
            this.state = 7996;
            this.match(TSqlParser.EQUAL);
            this.state = 7997;
            localctx.password = this.match(TSqlParser.STRING);
        }

        this.state = 8000;
        this.match(TSqlParser.WITH);
        this.state = 8001;
        this.match(TSqlParser.SUBJECT);
        this.state = 8002;
        this.match(TSqlParser.EQUAL);
        this.state = 8003;
        localctx.certificate_subject_name = this.match(TSqlParser.STRING);
        this.state = 8008;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 8004;
            this.match(TSqlParser.COMMA);
            this.state = 8005;
            this.date_options();
            this.state = 8010;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Date_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_date_options;
    return this;
}

Date_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Date_optionsContext.prototype.constructor = Date_optionsContext;

Date_optionsContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Date_optionsContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Date_optionsContext.prototype.START_DATE = function() {
    return this.getToken(TSqlParser.START_DATE, 0);
};

Date_optionsContext.prototype.EXPIRY_DATE = function() {
    return this.getToken(TSqlParser.EXPIRY_DATE, 0);
};

Date_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDate_options(this);
	}
};

Date_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDate_options(this);
	}
};




TSqlParser.Date_optionsContext = Date_optionsContext;

TSqlParser.prototype.date_options = function() {

    var localctx = new Date_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 634, TSqlParser.RULE_date_options);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8011;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.EXPIRY_DATE || _la===TSqlParser.START_DATE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 8012;
        this.match(TSqlParser.EQUAL);
        this.state = 8013;
        this.match(TSqlParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Open_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_open_key;
    this.key_name = null; // IdContext
    this.password = null; // Token
    return this;
}

Open_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Open_keyContext.prototype.constructor = Open_keyContext;

Open_keyContext.prototype.OPEN = function() {
    return this.getToken(TSqlParser.OPEN, 0);
};

Open_keyContext.prototype.SYMMETRIC = function() {
    return this.getToken(TSqlParser.SYMMETRIC, 0);
};

Open_keyContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Open_keyContext.prototype.DECRYPTION = function() {
    return this.getToken(TSqlParser.DECRYPTION, 0);
};

Open_keyContext.prototype.BY = function() {
    return this.getToken(TSqlParser.BY, 0);
};

Open_keyContext.prototype.decryption_mechanism = function() {
    return this.getTypedRuleContext(Decryption_mechanismContext,0);
};

Open_keyContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Open_keyContext.prototype.MASTER = function() {
    return this.getToken(TSqlParser.MASTER, 0);
};

Open_keyContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Open_keyContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Open_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterOpen_key(this);
	}
};

Open_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitOpen_key(this);
	}
};




TSqlParser.Open_keyContext = Open_keyContext;

TSqlParser.prototype.open_key = function() {

    var localctx = new Open_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 636, TSqlParser.RULE_open_key);
    try {
        this.state = 8031;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1117,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8015;
            this.match(TSqlParser.OPEN);
            this.state = 8016;
            this.match(TSqlParser.SYMMETRIC);
            this.state = 8017;
            this.match(TSqlParser.KEY);
            this.state = 8018;
            localctx.key_name = this.id();
            this.state = 8019;
            this.match(TSqlParser.DECRYPTION);
            this.state = 8020;
            this.match(TSqlParser.BY);
            this.state = 8021;
            this.decryption_mechanism();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8023;
            this.match(TSqlParser.OPEN);
            this.state = 8024;
            this.match(TSqlParser.MASTER);
            this.state = 8025;
            this.match(TSqlParser.KEY);
            this.state = 8026;
            this.match(TSqlParser.DECRYPTION);
            this.state = 8027;
            this.match(TSqlParser.BY);
            this.state = 8028;
            this.match(TSqlParser.PASSWORD);
            this.state = 8029;
            this.match(TSqlParser.EQUAL);
            this.state = 8030;
            localctx.password = this.match(TSqlParser.STRING);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Close_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_close_key;
    this.key_name = null; // IdContext
    return this;
}

Close_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Close_keyContext.prototype.constructor = Close_keyContext;

Close_keyContext.prototype.CLOSE = function() {
    return this.getToken(TSqlParser.CLOSE, 0);
};

Close_keyContext.prototype.SYMMETRIC = function() {
    return this.getToken(TSqlParser.SYMMETRIC, 0);
};

Close_keyContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Close_keyContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Close_keyContext.prototype.ALL = function() {
    return this.getToken(TSqlParser.ALL, 0);
};

Close_keyContext.prototype.KEYS = function() {
    return this.getToken(TSqlParser.KEYS, 0);
};

Close_keyContext.prototype.MASTER = function() {
    return this.getToken(TSqlParser.MASTER, 0);
};

Close_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterClose_key(this);
	}
};

Close_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitClose_key(this);
	}
};




TSqlParser.Close_keyContext = Close_keyContext;

TSqlParser.prototype.close_key = function() {

    var localctx = new Close_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 638, TSqlParser.RULE_close_key);
    try {
        this.state = 8044;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1118,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8033;
            this.match(TSqlParser.CLOSE);
            this.state = 8034;
            this.match(TSqlParser.SYMMETRIC);
            this.state = 8035;
            this.match(TSqlParser.KEY);
            this.state = 8036;
            localctx.key_name = this.id();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8037;
            this.match(TSqlParser.CLOSE);
            this.state = 8038;
            this.match(TSqlParser.ALL);
            this.state = 8039;
            this.match(TSqlParser.SYMMETRIC);
            this.state = 8040;
            this.match(TSqlParser.KEYS);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 8041;
            this.match(TSqlParser.CLOSE);
            this.state = 8042;
            this.match(TSqlParser.MASTER);
            this.state = 8043;
            this.match(TSqlParser.KEY);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_keyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_key;
    this.password = null; // Token
    this.key_name = null; // IdContext
    this.user_name = null; // IdContext
    this.provider_name = null; // IdContext
    return this;
}

Create_keyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_keyContext.prototype.constructor = Create_keyContext;

Create_keyContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Create_keyContext.prototype.MASTER = function() {
    return this.getToken(TSqlParser.MASTER, 0);
};

Create_keyContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Create_keyContext.prototype.ENCRYPTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ENCRYPTION);
    } else {
        return this.getToken(TSqlParser.ENCRYPTION, i);
    }
};


Create_keyContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.BY);
    } else {
        return this.getToken(TSqlParser.BY, i);
    }
};


Create_keyContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Create_keyContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Create_keyContext.prototype.SYMMETRIC = function() {
    return this.getToken(TSqlParser.SYMMETRIC, 0);
};

Create_keyContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Create_keyContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Create_keyContext.prototype.AUTHORIZATION = function() {
    return this.getToken(TSqlParser.AUTHORIZATION, 0);
};

Create_keyContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Create_keyContext.prototype.PROVIDER = function() {
    return this.getToken(TSqlParser.PROVIDER, 0);
};

Create_keyContext.prototype.key_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Key_optionsContext);
    } else {
        return this.getTypedRuleContext(Key_optionsContext,i);
    }
};

Create_keyContext.prototype.encryption_mechanism = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Encryption_mechanismContext);
    } else {
        return this.getTypedRuleContext(Encryption_mechanismContext,i);
    }
};

Create_keyContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_key(this);
	}
};

Create_keyContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_key(this);
	}
};




TSqlParser.Create_keyContext = Create_keyContext;

TSqlParser.prototype.create_key = function() {

    var localctx = new Create_keyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 640, TSqlParser.RULE_create_key);
    var _la = 0; // Token type
    try {
        this.state = 8081;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1124,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8046;
            this.match(TSqlParser.CREATE);
            this.state = 8047;
            this.match(TSqlParser.MASTER);
            this.state = 8048;
            this.match(TSqlParser.KEY);
            this.state = 8049;
            this.match(TSqlParser.ENCRYPTION);
            this.state = 8050;
            this.match(TSqlParser.BY);
            this.state = 8051;
            this.match(TSqlParser.PASSWORD);
            this.state = 8052;
            this.match(TSqlParser.EQUAL);
            this.state = 8053;
            localctx.password = this.match(TSqlParser.STRING);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8054;
            this.match(TSqlParser.CREATE);
            this.state = 8055;
            this.match(TSqlParser.SYMMETRIC);
            this.state = 8056;
            this.match(TSqlParser.KEY);
            this.state = 8057;
            localctx.key_name = this.id();
            this.state = 8060;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.AUTHORIZATION) {
                this.state = 8058;
                this.match(TSqlParser.AUTHORIZATION);
                this.state = 8059;
                localctx.user_name = this.id();
            }

            this.state = 8065;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.FROM) {
                this.state = 8062;
                this.match(TSqlParser.FROM);
                this.state = 8063;
                this.match(TSqlParser.PROVIDER);
                this.state = 8064;
                localctx.provider_name = this.id();
            }

            this.state = 8067;
            this.match(TSqlParser.WITH);
            this.state = 8077; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 8072;
            		this._errHandler.sync(this);
            		switch(this._input.LA(1)) {
            		case TSqlParser.ALGORITHM:
            		case TSqlParser.CREATION_DISPOSITION:
            		case TSqlParser.IDENTITY_VALUE:
            		case TSqlParser.KEY_SOURCE:
            		case TSqlParser.PROVIDER_KEY_NAME:
            		    this.state = 8068;
            		    this.key_options();
            		    break;
            		case TSqlParser.ENCRYPTION:
            		    this.state = 8069;
            		    this.match(TSqlParser.ENCRYPTION);
            		    this.state = 8070;
            		    this.match(TSqlParser.BY);
            		    this.state = 8071;
            		    this.encryption_mechanism();
            		    break;
            		default:
            		    throw new antlr4.error.NoViableAltException(this);
            		}
            		this.state = 8075;
            		this._errHandler.sync(this);
            		_la = this._input.LA(1);
            		if(_la===TSqlParser.COMMA) {
            		    this.state = 8074;
            		    this.match(TSqlParser.COMMA);
            		}

            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 8079; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,1123, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Key_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_key_options;
    this.pass_phrase = null; // Token
    this.identity_phrase = null; // Token
    this.key_name_in_provider = null; // Token
    return this;
}

Key_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Key_optionsContext.prototype.constructor = Key_optionsContext;

Key_optionsContext.prototype.KEY_SOURCE = function() {
    return this.getToken(TSqlParser.KEY_SOURCE, 0);
};

Key_optionsContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Key_optionsContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Key_optionsContext.prototype.ALGORITHM = function() {
    return this.getToken(TSqlParser.ALGORITHM, 0);
};

Key_optionsContext.prototype.algorithm = function() {
    return this.getTypedRuleContext(AlgorithmContext,0);
};

Key_optionsContext.prototype.IDENTITY_VALUE = function() {
    return this.getToken(TSqlParser.IDENTITY_VALUE, 0);
};

Key_optionsContext.prototype.PROVIDER_KEY_NAME = function() {
    return this.getToken(TSqlParser.PROVIDER_KEY_NAME, 0);
};

Key_optionsContext.prototype.CREATION_DISPOSITION = function() {
    return this.getToken(TSqlParser.CREATION_DISPOSITION, 0);
};

Key_optionsContext.prototype.CREATE_NEW = function() {
    return this.getToken(TSqlParser.CREATE_NEW, 0);
};

Key_optionsContext.prototype.OPEN_EXISTING = function() {
    return this.getToken(TSqlParser.OPEN_EXISTING, 0);
};

Key_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterKey_options(this);
	}
};

Key_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitKey_options(this);
	}
};




TSqlParser.Key_optionsContext = Key_optionsContext;

TSqlParser.prototype.key_options = function() {

    var localctx = new Key_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 642, TSqlParser.RULE_key_options);
    var _la = 0; // Token type
    try {
        this.state = 8098;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.KEY_SOURCE:
            this.enterOuterAlt(localctx, 1);
            this.state = 8083;
            this.match(TSqlParser.KEY_SOURCE);
            this.state = 8084;
            this.match(TSqlParser.EQUAL);
            this.state = 8085;
            localctx.pass_phrase = this.match(TSqlParser.STRING);
            break;
        case TSqlParser.ALGORITHM:
            this.enterOuterAlt(localctx, 2);
            this.state = 8086;
            this.match(TSqlParser.ALGORITHM);
            this.state = 8087;
            this.match(TSqlParser.EQUAL);
            this.state = 8088;
            this.algorithm();
            break;
        case TSqlParser.IDENTITY_VALUE:
            this.enterOuterAlt(localctx, 3);
            this.state = 8089;
            this.match(TSqlParser.IDENTITY_VALUE);
            this.state = 8090;
            this.match(TSqlParser.EQUAL);
            this.state = 8091;
            localctx.identity_phrase = this.match(TSqlParser.STRING);
            break;
        case TSqlParser.PROVIDER_KEY_NAME:
            this.enterOuterAlt(localctx, 4);
            this.state = 8092;
            this.match(TSqlParser.PROVIDER_KEY_NAME);
            this.state = 8093;
            this.match(TSqlParser.EQUAL);
            this.state = 8094;
            localctx.key_name_in_provider = this.match(TSqlParser.STRING);
            break;
        case TSqlParser.CREATION_DISPOSITION:
            this.enterOuterAlt(localctx, 5);
            this.state = 8095;
            this.match(TSqlParser.CREATION_DISPOSITION);
            this.state = 8096;
            this.match(TSqlParser.EQUAL);
            this.state = 8097;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.CREATE_NEW || _la===TSqlParser.OPEN_EXISTING)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlgorithmContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_algorithm;
    return this;
}

AlgorithmContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlgorithmContext.prototype.constructor = AlgorithmContext;

AlgorithmContext.prototype.DES = function() {
    return this.getToken(TSqlParser.DES, 0);
};

AlgorithmContext.prototype.TRIPLE_DES = function() {
    return this.getToken(TSqlParser.TRIPLE_DES, 0);
};

AlgorithmContext.prototype.TRIPLE_DES_3KEY = function() {
    return this.getToken(TSqlParser.TRIPLE_DES_3KEY, 0);
};

AlgorithmContext.prototype.RC2 = function() {
    return this.getToken(TSqlParser.RC2, 0);
};

AlgorithmContext.prototype.RC4 = function() {
    return this.getToken(TSqlParser.RC4, 0);
};

AlgorithmContext.prototype.RC4_128 = function() {
    return this.getToken(TSqlParser.RC4_128, 0);
};

AlgorithmContext.prototype.DESX = function() {
    return this.getToken(TSqlParser.DESX, 0);
};

AlgorithmContext.prototype.AES_128 = function() {
    return this.getToken(TSqlParser.AES_128, 0);
};

AlgorithmContext.prototype.AES_192 = function() {
    return this.getToken(TSqlParser.AES_192, 0);
};

AlgorithmContext.prototype.AES_256 = function() {
    return this.getToken(TSqlParser.AES_256, 0);
};

AlgorithmContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAlgorithm(this);
	}
};

AlgorithmContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAlgorithm(this);
	}
};




TSqlParser.AlgorithmContext = AlgorithmContext;

TSqlParser.prototype.algorithm = function() {

    var localctx = new AlgorithmContext(this, this._ctx, this.state);
    this.enterRule(localctx, 644, TSqlParser.RULE_algorithm);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8100;
        _la = this._input.LA(1);
        if(!(((((_la - 388)) & ~0x1f) == 0 && ((1 << (_la - 388)) & ((1 << (TSqlParser.AES_128 - 388)) | (1 << (TSqlParser.AES_192 - 388)) | (1 << (TSqlParser.AES_256 - 388)))) !== 0) || _la===TSqlParser.DES || _la===TSqlParser.DESX || ((((_la - 654)) & ~0x1f) == 0 && ((1 << (_la - 654)) & ((1 << (TSqlParser.RC2 - 654)) | (1 << (TSqlParser.RC4 - 654)) | (1 << (TSqlParser.RC4_128 - 654)))) !== 0) || _la===TSqlParser.TRIPLE_DES || _la===TSqlParser.TRIPLE_DES_3KEY)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Encryption_mechanismContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_encryption_mechanism;
    this.certificate_name = null; // IdContext
    this.asym_key_name = null; // IdContext
    this.decrypting_Key_name = null; // IdContext
    return this;
}

Encryption_mechanismContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Encryption_mechanismContext.prototype.constructor = Encryption_mechanismContext;

Encryption_mechanismContext.prototype.CERTIFICATE = function() {
    return this.getToken(TSqlParser.CERTIFICATE, 0);
};

Encryption_mechanismContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Encryption_mechanismContext.prototype.ASYMMETRIC = function() {
    return this.getToken(TSqlParser.ASYMMETRIC, 0);
};

Encryption_mechanismContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Encryption_mechanismContext.prototype.SYMMETRIC = function() {
    return this.getToken(TSqlParser.SYMMETRIC, 0);
};

Encryption_mechanismContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Encryption_mechanismContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Encryption_mechanismContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterEncryption_mechanism(this);
	}
};

Encryption_mechanismContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitEncryption_mechanism(this);
	}
};




TSqlParser.Encryption_mechanismContext = Encryption_mechanismContext;

TSqlParser.prototype.encryption_mechanism = function() {

    var localctx = new Encryption_mechanismContext(this, this._ctx, this.state);
    this.enterRule(localctx, 646, TSqlParser.RULE_encryption_mechanism);
    try {
        this.state = 8113;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CERTIFICATE:
            this.enterOuterAlt(localctx, 1);
            this.state = 8102;
            this.match(TSqlParser.CERTIFICATE);
            this.state = 8103;
            localctx.certificate_name = this.id();
            break;
        case TSqlParser.ASYMMETRIC:
            this.enterOuterAlt(localctx, 2);
            this.state = 8104;
            this.match(TSqlParser.ASYMMETRIC);
            this.state = 8105;
            this.match(TSqlParser.KEY);
            this.state = 8106;
            localctx.asym_key_name = this.id();
            break;
        case TSqlParser.SYMMETRIC:
            this.enterOuterAlt(localctx, 3);
            this.state = 8107;
            this.match(TSqlParser.SYMMETRIC);
            this.state = 8108;
            this.match(TSqlParser.KEY);
            this.state = 8109;
            localctx.decrypting_Key_name = this.id();
            break;
        case TSqlParser.PASSWORD:
            this.enterOuterAlt(localctx, 4);
            this.state = 8110;
            this.match(TSqlParser.PASSWORD);
            this.state = 8111;
            this.match(TSqlParser.EQUAL);
            this.state = 8112;
            this.match(TSqlParser.STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Decryption_mechanismContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_decryption_mechanism;
    this.certificate_name = null; // IdContext
    this.asym_key_name = null; // IdContext
    this.decrypting_Key_name = null; // IdContext
    return this;
}

Decryption_mechanismContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Decryption_mechanismContext.prototype.constructor = Decryption_mechanismContext;

Decryption_mechanismContext.prototype.CERTIFICATE = function() {
    return this.getToken(TSqlParser.CERTIFICATE, 0);
};

Decryption_mechanismContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Decryption_mechanismContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Decryption_mechanismContext.prototype.PASSWORD = function() {
    return this.getToken(TSqlParser.PASSWORD, 0);
};

Decryption_mechanismContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Decryption_mechanismContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Decryption_mechanismContext.prototype.ASYMMETRIC = function() {
    return this.getToken(TSqlParser.ASYMMETRIC, 0);
};

Decryption_mechanismContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Decryption_mechanismContext.prototype.SYMMETRIC = function() {
    return this.getToken(TSqlParser.SYMMETRIC, 0);
};

Decryption_mechanismContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDecryption_mechanism(this);
	}
};

Decryption_mechanismContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDecryption_mechanism(this);
	}
};




TSqlParser.Decryption_mechanismContext = Decryption_mechanismContext;

TSqlParser.prototype.decryption_mechanism = function() {

    var localctx = new Decryption_mechanismContext(this, this._ctx, this.state);
    this.enterRule(localctx, 648, TSqlParser.RULE_decryption_mechanism);
    try {
        this.state = 8138;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CERTIFICATE:
            this.enterOuterAlt(localctx, 1);
            this.state = 8115;
            this.match(TSqlParser.CERTIFICATE);
            this.state = 8116;
            localctx.certificate_name = this.id();
            this.state = 8121;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1127,this._ctx);
            if(la_===1) {
                this.state = 8117;
                this.match(TSqlParser.WITH);
                this.state = 8118;
                this.match(TSqlParser.PASSWORD);
                this.state = 8119;
                this.match(TSqlParser.EQUAL);
                this.state = 8120;
                this.match(TSqlParser.STRING);

            }
            break;
        case TSqlParser.ASYMMETRIC:
            this.enterOuterAlt(localctx, 2);
            this.state = 8123;
            this.match(TSqlParser.ASYMMETRIC);
            this.state = 8124;
            this.match(TSqlParser.KEY);
            this.state = 8125;
            localctx.asym_key_name = this.id();
            this.state = 8130;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1128,this._ctx);
            if(la_===1) {
                this.state = 8126;
                this.match(TSqlParser.WITH);
                this.state = 8127;
                this.match(TSqlParser.PASSWORD);
                this.state = 8128;
                this.match(TSqlParser.EQUAL);
                this.state = 8129;
                this.match(TSqlParser.STRING);

            }
            break;
        case TSqlParser.SYMMETRIC:
            this.enterOuterAlt(localctx, 3);
            this.state = 8132;
            this.match(TSqlParser.SYMMETRIC);
            this.state = 8133;
            this.match(TSqlParser.KEY);
            this.state = 8134;
            localctx.decrypting_Key_name = this.id();
            break;
        case TSqlParser.PASSWORD:
            this.enterOuterAlt(localctx, 4);
            this.state = 8135;
            this.match(TSqlParser.PASSWORD);
            this.state = 8136;
            this.match(TSqlParser.EQUAL);
            this.state = 8137;
            this.match(TSqlParser.STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Grant_permissionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_grant_permission;
    return this;
}

Grant_permissionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Grant_permissionContext.prototype.constructor = Grant_permissionContext;

Grant_permissionContext.prototype.EXECUTE = function() {
    return this.getToken(TSqlParser.EXECUTE, 0);
};

Grant_permissionContext.prototype.VIEW = function() {
    return this.getToken(TSqlParser.VIEW, 0);
};

Grant_permissionContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Grant_permissionContext.prototype.TAKE = function() {
    return this.getToken(TSqlParser.TAKE, 0);
};

Grant_permissionContext.prototype.CONTROL = function() {
    return this.getToken(TSqlParser.CONTROL, 0);
};

Grant_permissionContext.prototype.CREATE = function() {
    return this.getToken(TSqlParser.CREATE, 0);
};

Grant_permissionContext.prototype.TABLE = function() {
    return this.getToken(TSqlParser.TABLE, 0);
};

Grant_permissionContext.prototype.SHOWPLAN = function() {
    return this.getToken(TSqlParser.SHOWPLAN, 0);
};

Grant_permissionContext.prototype.IMPERSONATE = function() {
    return this.getToken(TSqlParser.IMPERSONATE, 0);
};

Grant_permissionContext.prototype.SELECT = function() {
    return this.getToken(TSqlParser.SELECT, 0);
};

Grant_permissionContext.prototype.REFERENCES = function() {
    return this.getToken(TSqlParser.REFERENCES, 0);
};

Grant_permissionContext.prototype.INSERT = function() {
    return this.getToken(TSqlParser.INSERT, 0);
};

Grant_permissionContext.prototype.ALTER = function() {
    return this.getToken(TSqlParser.ALTER, 0);
};

Grant_permissionContext.prototype.DATABASE = function() {
    return this.getToken(TSqlParser.DATABASE, 0);
};

Grant_permissionContext.prototype.ANY = function() {
    return this.getToken(TSqlParser.ANY, 0);
};

Grant_permissionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterGrant_permission(this);
	}
};

Grant_permissionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitGrant_permission(this);
	}
};




TSqlParser.Grant_permissionContext = Grant_permissionContext;

TSqlParser.prototype.grant_permission = function() {

    var localctx = new Grant_permissionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 650, TSqlParser.RULE_grant_permission);
    var _la = 0; // Token type
    try {
        this.state = 8166;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.EXECUTE:
            this.enterOuterAlt(localctx, 1);
            this.state = 8140;
            this.match(TSqlParser.EXECUTE);
            break;
        case TSqlParser.VIEW:
            this.enterOuterAlt(localctx, 2);
            this.state = 8141;
            this.match(TSqlParser.VIEW);
            this.state = 8142;
            this.id();
            break;
        case TSqlParser.TAKE:
            this.enterOuterAlt(localctx, 3);
            this.state = 8143;
            this.match(TSqlParser.TAKE);
            this.state = 8144;
            this.id();
            break;
        case TSqlParser.CONTROL:
            this.enterOuterAlt(localctx, 4);
            this.state = 8145;
            this.match(TSqlParser.CONTROL);
            this.state = 8147;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0)) {
                this.state = 8146;
                this.id();
            }

            break;
        case TSqlParser.CREATE:
            this.enterOuterAlt(localctx, 5);
            this.state = 8149;
            this.match(TSqlParser.CREATE);
            this.state = 8150;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.TABLE || _la===TSqlParser.VIEW)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case TSqlParser.SHOWPLAN:
            this.enterOuterAlt(localctx, 6);
            this.state = 8151;
            this.match(TSqlParser.SHOWPLAN);
            break;
        case TSqlParser.IMPERSONATE:
            this.enterOuterAlt(localctx, 7);
            this.state = 8152;
            this.match(TSqlParser.IMPERSONATE);
            break;
        case TSqlParser.SELECT:
            this.enterOuterAlt(localctx, 8);
            this.state = 8153;
            this.match(TSqlParser.SELECT);
            break;
        case TSqlParser.REFERENCES:
            this.enterOuterAlt(localctx, 9);
            this.state = 8154;
            this.match(TSqlParser.REFERENCES);
            break;
        case TSqlParser.INSERT:
            this.enterOuterAlt(localctx, 10);
            this.state = 8155;
            this.match(TSqlParser.INSERT);
            break;
        case TSqlParser.ALTER:
            this.enterOuterAlt(localctx, 11);
            this.state = 8156;
            this.match(TSqlParser.ALTER);
            this.state = 8164;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.ANY || _la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || _la===TSqlParser.DATABASE || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0)) {
                this.state = 8158;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.ANY) {
                    this.state = 8157;
                    this.match(TSqlParser.ANY);
                }

                this.state = 8162;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.CALLED:
                case TSqlParser.DATA_COMPRESSION:
                case TSqlParser.EVENTDATA:
                case TSqlParser.FILENAME:
                case TSqlParser.FILLFACTOR:
                case TSqlParser.FORCESEEK:
                case TSqlParser.KEY:
                case TSqlParser.MASTER:
                case TSqlParser.MAX_MEMORY:
                case TSqlParser.OFFSETS:
                case TSqlParser.PAGE:
                case TSqlParser.PUBLIC:
                case TSqlParser.RAW:
                case TSqlParser.RETURN:
                case TSqlParser.RETURNS:
                case TSqlParser.ROWCOUNT:
                case TSqlParser.SAFETY:
                case TSqlParser.SERVER:
                case TSqlParser.SID:
                case TSqlParser.SOURCE:
                case TSqlParser.STATE:
                case TSqlParser.TARGET:
                case TSqlParser.ABSOLUTE:
                case TSqlParser.ACTIVE:
                case TSqlParser.ADDRESS:
                case TSqlParser.APPLY:
                case TSqlParser.AUTO:
                case TSqlParser.AVAILABILITY:
                case TSqlParser.AVG:
                case TSqlParser.CALLER:
                case TSqlParser.CAST:
                case TSqlParser.CATCH:
                case TSqlParser.CHECKSUM_AGG:
                case TSqlParser.COMMITTED:
                case TSqlParser.CONCAT:
                case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                case TSqlParser.CONTROL:
                case TSqlParser.COOKIE:
                case TSqlParser.COUNT:
                case TSqlParser.COUNTER:
                case TSqlParser.COUNT_BIG:
                case TSqlParser.DELAY:
                case TSqlParser.DELETED:
                case TSqlParser.DENSE_RANK:
                case TSqlParser.DISABLE:
                case TSqlParser.DYNAMIC:
                case TSqlParser.ENCRYPTION:
                case TSqlParser.EXPAND:
                case TSqlParser.FAST:
                case TSqlParser.FAST_FORWARD:
                case TSqlParser.FIRST:
                case TSqlParser.FOLLOWING:
                case TSqlParser.FORCE:
                case TSqlParser.FORCED:
                case TSqlParser.FORWARD_ONLY:
                case TSqlParser.FULLSCAN:
                case TSqlParser.GLOBAL:
                case TSqlParser.GROUPING:
                case TSqlParser.GROUPING_ID:
                case TSqlParser.HASH:
                case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                case TSqlParser.IMPERSONATE:
                case TSqlParser.INPUT:
                case TSqlParser.INSENSITIVE:
                case TSqlParser.INSERTED:
                case TSqlParser.ISOLATION:
                case TSqlParser.KEEP:
                case TSqlParser.KEEPFIXED:
                case TSqlParser.KEYSET:
                case TSqlParser.LAST:
                case TSqlParser.LEVEL:
                case TSqlParser.LOCAL:
                case TSqlParser.LOCATION:
                case TSqlParser.LOCK_ESCALATION:
                case TSqlParser.LOGIN:
                case TSqlParser.LOOP:
                case TSqlParser.MARK:
                case TSqlParser.MAX:
                case TSqlParser.MAX_ROLLOVER_FILES:
                case TSqlParser.MAXDOP:
                case TSqlParser.MAXRECURSION:
                case TSqlParser.MIN:
                case TSqlParser.MODIFY:
                case TSqlParser.NAME:
                case TSqlParser.NEXT:
                case TSqlParser.NOCOUNT:
                case TSqlParser.NOEXPAND:
                case TSqlParser.NORECOMPUTE:
                case TSqlParser.NTILE:
                case TSqlParser.NUMBER:
                case TSqlParser.OFFSET:
                case TSqlParser.ONLINE:
                case TSqlParser.ONLY:
                case TSqlParser.OPTIMISTIC:
                case TSqlParser.OPTIMIZE:
                case TSqlParser.OUT:
                case TSqlParser.OUTPUT:
                case TSqlParser.OWNER:
                case TSqlParser.PARAMETERIZATION:
                case TSqlParser.PARTITION:
                case TSqlParser.PATH:
                case TSqlParser.PRECEDING:
                case TSqlParser.PRIOR:
                case TSqlParser.PRIVILEGES:
                case TSqlParser.RANGE:
                case TSqlParser.RANK:
                case TSqlParser.READONLY:
                case TSqlParser.READ_ONLY:
                case TSqlParser.RECOMPILE:
                case TSqlParser.RELATIVE:
                case TSqlParser.REMOTE:
                case TSqlParser.REPEATABLE:
                case TSqlParser.ROBUST:
                case TSqlParser.ROOT:
                case TSqlParser.ROW:
                case TSqlParser.ROWGUID:
                case TSqlParser.ROWS:
                case TSqlParser.ROW_NUMBER:
                case TSqlParser.SAMPLE:
                case TSqlParser.SCHEMABINDING:
                case TSqlParser.SCROLL:
                case TSqlParser.SCROLL_LOCKS:
                case TSqlParser.SELF:
                case TSqlParser.SERIALIZABLE:
                case TSqlParser.SIMPLE:
                case TSqlParser.SIZE:
                case TSqlParser.SNAPSHOT:
                case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                case TSqlParser.STATIC:
                case TSqlParser.STATS_STREAM:
                case TSqlParser.STDEV:
                case TSqlParser.STDEVP:
                case TSqlParser.SUM:
                case TSqlParser.TEXTIMAGE_ON:
                case TSqlParser.THROW:
                case TSqlParser.TIES:
                case TSqlParser.TIME:
                case TSqlParser.TRY:
                case TSqlParser.TYPE:
                case TSqlParser.TYPE_WARNING:
                case TSqlParser.UNBOUNDED:
                case TSqlParser.UNCOMMITTED:
                case TSqlParser.UNKNOWN:
                case TSqlParser.USING:
                case TSqlParser.VALUE:
                case TSqlParser.VAR:
                case TSqlParser.VARP:
                case TSqlParser.VIEWS:
                case TSqlParser.VIEW_METADATA:
                case TSqlParser.WORK:
                case TSqlParser.XML:
                case TSqlParser.XMLNAMESPACES:
                case TSqlParser.DOUBLE_QUOTE_ID:
                case TSqlParser.SQUARE_BRACKET_ID:
                case TSqlParser.ID:
                    this.state = 8160;
                    this.id();
                    break;
                case TSqlParser.DATABASE:
                    this.state = 8161;
                    this.match(TSqlParser.DATABASE);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_set_statement;
    this.member_name = null; // IdContext
    return this;
}

Set_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_statementContext.prototype.constructor = Set_statementContext;

Set_statementContext.prototype.SET = function() {
    return this.getToken(TSqlParser.SET, 0);
};

Set_statementContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Set_statementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Set_statementContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Set_statementContext.prototype.assignment_operator = function() {
    return this.getTypedRuleContext(Assignment_operatorContext,0);
};

Set_statementContext.prototype.CURSOR = function() {
    return this.getToken(TSqlParser.CURSOR, 0);
};

Set_statementContext.prototype.declare_set_cursor_common = function() {
    return this.getTypedRuleContext(Declare_set_cursor_commonContext,0);
};

Set_statementContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Set_statementContext.prototype.READ = function() {
    return this.getToken(TSqlParser.READ, 0);
};

Set_statementContext.prototype.ONLY = function() {
    return this.getToken(TSqlParser.ONLY, 0);
};

Set_statementContext.prototype.UPDATE = function() {
    return this.getToken(TSqlParser.UPDATE, 0);
};

Set_statementContext.prototype.OF = function() {
    return this.getToken(TSqlParser.OF, 0);
};

Set_statementContext.prototype.column_name_list = function() {
    return this.getTypedRuleContext(Column_name_listContext,0);
};

Set_statementContext.prototype.set_special = function() {
    return this.getTypedRuleContext(Set_specialContext,0);
};

Set_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSet_statement(this);
	}
};

Set_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSet_statement(this);
	}
};




TSqlParser.Set_statementContext = Set_statementContext;

TSqlParser.prototype.set_statement = function() {

    var localctx = new Set_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 652, TSqlParser.RULE_set_statement);
    var _la = 0; // Token type
    try {
        this.state = 8207;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1142,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8168;
            this.match(TSqlParser.SET);
            this.state = 8169;
            this.match(TSqlParser.LOCAL_ID);
            this.state = 8172;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.DOT) {
                this.state = 8170;
                this.match(TSqlParser.DOT);
                this.state = 8171;
                localctx.member_name = this.id();
            }

            this.state = 8174;
            this.match(TSqlParser.EQUAL);
            this.state = 8175;
            this.expression(0);
            this.state = 8177;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1136,this._ctx);
            if(la_===1) {
                this.state = 8176;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8179;
            this.match(TSqlParser.SET);
            this.state = 8180;
            this.match(TSqlParser.LOCAL_ID);
            this.state = 8181;
            this.assignment_operator();
            this.state = 8182;
            this.expression(0);
            this.state = 8184;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1137,this._ctx);
            if(la_===1) {
                this.state = 8183;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 8186;
            this.match(TSqlParser.SET);
            this.state = 8187;
            this.match(TSqlParser.LOCAL_ID);
            this.state = 8188;
            this.match(TSqlParser.EQUAL);
            this.state = 8189;
            this.match(TSqlParser.CURSOR);
            this.state = 8190;
            this.declare_set_cursor_common();
            this.state = 8201;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.FOR) {
                this.state = 8191;
                this.match(TSqlParser.FOR);
                this.state = 8199;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.READ:
                    this.state = 8192;
                    this.match(TSqlParser.READ);
                    this.state = 8193;
                    this.match(TSqlParser.ONLY);
                    break;
                case TSqlParser.UPDATE:
                    this.state = 8194;
                    this.match(TSqlParser.UPDATE);
                    this.state = 8197;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.OF) {
                        this.state = 8195;
                        this.match(TSqlParser.OF);
                        this.state = 8196;
                        this.column_name_list();
                    }

                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
            }

            this.state = 8204;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1141,this._ctx);
            if(la_===1) {
                this.state = 8203;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 8206;
            this.set_special();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Transaction_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_transaction_statement;
    return this;
}

Transaction_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Transaction_statementContext.prototype.constructor = Transaction_statementContext;

Transaction_statementContext.prototype.BEGIN = function() {
    return this.getToken(TSqlParser.BEGIN, 0);
};

Transaction_statementContext.prototype.DISTRIBUTED = function() {
    return this.getToken(TSqlParser.DISTRIBUTED, 0);
};

Transaction_statementContext.prototype.TRAN = function() {
    return this.getToken(TSqlParser.TRAN, 0);
};

Transaction_statementContext.prototype.TRANSACTION = function() {
    return this.getToken(TSqlParser.TRANSACTION, 0);
};

Transaction_statementContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Transaction_statementContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Transaction_statementContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Transaction_statementContext.prototype.MARK = function() {
    return this.getToken(TSqlParser.MARK, 0);
};

Transaction_statementContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Transaction_statementContext.prototype.COMMIT = function() {
    return this.getToken(TSqlParser.COMMIT, 0);
};

Transaction_statementContext.prototype.DELAYED_DURABILITY = function() {
    return this.getToken(TSqlParser.DELAYED_DURABILITY, 0);
};

Transaction_statementContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Transaction_statementContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Transaction_statementContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Transaction_statementContext.prototype.WORK = function() {
    return this.getToken(TSqlParser.WORK, 0);
};

Transaction_statementContext.prototype.ROLLBACK = function() {
    return this.getToken(TSqlParser.ROLLBACK, 0);
};

Transaction_statementContext.prototype.SAVE = function() {
    return this.getToken(TSqlParser.SAVE, 0);
};

Transaction_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTransaction_statement(this);
	}
};

Transaction_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTransaction_statement(this);
	}
};




TSqlParser.Transaction_statementContext = Transaction_statementContext;

TSqlParser.prototype.transaction_statement = function() {

    var localctx = new Transaction_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 654, TSqlParser.RULE_transaction_statement);
    var _la = 0; // Token type
    try {
        this.state = 8286;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1161,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8209;
            this.match(TSqlParser.BEGIN);
            this.state = 8210;
            this.match(TSqlParser.DISTRIBUTED);
            this.state = 8211;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.TRAN || _la===TSqlParser.TRANSACTION)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 8214;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1143,this._ctx);
            if(la_===1) {
                this.state = 8212;
                this.id();

            } else if(la_===2) {
                this.state = 8213;
                this.match(TSqlParser.LOCAL_ID);

            }
            this.state = 8217;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1144,this._ctx);
            if(la_===1) {
                this.state = 8216;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8219;
            this.match(TSqlParser.BEGIN);
            this.state = 8220;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.TRAN || _la===TSqlParser.TRANSACTION)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 8230;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1147,this._ctx);
            if(la_===1) {
                this.state = 8223;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.CALLED:
                case TSqlParser.DATA_COMPRESSION:
                case TSqlParser.EVENTDATA:
                case TSqlParser.FILENAME:
                case TSqlParser.FILLFACTOR:
                case TSqlParser.FORCESEEK:
                case TSqlParser.KEY:
                case TSqlParser.MASTER:
                case TSqlParser.MAX_MEMORY:
                case TSqlParser.OFFSETS:
                case TSqlParser.PAGE:
                case TSqlParser.PUBLIC:
                case TSqlParser.RAW:
                case TSqlParser.RETURN:
                case TSqlParser.RETURNS:
                case TSqlParser.ROWCOUNT:
                case TSqlParser.SAFETY:
                case TSqlParser.SERVER:
                case TSqlParser.SID:
                case TSqlParser.SOURCE:
                case TSqlParser.STATE:
                case TSqlParser.TARGET:
                case TSqlParser.ABSOLUTE:
                case TSqlParser.ACTIVE:
                case TSqlParser.ADDRESS:
                case TSqlParser.APPLY:
                case TSqlParser.AUTO:
                case TSqlParser.AVAILABILITY:
                case TSqlParser.AVG:
                case TSqlParser.CALLER:
                case TSqlParser.CAST:
                case TSqlParser.CATCH:
                case TSqlParser.CHECKSUM_AGG:
                case TSqlParser.COMMITTED:
                case TSqlParser.CONCAT:
                case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                case TSqlParser.CONTROL:
                case TSqlParser.COOKIE:
                case TSqlParser.COUNT:
                case TSqlParser.COUNTER:
                case TSqlParser.COUNT_BIG:
                case TSqlParser.DELAY:
                case TSqlParser.DELETED:
                case TSqlParser.DENSE_RANK:
                case TSqlParser.DISABLE:
                case TSqlParser.DYNAMIC:
                case TSqlParser.ENCRYPTION:
                case TSqlParser.EXPAND:
                case TSqlParser.FAST:
                case TSqlParser.FAST_FORWARD:
                case TSqlParser.FIRST:
                case TSqlParser.FOLLOWING:
                case TSqlParser.FORCE:
                case TSqlParser.FORCED:
                case TSqlParser.FORWARD_ONLY:
                case TSqlParser.FULLSCAN:
                case TSqlParser.GLOBAL:
                case TSqlParser.GROUPING:
                case TSqlParser.GROUPING_ID:
                case TSqlParser.HASH:
                case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                case TSqlParser.IMPERSONATE:
                case TSqlParser.INPUT:
                case TSqlParser.INSENSITIVE:
                case TSqlParser.INSERTED:
                case TSqlParser.ISOLATION:
                case TSqlParser.KEEP:
                case TSqlParser.KEEPFIXED:
                case TSqlParser.KEYSET:
                case TSqlParser.LAST:
                case TSqlParser.LEVEL:
                case TSqlParser.LOCAL:
                case TSqlParser.LOCATION:
                case TSqlParser.LOCK_ESCALATION:
                case TSqlParser.LOGIN:
                case TSqlParser.LOOP:
                case TSqlParser.MARK:
                case TSqlParser.MAX:
                case TSqlParser.MAX_ROLLOVER_FILES:
                case TSqlParser.MAXDOP:
                case TSqlParser.MAXRECURSION:
                case TSqlParser.MIN:
                case TSqlParser.MODIFY:
                case TSqlParser.NAME:
                case TSqlParser.NEXT:
                case TSqlParser.NOCOUNT:
                case TSqlParser.NOEXPAND:
                case TSqlParser.NORECOMPUTE:
                case TSqlParser.NTILE:
                case TSqlParser.NUMBER:
                case TSqlParser.OFFSET:
                case TSqlParser.ONLINE:
                case TSqlParser.ONLY:
                case TSqlParser.OPTIMISTIC:
                case TSqlParser.OPTIMIZE:
                case TSqlParser.OUT:
                case TSqlParser.OUTPUT:
                case TSqlParser.OWNER:
                case TSqlParser.PARAMETERIZATION:
                case TSqlParser.PARTITION:
                case TSqlParser.PATH:
                case TSqlParser.PRECEDING:
                case TSqlParser.PRIOR:
                case TSqlParser.PRIVILEGES:
                case TSqlParser.RANGE:
                case TSqlParser.RANK:
                case TSqlParser.READONLY:
                case TSqlParser.READ_ONLY:
                case TSqlParser.RECOMPILE:
                case TSqlParser.RELATIVE:
                case TSqlParser.REMOTE:
                case TSqlParser.REPEATABLE:
                case TSqlParser.ROBUST:
                case TSqlParser.ROOT:
                case TSqlParser.ROW:
                case TSqlParser.ROWGUID:
                case TSqlParser.ROWS:
                case TSqlParser.ROW_NUMBER:
                case TSqlParser.SAMPLE:
                case TSqlParser.SCHEMABINDING:
                case TSqlParser.SCROLL:
                case TSqlParser.SCROLL_LOCKS:
                case TSqlParser.SELF:
                case TSqlParser.SERIALIZABLE:
                case TSqlParser.SIMPLE:
                case TSqlParser.SIZE:
                case TSqlParser.SNAPSHOT:
                case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                case TSqlParser.STATIC:
                case TSqlParser.STATS_STREAM:
                case TSqlParser.STDEV:
                case TSqlParser.STDEVP:
                case TSqlParser.SUM:
                case TSqlParser.TEXTIMAGE_ON:
                case TSqlParser.THROW:
                case TSqlParser.TIES:
                case TSqlParser.TIME:
                case TSqlParser.TRY:
                case TSqlParser.TYPE:
                case TSqlParser.TYPE_WARNING:
                case TSqlParser.UNBOUNDED:
                case TSqlParser.UNCOMMITTED:
                case TSqlParser.UNKNOWN:
                case TSqlParser.USING:
                case TSqlParser.VALUE:
                case TSqlParser.VAR:
                case TSqlParser.VARP:
                case TSqlParser.VIEWS:
                case TSqlParser.VIEW_METADATA:
                case TSqlParser.WORK:
                case TSqlParser.XML:
                case TSqlParser.XMLNAMESPACES:
                case TSqlParser.DOUBLE_QUOTE_ID:
                case TSqlParser.SQUARE_BRACKET_ID:
                case TSqlParser.ID:
                    this.state = 8221;
                    this.id();
                    break;
                case TSqlParser.LOCAL_ID:
                    this.state = 8222;
                    this.match(TSqlParser.LOCAL_ID);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 8228;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,1146,this._ctx);
                if(la_===1) {
                    this.state = 8225;
                    this.match(TSqlParser.WITH);
                    this.state = 8226;
                    this.match(TSqlParser.MARK);
                    this.state = 8227;
                    this.match(TSqlParser.STRING);

                }

            }
            this.state = 8233;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1148,this._ctx);
            if(la_===1) {
                this.state = 8232;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 8235;
            this.match(TSqlParser.COMMIT);
            this.state = 8236;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.TRAN || _la===TSqlParser.TRANSACTION)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 8249;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1151,this._ctx);
            if(la_===1) {
                this.state = 8239;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.CALLED:
                case TSqlParser.DATA_COMPRESSION:
                case TSqlParser.EVENTDATA:
                case TSqlParser.FILENAME:
                case TSqlParser.FILLFACTOR:
                case TSqlParser.FORCESEEK:
                case TSqlParser.KEY:
                case TSqlParser.MASTER:
                case TSqlParser.MAX_MEMORY:
                case TSqlParser.OFFSETS:
                case TSqlParser.PAGE:
                case TSqlParser.PUBLIC:
                case TSqlParser.RAW:
                case TSqlParser.RETURN:
                case TSqlParser.RETURNS:
                case TSqlParser.ROWCOUNT:
                case TSqlParser.SAFETY:
                case TSqlParser.SERVER:
                case TSqlParser.SID:
                case TSqlParser.SOURCE:
                case TSqlParser.STATE:
                case TSqlParser.TARGET:
                case TSqlParser.ABSOLUTE:
                case TSqlParser.ACTIVE:
                case TSqlParser.ADDRESS:
                case TSqlParser.APPLY:
                case TSqlParser.AUTO:
                case TSqlParser.AVAILABILITY:
                case TSqlParser.AVG:
                case TSqlParser.CALLER:
                case TSqlParser.CAST:
                case TSqlParser.CATCH:
                case TSqlParser.CHECKSUM_AGG:
                case TSqlParser.COMMITTED:
                case TSqlParser.CONCAT:
                case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                case TSqlParser.CONTROL:
                case TSqlParser.COOKIE:
                case TSqlParser.COUNT:
                case TSqlParser.COUNTER:
                case TSqlParser.COUNT_BIG:
                case TSqlParser.DELAY:
                case TSqlParser.DELETED:
                case TSqlParser.DENSE_RANK:
                case TSqlParser.DISABLE:
                case TSqlParser.DYNAMIC:
                case TSqlParser.ENCRYPTION:
                case TSqlParser.EXPAND:
                case TSqlParser.FAST:
                case TSqlParser.FAST_FORWARD:
                case TSqlParser.FIRST:
                case TSqlParser.FOLLOWING:
                case TSqlParser.FORCE:
                case TSqlParser.FORCED:
                case TSqlParser.FORWARD_ONLY:
                case TSqlParser.FULLSCAN:
                case TSqlParser.GLOBAL:
                case TSqlParser.GROUPING:
                case TSqlParser.GROUPING_ID:
                case TSqlParser.HASH:
                case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                case TSqlParser.IMPERSONATE:
                case TSqlParser.INPUT:
                case TSqlParser.INSENSITIVE:
                case TSqlParser.INSERTED:
                case TSqlParser.ISOLATION:
                case TSqlParser.KEEP:
                case TSqlParser.KEEPFIXED:
                case TSqlParser.KEYSET:
                case TSqlParser.LAST:
                case TSqlParser.LEVEL:
                case TSqlParser.LOCAL:
                case TSqlParser.LOCATION:
                case TSqlParser.LOCK_ESCALATION:
                case TSqlParser.LOGIN:
                case TSqlParser.LOOP:
                case TSqlParser.MARK:
                case TSqlParser.MAX:
                case TSqlParser.MAX_ROLLOVER_FILES:
                case TSqlParser.MAXDOP:
                case TSqlParser.MAXRECURSION:
                case TSqlParser.MIN:
                case TSqlParser.MODIFY:
                case TSqlParser.NAME:
                case TSqlParser.NEXT:
                case TSqlParser.NOCOUNT:
                case TSqlParser.NOEXPAND:
                case TSqlParser.NORECOMPUTE:
                case TSqlParser.NTILE:
                case TSqlParser.NUMBER:
                case TSqlParser.OFFSET:
                case TSqlParser.ONLINE:
                case TSqlParser.ONLY:
                case TSqlParser.OPTIMISTIC:
                case TSqlParser.OPTIMIZE:
                case TSqlParser.OUT:
                case TSqlParser.OUTPUT:
                case TSqlParser.OWNER:
                case TSqlParser.PARAMETERIZATION:
                case TSqlParser.PARTITION:
                case TSqlParser.PATH:
                case TSqlParser.PRECEDING:
                case TSqlParser.PRIOR:
                case TSqlParser.PRIVILEGES:
                case TSqlParser.RANGE:
                case TSqlParser.RANK:
                case TSqlParser.READONLY:
                case TSqlParser.READ_ONLY:
                case TSqlParser.RECOMPILE:
                case TSqlParser.RELATIVE:
                case TSqlParser.REMOTE:
                case TSqlParser.REPEATABLE:
                case TSqlParser.ROBUST:
                case TSqlParser.ROOT:
                case TSqlParser.ROW:
                case TSqlParser.ROWGUID:
                case TSqlParser.ROWS:
                case TSqlParser.ROW_NUMBER:
                case TSqlParser.SAMPLE:
                case TSqlParser.SCHEMABINDING:
                case TSqlParser.SCROLL:
                case TSqlParser.SCROLL_LOCKS:
                case TSqlParser.SELF:
                case TSqlParser.SERIALIZABLE:
                case TSqlParser.SIMPLE:
                case TSqlParser.SIZE:
                case TSqlParser.SNAPSHOT:
                case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                case TSqlParser.STATIC:
                case TSqlParser.STATS_STREAM:
                case TSqlParser.STDEV:
                case TSqlParser.STDEVP:
                case TSqlParser.SUM:
                case TSqlParser.TEXTIMAGE_ON:
                case TSqlParser.THROW:
                case TSqlParser.TIES:
                case TSqlParser.TIME:
                case TSqlParser.TRY:
                case TSqlParser.TYPE:
                case TSqlParser.TYPE_WARNING:
                case TSqlParser.UNBOUNDED:
                case TSqlParser.UNCOMMITTED:
                case TSqlParser.UNKNOWN:
                case TSqlParser.USING:
                case TSqlParser.VALUE:
                case TSqlParser.VAR:
                case TSqlParser.VARP:
                case TSqlParser.VIEWS:
                case TSqlParser.VIEW_METADATA:
                case TSqlParser.WORK:
                case TSqlParser.XML:
                case TSqlParser.XMLNAMESPACES:
                case TSqlParser.DOUBLE_QUOTE_ID:
                case TSqlParser.SQUARE_BRACKET_ID:
                case TSqlParser.ID:
                    this.state = 8237;
                    this.id();
                    break;
                case TSqlParser.LOCAL_ID:
                    this.state = 8238;
                    this.match(TSqlParser.LOCAL_ID);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 8247;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,1150,this._ctx);
                if(la_===1) {
                    this.state = 8241;
                    this.match(TSqlParser.WITH);
                    this.state = 8242;
                    this.match(TSqlParser.LR_BRACKET);
                    this.state = 8243;
                    this.match(TSqlParser.DELAYED_DURABILITY);
                    this.state = 8244;
                    this.match(TSqlParser.EQUAL);
                    this.state = 8245;
                    _la = this._input.LA(1);
                    if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 8246;
                    this.match(TSqlParser.RR_BRACKET);

                }

            }
            this.state = 8252;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1152,this._ctx);
            if(la_===1) {
                this.state = 8251;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 8254;
            this.match(TSqlParser.COMMIT);
            this.state = 8256;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1153,this._ctx);
            if(la_===1) {
                this.state = 8255;
                this.match(TSqlParser.WORK);

            }
            this.state = 8259;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1154,this._ctx);
            if(la_===1) {
                this.state = 8258;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 8261;
            this.match(TSqlParser.ROLLBACK);
            this.state = 8262;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.TRAN || _la===TSqlParser.TRANSACTION)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 8265;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1155,this._ctx);
            if(la_===1) {
                this.state = 8263;
                this.id();

            } else if(la_===2) {
                this.state = 8264;
                this.match(TSqlParser.LOCAL_ID);

            }
            this.state = 8268;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1156,this._ctx);
            if(la_===1) {
                this.state = 8267;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 8270;
            this.match(TSqlParser.ROLLBACK);
            this.state = 8272;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1157,this._ctx);
            if(la_===1) {
                this.state = 8271;
                this.match(TSqlParser.WORK);

            }
            this.state = 8275;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1158,this._ctx);
            if(la_===1) {
                this.state = 8274;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 8277;
            this.match(TSqlParser.SAVE);
            this.state = 8278;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.TRAN || _la===TSqlParser.TRANSACTION)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 8281;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1159,this._ctx);
            if(la_===1) {
                this.state = 8279;
                this.id();

            } else if(la_===2) {
                this.state = 8280;
                this.match(TSqlParser.LOCAL_ID);

            }
            this.state = 8284;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1160,this._ctx);
            if(la_===1) {
                this.state = 8283;
                this.match(TSqlParser.SEMI);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Go_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_go_statement;
    this.count = null; // Token
    return this;
}

Go_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Go_statementContext.prototype.constructor = Go_statementContext;

Go_statementContext.prototype.GO = function() {
    return this.getToken(TSqlParser.GO, 0);
};

Go_statementContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Go_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterGo_statement(this);
	}
};

Go_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitGo_statement(this);
	}
};




TSqlParser.Go_statementContext = Go_statementContext;

TSqlParser.prototype.go_statement = function() {

    var localctx = new Go_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 656, TSqlParser.RULE_go_statement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8288;
        this.match(TSqlParser.GO);
        this.state = 8290;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.DECIMAL) {
            this.state = 8289;
            localctx.count = this.match(TSqlParser.DECIMAL);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Use_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_use_statement;
    this.database = null; // IdContext
    return this;
}

Use_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Use_statementContext.prototype.constructor = Use_statementContext;

Use_statementContext.prototype.USE = function() {
    return this.getToken(TSqlParser.USE, 0);
};

Use_statementContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Use_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterUse_statement(this);
	}
};

Use_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitUse_statement(this);
	}
};




TSqlParser.Use_statementContext = Use_statementContext;

TSqlParser.prototype.use_statement = function() {

    var localctx = new Use_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 658, TSqlParser.RULE_use_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8292;
        this.match(TSqlParser.USE);
        this.state = 8293;
        localctx.database = this.id();
        this.state = 8295;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1163,this._ctx);
        if(la_===1) {
            this.state = 8294;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dbcc_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_dbcc_clause;
    this.name = null; // Simple_idContext
    return this;
}

Dbcc_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dbcc_clauseContext.prototype.constructor = Dbcc_clauseContext;

Dbcc_clauseContext.prototype.DBCC = function() {
    return this.getToken(TSqlParser.DBCC, 0);
};

Dbcc_clauseContext.prototype.simple_id = function() {
    return this.getTypedRuleContext(Simple_idContext,0);
};

Dbcc_clauseContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Dbcc_clauseContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Dbcc_clauseContext.prototype.dbcc_options = function() {
    return this.getTypedRuleContext(Dbcc_optionsContext,0);
};

Dbcc_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDbcc_clause(this);
	}
};

Dbcc_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDbcc_clause(this);
	}
};




TSqlParser.Dbcc_clauseContext = Dbcc_clauseContext;

TSqlParser.prototype.dbcc_clause = function() {

    var localctx = new Dbcc_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 660, TSqlParser.RULE_dbcc_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8297;
        this.match(TSqlParser.DBCC);
        this.state = 8298;
        localctx.name = this.simple_id();
        this.state = 8303;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1164,this._ctx);
        if(la_===1) {
            this.state = 8299;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 8300;
            this.expression_list();
            this.state = 8301;
            this.match(TSqlParser.RR_BRACKET);

        }
        this.state = 8307;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1165,this._ctx);
        if(la_===1) {
            this.state = 8305;
            this.match(TSqlParser.WITH);
            this.state = 8306;
            this.dbcc_options();

        }
        this.state = 8310;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1166,this._ctx);
        if(la_===1) {
            this.state = 8309;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dbcc_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_dbcc_options;
    return this;
}

Dbcc_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dbcc_optionsContext.prototype.constructor = Dbcc_optionsContext;

Dbcc_optionsContext.prototype.simple_id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simple_idContext);
    } else {
        return this.getTypedRuleContext(Simple_idContext,i);
    }
};

Dbcc_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDbcc_options(this);
	}
};

Dbcc_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDbcc_options(this);
	}
};




TSqlParser.Dbcc_optionsContext = Dbcc_optionsContext;

TSqlParser.prototype.dbcc_options = function() {

    var localctx = new Dbcc_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 662, TSqlParser.RULE_dbcc_options);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8312;
        this.simple_id();
        this.state = 8315;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 8313;
            this.match(TSqlParser.COMMA);
            this.state = 8314;
            this.simple_id();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Execute_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_execute_clause;
    this.clause = null; // Token
    return this;
}

Execute_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Execute_clauseContext.prototype.constructor = Execute_clauseContext;

Execute_clauseContext.prototype.EXECUTE = function() {
    return this.getToken(TSqlParser.EXECUTE, 0);
};

Execute_clauseContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Execute_clauseContext.prototype.CALLER = function() {
    return this.getToken(TSqlParser.CALLER, 0);
};

Execute_clauseContext.prototype.SELF = function() {
    return this.getToken(TSqlParser.SELF, 0);
};

Execute_clauseContext.prototype.OWNER = function() {
    return this.getToken(TSqlParser.OWNER, 0);
};

Execute_clauseContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Execute_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterExecute_clause(this);
	}
};

Execute_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitExecute_clause(this);
	}
};




TSqlParser.Execute_clauseContext = Execute_clauseContext;

TSqlParser.prototype.execute_clause = function() {

    var localctx = new Execute_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 664, TSqlParser.RULE_execute_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8317;
        this.match(TSqlParser.EXECUTE);
        this.state = 8318;
        this.match(TSqlParser.AS);
        this.state = 8319;
        localctx.clause = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.CALLER || _la===TSqlParser.OWNER || _la===TSqlParser.SELF || _la===TSqlParser.STRING)) {
            localctx.clause = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declare_localContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_declare_local;
    return this;
}

Declare_localContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declare_localContext.prototype.constructor = Declare_localContext;

Declare_localContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Declare_localContext.prototype.data_type = function() {
    return this.getTypedRuleContext(Data_typeContext,0);
};

Declare_localContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Declare_localContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Declare_localContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDeclare_local(this);
	}
};

Declare_localContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDeclare_local(this);
	}
};




TSqlParser.Declare_localContext = Declare_localContext;

TSqlParser.prototype.declare_local = function() {

    var localctx = new Declare_localContext(this, this._ctx, this.state);
    this.enterRule(localctx, 666, TSqlParser.RULE_declare_local);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8321;
        this.match(TSqlParser.LOCAL_ID);
        this.state = 8323;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AS) {
            this.state = 8322;
            this.match(TSqlParser.AS);
        }

        this.state = 8325;
        this.data_type();
        this.state = 8328;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.EQUAL) {
            this.state = 8326;
            this.match(TSqlParser.EQUAL);
            this.state = 8327;
            this.expression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_type_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_table_type_definition;
    return this;
}

Table_type_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_type_definitionContext.prototype.constructor = Table_type_definitionContext;

Table_type_definitionContext.prototype.TABLE = function() {
    return this.getToken(TSqlParser.TABLE, 0);
};

Table_type_definitionContext.prototype.column_def_table_constraints = function() {
    return this.getTypedRuleContext(Column_def_table_constraintsContext,0);
};

Table_type_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTable_type_definition(this);
	}
};

Table_type_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTable_type_definition(this);
	}
};




TSqlParser.Table_type_definitionContext = Table_type_definitionContext;

TSqlParser.prototype.table_type_definition = function() {

    var localctx = new Table_type_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 668, TSqlParser.RULE_table_type_definition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8330;
        this.match(TSqlParser.TABLE);
        this.state = 8331;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 8332;
        this.column_def_table_constraints();
        this.state = 8333;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_type_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_xml_type_definition;
    return this;
}

Xml_type_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_type_definitionContext.prototype.constructor = Xml_type_definitionContext;

Xml_type_definitionContext.prototype.XML = function() {
    return this.getToken(TSqlParser.XML, 0);
};

Xml_type_definitionContext.prototype.xml_schema_collection = function() {
    return this.getTypedRuleContext(Xml_schema_collectionContext,0);
};

Xml_type_definitionContext.prototype.CONTENT = function() {
    return this.getToken(TSqlParser.CONTENT, 0);
};

Xml_type_definitionContext.prototype.DOCUMENT = function() {
    return this.getToken(TSqlParser.DOCUMENT, 0);
};

Xml_type_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterXml_type_definition(this);
	}
};

Xml_type_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitXml_type_definition(this);
	}
};




TSqlParser.Xml_type_definitionContext = Xml_type_definitionContext;

TSqlParser.prototype.xml_type_definition = function() {

    var localctx = new Xml_type_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 670, TSqlParser.RULE_xml_type_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8335;
        this.match(TSqlParser.XML);
        this.state = 8336;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 8338;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.CONTENT || _la===TSqlParser.DOCUMENT) {
            this.state = 8337;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.CONTENT || _la===TSqlParser.DOCUMENT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 8340;
        this.xml_schema_collection();
        this.state = 8341;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_schema_collectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_xml_schema_collection;
    return this;
}

Xml_schema_collectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_schema_collectionContext.prototype.constructor = Xml_schema_collectionContext;

Xml_schema_collectionContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ID);
    } else {
        return this.getToken(TSqlParser.ID, i);
    }
};


Xml_schema_collectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterXml_schema_collection(this);
	}
};

Xml_schema_collectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitXml_schema_collection(this);
	}
};




TSqlParser.Xml_schema_collectionContext = Xml_schema_collectionContext;

TSqlParser.prototype.xml_schema_collection = function() {

    var localctx = new Xml_schema_collectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 672, TSqlParser.RULE_xml_schema_collection);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8343;
        this.match(TSqlParser.ID);
        this.state = 8344;
        this.match(TSqlParser.DOT);
        this.state = 8345;
        this.match(TSqlParser.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_def_table_constraintsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_column_def_table_constraints;
    return this;
}

Column_def_table_constraintsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_def_table_constraintsContext.prototype.constructor = Column_def_table_constraintsContext;

Column_def_table_constraintsContext.prototype.column_def_table_constraint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_def_table_constraintContext);
    } else {
        return this.getTypedRuleContext(Column_def_table_constraintContext,i);
    }
};

Column_def_table_constraintsContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterColumn_def_table_constraints(this);
	}
};

Column_def_table_constraintsContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitColumn_def_table_constraints(this);
	}
};




TSqlParser.Column_def_table_constraintsContext = Column_def_table_constraintsContext;

TSqlParser.prototype.column_def_table_constraints = function() {

    var localctx = new Column_def_table_constraintsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 674, TSqlParser.RULE_column_def_table_constraints);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8347;
        this.column_def_table_constraint();
        this.state = 8354;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1172,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 8349;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 8348;
                    this.match(TSqlParser.COMMA);
                }

                this.state = 8351;
                this.column_def_table_constraint(); 
            }
            this.state = 8356;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1172,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_def_table_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_column_def_table_constraint;
    return this;
}

Column_def_table_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_def_table_constraintContext.prototype.constructor = Column_def_table_constraintContext;

Column_def_table_constraintContext.prototype.column_definition = function() {
    return this.getTypedRuleContext(Column_definitionContext,0);
};

Column_def_table_constraintContext.prototype.table_constraint = function() {
    return this.getTypedRuleContext(Table_constraintContext,0);
};

Column_def_table_constraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterColumn_def_table_constraint(this);
	}
};

Column_def_table_constraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitColumn_def_table_constraint(this);
	}
};




TSqlParser.Column_def_table_constraintContext = Column_def_table_constraintContext;

TSqlParser.prototype.column_def_table_constraint = function() {

    var localctx = new Column_def_table_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 676, TSqlParser.RULE_column_def_table_constraint);
    try {
        this.state = 8359;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 8357;
            this.column_definition();
            break;
        case TSqlParser.CHECK:
        case TSqlParser.CONSTRAINT:
        case TSqlParser.DEFAULT:
        case TSqlParser.FOREIGN:
        case TSqlParser.PRIMARY:
        case TSqlParser.UNIQUE:
            this.enterOuterAlt(localctx, 2);
            this.state = 8358;
            this.table_constraint();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_definitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_column_definition;
    this.constraint = null; // IdContext
    this.seed = null; // Token
    this.increment = null; // Token
    return this;
}

Column_definitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_definitionContext.prototype.constructor = Column_definitionContext;

Column_definitionContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Column_definitionContext.prototype.data_type = function() {
    return this.getTypedRuleContext(Data_typeContext,0);
};

Column_definitionContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Column_definitionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Column_definitionContext.prototype.COLLATE = function() {
    return this.getToken(TSqlParser.COLLATE, 0);
};

Column_definitionContext.prototype.null_notnull = function() {
    return this.getTypedRuleContext(Null_notnullContext,0);
};

Column_definitionContext.prototype.null_or_default = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Null_or_defaultContext);
    } else {
        return this.getTypedRuleContext(Null_or_defaultContext,i);
    }
};

Column_definitionContext.prototype.IDENTITY = function() {
    return this.getToken(TSqlParser.IDENTITY, 0);
};

Column_definitionContext.prototype.ROWGUIDCOL = function() {
    return this.getToken(TSqlParser.ROWGUIDCOL, 0);
};

Column_definitionContext.prototype.column_constraint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_constraintContext);
    } else {
        return this.getTypedRuleContext(Column_constraintContext,i);
    }
};

Column_definitionContext.prototype.CONSTRAINT = function() {
    return this.getToken(TSqlParser.CONSTRAINT, 0);
};

Column_definitionContext.prototype.NOT = function() {
    return this.getToken(TSqlParser.NOT, 0);
};

Column_definitionContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Column_definitionContext.prototype.REPLICATION = function() {
    return this.getToken(TSqlParser.REPLICATION, 0);
};

Column_definitionContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Column_definitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterColumn_definition(this);
	}
};

Column_definitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitColumn_definition(this);
	}
};




TSqlParser.Column_definitionContext = Column_definitionContext;

TSqlParser.prototype.column_definition = function() {

    var localctx = new Column_definitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 678, TSqlParser.RULE_column_definition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8361;
        this.id();
        this.state = 8365;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.BIGINT:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.INT:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SMALLINT:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TINYINT:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.state = 8362;
            this.data_type();
            break;
        case TSqlParser.AS:
            this.state = 8363;
            this.match(TSqlParser.AS);
            this.state = 8364;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 8369;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COLLATE) {
            this.state = 8367;
            this.match(TSqlParser.COLLATE);
            this.state = 8368;
            this.id();
        }

        this.state = 8372;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1176,this._ctx);
        if(la_===1) {
            this.state = 8371;
            this.null_notnull();

        }
        this.state = 8395;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1181,this._ctx);
        if(la_===1) {
            this.state = 8376;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.CONSTRAINT) {
                this.state = 8374;
                this.match(TSqlParser.CONSTRAINT);
                this.state = 8375;
                localctx.constraint = this.id();
            }

            this.state = 8378;
            this.null_or_default();
            this.state = 8380;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1178,this._ctx);
            if(la_===1) {
                this.state = 8379;
                this.null_or_default();

            }

        } else if(la_===2) {
            this.state = 8382;
            this.match(TSqlParser.IDENTITY);
            this.state = 8388;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1179,this._ctx);
            if(la_===1) {
                this.state = 8383;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 8384;
                localctx.seed = this.match(TSqlParser.DECIMAL);
                this.state = 8385;
                this.match(TSqlParser.COMMA);
                this.state = 8386;
                localctx.increment = this.match(TSqlParser.DECIMAL);
                this.state = 8387;
                this.match(TSqlParser.RR_BRACKET);

            }
            this.state = 8393;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1180,this._ctx);
            if(la_===1) {
                this.state = 8390;
                this.match(TSqlParser.NOT);
                this.state = 8391;
                this.match(TSqlParser.FOR);
                this.state = 8392;
                this.match(TSqlParser.REPLICATION);

            }

        }
        this.state = 8398;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.ROWGUIDCOL) {
            this.state = 8397;
            this.match(TSqlParser.ROWGUIDCOL);
        }

        this.state = 8403;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1183,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 8400;
                this.column_constraint(); 
            }
            this.state = 8405;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1183,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_column_constraint;
    this.constraint = null; // IdContext
    this.pk = null; // Column_name_listContext
    return this;
}

Column_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_constraintContext.prototype.constructor = Column_constraintContext;

Column_constraintContext.prototype.CHECK = function() {
    return this.getToken(TSqlParser.CHECK, 0);
};

Column_constraintContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Column_constraintContext.prototype.REFERENCES = function() {
    return this.getToken(TSqlParser.REFERENCES, 0);
};

Column_constraintContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Column_constraintContext.prototype.null_notnull = function() {
    return this.getTypedRuleContext(Null_notnullContext,0);
};

Column_constraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(TSqlParser.CONSTRAINT, 0);
};

Column_constraintContext.prototype.column_name_list = function() {
    return this.getTypedRuleContext(Column_name_listContext,0);
};

Column_constraintContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Column_constraintContext.prototype.PRIMARY = function() {
    return this.getToken(TSqlParser.PRIMARY, 0);
};

Column_constraintContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Column_constraintContext.prototype.UNIQUE = function() {
    return this.getToken(TSqlParser.UNIQUE, 0);
};

Column_constraintContext.prototype.clustered = function() {
    return this.getTypedRuleContext(ClusteredContext,0);
};

Column_constraintContext.prototype.index_options = function() {
    return this.getTypedRuleContext(Index_optionsContext,0);
};

Column_constraintContext.prototype.NOT = function() {
    return this.getToken(TSqlParser.NOT, 0);
};

Column_constraintContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Column_constraintContext.prototype.REPLICATION = function() {
    return this.getToken(TSqlParser.REPLICATION, 0);
};

Column_constraintContext.prototype.FOREIGN = function() {
    return this.getToken(TSqlParser.FOREIGN, 0);
};

Column_constraintContext.prototype.on_delete = function() {
    return this.getTypedRuleContext(On_deleteContext,0);
};

Column_constraintContext.prototype.on_update = function() {
    return this.getTypedRuleContext(On_updateContext,0);
};

Column_constraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterColumn_constraint(this);
	}
};

Column_constraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitColumn_constraint(this);
	}
};




TSqlParser.Column_constraintContext = Column_constraintContext;

TSqlParser.prototype.column_constraint = function() {

    var localctx = new Column_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 680, TSqlParser.RULE_column_constraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8408;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.CONSTRAINT) {
            this.state = 8406;
            this.match(TSqlParser.CONSTRAINT);
            this.state = 8407;
            localctx.constraint = this.id();
        }

        this.state = 8447;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.PRIMARY:
        case TSqlParser.UNIQUE:
            this.state = 8413;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.PRIMARY:
                this.state = 8410;
                this.match(TSqlParser.PRIMARY);
                this.state = 8411;
                this.match(TSqlParser.KEY);
                break;
            case TSqlParser.UNIQUE:
                this.state = 8412;
                this.match(TSqlParser.UNIQUE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 8416;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.CLUSTERED || _la===TSqlParser.NONCLUSTERED) {
                this.state = 8415;
                this.clustered();
            }

            this.state = 8419;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1187,this._ctx);
            if(la_===1) {
                this.state = 8418;
                this.index_options();

            }
            break;
        case TSqlParser.CHECK:
            this.state = 8421;
            this.match(TSqlParser.CHECK);
            this.state = 8425;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.NOT) {
                this.state = 8422;
                this.match(TSqlParser.NOT);
                this.state = 8423;
                this.match(TSqlParser.FOR);
                this.state = 8424;
                this.match(TSqlParser.REPLICATION);
            }

            this.state = 8427;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 8428;
            this.search_condition();
            this.state = 8429;
            this.match(TSqlParser.RR_BRACKET);
            break;
        case TSqlParser.FOREIGN:
        case TSqlParser.REFERENCES:
            this.state = 8433;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.FOREIGN) {
                this.state = 8431;
                this.match(TSqlParser.FOREIGN);
                this.state = 8432;
                this.match(TSqlParser.KEY);
            }

            this.state = 8435;
            this.match(TSqlParser.REFERENCES);
            this.state = 8436;
            this.table_name();
            this.state = 8437;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 8438;
            localctx.pk = this.column_name_list();
            this.state = 8439;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 8441;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1190,this._ctx);
            if(la_===1) {
                this.state = 8440;
                this.on_delete();

            }
            this.state = 8444;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.ON) {
                this.state = 8443;
                this.on_update();
            }

            break;
        case TSqlParser.NOT:
        case TSqlParser.NULL:
            this.state = 8446;
            this.null_notnull();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_table_constraint;
    this.constraint = null; // IdContext
    this.fk = null; // Column_name_listContext
    this.pk = null; // Column_name_listContext
    return this;
}

Table_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_constraintContext.prototype.constructor = Table_constraintContext;

Table_constraintContext.prototype.column_name_list_with_order = function() {
    return this.getTypedRuleContext(Column_name_list_with_orderContext,0);
};

Table_constraintContext.prototype.CHECK = function() {
    return this.getToken(TSqlParser.CHECK, 0);
};

Table_constraintContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Table_constraintContext.prototype.DEFAULT = function() {
    return this.getToken(TSqlParser.DEFAULT, 0);
};

Table_constraintContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Table_constraintContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Table_constraintContext.prototype.FOREIGN = function() {
    return this.getToken(TSqlParser.FOREIGN, 0);
};

Table_constraintContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Table_constraintContext.prototype.REFERENCES = function() {
    return this.getToken(TSqlParser.REFERENCES, 0);
};

Table_constraintContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Table_constraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(TSqlParser.CONSTRAINT, 0);
};

Table_constraintContext.prototype.column_name_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_name_listContext);
    } else {
        return this.getTypedRuleContext(Column_name_listContext,i);
    }
};

Table_constraintContext.prototype.PRIMARY = function() {
    return this.getToken(TSqlParser.PRIMARY, 0);
};

Table_constraintContext.prototype.UNIQUE = function() {
    return this.getToken(TSqlParser.UNIQUE, 0);
};

Table_constraintContext.prototype.clustered = function() {
    return this.getTypedRuleContext(ClusteredContext,0);
};

Table_constraintContext.prototype.index_options = function() {
    return this.getTypedRuleContext(Index_optionsContext,0);
};

Table_constraintContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Table_constraintContext.prototype.NOT = function() {
    return this.getToken(TSqlParser.NOT, 0);
};

Table_constraintContext.prototype.REPLICATION = function() {
    return this.getToken(TSqlParser.REPLICATION, 0);
};

Table_constraintContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Table_constraintContext.prototype.PLUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.PLUS);
    } else {
        return this.getToken(TSqlParser.PLUS, i);
    }
};


Table_constraintContext.prototype.function_call = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Function_callContext);
    } else {
        return this.getTypedRuleContext(Function_callContext,i);
    }
};

Table_constraintContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Table_constraintContext.prototype.on_delete = function() {
    return this.getTypedRuleContext(On_deleteContext,0);
};

Table_constraintContext.prototype.on_update = function() {
    return this.getTypedRuleContext(On_updateContext,0);
};

Table_constraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTable_constraint(this);
	}
};

Table_constraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTable_constraint(this);
	}
};




TSqlParser.Table_constraintContext = Table_constraintContext;

TSqlParser.prototype.table_constraint = function() {

    var localctx = new Table_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 682, TSqlParser.RULE_table_constraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8451;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.CONSTRAINT) {
            this.state = 8449;
            this.match(TSqlParser.CONSTRAINT);
            this.state = 8450;
            localctx.constraint = this.id();
        }

        this.state = 8514;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.PRIMARY:
        case TSqlParser.UNIQUE:
            this.state = 8456;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.PRIMARY:
                this.state = 8453;
                this.match(TSqlParser.PRIMARY);
                this.state = 8454;
                this.match(TSqlParser.KEY);
                break;
            case TSqlParser.UNIQUE:
                this.state = 8455;
                this.match(TSqlParser.UNIQUE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 8459;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.CLUSTERED || _la===TSqlParser.NONCLUSTERED) {
                this.state = 8458;
                this.clustered();
            }

            this.state = 8461;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 8462;
            this.column_name_list_with_order();
            this.state = 8463;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 8465;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1196,this._ctx);
            if(la_===1) {
                this.state = 8464;
                this.index_options();

            }
            this.state = 8469;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.ON) {
                this.state = 8467;
                this.match(TSqlParser.ON);
                this.state = 8468;
                this.id();
            }

            break;
        case TSqlParser.CHECK:
            this.state = 8471;
            this.match(TSqlParser.CHECK);
            this.state = 8475;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.NOT) {
                this.state = 8472;
                this.match(TSqlParser.NOT);
                this.state = 8473;
                this.match(TSqlParser.FOR);
                this.state = 8474;
                this.match(TSqlParser.REPLICATION);
            }

            this.state = 8477;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 8478;
            this.search_condition();
            this.state = 8479;
            this.match(TSqlParser.RR_BRACKET);
            break;
        case TSqlParser.DEFAULT:
            this.state = 8481;
            this.match(TSqlParser.DEFAULT);
            this.state = 8483;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.LR_BRACKET) {
                this.state = 8482;
                this.match(TSqlParser.LR_BRACKET);
            }

            this.state = 8489; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 8489;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.STRING:
                    this.state = 8485;
                    this.match(TSqlParser.STRING);
                    break;
                case TSqlParser.PLUS:
                    this.state = 8486;
                    this.match(TSqlParser.PLUS);
                    break;
                case TSqlParser.CALLED:
                case TSqlParser.COALESCE:
                case TSqlParser.CONVERT:
                case TSqlParser.CURRENT_TIMESTAMP:
                case TSqlParser.CURRENT_USER:
                case TSqlParser.DATA_COMPRESSION:
                case TSqlParser.EVENTDATA:
                case TSqlParser.FILENAME:
                case TSqlParser.FILLFACTOR:
                case TSqlParser.FORCESEEK:
                case TSqlParser.IDENTITY:
                case TSqlParser.ISNULL:
                case TSqlParser.KEY:
                case TSqlParser.LEFT:
                case TSqlParser.MASTER:
                case TSqlParser.MAX_MEMORY:
                case TSqlParser.NULLIF:
                case TSqlParser.OFFSETS:
                case TSqlParser.PAGE:
                case TSqlParser.PUBLIC:
                case TSqlParser.RAW:
                case TSqlParser.RETURN:
                case TSqlParser.RETURNS:
                case TSqlParser.RIGHT:
                case TSqlParser.ROWCOUNT:
                case TSqlParser.SAFETY:
                case TSqlParser.SERVER:
                case TSqlParser.SESSION_USER:
                case TSqlParser.SID:
                case TSqlParser.SOURCE:
                case TSqlParser.STATE:
                case TSqlParser.SYSTEM_USER:
                case TSqlParser.TARGET:
                case TSqlParser.ABSOLUTE:
                case TSqlParser.ACTIVE:
                case TSqlParser.ADDRESS:
                case TSqlParser.APPLY:
                case TSqlParser.AUTO:
                case TSqlParser.AVAILABILITY:
                case TSqlParser.AVG:
                case TSqlParser.BINARY_CHECKSUM:
                case TSqlParser.CALLER:
                case TSqlParser.CAST:
                case TSqlParser.CATCH:
                case TSqlParser.CHECKSUM:
                case TSqlParser.CHECKSUM_AGG:
                case TSqlParser.COMMITTED:
                case TSqlParser.CONCAT:
                case TSqlParser.CONCAT_NULL_YIELDS_NULL:
                case TSqlParser.CONTROL:
                case TSqlParser.COOKIE:
                case TSqlParser.COUNT:
                case TSqlParser.COUNTER:
                case TSqlParser.COUNT_BIG:
                case TSqlParser.DATEADD:
                case TSqlParser.DATEDIFF:
                case TSqlParser.DATENAME:
                case TSqlParser.DATEPART:
                case TSqlParser.DELAY:
                case TSqlParser.DELETED:
                case TSqlParser.DENSE_RANK:
                case TSqlParser.DISABLE:
                case TSqlParser.DYNAMIC:
                case TSqlParser.ENCRYPTION:
                case TSqlParser.EXPAND:
                case TSqlParser.FAST:
                case TSqlParser.FAST_FORWARD:
                case TSqlParser.FIRST:
                case TSqlParser.FIRST_VALUE:
                case TSqlParser.FOLLOWING:
                case TSqlParser.FORCE:
                case TSqlParser.FORCED:
                case TSqlParser.FORWARD_ONLY:
                case TSqlParser.FULLSCAN:
                case TSqlParser.GETDATE:
                case TSqlParser.GETUTCDATE:
                case TSqlParser.GLOBAL:
                case TSqlParser.GROUPING:
                case TSqlParser.GROUPING_ID:
                case TSqlParser.HASH:
                case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
                case TSqlParser.IMPERSONATE:
                case TSqlParser.INPUT:
                case TSqlParser.INSENSITIVE:
                case TSqlParser.INSERTED:
                case TSqlParser.ISOLATION:
                case TSqlParser.KEEP:
                case TSqlParser.KEEPFIXED:
                case TSqlParser.KEYSET:
                case TSqlParser.LAG:
                case TSqlParser.LAST:
                case TSqlParser.LAST_VALUE:
                case TSqlParser.LEAD:
                case TSqlParser.LEVEL:
                case TSqlParser.LOCAL:
                case TSqlParser.LOCATION:
                case TSqlParser.LOCK_ESCALATION:
                case TSqlParser.LOGIN:
                case TSqlParser.LOOP:
                case TSqlParser.MARK:
                case TSqlParser.MAX:
                case TSqlParser.MAX_ROLLOVER_FILES:
                case TSqlParser.MAXDOP:
                case TSqlParser.MAXRECURSION:
                case TSqlParser.MIN:
                case TSqlParser.MIN_ACTIVE_ROWVERSION:
                case TSqlParser.MODIFY:
                case TSqlParser.NAME:
                case TSqlParser.NEXT:
                case TSqlParser.NOCOUNT:
                case TSqlParser.NOEXPAND:
                case TSqlParser.NORECOMPUTE:
                case TSqlParser.NTILE:
                case TSqlParser.NUMBER:
                case TSqlParser.OFFSET:
                case TSqlParser.ONLINE:
                case TSqlParser.ONLY:
                case TSqlParser.OPTIMISTIC:
                case TSqlParser.OPTIMIZE:
                case TSqlParser.OUT:
                case TSqlParser.OUTPUT:
                case TSqlParser.OWNER:
                case TSqlParser.PARAMETERIZATION:
                case TSqlParser.PARTITION:
                case TSqlParser.PATH:
                case TSqlParser.PRECEDING:
                case TSqlParser.PRIOR:
                case TSqlParser.PRIVILEGES:
                case TSqlParser.RANGE:
                case TSqlParser.RANK:
                case TSqlParser.READONLY:
                case TSqlParser.READ_ONLY:
                case TSqlParser.RECOMPILE:
                case TSqlParser.RELATIVE:
                case TSqlParser.REMOTE:
                case TSqlParser.REPEATABLE:
                case TSqlParser.ROBUST:
                case TSqlParser.ROOT:
                case TSqlParser.ROW:
                case TSqlParser.ROWGUID:
                case TSqlParser.ROWS:
                case TSqlParser.ROW_NUMBER:
                case TSqlParser.SAMPLE:
                case TSqlParser.SCHEMABINDING:
                case TSqlParser.SCROLL:
                case TSqlParser.SCROLL_LOCKS:
                case TSqlParser.SELF:
                case TSqlParser.SERIALIZABLE:
                case TSqlParser.SIMPLE:
                case TSqlParser.SIZE:
                case TSqlParser.SNAPSHOT:
                case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
                case TSqlParser.STATIC:
                case TSqlParser.STATS_STREAM:
                case TSqlParser.STDEV:
                case TSqlParser.STDEVP:
                case TSqlParser.STUFF:
                case TSqlParser.SUM:
                case TSqlParser.TEXTIMAGE_ON:
                case TSqlParser.THROW:
                case TSqlParser.TIES:
                case TSqlParser.TIME:
                case TSqlParser.TRY:
                case TSqlParser.TYPE:
                case TSqlParser.TYPE_WARNING:
                case TSqlParser.UNBOUNDED:
                case TSqlParser.UNCOMMITTED:
                case TSqlParser.UNKNOWN:
                case TSqlParser.USING:
                case TSqlParser.VALUE:
                case TSqlParser.VAR:
                case TSqlParser.VARP:
                case TSqlParser.VIEWS:
                case TSqlParser.VIEW_METADATA:
                case TSqlParser.WORK:
                case TSqlParser.XML:
                case TSqlParser.XMLNAMESPACES:
                case TSqlParser.DOUBLE_QUOTE_ID:
                case TSqlParser.SQUARE_BRACKET_ID:
                case TSqlParser.LOCAL_ID:
                case TSqlParser.ID:
                    this.state = 8487;
                    this.function_call();
                    break;
                case TSqlParser.DECIMAL:
                    this.state = 8488;
                    this.match(TSqlParser.DECIMAL);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 8491; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (TSqlParser.CALLED - 37)) | (1 << (TSqlParser.COALESCE - 37)) | (1 << (TSqlParser.CONVERT - 37)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (TSqlParser.CURRENT_TIMESTAMP - 75)) | (1 << (TSqlParser.CURRENT_USER - 75)) | (1 << (TSqlParser.DATA_COMPRESSION - 75)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (TSqlParser.IDENTITY - 148)) | (1 << (TSqlParser.ISNULL - 148)) | (1 << (TSqlParser.KEY - 148)) | (1 << (TSqlParser.LEFT - 148)))) !== 0) || _la===TSqlParser.MASTER || _la===TSqlParser.MAX_MEMORY || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (TSqlParser.NULLIF - 221)) | (1 << (TSqlParser.OFFSETS - 221)) | (1 << (TSqlParser.PAGE - 221)))) !== 0) || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.RIGHT - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SESSION_USER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || ((((_la - 328)) & ~0x1f) == 0 && ((1 << (_la - 328)) & ((1 << (TSqlParser.STATE - 328)) | (1 << (TSqlParser.SYSTEM_USER - 328)) | (1 << (TSqlParser.TARGET - 328)))) !== 0) || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)) | (1 << (TSqlParser.FIRST_VALUE - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAG - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LAST_VALUE - 545)) | (1 << (TSqlParser.LEAD - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.STUFF - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.LOCAL_ID - 747)) | (1 << (TSqlParser.DECIMAL - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0) || _la===TSqlParser.STRING || _la===TSqlParser.PLUS);
            this.state = 8494;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.RR_BRACKET) {
                this.state = 8493;
                this.match(TSqlParser.RR_BRACKET);
            }

            this.state = 8496;
            this.match(TSqlParser.FOR);
            this.state = 8497;
            this.id();
            break;
        case TSqlParser.FOREIGN:
            this.state = 8498;
            this.match(TSqlParser.FOREIGN);
            this.state = 8499;
            this.match(TSqlParser.KEY);
            this.state = 8500;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 8501;
            localctx.fk = this.column_name_list();
            this.state = 8502;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 8503;
            this.match(TSqlParser.REFERENCES);
            this.state = 8504;
            this.table_name();
            this.state = 8505;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 8506;
            localctx.pk = this.column_name_list();
            this.state = 8507;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 8509;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1203,this._ctx);
            if(la_===1) {
                this.state = 8508;
                this.on_delete();

            }
            this.state = 8512;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.ON) {
                this.state = 8511;
                this.on_update();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function On_deleteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_on_delete;
    return this;
}

On_deleteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
On_deleteContext.prototype.constructor = On_deleteContext;

On_deleteContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

On_deleteContext.prototype.DELETE = function() {
    return this.getToken(TSqlParser.DELETE, 0);
};

On_deleteContext.prototype.NO = function() {
    return this.getToken(TSqlParser.NO, 0);
};

On_deleteContext.prototype.ACTION = function() {
    return this.getToken(TSqlParser.ACTION, 0);
};

On_deleteContext.prototype.CASCADE = function() {
    return this.getToken(TSqlParser.CASCADE, 0);
};

On_deleteContext.prototype.SET = function() {
    return this.getToken(TSqlParser.SET, 0);
};

On_deleteContext.prototype.NULL = function() {
    return this.getToken(TSqlParser.NULL, 0);
};

On_deleteContext.prototype.DEFAULT = function() {
    return this.getToken(TSqlParser.DEFAULT, 0);
};

On_deleteContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterOn_delete(this);
	}
};

On_deleteContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitOn_delete(this);
	}
};




TSqlParser.On_deleteContext = On_deleteContext;

TSqlParser.prototype.on_delete = function() {

    var localctx = new On_deleteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 684, TSqlParser.RULE_on_delete);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8516;
        this.match(TSqlParser.ON);
        this.state = 8517;
        this.match(TSqlParser.DELETE);
        this.state = 8525;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1206,this._ctx);
        switch(la_) {
        case 1:
            this.state = 8518;
            this.match(TSqlParser.NO);
            this.state = 8519;
            this.match(TSqlParser.ACTION);
            break;

        case 2:
            this.state = 8520;
            this.match(TSqlParser.CASCADE);
            break;

        case 3:
            this.state = 8521;
            this.match(TSqlParser.SET);
            this.state = 8522;
            this.match(TSqlParser.NULL);
            break;

        case 4:
            this.state = 8523;
            this.match(TSqlParser.SET);
            this.state = 8524;
            this.match(TSqlParser.DEFAULT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function On_updateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_on_update;
    return this;
}

On_updateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
On_updateContext.prototype.constructor = On_updateContext;

On_updateContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

On_updateContext.prototype.UPDATE = function() {
    return this.getToken(TSqlParser.UPDATE, 0);
};

On_updateContext.prototype.NO = function() {
    return this.getToken(TSqlParser.NO, 0);
};

On_updateContext.prototype.ACTION = function() {
    return this.getToken(TSqlParser.ACTION, 0);
};

On_updateContext.prototype.CASCADE = function() {
    return this.getToken(TSqlParser.CASCADE, 0);
};

On_updateContext.prototype.SET = function() {
    return this.getToken(TSqlParser.SET, 0);
};

On_updateContext.prototype.NULL = function() {
    return this.getToken(TSqlParser.NULL, 0);
};

On_updateContext.prototype.DEFAULT = function() {
    return this.getToken(TSqlParser.DEFAULT, 0);
};

On_updateContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterOn_update(this);
	}
};

On_updateContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitOn_update(this);
	}
};




TSqlParser.On_updateContext = On_updateContext;

TSqlParser.prototype.on_update = function() {

    var localctx = new On_updateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 686, TSqlParser.RULE_on_update);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8527;
        this.match(TSqlParser.ON);
        this.state = 8528;
        this.match(TSqlParser.UPDATE);
        this.state = 8536;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1207,this._ctx);
        switch(la_) {
        case 1:
            this.state = 8529;
            this.match(TSqlParser.NO);
            this.state = 8530;
            this.match(TSqlParser.ACTION);
            break;

        case 2:
            this.state = 8531;
            this.match(TSqlParser.CASCADE);
            break;

        case 3:
            this.state = 8532;
            this.match(TSqlParser.SET);
            this.state = 8533;
            this.match(TSqlParser.NULL);
            break;

        case 4:
            this.state = 8534;
            this.match(TSqlParser.SET);
            this.state = 8535;
            this.match(TSqlParser.DEFAULT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Index_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_index_options;
    return this;
}

Index_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Index_optionsContext.prototype.constructor = Index_optionsContext;

Index_optionsContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Index_optionsContext.prototype.index_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Index_optionContext);
    } else {
        return this.getTypedRuleContext(Index_optionContext,i);
    }
};

Index_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterIndex_options(this);
	}
};

Index_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitIndex_options(this);
	}
};




TSqlParser.Index_optionsContext = Index_optionsContext;

TSqlParser.prototype.index_options = function() {

    var localctx = new Index_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 688, TSqlParser.RULE_index_options);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8538;
        this.match(TSqlParser.WITH);
        this.state = 8539;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 8540;
        this.index_option();
        this.state = 8545;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 8541;
            this.match(TSqlParser.COMMA);
            this.state = 8542;
            this.index_option();
            this.state = 8547;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 8548;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Index_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_index_option;
    return this;
}

Index_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Index_optionContext.prototype.constructor = Index_optionContext;

Index_optionContext.prototype.simple_id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Simple_idContext);
    } else {
        return this.getTypedRuleContext(Simple_idContext,i);
    }
};

Index_optionContext.prototype.on_off = function() {
    return this.getTypedRuleContext(On_offContext,0);
};

Index_optionContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Index_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterIndex_option(this);
	}
};

Index_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitIndex_option(this);
	}
};




TSqlParser.Index_optionContext = Index_optionContext;

TSqlParser.prototype.index_option = function() {

    var localctx = new Index_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 690, TSqlParser.RULE_index_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8550;
        this.simple_id();
        this.state = 8551;
        this.match(TSqlParser.EQUAL);
        this.state = 8555;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.ID:
            this.state = 8552;
            this.simple_id();
            break;
        case TSqlParser.OFF:
        case TSqlParser.ON:
            this.state = 8553;
            this.on_off();
            break;
        case TSqlParser.DECIMAL:
            this.state = 8554;
            this.match(TSqlParser.DECIMAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declare_cursorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_declare_cursor;
    return this;
}

Declare_cursorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declare_cursorContext.prototype.constructor = Declare_cursorContext;

Declare_cursorContext.prototype.DECLARE = function() {
    return this.getToken(TSqlParser.DECLARE, 0);
};

Declare_cursorContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Declare_cursorContext.prototype.CURSOR = function() {
    return this.getToken(TSqlParser.CURSOR, 0);
};

Declare_cursorContext.prototype.FOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.FOR);
    } else {
        return this.getToken(TSqlParser.FOR, i);
    }
};


Declare_cursorContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Declare_cursorContext.prototype.declare_set_cursor_common = function() {
    return this.getTypedRuleContext(Declare_set_cursor_commonContext,0);
};

Declare_cursorContext.prototype.INSENSITIVE = function() {
    return this.getToken(TSqlParser.INSENSITIVE, 0);
};

Declare_cursorContext.prototype.SCROLL = function() {
    return this.getToken(TSqlParser.SCROLL, 0);
};

Declare_cursorContext.prototype.READ = function() {
    return this.getToken(TSqlParser.READ, 0);
};

Declare_cursorContext.prototype.ONLY = function() {
    return this.getToken(TSqlParser.ONLY, 0);
};

Declare_cursorContext.prototype.UPDATE = function() {
    return this.getToken(TSqlParser.UPDATE, 0);
};

Declare_cursorContext.prototype.OF = function() {
    return this.getToken(TSqlParser.OF, 0);
};

Declare_cursorContext.prototype.column_name_list = function() {
    return this.getTypedRuleContext(Column_name_listContext,0);
};

Declare_cursorContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDeclare_cursor(this);
	}
};

Declare_cursorContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDeclare_cursor(this);
	}
};




TSqlParser.Declare_cursorContext = Declare_cursorContext;

TSqlParser.prototype.declare_cursor = function() {

    var localctx = new Declare_cursorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 692, TSqlParser.RULE_declare_cursor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8557;
        this.match(TSqlParser.DECLARE);
        this.state = 8558;
        this.cursor_name();
        this.state = 8590;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1217,this._ctx);
        switch(la_) {
        case 1:
            this.state = 8559;
            this.match(TSqlParser.CURSOR);
            this.state = 8569;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1212,this._ctx);
            if(la_===1) {
                this.state = 8560;
                this.declare_set_cursor_common();
                this.state = 8567;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.FOR) {
                    this.state = 8561;
                    this.match(TSqlParser.FOR);
                    this.state = 8562;
                    this.match(TSqlParser.UPDATE);
                    this.state = 8565;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===TSqlParser.OF) {
                        this.state = 8563;
                        this.match(TSqlParser.OF);
                        this.state = 8564;
                        this.column_name_list();
                    }

                }


            }
            break;

        case 2:
            this.state = 8572;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.INSENSITIVE) {
                this.state = 8571;
                this.match(TSqlParser.INSENSITIVE);
            }

            this.state = 8575;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.SCROLL) {
                this.state = 8574;
                this.match(TSqlParser.SCROLL);
            }

            this.state = 8577;
            this.match(TSqlParser.CURSOR);
            this.state = 8578;
            this.match(TSqlParser.FOR);
            this.state = 8579;
            this.select_statement();
            this.state = 8588;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.FOR) {
                this.state = 8580;
                this.match(TSqlParser.FOR);
                this.state = 8586;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case TSqlParser.READ:
                    this.state = 8581;
                    this.match(TSqlParser.READ);
                    this.state = 8582;
                    this.match(TSqlParser.ONLY);
                    break;
                case TSqlParser.UPDATE:
                    this.state = 8583;
                    this.match(TSqlParser.UPDATE);
                    break;
                case TSqlParser.OF:
                    this.state = 8584;
                    this.match(TSqlParser.OF);
                    this.state = 8585;
                    this.column_name_list();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
            }

            break;

        }
        this.state = 8593;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1218,this._ctx);
        if(la_===1) {
            this.state = 8592;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declare_set_cursor_commonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_declare_set_cursor_common;
    return this;
}

Declare_set_cursor_commonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declare_set_cursor_commonContext.prototype.constructor = Declare_set_cursor_commonContext;

Declare_set_cursor_commonContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Declare_set_cursor_commonContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Declare_set_cursor_commonContext.prototype.declare_set_cursor_common_partial = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Declare_set_cursor_common_partialContext);
    } else {
        return this.getTypedRuleContext(Declare_set_cursor_common_partialContext,i);
    }
};

Declare_set_cursor_commonContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDeclare_set_cursor_common(this);
	}
};

Declare_set_cursor_commonContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDeclare_set_cursor_common(this);
	}
};




TSqlParser.Declare_set_cursor_commonContext = Declare_set_cursor_commonContext;

TSqlParser.prototype.declare_set_cursor_common = function() {

    var localctx = new Declare_set_cursor_commonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 694, TSqlParser.RULE_declare_set_cursor_common);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8598;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.DYNAMIC || _la===TSqlParser.FAST_FORWARD || _la===TSqlParser.FORWARD_ONLY || _la===TSqlParser.GLOBAL || _la===TSqlParser.KEYSET || _la===TSqlParser.LOCAL || _la===TSqlParser.OPTIMISTIC || _la===TSqlParser.READ_ONLY || ((((_la - 693)) & ~0x1f) == 0 && ((1 << (_la - 693)) & ((1 << (TSqlParser.SCROLL - 693)) | (1 << (TSqlParser.SCROLL_LOCKS - 693)) | (1 << (TSqlParser.STATIC - 693)))) !== 0) || _la===TSqlParser.TYPE_WARNING) {
            this.state = 8595;
            this.declare_set_cursor_common_partial();
            this.state = 8600;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 8601;
        this.match(TSqlParser.FOR);
        this.state = 8602;
        this.select_statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Declare_set_cursor_common_partialContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_declare_set_cursor_common_partial;
    return this;
}

Declare_set_cursor_common_partialContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Declare_set_cursor_common_partialContext.prototype.constructor = Declare_set_cursor_common_partialContext;

Declare_set_cursor_common_partialContext.prototype.LOCAL = function() {
    return this.getToken(TSqlParser.LOCAL, 0);
};

Declare_set_cursor_common_partialContext.prototype.GLOBAL = function() {
    return this.getToken(TSqlParser.GLOBAL, 0);
};

Declare_set_cursor_common_partialContext.prototype.FORWARD_ONLY = function() {
    return this.getToken(TSqlParser.FORWARD_ONLY, 0);
};

Declare_set_cursor_common_partialContext.prototype.SCROLL = function() {
    return this.getToken(TSqlParser.SCROLL, 0);
};

Declare_set_cursor_common_partialContext.prototype.STATIC = function() {
    return this.getToken(TSqlParser.STATIC, 0);
};

Declare_set_cursor_common_partialContext.prototype.KEYSET = function() {
    return this.getToken(TSqlParser.KEYSET, 0);
};

Declare_set_cursor_common_partialContext.prototype.DYNAMIC = function() {
    return this.getToken(TSqlParser.DYNAMIC, 0);
};

Declare_set_cursor_common_partialContext.prototype.FAST_FORWARD = function() {
    return this.getToken(TSqlParser.FAST_FORWARD, 0);
};

Declare_set_cursor_common_partialContext.prototype.READ_ONLY = function() {
    return this.getToken(TSqlParser.READ_ONLY, 0);
};

Declare_set_cursor_common_partialContext.prototype.SCROLL_LOCKS = function() {
    return this.getToken(TSqlParser.SCROLL_LOCKS, 0);
};

Declare_set_cursor_common_partialContext.prototype.OPTIMISTIC = function() {
    return this.getToken(TSqlParser.OPTIMISTIC, 0);
};

Declare_set_cursor_common_partialContext.prototype.TYPE_WARNING = function() {
    return this.getToken(TSqlParser.TYPE_WARNING, 0);
};

Declare_set_cursor_common_partialContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDeclare_set_cursor_common_partial(this);
	}
};

Declare_set_cursor_common_partialContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDeclare_set_cursor_common_partial(this);
	}
};




TSqlParser.Declare_set_cursor_common_partialContext = Declare_set_cursor_common_partialContext;

TSqlParser.prototype.declare_set_cursor_common_partial = function() {

    var localctx = new Declare_set_cursor_common_partialContext(this, this._ctx, this.state);
    this.enterRule(localctx, 696, TSqlParser.RULE_declare_set_cursor_common_partial);
    var _la = 0; // Token type
    try {
        this.state = 8609;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.GLOBAL:
        case TSqlParser.LOCAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 8604;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.GLOBAL || _la===TSqlParser.LOCAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.SCROLL:
            this.enterOuterAlt(localctx, 2);
            this.state = 8605;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.FORWARD_ONLY || _la===TSqlParser.SCROLL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case TSqlParser.DYNAMIC:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.KEYSET:
        case TSqlParser.STATIC:
            this.enterOuterAlt(localctx, 3);
            this.state = 8606;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.DYNAMIC || _la===TSqlParser.FAST_FORWARD || _la===TSqlParser.KEYSET || _la===TSqlParser.STATIC)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.READ_ONLY:
        case TSqlParser.SCROLL_LOCKS:
            this.enterOuterAlt(localctx, 4);
            this.state = 8607;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OPTIMISTIC || _la===TSqlParser.READ_ONLY || _la===TSqlParser.SCROLL_LOCKS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case TSqlParser.TYPE_WARNING:
            this.enterOuterAlt(localctx, 5);
            this.state = 8608;
            this.match(TSqlParser.TYPE_WARNING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fetch_cursorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_fetch_cursor;
    return this;
}

Fetch_cursorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fetch_cursorContext.prototype.constructor = Fetch_cursorContext;

Fetch_cursorContext.prototype.FETCH = function() {
    return this.getToken(TSqlParser.FETCH, 0);
};

Fetch_cursorContext.prototype.cursor_name = function() {
    return this.getTypedRuleContext(Cursor_nameContext,0);
};

Fetch_cursorContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Fetch_cursorContext.prototype.GLOBAL = function() {
    return this.getToken(TSqlParser.GLOBAL, 0);
};

Fetch_cursorContext.prototype.INTO = function() {
    return this.getToken(TSqlParser.INTO, 0);
};

Fetch_cursorContext.prototype.LOCAL_ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LOCAL_ID);
    } else {
        return this.getToken(TSqlParser.LOCAL_ID, i);
    }
};


Fetch_cursorContext.prototype.NEXT = function() {
    return this.getToken(TSqlParser.NEXT, 0);
};

Fetch_cursorContext.prototype.PRIOR = function() {
    return this.getToken(TSqlParser.PRIOR, 0);
};

Fetch_cursorContext.prototype.FIRST = function() {
    return this.getToken(TSqlParser.FIRST, 0);
};

Fetch_cursorContext.prototype.LAST = function() {
    return this.getToken(TSqlParser.LAST, 0);
};

Fetch_cursorContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Fetch_cursorContext.prototype.ABSOLUTE = function() {
    return this.getToken(TSqlParser.ABSOLUTE, 0);
};

Fetch_cursorContext.prototype.RELATIVE = function() {
    return this.getToken(TSqlParser.RELATIVE, 0);
};

Fetch_cursorContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterFetch_cursor(this);
	}
};

Fetch_cursorContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitFetch_cursor(this);
	}
};




TSqlParser.Fetch_cursorContext = Fetch_cursorContext;

TSqlParser.prototype.fetch_cursor = function() {

    var localctx = new Fetch_cursorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 698, TSqlParser.RULE_fetch_cursor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8611;
        this.match(TSqlParser.FETCH);
        this.state = 8621;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1222,this._ctx);
        if(la_===1) {
            this.state = 8618;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case TSqlParser.NEXT:
            	this.state = 8612;
            	this.match(TSqlParser.NEXT);
            	break;
            case TSqlParser.PRIOR:
            	this.state = 8613;
            	this.match(TSqlParser.PRIOR);
            	break;
            case TSqlParser.FIRST:
            	this.state = 8614;
            	this.match(TSqlParser.FIRST);
            	break;
            case TSqlParser.LAST:
            	this.state = 8615;
            	this.match(TSqlParser.LAST);
            	break;
            case TSqlParser.ABSOLUTE:
            case TSqlParser.RELATIVE:
            	this.state = 8616;
            	_la = this._input.LA(1);
            	if(!(_la===TSqlParser.ABSOLUTE || _la===TSqlParser.RELATIVE)) {
            	this._errHandler.recoverInline(this);
            	}
            	else {
            		this._errHandler.reportMatch(this);
            	    this.consume();
            	}
            	this.state = 8617;
            	this.expression(0);
            	break;
            case TSqlParser.FROM:
            	break;
            default:
            	break;
            }
            this.state = 8620;
            this.match(TSqlParser.FROM);

        }
        this.state = 8624;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1223,this._ctx);
        if(la_===1) {
            this.state = 8623;
            this.match(TSqlParser.GLOBAL);

        }
        this.state = 8626;
        this.cursor_name();
        this.state = 8636;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.INTO) {
            this.state = 8627;
            this.match(TSqlParser.INTO);
            this.state = 8628;
            this.match(TSqlParser.LOCAL_ID);
            this.state = 8633;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 8629;
                this.match(TSqlParser.COMMA);
                this.state = 8630;
                this.match(TSqlParser.LOCAL_ID);
                this.state = 8635;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 8639;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1226,this._ctx);
        if(la_===1) {
            this.state = 8638;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_specialContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_set_special;
    return this;
}

Set_specialContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_specialContext.prototype.constructor = Set_specialContext;

Set_specialContext.prototype.SET = function() {
    return this.getToken(TSqlParser.SET, 0);
};

Set_specialContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Set_specialContext.prototype.constant_LOCAL_ID = function() {
    return this.getTypedRuleContext(Constant_LOCAL_IDContext,0);
};

Set_specialContext.prototype.on_off = function() {
    return this.getTypedRuleContext(On_offContext,0);
};

Set_specialContext.prototype.TRANSACTION = function() {
    return this.getToken(TSqlParser.TRANSACTION, 0);
};

Set_specialContext.prototype.ISOLATION = function() {
    return this.getToken(TSqlParser.ISOLATION, 0);
};

Set_specialContext.prototype.LEVEL = function() {
    return this.getToken(TSqlParser.LEVEL, 0);
};

Set_specialContext.prototype.READ = function() {
    return this.getToken(TSqlParser.READ, 0);
};

Set_specialContext.prototype.UNCOMMITTED = function() {
    return this.getToken(TSqlParser.UNCOMMITTED, 0);
};

Set_specialContext.prototype.COMMITTED = function() {
    return this.getToken(TSqlParser.COMMITTED, 0);
};

Set_specialContext.prototype.REPEATABLE = function() {
    return this.getToken(TSqlParser.REPEATABLE, 0);
};

Set_specialContext.prototype.SNAPSHOT = function() {
    return this.getToken(TSqlParser.SNAPSHOT, 0);
};

Set_specialContext.prototype.SERIALIZABLE = function() {
    return this.getToken(TSqlParser.SERIALIZABLE, 0);
};

Set_specialContext.prototype.IDENTITY_INSERT = function() {
    return this.getToken(TSqlParser.IDENTITY_INSERT, 0);
};

Set_specialContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Set_specialContext.prototype.ANSI_NULLS = function() {
    return this.getToken(TSqlParser.ANSI_NULLS, 0);
};

Set_specialContext.prototype.QUOTED_IDENTIFIER = function() {
    return this.getToken(TSqlParser.QUOTED_IDENTIFIER, 0);
};

Set_specialContext.prototype.ANSI_PADDING = function() {
    return this.getToken(TSqlParser.ANSI_PADDING, 0);
};

Set_specialContext.prototype.ANSI_WARNINGS = function() {
    return this.getToken(TSqlParser.ANSI_WARNINGS, 0);
};

Set_specialContext.prototype.modify_method = function() {
    return this.getTypedRuleContext(Modify_methodContext,0);
};

Set_specialContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSet_special(this);
	}
};

Set_specialContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSet_special(this);
	}
};




TSqlParser.Set_specialContext = Set_specialContext;

TSqlParser.prototype.set_special = function() {

    var localctx = new Set_specialContext(this, this._ctx, this.state);
    this.enterRule(localctx, 700, TSqlParser.RULE_set_special);
    try {
        this.state = 8689;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1232,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8641;
            this.match(TSqlParser.SET);
            this.state = 8642;
            this.id();
            this.state = 8646;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.CALLED:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.EVENTDATA:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.KEY:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.OFFSETS:
            case TSqlParser.PAGE:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SERVER:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.TARGET:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.APPLY:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GLOBAL:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAST:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.ID:
                this.state = 8643;
                this.id();
                break;
            case TSqlParser.LOCAL_ID:
            case TSqlParser.DECIMAL:
            case TSqlParser.STRING:
            case TSqlParser.BINARY:
            case TSqlParser.FLOAT:
            case TSqlParser.REAL:
            case TSqlParser.DOLLAR:
            case TSqlParser.PLUS:
            case TSqlParser.MINUS:
                this.state = 8644;
                this.constant_LOCAL_ID();
                break;
            case TSqlParser.OFF:
            case TSqlParser.ON:
                this.state = 8645;
                this.on_off();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 8649;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1228,this._ctx);
            if(la_===1) {
                this.state = 8648;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8651;
            this.match(TSqlParser.SET);
            this.state = 8652;
            this.match(TSqlParser.TRANSACTION);
            this.state = 8653;
            this.match(TSqlParser.ISOLATION);
            this.state = 8654;
            this.match(TSqlParser.LEVEL);
            this.state = 8663;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1229,this._ctx);
            switch(la_) {
            case 1:
                this.state = 8655;
                this.match(TSqlParser.READ);
                this.state = 8656;
                this.match(TSqlParser.UNCOMMITTED);
                break;

            case 2:
                this.state = 8657;
                this.match(TSqlParser.READ);
                this.state = 8658;
                this.match(TSqlParser.COMMITTED);
                break;

            case 3:
                this.state = 8659;
                this.match(TSqlParser.REPEATABLE);
                this.state = 8660;
                this.match(TSqlParser.READ);
                break;

            case 4:
                this.state = 8661;
                this.match(TSqlParser.SNAPSHOT);
                break;

            case 5:
                this.state = 8662;
                this.match(TSqlParser.SERIALIZABLE);
                break;

            }
            this.state = 8666;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1230,this._ctx);
            if(la_===1) {
                this.state = 8665;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 8668;
            this.match(TSqlParser.SET);
            this.state = 8669;
            this.match(TSqlParser.IDENTITY_INSERT);
            this.state = 8670;
            this.table_name();
            this.state = 8671;
            this.on_off();
            this.state = 8673;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1231,this._ctx);
            if(la_===1) {
                this.state = 8672;
                this.match(TSqlParser.SEMI);

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 8675;
            this.match(TSqlParser.SET);
            this.state = 8676;
            this.match(TSqlParser.ANSI_NULLS);
            this.state = 8677;
            this.on_off();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 8678;
            this.match(TSqlParser.SET);
            this.state = 8679;
            this.match(TSqlParser.QUOTED_IDENTIFIER);
            this.state = 8680;
            this.on_off();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 8681;
            this.match(TSqlParser.SET);
            this.state = 8682;
            this.match(TSqlParser.ANSI_PADDING);
            this.state = 8683;
            this.on_off();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 8684;
            this.match(TSqlParser.SET);
            this.state = 8685;
            this.match(TSqlParser.ANSI_WARNINGS);
            this.state = 8686;
            this.on_off();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 8687;
            this.match(TSqlParser.SET);
            this.state = 8688;
            this.modify_method();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constant_LOCAL_IDContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_constant_LOCAL_ID;
    return this;
}

Constant_LOCAL_IDContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_LOCAL_IDContext.prototype.constructor = Constant_LOCAL_IDContext;

Constant_LOCAL_IDContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

Constant_LOCAL_IDContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Constant_LOCAL_IDContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterConstant_LOCAL_ID(this);
	}
};

Constant_LOCAL_IDContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitConstant_LOCAL_ID(this);
	}
};




TSqlParser.Constant_LOCAL_IDContext = Constant_LOCAL_IDContext;

TSqlParser.prototype.constant_LOCAL_ID = function() {

    var localctx = new Constant_LOCAL_IDContext(this, this._ctx, this.state);
    this.enterRule(localctx, 702, TSqlParser.RULE_constant_LOCAL_ID);
    try {
        this.state = 8693;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.DECIMAL:
        case TSqlParser.STRING:
        case TSqlParser.BINARY:
        case TSqlParser.FLOAT:
        case TSqlParser.REAL:
        case TSqlParser.DOLLAR:
        case TSqlParser.PLUS:
        case TSqlParser.MINUS:
            this.enterOuterAlt(localctx, 1);
            this.state = 8691;
            this.constant();
            break;
        case TSqlParser.LOCAL_ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 8692;
            this.match(TSqlParser.LOCAL_ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_expression;
    this.op = null; // Token
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.primitive_expression = function() {
    return this.getTypedRuleContext(Primitive_expressionContext,0);
};

ExpressionContext.prototype.function_call = function() {
    return this.getTypedRuleContext(Function_callContext,0);
};

ExpressionContext.prototype.case_expression = function() {
    return this.getTypedRuleContext(Case_expressionContext,0);
};

ExpressionContext.prototype.full_column_name = function() {
    return this.getTypedRuleContext(Full_column_nameContext,0);
};

ExpressionContext.prototype.bracket_expression = function() {
    return this.getTypedRuleContext(Bracket_expressionContext,0);
};

ExpressionContext.prototype.unary_operator_expression = function() {
    return this.getTypedRuleContext(Unary_operator_expressionContext,0);
};

ExpressionContext.prototype.over_clause = function() {
    return this.getTypedRuleContext(Over_clauseContext,0);
};

ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionContext.prototype.comparison_operator = function() {
    return this.getTypedRuleContext(Comparison_operatorContext,0);
};

ExpressionContext.prototype.assignment_operator = function() {
    return this.getTypedRuleContext(Assignment_operatorContext,0);
};

ExpressionContext.prototype.COLLATE = function() {
    return this.getToken(TSqlParser.COLLATE, 0);
};

ExpressionContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitExpression(this);
	}
};



TSqlParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 704;
    this.enterRecursionRule(localctx, 704, TSqlParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8703;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1234,this._ctx);
        switch(la_) {
        case 1:
            this.state = 8696;
            this.primitive_expression();
            break;

        case 2:
            this.state = 8697;
            this.function_call();
            break;

        case 3:
            this.state = 8698;
            this.case_expression();
            break;

        case 4:
            this.state = 8699;
            this.full_column_name();
            break;

        case 5:
            this.state = 8700;
            this.bracket_expression();
            break;

        case 6:
            this.state = 8701;
            this.unary_operator_expression();
            break;

        case 7:
            this.state = 8702;
            this.over_clause();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 8724;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1236,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 8722;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,1235,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, TSqlParser.RULE_expression);
                    this.state = 8705;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 8706;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 807)) & ~0x1f) == 0 && ((1 << (_la - 807)) & ((1 << (TSqlParser.STAR - 807)) | (1 << (TSqlParser.DIVIDE - 807)) | (1 << (TSqlParser.MODULE - 807)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 8707;
                    this.expression(6);
                    break;

                case 2:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, TSqlParser.RULE_expression);
                    this.state = 8708;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 8709;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 810)) & ~0x1f) == 0 && ((1 << (_la - 810)) & ((1 << (TSqlParser.PLUS - 810)) | (1 << (TSqlParser.MINUS - 810)) | (1 << (TSqlParser.BIT_OR - 810)) | (1 << (TSqlParser.BIT_AND - 810)) | (1 << (TSqlParser.BIT_XOR - 810)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 8710;
                    this.expression(5);
                    break;

                case 3:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, TSqlParser.RULE_expression);
                    this.state = 8711;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 8712;
                    this.comparison_operator();
                    this.state = 8713;
                    this.expression(4);
                    break;

                case 4:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, TSqlParser.RULE_expression);
                    this.state = 8715;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 8716;
                    this.assignment_operator();
                    this.state = 8717;
                    this.expression(3);
                    break;

                case 5:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, TSqlParser.RULE_expression);
                    this.state = 8719;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 8720;
                    this.match(TSqlParser.COLLATE);
                    this.state = 8721;
                    this.id();
                    break;

                } 
            }
            this.state = 8726;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1236,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Primitive_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_primitive_expression;
    return this;
}

Primitive_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Primitive_expressionContext.prototype.constructor = Primitive_expressionContext;

Primitive_expressionContext.prototype.DEFAULT = function() {
    return this.getToken(TSqlParser.DEFAULT, 0);
};

Primitive_expressionContext.prototype.NULL = function() {
    return this.getToken(TSqlParser.NULL, 0);
};

Primitive_expressionContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Primitive_expressionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

Primitive_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterPrimitive_expression(this);
	}
};

Primitive_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitPrimitive_expression(this);
	}
};




TSqlParser.Primitive_expressionContext = Primitive_expressionContext;

TSqlParser.prototype.primitive_expression = function() {

    var localctx = new Primitive_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 706, TSqlParser.RULE_primitive_expression);
    try {
        this.state = 8731;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.DEFAULT:
            this.enterOuterAlt(localctx, 1);
            this.state = 8727;
            this.match(TSqlParser.DEFAULT);
            break;
        case TSqlParser.NULL:
            this.enterOuterAlt(localctx, 2);
            this.state = 8728;
            this.match(TSqlParser.NULL);
            break;
        case TSqlParser.LOCAL_ID:
            this.enterOuterAlt(localctx, 3);
            this.state = 8729;
            this.match(TSqlParser.LOCAL_ID);
            break;
        case TSqlParser.DECIMAL:
        case TSqlParser.STRING:
        case TSqlParser.BINARY:
        case TSqlParser.FLOAT:
        case TSqlParser.REAL:
        case TSqlParser.DOLLAR:
        case TSqlParser.PLUS:
        case TSqlParser.MINUS:
            this.enterOuterAlt(localctx, 4);
            this.state = 8730;
            this.constant();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Case_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_case_expression;
    this.caseExpr = null; // ExpressionContext
    this.elseExpr = null; // ExpressionContext
    return this;
}

Case_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Case_expressionContext.prototype.constructor = Case_expressionContext;

Case_expressionContext.prototype.CASE = function() {
    return this.getToken(TSqlParser.CASE, 0);
};

Case_expressionContext.prototype.END = function() {
    return this.getToken(TSqlParser.END, 0);
};

Case_expressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Case_expressionContext.prototype.switch_section = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Switch_sectionContext);
    } else {
        return this.getTypedRuleContext(Switch_sectionContext,i);
    }
};

Case_expressionContext.prototype.ELSE = function() {
    return this.getToken(TSqlParser.ELSE, 0);
};

Case_expressionContext.prototype.switch_search_condition_section = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Switch_search_condition_sectionContext);
    } else {
        return this.getTypedRuleContext(Switch_search_condition_sectionContext,i);
    }
};

Case_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCase_expression(this);
	}
};

Case_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCase_expression(this);
	}
};




TSqlParser.Case_expressionContext = Case_expressionContext;

TSqlParser.prototype.case_expression = function() {

    var localctx = new Case_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 708, TSqlParser.RULE_case_expression);
    var _la = 0; // Token type
    try {
        this.state = 8758;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1242,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8733;
            this.match(TSqlParser.CASE);
            this.state = 8734;
            localctx.caseExpr = this.expression(0);
            this.state = 8736; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 8735;
                this.switch_section();
                this.state = 8738; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.WHEN);
            this.state = 8742;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.ELSE) {
                this.state = 8740;
                this.match(TSqlParser.ELSE);
                this.state = 8741;
                localctx.elseExpr = this.expression(0);
            }

            this.state = 8744;
            this.match(TSqlParser.END);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8746;
            this.match(TSqlParser.CASE);
            this.state = 8748; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 8747;
                this.switch_search_condition_section();
                this.state = 8750; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===TSqlParser.WHEN);
            this.state = 8754;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.ELSE) {
                this.state = 8752;
                this.match(TSqlParser.ELSE);
                this.state = 8753;
                localctx.elseExpr = this.expression(0);
            }

            this.state = 8756;
            this.match(TSqlParser.END);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unary_operator_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_unary_operator_expression;
    this.op = null; // Token
    return this;
}

Unary_operator_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unary_operator_expressionContext.prototype.constructor = Unary_operator_expressionContext;

Unary_operator_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Unary_operator_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterUnary_operator_expression(this);
	}
};

Unary_operator_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitUnary_operator_expression(this);
	}
};




TSqlParser.Unary_operator_expressionContext = Unary_operator_expressionContext;

TSqlParser.prototype.unary_operator_expression = function() {

    var localctx = new Unary_operator_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 710, TSqlParser.RULE_unary_operator_expression);
    var _la = 0; // Token type
    try {
        this.state = 8764;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.BIT_NOT:
            this.enterOuterAlt(localctx, 1);
            this.state = 8760;
            this.match(TSqlParser.BIT_NOT);
            this.state = 8761;
            this.expression(0);
            break;
        case TSqlParser.PLUS:
        case TSqlParser.MINUS:
            this.enterOuterAlt(localctx, 2);
            this.state = 8762;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.PLUS || _la===TSqlParser.MINUS)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 8763;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bracket_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_bracket_expression;
    return this;
}

Bracket_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bracket_expressionContext.prototype.constructor = Bracket_expressionContext;

Bracket_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Bracket_expressionContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Bracket_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterBracket_expression(this);
	}
};

Bracket_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitBracket_expression(this);
	}
};




TSqlParser.Bracket_expressionContext = Bracket_expressionContext;

TSqlParser.prototype.bracket_expression = function() {

    var localctx = new Bracket_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 712, TSqlParser.RULE_bracket_expression);
    try {
        this.state = 8774;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1244,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8766;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 8767;
            this.expression(0);
            this.state = 8768;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8770;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 8771;
            this.subquery();
            this.state = 8772;
            this.match(TSqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Constant_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_constant_expression;
    return this;
}

Constant_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Constant_expressionContext.prototype.constructor = Constant_expressionContext;

Constant_expressionContext.prototype.NULL = function() {
    return this.getToken(TSqlParser.NULL, 0);
};

Constant_expressionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

Constant_expressionContext.prototype.function_call = function() {
    return this.getTypedRuleContext(Function_callContext,0);
};

Constant_expressionContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Constant_expressionContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Constant_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterConstant_expression(this);
	}
};

Constant_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitConstant_expression(this);
	}
};




TSqlParser.Constant_expressionContext = Constant_expressionContext;

TSqlParser.prototype.constant_expression = function() {

    var localctx = new Constant_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 714, TSqlParser.RULE_constant_expression);
    try {
        this.state = 8784;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1245,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8776;
            this.match(TSqlParser.NULL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8777;
            this.constant();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 8778;
            this.function_call();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 8779;
            this.match(TSqlParser.LOCAL_ID);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 8780;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 8781;
            this.constant_expression();
            this.state = 8782;
            this.match(TSqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_subquery;
    return this;
}

SubqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubqueryContext.prototype.constructor = SubqueryContext;

SubqueryContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

SubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSubquery(this);
	}
};

SubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSubquery(this);
	}
};




TSqlParser.SubqueryContext = SubqueryContext;

TSqlParser.prototype.subquery = function() {

    var localctx = new SubqueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 716, TSqlParser.RULE_subquery);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8786;
        this.select_statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_with_expression;
    return this;
}

With_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_expressionContext.prototype.constructor = With_expressionContext;

With_expressionContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

With_expressionContext.prototype.common_table_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Common_table_expressionContext);
    } else {
        return this.getTypedRuleContext(Common_table_expressionContext,i);
    }
};

With_expressionContext.prototype.XMLNAMESPACES = function() {
    return this.getToken(TSqlParser.XMLNAMESPACES, 0);
};

With_expressionContext.prototype.BLOCKING_HIERARCHY = function() {
    return this.getToken(TSqlParser.BLOCKING_HIERARCHY, 0);
};

With_expressionContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

With_expressionContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

With_expressionContext.prototype.full_column_name_list = function() {
    return this.getTypedRuleContext(Full_column_name_listContext,0);
};

With_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterWith_expression(this);
	}
};

With_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitWith_expression(this);
	}
};




TSqlParser.With_expressionContext = With_expressionContext;

TSqlParser.prototype.with_expression = function() {

    var localctx = new With_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 718, TSqlParser.RULE_with_expression);
    var _la = 0; // Token type
    try {
        this.state = 8814;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1249,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8788;
            this.match(TSqlParser.WITH);
            this.state = 8791;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1246,this._ctx);
            if(la_===1) {
                this.state = 8789;
                this.match(TSqlParser.XMLNAMESPACES);
                this.state = 8790;
                this.match(TSqlParser.COMMA);

            }
            this.state = 8793;
            this.common_table_expression();
            this.state = 8798;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 8794;
                this.match(TSqlParser.COMMA);
                this.state = 8795;
                this.common_table_expression();
                this.state = 8800;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8801;
            this.match(TSqlParser.WITH);
            this.state = 8802;
            this.match(TSqlParser.BLOCKING_HIERARCHY);
            this.state = 8807;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.LR_BRACKET) {
                this.state = 8803;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 8804;
                this.full_column_name_list();
                this.state = 8805;
                this.match(TSqlParser.RR_BRACKET);
            }

            this.state = 8809;
            this.match(TSqlParser.AS);
            this.state = 8810;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 8811;
            this.select_statement();
            this.state = 8812;
            this.match(TSqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Common_table_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_common_table_expression;
    this.expression_name = null; // IdContext
    return this;
}

Common_table_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Common_table_expressionContext.prototype.constructor = Common_table_expressionContext;

Common_table_expressionContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

Common_table_expressionContext.prototype.select_statement = function() {
    return this.getTypedRuleContext(Select_statementContext,0);
};

Common_table_expressionContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Common_table_expressionContext.prototype.column_name_list = function() {
    return this.getTypedRuleContext(Column_name_listContext,0);
};

Common_table_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCommon_table_expression(this);
	}
};

Common_table_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCommon_table_expression(this);
	}
};




TSqlParser.Common_table_expressionContext = Common_table_expressionContext;

TSqlParser.prototype.common_table_expression = function() {

    var localctx = new Common_table_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 720, TSqlParser.RULE_common_table_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8816;
        localctx.expression_name = this.id();
        this.state = 8821;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.LR_BRACKET) {
            this.state = 8817;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 8818;
            this.column_name_list();
            this.state = 8819;
            this.match(TSqlParser.RR_BRACKET);
        }

        this.state = 8823;
        this.match(TSqlParser.AS);
        this.state = 8824;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 8825;
        this.select_statement();
        this.state = 8826;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Update_elemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_update_elem;
    this.udt_column_name = null; // IdContext
    this.method_name = null; // IdContext
    return this;
}

Update_elemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Update_elemContext.prototype.constructor = Update_elemContext;

Update_elemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Update_elemContext.prototype.full_column_name = function() {
    return this.getTypedRuleContext(Full_column_nameContext,0);
};

Update_elemContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Update_elemContext.prototype.assignment_operator = function() {
    return this.getTypedRuleContext(Assignment_operatorContext,0);
};

Update_elemContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Update_elemContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Update_elemContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterUpdate_elem(this);
	}
};

Update_elemContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitUpdate_elem(this);
	}
};




TSqlParser.Update_elemContext = Update_elemContext;

TSqlParser.prototype.update_elem = function() {

    var localctx = new Update_elemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 722, TSqlParser.RULE_update_elem);
    try {
        this.state = 8844;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1253,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8830;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.BLOCKING_HIERARCHY:
            case TSqlParser.CALLED:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.EVENTDATA:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.KEY:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.OFFSETS:
            case TSqlParser.PAGE:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SERVER:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.TARGET:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.ANSI_NULLS:
            case TSqlParser.ANSI_PADDING:
            case TSqlParser.ANSI_WARNINGS:
            case TSqlParser.APPLY:
            case TSqlParser.ARITHABORT:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.COMPATIBILITY_LEVEL:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GLOBAL:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAST:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.QUOTED_IDENTIFIER:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STATUS:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.ID:
                this.state = 8828;
                this.full_column_name();
                break;
            case TSqlParser.LOCAL_ID:
                this.state = 8829;
                this.match(TSqlParser.LOCAL_ID);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 8834;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.EQUAL:
                this.state = 8832;
                this.match(TSqlParser.EQUAL);
                break;
            case TSqlParser.PLUS_ASSIGN:
            case TSqlParser.MINUS_ASSIGN:
            case TSqlParser.MULT_ASSIGN:
            case TSqlParser.DIV_ASSIGN:
            case TSqlParser.MOD_ASSIGN:
            case TSqlParser.AND_ASSIGN:
            case TSqlParser.XOR_ASSIGN:
            case TSqlParser.OR_ASSIGN:
                this.state = 8833;
                this.assignment_operator();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 8836;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8837;
            localctx.udt_column_name = this.id();
            this.state = 8838;
            this.match(TSqlParser.DOT);
            this.state = 8839;
            localctx.method_name = this.id();
            this.state = 8840;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 8841;
            this.expression_list();
            this.state = 8842;
            this.match(TSqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Search_condition_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_search_condition_list;
    return this;
}

Search_condition_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Search_condition_listContext.prototype.constructor = Search_condition_listContext;

Search_condition_listContext.prototype.search_condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Search_conditionContext);
    } else {
        return this.getTypedRuleContext(Search_conditionContext,i);
    }
};

Search_condition_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSearch_condition_list(this);
	}
};

Search_condition_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSearch_condition_list(this);
	}
};




TSqlParser.Search_condition_listContext = Search_condition_listContext;

TSqlParser.prototype.search_condition_list = function() {

    var localctx = new Search_condition_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 724, TSqlParser.RULE_search_condition_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8846;
        this.search_condition();
        this.state = 8851;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 8847;
            this.match(TSqlParser.COMMA);
            this.state = 8848;
            this.search_condition();
            this.state = 8853;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Search_conditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_search_condition;
    return this;
}

Search_conditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Search_conditionContext.prototype.constructor = Search_conditionContext;

Search_conditionContext.prototype.search_condition_and = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Search_condition_andContext);
    } else {
        return this.getTypedRuleContext(Search_condition_andContext,i);
    }
};

Search_conditionContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.OR);
    } else {
        return this.getToken(TSqlParser.OR, i);
    }
};


Search_conditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSearch_condition(this);
	}
};

Search_conditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSearch_condition(this);
	}
};




TSqlParser.Search_conditionContext = Search_conditionContext;

TSqlParser.prototype.search_condition = function() {

    var localctx = new Search_conditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 726, TSqlParser.RULE_search_condition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8854;
        this.search_condition_and();
        this.state = 8859;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.OR) {
            this.state = 8855;
            this.match(TSqlParser.OR);
            this.state = 8856;
            this.search_condition_and();
            this.state = 8861;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Search_condition_andContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_search_condition_and;
    return this;
}

Search_condition_andContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Search_condition_andContext.prototype.constructor = Search_condition_andContext;

Search_condition_andContext.prototype.search_condition_not = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Search_condition_notContext);
    } else {
        return this.getTypedRuleContext(Search_condition_notContext,i);
    }
};

Search_condition_andContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.AND);
    } else {
        return this.getToken(TSqlParser.AND, i);
    }
};


Search_condition_andContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSearch_condition_and(this);
	}
};

Search_condition_andContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSearch_condition_and(this);
	}
};




TSqlParser.Search_condition_andContext = Search_condition_andContext;

TSqlParser.prototype.search_condition_and = function() {

    var localctx = new Search_condition_andContext(this, this._ctx, this.state);
    this.enterRule(localctx, 728, TSqlParser.RULE_search_condition_and);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8862;
        this.search_condition_not();
        this.state = 8867;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.AND) {
            this.state = 8863;
            this.match(TSqlParser.AND);
            this.state = 8864;
            this.search_condition_not();
            this.state = 8869;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Search_condition_notContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_search_condition_not;
    return this;
}

Search_condition_notContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Search_condition_notContext.prototype.constructor = Search_condition_notContext;

Search_condition_notContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

Search_condition_notContext.prototype.NOT = function() {
    return this.getToken(TSqlParser.NOT, 0);
};

Search_condition_notContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSearch_condition_not(this);
	}
};

Search_condition_notContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSearch_condition_not(this);
	}
};




TSqlParser.Search_condition_notContext = Search_condition_notContext;

TSqlParser.prototype.search_condition_not = function() {

    var localctx = new Search_condition_notContext(this, this._ctx, this.state);
    this.enterRule(localctx, 730, TSqlParser.RULE_search_condition_not);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8871;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.NOT) {
            this.state = 8870;
            this.match(TSqlParser.NOT);
        }

        this.state = 8873;
        this.predicate();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PredicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_predicate;
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;

PredicateContext.prototype.EXISTS = function() {
    return this.getToken(TSqlParser.EXISTS, 0);
};

PredicateContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

PredicateContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PredicateContext.prototype.comparison_operator = function() {
    return this.getTypedRuleContext(Comparison_operatorContext,0);
};

PredicateContext.prototype.ALL = function() {
    return this.getToken(TSqlParser.ALL, 0);
};

PredicateContext.prototype.SOME = function() {
    return this.getToken(TSqlParser.SOME, 0);
};

PredicateContext.prototype.ANY = function() {
    return this.getToken(TSqlParser.ANY, 0);
};

PredicateContext.prototype.BETWEEN = function() {
    return this.getToken(TSqlParser.BETWEEN, 0);
};

PredicateContext.prototype.AND = function() {
    return this.getToken(TSqlParser.AND, 0);
};

PredicateContext.prototype.NOT = function() {
    return this.getToken(TSqlParser.NOT, 0);
};

PredicateContext.prototype.IN = function() {
    return this.getToken(TSqlParser.IN, 0);
};

PredicateContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

PredicateContext.prototype.LIKE = function() {
    return this.getToken(TSqlParser.LIKE, 0);
};

PredicateContext.prototype.ESCAPE = function() {
    return this.getToken(TSqlParser.ESCAPE, 0);
};

PredicateContext.prototype.IS = function() {
    return this.getToken(TSqlParser.IS, 0);
};

PredicateContext.prototype.null_notnull = function() {
    return this.getTypedRuleContext(Null_notnullContext,0);
};

PredicateContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

PredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterPredicate(this);
	}
};

PredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitPredicate(this);
	}
};




TSqlParser.PredicateContext = PredicateContext;

TSqlParser.prototype.predicate = function() {

    var localctx = new PredicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 732, TSqlParser.RULE_predicate);
    var _la = 0; // Token type
    try {
        this.state = 8930;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1263,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 8875;
            this.match(TSqlParser.EXISTS);
            this.state = 8876;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 8877;
            this.subquery();
            this.state = 8878;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 8880;
            this.expression(0);
            this.state = 8881;
            this.comparison_operator();
            this.state = 8882;
            this.expression(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 8884;
            this.expression(0);
            this.state = 8885;
            this.comparison_operator();
            this.state = 8886;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.ALL || _la===TSqlParser.ANY || _la===TSqlParser.SOME)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 8887;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 8888;
            this.subquery();
            this.state = 8889;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 8891;
            this.expression(0);
            this.state = 8893;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.NOT) {
                this.state = 8892;
                this.match(TSqlParser.NOT);
            }

            this.state = 8895;
            this.match(TSqlParser.BETWEEN);
            this.state = 8896;
            this.expression(0);
            this.state = 8897;
            this.match(TSqlParser.AND);
            this.state = 8898;
            this.expression(0);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 8900;
            this.expression(0);
            this.state = 8902;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.NOT) {
                this.state = 8901;
                this.match(TSqlParser.NOT);
            }

            this.state = 8904;
            this.match(TSqlParser.IN);
            this.state = 8905;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 8908;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1260,this._ctx);
            switch(la_) {
            case 1:
                this.state = 8906;
                this.subquery();
                break;

            case 2:
                this.state = 8907;
                this.expression_list();
                break;

            }
            this.state = 8910;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 8912;
            this.expression(0);
            this.state = 8914;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.NOT) {
                this.state = 8913;
                this.match(TSqlParser.NOT);
            }

            this.state = 8916;
            this.match(TSqlParser.LIKE);
            this.state = 8917;
            this.expression(0);
            this.state = 8920;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.ESCAPE) {
                this.state = 8918;
                this.match(TSqlParser.ESCAPE);
                this.state = 8919;
                this.expression(0);
            }

            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 8922;
            this.expression(0);
            this.state = 8923;
            this.match(TSqlParser.IS);
            this.state = 8924;
            this.null_notnull();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 8926;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 8927;
            this.search_condition();
            this.state = 8928;
            this.match(TSqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_query_expression;
    return this;
}

Query_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_expressionContext.prototype.constructor = Query_expressionContext;

Query_expressionContext.prototype.query_specification = function() {
    return this.getTypedRuleContext(Query_specificationContext,0);
};

Query_expressionContext.prototype.query_expression = function() {
    return this.getTypedRuleContext(Query_expressionContext,0);
};

Query_expressionContext.prototype.sql_union = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sql_unionContext);
    } else {
        return this.getTypedRuleContext(Sql_unionContext,i);
    }
};

Query_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterQuery_expression(this);
	}
};

Query_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitQuery_expression(this);
	}
};




TSqlParser.Query_expressionContext = Query_expressionContext;

TSqlParser.prototype.query_expression = function() {

    var localctx = new Query_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 734, TSqlParser.RULE_query_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8937;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.SELECT:
            this.state = 8932;
            this.query_specification();
            break;
        case TSqlParser.LR_BRACKET:
            this.state = 8933;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 8934;
            this.query_expression();
            this.state = 8935;
            this.match(TSqlParser.RR_BRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 8942;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1265,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 8939;
                this.sql_union(); 
            }
            this.state = 8944;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1265,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_unionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_sql_union;
    return this;
}

Sql_unionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_unionContext.prototype.constructor = Sql_unionContext;

Sql_unionContext.prototype.UNION = function() {
    return this.getToken(TSqlParser.UNION, 0);
};

Sql_unionContext.prototype.EXCEPT = function() {
    return this.getToken(TSqlParser.EXCEPT, 0);
};

Sql_unionContext.prototype.INTERSECT = function() {
    return this.getToken(TSqlParser.INTERSECT, 0);
};

Sql_unionContext.prototype.query_specification = function() {
    return this.getTypedRuleContext(Query_specificationContext,0);
};

Sql_unionContext.prototype.query_expression = function() {
    return this.getTypedRuleContext(Query_expressionContext,0);
};

Sql_unionContext.prototype.ALL = function() {
    return this.getToken(TSqlParser.ALL, 0);
};

Sql_unionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSql_union(this);
	}
};

Sql_unionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSql_union(this);
	}
};




TSqlParser.Sql_unionContext = Sql_unionContext;

TSqlParser.prototype.sql_union = function() {

    var localctx = new Sql_unionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 736, TSqlParser.RULE_sql_union);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8951;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.UNION:
            this.state = 8945;
            this.match(TSqlParser.UNION);
            this.state = 8947;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.ALL) {
                this.state = 8946;
                this.match(TSqlParser.ALL);
            }

            break;
        case TSqlParser.EXCEPT:
            this.state = 8949;
            this.match(TSqlParser.EXCEPT);
            break;
        case TSqlParser.INTERSECT:
            this.state = 8950;
            this.match(TSqlParser.INTERSECT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 8958;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.SELECT:
            this.state = 8953;
            this.query_specification();
            break;
        case TSqlParser.LR_BRACKET:
            this.state = 8954;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 8955;
            this.query_expression();
            this.state = 8956;
            this.match(TSqlParser.RR_BRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_specificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_query_specification;
    this.where = null; // Search_conditionContext
    this.having = null; // Search_conditionContext
    return this;
}

Query_specificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_specificationContext.prototype.constructor = Query_specificationContext;

Query_specificationContext.prototype.SELECT = function() {
    return this.getToken(TSqlParser.SELECT, 0);
};

Query_specificationContext.prototype.select_list = function() {
    return this.getTypedRuleContext(Select_listContext,0);
};

Query_specificationContext.prototype.top_clause = function() {
    return this.getTypedRuleContext(Top_clauseContext,0);
};

Query_specificationContext.prototype.INTO = function() {
    return this.getToken(TSqlParser.INTO, 0);
};

Query_specificationContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Query_specificationContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Query_specificationContext.prototype.table_sources = function() {
    return this.getTypedRuleContext(Table_sourcesContext,0);
};

Query_specificationContext.prototype.WHERE = function() {
    return this.getToken(TSqlParser.WHERE, 0);
};

Query_specificationContext.prototype.GROUP = function() {
    return this.getToken(TSqlParser.GROUP, 0);
};

Query_specificationContext.prototype.BY = function() {
    return this.getToken(TSqlParser.BY, 0);
};

Query_specificationContext.prototype.group_by_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Group_by_itemContext);
    } else {
        return this.getTypedRuleContext(Group_by_itemContext,i);
    }
};

Query_specificationContext.prototype.HAVING = function() {
    return this.getToken(TSqlParser.HAVING, 0);
};

Query_specificationContext.prototype.ALL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ALL);
    } else {
        return this.getToken(TSqlParser.ALL, i);
    }
};


Query_specificationContext.prototype.DISTINCT = function() {
    return this.getToken(TSqlParser.DISTINCT, 0);
};

Query_specificationContext.prototype.search_condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Search_conditionContext);
    } else {
        return this.getTypedRuleContext(Search_conditionContext,i);
    }
};

Query_specificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterQuery_specification(this);
	}
};

Query_specificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitQuery_specification(this);
	}
};




TSqlParser.Query_specificationContext = Query_specificationContext;

TSqlParser.prototype.query_specification = function() {

    var localctx = new Query_specificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 738, TSqlParser.RULE_query_specification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8960;
        this.match(TSqlParser.SELECT);
        this.state = 8962;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.ALL || _la===TSqlParser.DISTINCT) {
            this.state = 8961;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.ALL || _la===TSqlParser.DISTINCT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 8965;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.TOP) {
            this.state = 8964;
            this.top_clause();
        }

        this.state = 8967;
        this.select_list();
        this.state = 8970;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.INTO) {
            this.state = 8968;
            this.match(TSqlParser.INTO);
            this.state = 8969;
            this.table_name();
        }

        this.state = 8974;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.FROM) {
            this.state = 8972;
            this.match(TSqlParser.FROM);
            this.state = 8973;
            this.table_sources();
        }

        this.state = 8978;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1273,this._ctx);
        if(la_===1) {
            this.state = 8976;
            this.match(TSqlParser.WHERE);
            this.state = 8977;
            localctx.where = this.search_condition();

        }
        this.state = 8993;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1276,this._ctx);
        if(la_===1) {
            this.state = 8980;
            this.match(TSqlParser.GROUP);
            this.state = 8981;
            this.match(TSqlParser.BY);
            this.state = 8983;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.ALL) {
                this.state = 8982;
                this.match(TSqlParser.ALL);
            }

            this.state = 8985;
            this.group_by_item();
            this.state = 8990;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,1275,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 8986;
                    this.match(TSqlParser.COMMA);
                    this.state = 8987;
                    this.group_by_item(); 
                }
                this.state = 8992;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,1275,this._ctx);
            }


        }
        this.state = 8997;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1277,this._ctx);
        if(la_===1) {
            this.state = 8995;
            this.match(TSqlParser.HAVING);
            this.state = 8996;
            localctx.having = this.search_condition();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Top_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_top_clause;
    return this;
}

Top_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Top_clauseContext.prototype.constructor = Top_clauseContext;

Top_clauseContext.prototype.TOP = function() {
    return this.getToken(TSqlParser.TOP, 0);
};

Top_clauseContext.prototype.top_percent = function() {
    return this.getTypedRuleContext(Top_percentContext,0);
};

Top_clauseContext.prototype.top_count = function() {
    return this.getTypedRuleContext(Top_countContext,0);
};

Top_clauseContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Top_clauseContext.prototype.TIES = function() {
    return this.getToken(TSqlParser.TIES, 0);
};

Top_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTop_clause(this);
	}
};

Top_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTop_clause(this);
	}
};




TSqlParser.Top_clauseContext = Top_clauseContext;

TSqlParser.prototype.top_clause = function() {

    var localctx = new Top_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 740, TSqlParser.RULE_top_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 8999;
        this.match(TSqlParser.TOP);
        this.state = 9002;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1278,this._ctx);
        switch(la_) {
        case 1:
            this.state = 9000;
            this.top_percent();
            break;

        case 2:
            this.state = 9001;
            this.top_count();
            break;

        }
        this.state = 9006;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WITH) {
            this.state = 9004;
            this.match(TSqlParser.WITH);
            this.state = 9005;
            this.match(TSqlParser.TIES);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Top_percentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_top_percent;
    return this;
}

Top_percentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Top_percentContext.prototype.constructor = Top_percentContext;

Top_percentContext.prototype.PERCENT = function() {
    return this.getToken(TSqlParser.PERCENT, 0);
};

Top_percentContext.prototype.REAL = function() {
    return this.getToken(TSqlParser.REAL, 0);
};

Top_percentContext.prototype.FLOAT = function() {
    return this.getToken(TSqlParser.FLOAT, 0);
};

Top_percentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Top_percentContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTop_percent(this);
	}
};

Top_percentContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTop_percent(this);
	}
};




TSqlParser.Top_percentContext = Top_percentContext;

TSqlParser.prototype.top_percent = function() {

    var localctx = new Top_percentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 742, TSqlParser.RULE_top_percent);
    var _la = 0; // Token type
    try {
        this.state = 9015;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.FLOAT:
        case TSqlParser.REAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 9008;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.FLOAT || _la===TSqlParser.REAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 9009;
            this.match(TSqlParser.PERCENT);
            break;
        case TSqlParser.LR_BRACKET:
            this.enterOuterAlt(localctx, 2);
            this.state = 9010;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9011;
            this.expression(0);
            this.state = 9012;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 9013;
            this.match(TSqlParser.PERCENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Top_countContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_top_count;
    return this;
}

Top_countContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Top_countContext.prototype.constructor = Top_countContext;

Top_countContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Top_countContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Top_countContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTop_count(this);
	}
};

Top_countContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTop_count(this);
	}
};




TSqlParser.Top_countContext = Top_countContext;

TSqlParser.prototype.top_count = function() {

    var localctx = new Top_countContext(this, this._ctx, this.state);
    this.enterRule(localctx, 744, TSqlParser.RULE_top_count);
    try {
        this.state = 9022;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.DECIMAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 9017;
            this.match(TSqlParser.DECIMAL);
            break;
        case TSqlParser.LR_BRACKET:
            this.enterOuterAlt(localctx, 2);
            this.state = 9018;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9019;
            this.expression(0);
            this.state = 9020;
            this.match(TSqlParser.RR_BRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_by_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_order_by_clause;
    return this;
}

Order_by_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_by_clauseContext.prototype.constructor = Order_by_clauseContext;

Order_by_clauseContext.prototype.ORDER = function() {
    return this.getToken(TSqlParser.ORDER, 0);
};

Order_by_clauseContext.prototype.BY = function() {
    return this.getToken(TSqlParser.BY, 0);
};

Order_by_clauseContext.prototype.order_by_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Order_by_expressionContext);
    } else {
        return this.getTypedRuleContext(Order_by_expressionContext,i);
    }
};

Order_by_clauseContext.prototype.OFFSET = function() {
    return this.getToken(TSqlParser.OFFSET, 0);
};

Order_by_clauseContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Order_by_clauseContext.prototype.ROW = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ROW);
    } else {
        return this.getToken(TSqlParser.ROW, i);
    }
};


Order_by_clauseContext.prototype.ROWS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ROWS);
    } else {
        return this.getToken(TSqlParser.ROWS, i);
    }
};


Order_by_clauseContext.prototype.FETCH = function() {
    return this.getToken(TSqlParser.FETCH, 0);
};

Order_by_clauseContext.prototype.ONLY = function() {
    return this.getToken(TSqlParser.ONLY, 0);
};

Order_by_clauseContext.prototype.FIRST = function() {
    return this.getToken(TSqlParser.FIRST, 0);
};

Order_by_clauseContext.prototype.NEXT = function() {
    return this.getToken(TSqlParser.NEXT, 0);
};

Order_by_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterOrder_by_clause(this);
	}
};

Order_by_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitOrder_by_clause(this);
	}
};




TSqlParser.Order_by_clauseContext = Order_by_clauseContext;

TSqlParser.prototype.order_by_clause = function() {

    var localctx = new Order_by_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 746, TSqlParser.RULE_order_by_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9024;
        this.match(TSqlParser.ORDER);
        this.state = 9025;
        this.match(TSqlParser.BY);
        this.state = 9026;
        this.order_by_expression();
        this.state = 9031;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1282,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 9027;
                this.match(TSqlParser.COMMA);
                this.state = 9028;
                this.order_by_expression(); 
            }
            this.state = 9033;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1282,this._ctx);
        }

        this.state = 9045;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1284,this._ctx);
        if(la_===1) {
            this.state = 9034;
            this.match(TSqlParser.OFFSET);
            this.state = 9035;
            this.expression(0);
            this.state = 9036;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.ROW || _la===TSqlParser.ROWS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 9043;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1283,this._ctx);
            if(la_===1) {
                this.state = 9037;
                this.match(TSqlParser.FETCH);
                this.state = 9038;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.FIRST || _la===TSqlParser.NEXT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 9039;
                this.expression(0);
                this.state = 9040;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.ROW || _la===TSqlParser.ROWS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 9041;
                this.match(TSqlParser.ONLY);

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_for_clause;
    return this;
}

For_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_clauseContext.prototype.constructor = For_clauseContext;

For_clauseContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

For_clauseContext.prototype.BROWSE = function() {
    return this.getToken(TSqlParser.BROWSE, 0);
};

For_clauseContext.prototype.XML = function() {
    return this.getToken(TSqlParser.XML, 0);
};

For_clauseContext.prototype.xml_common_directives = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Xml_common_directivesContext);
    } else {
        return this.getTypedRuleContext(Xml_common_directivesContext,i);
    }
};

For_clauseContext.prototype.AUTO = function() {
    return this.getToken(TSqlParser.AUTO, 0);
};

For_clauseContext.prototype.RAW = function() {
    return this.getToken(TSqlParser.RAW, 0);
};

For_clauseContext.prototype.PATH = function() {
    return this.getToken(TSqlParser.PATH, 0);
};

For_clauseContext.prototype.EXPLICIT = function() {
    return this.getToken(TSqlParser.EXPLICIT, 0);
};

For_clauseContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

For_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterFor_clause(this);
	}
};

For_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitFor_clause(this);
	}
};




TSqlParser.For_clauseContext = For_clauseContext;

TSqlParser.prototype.for_clause = function() {

    var localctx = new For_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 748, TSqlParser.RULE_for_clause);
    var _la = 0; // Token type
    try {
        this.state = 9071;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1289,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 9047;
            this.match(TSqlParser.FOR);
            this.state = 9048;
            this.match(TSqlParser.BROWSE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 9049;
            this.match(TSqlParser.FOR);
            this.state = 9050;
            this.match(TSqlParser.XML);
            this.state = 9052;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1285,this._ctx);
            if(la_===1) {
                this.state = 9051;
                this.xml_common_directives();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 9054;
            this.match(TSqlParser.FOR);
            this.state = 9055;
            this.match(TSqlParser.XML);
            this.state = 9056;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.RAW || _la===TSqlParser.AUTO || _la===TSqlParser.EXPLICIT || _la===TSqlParser.PATH)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 9058;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1286,this._ctx);
            if(la_===1) {
                this.state = 9057;
                this.match(TSqlParser.COMMA);

            }
            this.state = 9063;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1287,this._ctx);
            if(la_===1) {
                this.state = 9060;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 9061;
                this.match(TSqlParser.STRING);
                this.state = 9062;
                this.match(TSqlParser.RR_BRACKET);

            }
            this.state = 9068;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,1288,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 9065;
                    this.xml_common_directives(); 
                }
                this.state = 9070;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,1288,this._ctx);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_common_directivesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_xml_common_directives;
    return this;
}

Xml_common_directivesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_common_directivesContext.prototype.constructor = Xml_common_directivesContext;

Xml_common_directivesContext.prototype.BINARY_BASE64 = function() {
    return this.getToken(TSqlParser.BINARY_BASE64, 0);
};

Xml_common_directivesContext.prototype.TYPE = function() {
    return this.getToken(TSqlParser.TYPE, 0);
};

Xml_common_directivesContext.prototype.ROOT = function() {
    return this.getToken(TSqlParser.ROOT, 0);
};

Xml_common_directivesContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterXml_common_directives(this);
	}
};

Xml_common_directivesContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitXml_common_directives(this);
	}
};




TSqlParser.Xml_common_directivesContext = Xml_common_directivesContext;

TSqlParser.prototype.xml_common_directives = function() {

    var localctx = new Xml_common_directivesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 750, TSqlParser.RULE_xml_common_directives);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9073;
        this.match(TSqlParser.COMMA);
        this.state = 9074;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.BINARY_BASE64 || _la===TSqlParser.ROOT || _la===TSqlParser.TYPE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_by_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_order_by_expression;
    return this;
}

Order_by_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_by_expressionContext.prototype.constructor = Order_by_expressionContext;

Order_by_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Order_by_expressionContext.prototype.ASC = function() {
    return this.getToken(TSqlParser.ASC, 0);
};

Order_by_expressionContext.prototype.DESC = function() {
    return this.getToken(TSqlParser.DESC, 0);
};

Order_by_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterOrder_by_expression(this);
	}
};

Order_by_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitOrder_by_expression(this);
	}
};




TSqlParser.Order_by_expressionContext = Order_by_expressionContext;

TSqlParser.prototype.order_by_expression = function() {

    var localctx = new Order_by_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 752, TSqlParser.RULE_order_by_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9076;
        this.expression(0);
        this.state = 9078;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.ASC || _la===TSqlParser.DESC) {
            this.state = 9077;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.ASC || _la===TSqlParser.DESC)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_by_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_group_by_item;
    return this;
}

Group_by_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_by_itemContext.prototype.constructor = Group_by_itemContext;

Group_by_itemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Group_by_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterGroup_by_item(this);
	}
};

Group_by_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitGroup_by_item(this);
	}
};




TSqlParser.Group_by_itemContext = Group_by_itemContext;

TSqlParser.prototype.group_by_item = function() {

    var localctx = new Group_by_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 754, TSqlParser.RULE_group_by_item);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9080;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Option_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_option_clause;
    return this;
}

Option_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Option_clauseContext.prototype.constructor = Option_clauseContext;

Option_clauseContext.prototype.OPTION = function() {
    return this.getToken(TSqlParser.OPTION, 0);
};

Option_clauseContext.prototype.option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OptionContext);
    } else {
        return this.getTypedRuleContext(OptionContext,i);
    }
};

Option_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterOption_clause(this);
	}
};

Option_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitOption_clause(this);
	}
};




TSqlParser.Option_clauseContext = Option_clauseContext;

TSqlParser.prototype.option_clause = function() {

    var localctx = new Option_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 756, TSqlParser.RULE_option_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9082;
        this.match(TSqlParser.OPTION);
        this.state = 9083;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 9084;
        this.option();
        this.state = 9089;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 9085;
            this.match(TSqlParser.COMMA);
            this.state = 9086;
            this.option();
            this.state = 9091;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 9092;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_option;
    this.number_rows = null; // Token
    this.number_of_processors = null; // Token
    this.number_recursion = null; // Token
    return this;
}

OptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionContext.prototype.constructor = OptionContext;

OptionContext.prototype.FAST = function() {
    return this.getToken(TSqlParser.FAST, 0);
};

OptionContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

OptionContext.prototype.GROUP = function() {
    return this.getToken(TSqlParser.GROUP, 0);
};

OptionContext.prototype.HASH = function() {
    return this.getToken(TSqlParser.HASH, 0);
};

OptionContext.prototype.ORDER = function() {
    return this.getToken(TSqlParser.ORDER, 0);
};

OptionContext.prototype.UNION = function() {
    return this.getToken(TSqlParser.UNION, 0);
};

OptionContext.prototype.MERGE = function() {
    return this.getToken(TSqlParser.MERGE, 0);
};

OptionContext.prototype.CONCAT = function() {
    return this.getToken(TSqlParser.CONCAT, 0);
};

OptionContext.prototype.JOIN = function() {
    return this.getToken(TSqlParser.JOIN, 0);
};

OptionContext.prototype.LOOP = function() {
    return this.getToken(TSqlParser.LOOP, 0);
};

OptionContext.prototype.EXPAND = function() {
    return this.getToken(TSqlParser.EXPAND, 0);
};

OptionContext.prototype.VIEWS = function() {
    return this.getToken(TSqlParser.VIEWS, 0);
};

OptionContext.prototype.FORCE = function() {
    return this.getToken(TSqlParser.FORCE, 0);
};

OptionContext.prototype.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX = function() {
    return this.getToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0);
};

OptionContext.prototype.KEEP = function() {
    return this.getToken(TSqlParser.KEEP, 0);
};

OptionContext.prototype.PLAN = function() {
    return this.getToken(TSqlParser.PLAN, 0);
};

OptionContext.prototype.KEEPFIXED = function() {
    return this.getToken(TSqlParser.KEEPFIXED, 0);
};

OptionContext.prototype.MAXDOP = function() {
    return this.getToken(TSqlParser.MAXDOP, 0);
};

OptionContext.prototype.MAXRECURSION = function() {
    return this.getToken(TSqlParser.MAXRECURSION, 0);
};

OptionContext.prototype.OPTIMIZE = function() {
    return this.getToken(TSqlParser.OPTIMIZE, 0);
};

OptionContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

OptionContext.prototype.optimize_for_arg = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Optimize_for_argContext);
    } else {
        return this.getTypedRuleContext(Optimize_for_argContext,i);
    }
};

OptionContext.prototype.UNKNOWN = function() {
    return this.getToken(TSqlParser.UNKNOWN, 0);
};

OptionContext.prototype.PARAMETERIZATION = function() {
    return this.getToken(TSqlParser.PARAMETERIZATION, 0);
};

OptionContext.prototype.SIMPLE = function() {
    return this.getToken(TSqlParser.SIMPLE, 0);
};

OptionContext.prototype.FORCED = function() {
    return this.getToken(TSqlParser.FORCED, 0);
};

OptionContext.prototype.RECOMPILE = function() {
    return this.getToken(TSqlParser.RECOMPILE, 0);
};

OptionContext.prototype.ROBUST = function() {
    return this.getToken(TSqlParser.ROBUST, 0);
};

OptionContext.prototype.USE = function() {
    return this.getToken(TSqlParser.USE, 0);
};

OptionContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

OptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterOption(this);
	}
};

OptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitOption(this);
	}
};




TSqlParser.OptionContext = OptionContext;

TSqlParser.prototype.option = function() {

    var localctx = new OptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 758, TSqlParser.RULE_option);
    var _la = 0; // Token type
    try {
        this.state = 9139;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1293,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 9094;
            this.match(TSqlParser.FAST);
            this.state = 9095;
            localctx.number_rows = this.match(TSqlParser.DECIMAL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 9096;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.ORDER || _la===TSqlParser.HASH)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 9097;
            this.match(TSqlParser.GROUP);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 9098;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.MERGE || _la===TSqlParser.CONCAT || _la===TSqlParser.HASH)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 9099;
            this.match(TSqlParser.UNION);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 9100;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.MERGE || _la===TSqlParser.HASH || _la===TSqlParser.LOOP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 9101;
            this.match(TSqlParser.JOIN);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 9102;
            this.match(TSqlParser.EXPAND);
            this.state = 9103;
            this.match(TSqlParser.VIEWS);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 9104;
            this.match(TSqlParser.FORCE);
            this.state = 9105;
            this.match(TSqlParser.ORDER);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 9106;
            this.match(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 9107;
            this.match(TSqlParser.KEEP);
            this.state = 9108;
            this.match(TSqlParser.PLAN);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 9109;
            this.match(TSqlParser.KEEPFIXED);
            this.state = 9110;
            this.match(TSqlParser.PLAN);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 9111;
            this.match(TSqlParser.MAXDOP);
            this.state = 9112;
            localctx.number_of_processors = this.match(TSqlParser.DECIMAL);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 9113;
            this.match(TSqlParser.MAXRECURSION);
            this.state = 9114;
            localctx.number_recursion = this.match(TSqlParser.DECIMAL);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 9115;
            this.match(TSqlParser.OPTIMIZE);
            this.state = 9116;
            this.match(TSqlParser.FOR);
            this.state = 9117;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9118;
            this.optimize_for_arg();
            this.state = 9123;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 9119;
                this.match(TSqlParser.COMMA);
                this.state = 9120;
                this.optimize_for_arg();
                this.state = 9125;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 9126;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 9128;
            this.match(TSqlParser.OPTIMIZE);
            this.state = 9129;
            this.match(TSqlParser.FOR);
            this.state = 9130;
            this.match(TSqlParser.UNKNOWN);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 9131;
            this.match(TSqlParser.PARAMETERIZATION);
            this.state = 9132;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.FORCED || _la===TSqlParser.SIMPLE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 9133;
            this.match(TSqlParser.RECOMPILE);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 9134;
            this.match(TSqlParser.ROBUST);
            this.state = 9135;
            this.match(TSqlParser.PLAN);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 9136;
            this.match(TSqlParser.USE);
            this.state = 9137;
            this.match(TSqlParser.PLAN);
            this.state = 9138;
            this.match(TSqlParser.STRING);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Optimize_for_argContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_optimize_for_arg;
    return this;
}

Optimize_for_argContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Optimize_for_argContext.prototype.constructor = Optimize_for_argContext;

Optimize_for_argContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Optimize_for_argContext.prototype.UNKNOWN = function() {
    return this.getToken(TSqlParser.UNKNOWN, 0);
};

Optimize_for_argContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

Optimize_for_argContext.prototype.NULL = function() {
    return this.getToken(TSqlParser.NULL, 0);
};

Optimize_for_argContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterOptimize_for_arg(this);
	}
};

Optimize_for_argContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitOptimize_for_arg(this);
	}
};




TSqlParser.Optimize_for_argContext = Optimize_for_argContext;

TSqlParser.prototype.optimize_for_arg = function() {

    var localctx = new Optimize_for_argContext(this, this._ctx, this.state);
    this.enterRule(localctx, 760, TSqlParser.RULE_optimize_for_arg);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9141;
        this.match(TSqlParser.LOCAL_ID);
        this.state = 9148;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.UNKNOWN:
            this.state = 9142;
            this.match(TSqlParser.UNKNOWN);
            break;
        case TSqlParser.EQUAL:
            this.state = 9143;
            this.match(TSqlParser.EQUAL);
            this.state = 9146;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.DECIMAL:
            case TSqlParser.STRING:
            case TSqlParser.BINARY:
            case TSqlParser.FLOAT:
            case TSqlParser.REAL:
            case TSqlParser.DOLLAR:
            case TSqlParser.PLUS:
            case TSqlParser.MINUS:
                this.state = 9144;
                this.constant();
                break;
            case TSqlParser.NULL:
                this.state = 9145;
                this.match(TSqlParser.NULL);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_select_list;
    return this;
}

Select_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_listContext.prototype.constructor = Select_listContext;

Select_listContext.prototype.select_list_elem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Select_list_elemContext);
    } else {
        return this.getTypedRuleContext(Select_list_elemContext,i);
    }
};

Select_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSelect_list(this);
	}
};

Select_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSelect_list(this);
	}
};




TSqlParser.Select_listContext = Select_listContext;

TSqlParser.prototype.select_list = function() {

    var localctx = new Select_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 762, TSqlParser.RULE_select_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9150;
        this.select_list_elem();
        this.state = 9155;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1296,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 9151;
                this.match(TSqlParser.COMMA);
                this.state = 9152;
                this.select_list_elem(); 
            }
            this.state = 9157;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1296,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Udt_method_argumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_udt_method_arguments;
    return this;
}

Udt_method_argumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Udt_method_argumentsContext.prototype.constructor = Udt_method_argumentsContext;

Udt_method_argumentsContext.prototype.execute_var_string = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Execute_var_stringContext);
    } else {
        return this.getTypedRuleContext(Execute_var_stringContext,i);
    }
};

Udt_method_argumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterUdt_method_arguments(this);
	}
};

Udt_method_argumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitUdt_method_arguments(this);
	}
};




TSqlParser.Udt_method_argumentsContext = Udt_method_argumentsContext;

TSqlParser.prototype.udt_method_arguments = function() {

    var localctx = new Udt_method_argumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 764, TSqlParser.RULE_udt_method_arguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9158;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 9159;
        this.execute_var_string();
        this.state = 9164;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 9160;
            this.match(TSqlParser.COMMA);
            this.state = 9161;
            this.execute_var_string();
            this.state = 9166;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 9167;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AsteriskContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_asterisk;
    return this;
}

AsteriskContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AsteriskContext.prototype.constructor = AsteriskContext;

AsteriskContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

AsteriskContext.prototype.asterisk = function() {
    return this.getTypedRuleContext(AsteriskContext,0);
};

AsteriskContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAsterisk(this);
	}
};

AsteriskContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAsterisk(this);
	}
};




TSqlParser.AsteriskContext = AsteriskContext;

TSqlParser.prototype.asterisk = function() {

    var localctx = new AsteriskContext(this, this._ctx, this.state);
    this.enterRule(localctx, 766, TSqlParser.RULE_asterisk);
    try {
        this.state = 9174;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.STAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 9169;
            this.match(TSqlParser.STAR);
            break;
        case TSqlParser.BLOCKING_HIERARCHY:
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 9170;
            this.table_name();
            this.state = 9171;
            this.match(TSqlParser.DOT);
            this.state = 9172;
            this.asterisk();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_elemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_column_elem;
    this.column_name = null; // IdContext
    return this;
}

Column_elemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_elemContext.prototype.constructor = Column_elemContext;

Column_elemContext.prototype.IDENTITY = function() {
    return this.getToken(TSqlParser.IDENTITY, 0);
};

Column_elemContext.prototype.ROWGUID = function() {
    return this.getToken(TSqlParser.ROWGUID, 0);
};

Column_elemContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Column_elemContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Column_elemContext.prototype.as_column_alias = function() {
    return this.getTypedRuleContext(As_column_aliasContext,0);
};

Column_elemContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterColumn_elem(this);
	}
};

Column_elemContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitColumn_elem(this);
	}
};




TSqlParser.Column_elemContext = Column_elemContext;

TSqlParser.prototype.column_elem = function() {

    var localctx = new Column_elemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 768, TSqlParser.RULE_column_elem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9179;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1299,this._ctx);
        if(la_===1) {
            this.state = 9176;
            this.table_name();
            this.state = 9177;
            this.match(TSqlParser.DOT);

        }
        this.state = 9186;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1300,this._ctx);
        switch(la_) {
        case 1:
            this.state = 9181;
            localctx.column_name = this.id();
            break;

        case 2:
            this.state = 9182;
            this.match(TSqlParser.DOLLAR);
            this.state = 9183;
            this.match(TSqlParser.IDENTITY);
            break;

        case 3:
            this.state = 9184;
            this.match(TSqlParser.DOLLAR);
            this.state = 9185;
            this.match(TSqlParser.ROWGUID);
            break;

        }
        this.state = 9189;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1301,this._ctx);
        if(la_===1) {
            this.state = 9188;
            this.as_column_alias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Udt_elemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_udt_elem;
    this.udt_column_name = null; // IdContext
    this.non_static_attr = null; // IdContext
    this.static_attr = null; // IdContext
    return this;
}

Udt_elemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Udt_elemContext.prototype.constructor = Udt_elemContext;

Udt_elemContext.prototype.udt_method_arguments = function() {
    return this.getTypedRuleContext(Udt_method_argumentsContext,0);
};

Udt_elemContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Udt_elemContext.prototype.as_column_alias = function() {
    return this.getTypedRuleContext(As_column_aliasContext,0);
};

Udt_elemContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterUdt_elem(this);
	}
};

Udt_elemContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitUdt_elem(this);
	}
};




TSqlParser.Udt_elemContext = Udt_elemContext;

TSqlParser.prototype.udt_elem = function() {

    var localctx = new Udt_elemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 770, TSqlParser.RULE_udt_elem);
    try {
        this.state = 9208;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1305,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 9191;
            localctx.udt_column_name = this.id();
            this.state = 9192;
            this.match(TSqlParser.DOT);
            this.state = 9193;
            localctx.non_static_attr = this.id();
            this.state = 9194;
            this.udt_method_arguments();
            this.state = 9196;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1302,this._ctx);
            if(la_===1) {
                this.state = 9195;
                this.as_column_alias();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 9198;
            localctx.udt_column_name = this.id();
            this.state = 9199;
            this.match(TSqlParser.COLON);
            this.state = 9200;
            this.match(TSqlParser.COLON);
            this.state = 9201;
            localctx.static_attr = this.id();
            this.state = 9203;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1303,this._ctx);
            if(la_===1) {
                this.state = 9202;
                this.udt_method_arguments();

            }
            this.state = 9206;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1304,this._ctx);
            if(la_===1) {
                this.state = 9205;
                this.as_column_alias();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_elemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_expression_elem;
    this.eq = null; // Token
    return this;
}

Expression_elemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_elemContext.prototype.constructor = Expression_elemContext;

Expression_elemContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

Expression_elemContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Expression_elemContext.prototype.as_column_alias = function() {
    return this.getTypedRuleContext(As_column_aliasContext,0);
};

Expression_elemContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterExpression_elem(this);
	}
};

Expression_elemContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitExpression_elem(this);
	}
};




TSqlParser.Expression_elemContext = Expression_elemContext;

TSqlParser.prototype.expression_elem = function() {

    var localctx = new Expression_elemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 772, TSqlParser.RULE_expression_elem);
    try {
        this.state = 9218;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1307,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 9210;
            this.column_alias();
            this.state = 9211;
            localctx.eq = this.match(TSqlParser.EQUAL);
            this.state = 9212;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 9214;
            this.expression(0);
            this.state = 9216;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1306,this._ctx);
            if(la_===1) {
                this.state = 9215;
                this.as_column_alias();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_list_elemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_select_list_elem;
    return this;
}

Select_list_elemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_list_elemContext.prototype.constructor = Select_list_elemContext;

Select_list_elemContext.prototype.asterisk = function() {
    return this.getTypedRuleContext(AsteriskContext,0);
};

Select_list_elemContext.prototype.column_elem = function() {
    return this.getTypedRuleContext(Column_elemContext,0);
};

Select_list_elemContext.prototype.udt_elem = function() {
    return this.getTypedRuleContext(Udt_elemContext,0);
};

Select_list_elemContext.prototype.expression_elem = function() {
    return this.getTypedRuleContext(Expression_elemContext,0);
};

Select_list_elemContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSelect_list_elem(this);
	}
};

Select_list_elemContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSelect_list_elem(this);
	}
};




TSqlParser.Select_list_elemContext = Select_list_elemContext;

TSqlParser.prototype.select_list_elem = function() {

    var localctx = new Select_list_elemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 774, TSqlParser.RULE_select_list_elem);
    try {
        this.state = 9224;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1308,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 9220;
            this.asterisk();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 9221;
            this.column_elem();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 9222;
            this.udt_elem();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 9223;
            this.expression_elem();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_sourcesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_table_sources;
    return this;
}

Table_sourcesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_sourcesContext.prototype.constructor = Table_sourcesContext;

Table_sourcesContext.prototype.table_source = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_sourceContext);
    } else {
        return this.getTypedRuleContext(Table_sourceContext,i);
    }
};

Table_sourcesContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTable_sources(this);
	}
};

Table_sourcesContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTable_sources(this);
	}
};




TSqlParser.Table_sourcesContext = Table_sourcesContext;

TSqlParser.prototype.table_sources = function() {

    var localctx = new Table_sourcesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 776, TSqlParser.RULE_table_sources);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9226;
        this.table_source();
        this.state = 9231;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1309,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 9227;
                this.match(TSqlParser.COMMA);
                this.state = 9228;
                this.table_source(); 
            }
            this.state = 9233;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1309,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_sourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_table_source;
    return this;
}

Table_sourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_sourceContext.prototype.constructor = Table_sourceContext;

Table_sourceContext.prototype.table_source_item_joined = function() {
    return this.getTypedRuleContext(Table_source_item_joinedContext,0);
};

Table_sourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTable_source(this);
	}
};

Table_sourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTable_source(this);
	}
};




TSqlParser.Table_sourceContext = Table_sourceContext;

TSqlParser.prototype.table_source = function() {

    var localctx = new Table_sourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 778, TSqlParser.RULE_table_source);
    try {
        this.state = 9239;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1310,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 9234;
            this.table_source_item_joined();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 9235;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9236;
            this.table_source_item_joined();
            this.state = 9237;
            this.match(TSqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_source_item_joinedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_table_source_item_joined;
    return this;
}

Table_source_item_joinedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_source_item_joinedContext.prototype.constructor = Table_source_item_joinedContext;

Table_source_item_joinedContext.prototype.table_source_item = function() {
    return this.getTypedRuleContext(Table_source_itemContext,0);
};

Table_source_item_joinedContext.prototype.join_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Join_partContext);
    } else {
        return this.getTypedRuleContext(Join_partContext,i);
    }
};

Table_source_item_joinedContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTable_source_item_joined(this);
	}
};

Table_source_item_joinedContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTable_source_item_joined(this);
	}
};




TSqlParser.Table_source_item_joinedContext = Table_source_item_joinedContext;

TSqlParser.prototype.table_source_item_joined = function() {

    var localctx = new Table_source_item_joinedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 780, TSqlParser.RULE_table_source_item_joined);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9241;
        this.table_source_item();
        this.state = 9245;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1311,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 9242;
                this.join_part(); 
            }
            this.state = 9247;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1311,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_source_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_table_source_item;
    return this;
}

Table_source_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_source_itemContext.prototype.constructor = Table_source_itemContext;

Table_source_itemContext.prototype.table_name_with_hint = function() {
    return this.getTypedRuleContext(Table_name_with_hintContext,0);
};

Table_source_itemContext.prototype.as_table_alias = function() {
    return this.getTypedRuleContext(As_table_aliasContext,0);
};

Table_source_itemContext.prototype.full_table_name = function() {
    return this.getTypedRuleContext(Full_table_nameContext,0);
};

Table_source_itemContext.prototype.rowset_function = function() {
    return this.getTypedRuleContext(Rowset_functionContext,0);
};

Table_source_itemContext.prototype.derived_table = function() {
    return this.getTypedRuleContext(Derived_tableContext,0);
};

Table_source_itemContext.prototype.column_alias_list = function() {
    return this.getTypedRuleContext(Column_alias_listContext,0);
};

Table_source_itemContext.prototype.change_table = function() {
    return this.getTypedRuleContext(Change_tableContext,0);
};

Table_source_itemContext.prototype.function_call = function() {
    return this.getTypedRuleContext(Function_callContext,0);
};

Table_source_itemContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Table_source_itemContext.prototype.open_xml = function() {
    return this.getTypedRuleContext(Open_xmlContext,0);
};

Table_source_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTable_source_item(this);
	}
};

Table_source_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTable_source_item(this);
	}
};




TSqlParser.Table_source_itemContext = Table_source_itemContext;

TSqlParser.prototype.table_source_item = function() {

    var localctx = new Table_source_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 782, TSqlParser.RULE_table_source_item);
    try {
        this.state = 9294;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1322,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 9248;
            this.table_name_with_hint();
            this.state = 9250;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1312,this._ctx);
            if(la_===1) {
                this.state = 9249;
                this.as_table_alias();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 9252;
            this.full_table_name();
            this.state = 9254;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1313,this._ctx);
            if(la_===1) {
                this.state = 9253;
                this.as_table_alias();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 9256;
            this.rowset_function();
            this.state = 9258;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1314,this._ctx);
            if(la_===1) {
                this.state = 9257;
                this.as_table_alias();

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 9260;
            this.derived_table();
            this.state = 9265;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1316,this._ctx);
            if(la_===1) {
                this.state = 9261;
                this.as_table_alias();
                this.state = 9263;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,1315,this._ctx);
                if(la_===1) {
                    this.state = 9262;
                    this.column_alias_list();

                }

            }
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 9267;
            this.change_table();
            this.state = 9268;
            this.as_table_alias();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 9270;
            this.function_call();
            this.state = 9272;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1317,this._ctx);
            if(la_===1) {
                this.state = 9271;
                this.as_table_alias();

            }
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 9274;
            this.match(TSqlParser.LOCAL_ID);
            this.state = 9276;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1318,this._ctx);
            if(la_===1) {
                this.state = 9275;
                this.as_table_alias();

            }
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 9278;
            this.match(TSqlParser.LOCAL_ID);
            this.state = 9279;
            this.match(TSqlParser.DOT);
            this.state = 9280;
            this.function_call();
            this.state = 9285;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1320,this._ctx);
            if(la_===1) {
                this.state = 9281;
                this.as_table_alias();
                this.state = 9283;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,1319,this._ctx);
                if(la_===1) {
                    this.state = 9282;
                    this.column_alias_list();

                }

            }
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 9287;
            this.open_xml();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 9288;
            this.match(TSqlParser.COLON);
            this.state = 9289;
            this.match(TSqlParser.COLON);
            this.state = 9290;
            this.function_call();
            this.state = 9292;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1321,this._ctx);
            if(la_===1) {
                this.state = 9291;
                this.as_table_alias();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Open_xmlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_open_xml;
    return this;
}

Open_xmlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Open_xmlContext.prototype.constructor = Open_xmlContext;

Open_xmlContext.prototype.OPENXML = function() {
    return this.getToken(TSqlParser.OPENXML, 0);
};

Open_xmlContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Open_xmlContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Open_xmlContext.prototype.schema_declaration = function() {
    return this.getTypedRuleContext(Schema_declarationContext,0);
};

Open_xmlContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterOpen_xml(this);
	}
};

Open_xmlContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitOpen_xml(this);
	}
};




TSqlParser.Open_xmlContext = Open_xmlContext;

TSqlParser.prototype.open_xml = function() {

    var localctx = new Open_xmlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 784, TSqlParser.RULE_open_xml);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9296;
        this.match(TSqlParser.OPENXML);
        this.state = 9297;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 9298;
        this.expression(0);
        this.state = 9299;
        this.match(TSqlParser.COMMA);
        this.state = 9300;
        this.expression(0);
        this.state = 9303;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 9301;
            this.match(TSqlParser.COMMA);
            this.state = 9302;
            this.expression(0);
        }

        this.state = 9305;
        this.match(TSqlParser.RR_BRACKET);
        this.state = 9311;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1324,this._ctx);
        if(la_===1) {
            this.state = 9306;
            this.match(TSqlParser.WITH);
            this.state = 9307;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9308;
            this.schema_declaration();
            this.state = 9309;
            this.match(TSqlParser.RR_BRACKET);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Schema_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_schema_declaration;
    return this;
}

Schema_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Schema_declarationContext.prototype.constructor = Schema_declarationContext;

Schema_declarationContext.prototype.column_declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_declarationContext);
    } else {
        return this.getTypedRuleContext(Column_declarationContext,i);
    }
};

Schema_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSchema_declaration(this);
	}
};

Schema_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSchema_declaration(this);
	}
};




TSqlParser.Schema_declarationContext = Schema_declarationContext;

TSqlParser.prototype.schema_declaration = function() {

    var localctx = new Schema_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 786, TSqlParser.RULE_schema_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9313;
        this.column_declaration();
        this.state = 9318;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 9314;
            this.match(TSqlParser.COMMA);
            this.state = 9315;
            this.column_declaration();
            this.state = 9320;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_declarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_column_declaration;
    return this;
}

Column_declarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_declarationContext.prototype.constructor = Column_declarationContext;

Column_declarationContext.prototype.ID = function() {
    return this.getToken(TSqlParser.ID, 0);
};

Column_declarationContext.prototype.data_type = function() {
    return this.getTypedRuleContext(Data_typeContext,0);
};

Column_declarationContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Column_declarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterColumn_declaration(this);
	}
};

Column_declarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitColumn_declaration(this);
	}
};




TSqlParser.Column_declarationContext = Column_declarationContext;

TSqlParser.prototype.column_declaration = function() {

    var localctx = new Column_declarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 788, TSqlParser.RULE_column_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9321;
        this.match(TSqlParser.ID);
        this.state = 9322;
        this.data_type();
        this.state = 9324;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.STRING) {
            this.state = 9323;
            this.match(TSqlParser.STRING);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Change_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_change_table;
    return this;
}

Change_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Change_tableContext.prototype.constructor = Change_tableContext;

Change_tableContext.prototype.CHANGETABLE = function() {
    return this.getToken(TSqlParser.CHANGETABLE, 0);
};

Change_tableContext.prototype.CHANGES = function() {
    return this.getToken(TSqlParser.CHANGES, 0);
};

Change_tableContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Change_tableContext.prototype.NULL = function() {
    return this.getToken(TSqlParser.NULL, 0);
};

Change_tableContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Change_tableContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Change_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterChange_table(this);
	}
};

Change_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitChange_table(this);
	}
};




TSqlParser.Change_tableContext = Change_tableContext;

TSqlParser.prototype.change_table = function() {

    var localctx = new Change_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 790, TSqlParser.RULE_change_table);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9326;
        this.match(TSqlParser.CHANGETABLE);
        this.state = 9327;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 9328;
        this.match(TSqlParser.CHANGES);
        this.state = 9329;
        this.table_name();
        this.state = 9330;
        this.match(TSqlParser.COMMA);
        this.state = 9331;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.NULL || _la===TSqlParser.LOCAL_ID || _la===TSqlParser.DECIMAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 9332;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_join_part;
    this.join_type = null; // Token
    this.join_hint = null; // Token
    return this;
}

Join_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_partContext.prototype.constructor = Join_partContext;

Join_partContext.prototype.JOIN = function() {
    return this.getToken(TSqlParser.JOIN, 0);
};

Join_partContext.prototype.table_source = function() {
    return this.getTypedRuleContext(Table_sourceContext,0);
};

Join_partContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Join_partContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Join_partContext.prototype.LEFT = function() {
    return this.getToken(TSqlParser.LEFT, 0);
};

Join_partContext.prototype.RIGHT = function() {
    return this.getToken(TSqlParser.RIGHT, 0);
};

Join_partContext.prototype.FULL = function() {
    return this.getToken(TSqlParser.FULL, 0);
};

Join_partContext.prototype.INNER = function() {
    return this.getToken(TSqlParser.INNER, 0);
};

Join_partContext.prototype.OUTER = function() {
    return this.getToken(TSqlParser.OUTER, 0);
};

Join_partContext.prototype.LOOP = function() {
    return this.getToken(TSqlParser.LOOP, 0);
};

Join_partContext.prototype.HASH = function() {
    return this.getToken(TSqlParser.HASH, 0);
};

Join_partContext.prototype.MERGE = function() {
    return this.getToken(TSqlParser.MERGE, 0);
};

Join_partContext.prototype.REMOTE = function() {
    return this.getToken(TSqlParser.REMOTE, 0);
};

Join_partContext.prototype.CROSS = function() {
    return this.getToken(TSqlParser.CROSS, 0);
};

Join_partContext.prototype.APPLY = function() {
    return this.getToken(TSqlParser.APPLY, 0);
};

Join_partContext.prototype.PIVOT = function() {
    return this.getToken(TSqlParser.PIVOT, 0);
};

Join_partContext.prototype.pivot_clause = function() {
    return this.getTypedRuleContext(Pivot_clauseContext,0);
};

Join_partContext.prototype.as_table_alias = function() {
    return this.getTypedRuleContext(As_table_aliasContext,0);
};

Join_partContext.prototype.UNPIVOT = function() {
    return this.getToken(TSqlParser.UNPIVOT, 0);
};

Join_partContext.prototype.unpivot_clause = function() {
    return this.getTypedRuleContext(Unpivot_clauseContext,0);
};

Join_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterJoin_part(this);
	}
};

Join_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitJoin_part(this);
	}
};




TSqlParser.Join_partContext = Join_partContext;

TSqlParser.prototype.join_part = function() {

    var localctx = new Join_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 792, TSqlParser.RULE_join_part);
    var _la = 0; // Token type
    try {
        this.state = 9368;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1331,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 9341;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.INNER:
            case TSqlParser.JOIN:
            case TSqlParser.MERGE:
            case TSqlParser.HASH:
            case TSqlParser.LOOP:
            case TSqlParser.REMOTE:
                this.state = 9335;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.INNER) {
                    this.state = 9334;
                    this.match(TSqlParser.INNER);
                }

                break;
            case TSqlParser.FULL:
            case TSqlParser.LEFT:
            case TSqlParser.RIGHT:
                this.state = 9337;
                localctx.join_type = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.FULL || _la===TSqlParser.LEFT || _la===TSqlParser.RIGHT)) {
                    localctx.join_type = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 9339;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.OUTER) {
                    this.state = 9338;
                    this.match(TSqlParser.OUTER);
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 9344;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.MERGE || _la===TSqlParser.HASH || _la===TSqlParser.LOOP || _la===TSqlParser.REMOTE) {
                this.state = 9343;
                localctx.join_hint = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.MERGE || _la===TSqlParser.HASH || _la===TSqlParser.LOOP || _la===TSqlParser.REMOTE)) {
                    localctx.join_hint = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 9346;
            this.match(TSqlParser.JOIN);
            this.state = 9347;
            this.table_source();
            this.state = 9348;
            this.match(TSqlParser.ON);
            this.state = 9349;
            this.search_condition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 9351;
            this.match(TSqlParser.CROSS);
            this.state = 9352;
            this.match(TSqlParser.JOIN);
            this.state = 9353;
            this.table_source();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 9354;
            this.match(TSqlParser.CROSS);
            this.state = 9355;
            this.match(TSqlParser.APPLY);
            this.state = 9356;
            this.table_source();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 9357;
            this.match(TSqlParser.OUTER);
            this.state = 9358;
            this.match(TSqlParser.APPLY);
            this.state = 9359;
            this.table_source();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 9360;
            this.match(TSqlParser.PIVOT);
            this.state = 9361;
            this.pivot_clause();
            this.state = 9362;
            this.as_table_alias();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 9364;
            this.match(TSqlParser.UNPIVOT);
            this.state = 9365;
            this.unpivot_clause();
            this.state = 9366;
            this.as_table_alias();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pivot_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_pivot_clause;
    return this;
}

Pivot_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pivot_clauseContext.prototype.constructor = Pivot_clauseContext;

Pivot_clauseContext.prototype.aggregate_windowed_function = function() {
    return this.getTypedRuleContext(Aggregate_windowed_functionContext,0);
};

Pivot_clauseContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Pivot_clauseContext.prototype.full_column_name = function() {
    return this.getTypedRuleContext(Full_column_nameContext,0);
};

Pivot_clauseContext.prototype.IN = function() {
    return this.getToken(TSqlParser.IN, 0);
};

Pivot_clauseContext.prototype.column_alias_list = function() {
    return this.getTypedRuleContext(Column_alias_listContext,0);
};

Pivot_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterPivot_clause(this);
	}
};

Pivot_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitPivot_clause(this);
	}
};




TSqlParser.Pivot_clauseContext = Pivot_clauseContext;

TSqlParser.prototype.pivot_clause = function() {

    var localctx = new Pivot_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 794, TSqlParser.RULE_pivot_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9370;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 9371;
        this.aggregate_windowed_function();
        this.state = 9372;
        this.match(TSqlParser.FOR);
        this.state = 9373;
        this.full_column_name();
        this.state = 9374;
        this.match(TSqlParser.IN);
        this.state = 9375;
        this.column_alias_list();
        this.state = 9376;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unpivot_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_unpivot_clause;
    return this;
}

Unpivot_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unpivot_clauseContext.prototype.constructor = Unpivot_clauseContext;

Unpivot_clauseContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Unpivot_clauseContext.prototype.FOR = function() {
    return this.getToken(TSqlParser.FOR, 0);
};

Unpivot_clauseContext.prototype.full_column_name = function() {
    return this.getTypedRuleContext(Full_column_nameContext,0);
};

Unpivot_clauseContext.prototype.IN = function() {
    return this.getToken(TSqlParser.IN, 0);
};

Unpivot_clauseContext.prototype.full_column_name_list = function() {
    return this.getTypedRuleContext(Full_column_name_listContext,0);
};

Unpivot_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterUnpivot_clause(this);
	}
};

Unpivot_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitUnpivot_clause(this);
	}
};




TSqlParser.Unpivot_clauseContext = Unpivot_clauseContext;

TSqlParser.prototype.unpivot_clause = function() {

    var localctx = new Unpivot_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 796, TSqlParser.RULE_unpivot_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9378;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 9379;
        this.expression(0);
        this.state = 9380;
        this.match(TSqlParser.FOR);
        this.state = 9381;
        this.full_column_name();
        this.state = 9382;
        this.match(TSqlParser.IN);
        this.state = 9383;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 9384;
        this.full_column_name_list();
        this.state = 9385;
        this.match(TSqlParser.RR_BRACKET);
        this.state = 9386;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Full_column_name_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_full_column_name_list;
    return this;
}

Full_column_name_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Full_column_name_listContext.prototype.constructor = Full_column_name_listContext;

Full_column_name_listContext.prototype.full_column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Full_column_nameContext);
    } else {
        return this.getTypedRuleContext(Full_column_nameContext,i);
    }
};

Full_column_name_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterFull_column_name_list(this);
	}
};

Full_column_name_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitFull_column_name_list(this);
	}
};




TSqlParser.Full_column_name_listContext = Full_column_name_listContext;

TSqlParser.prototype.full_column_name_list = function() {

    var localctx = new Full_column_name_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 798, TSqlParser.RULE_full_column_name_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9388;
        this.full_column_name();
        this.state = 9393;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 9389;
            this.match(TSqlParser.COMMA);
            this.state = 9390;
            this.full_column_name();
            this.state = 9395;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_name_with_hintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_table_name_with_hint;
    return this;
}

Table_name_with_hintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_name_with_hintContext.prototype.constructor = Table_name_with_hintContext;

Table_name_with_hintContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Table_name_with_hintContext.prototype.with_table_hints = function() {
    return this.getTypedRuleContext(With_table_hintsContext,0);
};

Table_name_with_hintContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTable_name_with_hint(this);
	}
};

Table_name_with_hintContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTable_name_with_hint(this);
	}
};




TSqlParser.Table_name_with_hintContext = Table_name_with_hintContext;

TSqlParser.prototype.table_name_with_hint = function() {

    var localctx = new Table_name_with_hintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 800, TSqlParser.RULE_table_name_with_hint);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9396;
        this.table_name();
        this.state = 9398;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1333,this._ctx);
        if(la_===1) {
            this.state = 9397;
            this.with_table_hints();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rowset_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_rowset_function;
    this.provider_name = null; // Token
    this.connectionString = null; // Token
    this.sql = null; // Token
    this.data_file = null; // Token
    return this;
}

Rowset_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rowset_functionContext.prototype.constructor = Rowset_functionContext;

Rowset_functionContext.prototype.OPENROWSET = function() {
    return this.getToken(TSqlParser.OPENROWSET, 0);
};

Rowset_functionContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Rowset_functionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.COMMA);
    } else {
        return this.getToken(TSqlParser.COMMA, i);
    }
};


Rowset_functionContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Rowset_functionContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Rowset_functionContext.prototype.BULK = function() {
    return this.getToken(TSqlParser.BULK, 0);
};

Rowset_functionContext.prototype.bulk_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bulk_optionContext);
    } else {
        return this.getTypedRuleContext(Bulk_optionContext,i);
    }
};

Rowset_functionContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Rowset_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterRowset_function(this);
	}
};

Rowset_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitRowset_function(this);
	}
};




TSqlParser.Rowset_functionContext = Rowset_functionContext;

TSqlParser.prototype.rowset_function = function() {

    var localctx = new Rowset_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 802, TSqlParser.RULE_rowset_function);
    var _la = 0; // Token type
    try {
        this.state = 9426;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1336,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 9400;
            this.match(TSqlParser.OPENROWSET);
            this.state = 9401;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9402;
            localctx.provider_name = this.match(TSqlParser.STRING);
            this.state = 9403;
            this.match(TSqlParser.COMMA);
            this.state = 9404;
            localctx.connectionString = this.match(TSqlParser.STRING);
            this.state = 9405;
            this.match(TSqlParser.COMMA);
            this.state = 9406;
            localctx.sql = this.match(TSqlParser.STRING);
            this.state = 9407;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 9408;
            this.match(TSqlParser.OPENROWSET);
            this.state = 9409;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9410;
            this.match(TSqlParser.BULK);
            this.state = 9411;
            localctx.data_file = this.match(TSqlParser.STRING);
            this.state = 9412;
            this.match(TSqlParser.COMMA);
            this.state = 9422;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1335,this._ctx);
            switch(la_) {
            case 1:
                this.state = 9413;
                this.bulk_option();
                this.state = 9418;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===TSqlParser.COMMA) {
                    this.state = 9414;
                    this.match(TSqlParser.COMMA);
                    this.state = 9415;
                    this.bulk_option();
                    this.state = 9420;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;

            case 2:
                this.state = 9421;
                this.id();
                break;

            }
            this.state = 9424;
            this.match(TSqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bulk_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_bulk_option;
    this.bulk_option_value = null; // Token
    return this;
}

Bulk_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bulk_optionContext.prototype.constructor = Bulk_optionContext;

Bulk_optionContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Bulk_optionContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Bulk_optionContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Bulk_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterBulk_option(this);
	}
};

Bulk_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitBulk_option(this);
	}
};




TSqlParser.Bulk_optionContext = Bulk_optionContext;

TSqlParser.prototype.bulk_option = function() {

    var localctx = new Bulk_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 804, TSqlParser.RULE_bulk_option);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9428;
        this.id();
        this.state = 9429;
        this.match(TSqlParser.EQUAL);
        this.state = 9430;
        localctx.bulk_option_value = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.DECIMAL || _la===TSqlParser.STRING)) {
            localctx.bulk_option_value = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Derived_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_derived_table;
    return this;
}

Derived_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Derived_tableContext.prototype.constructor = Derived_tableContext;

Derived_tableContext.prototype.subquery = function() {
    return this.getTypedRuleContext(SubqueryContext,0);
};

Derived_tableContext.prototype.table_value_constructor = function() {
    return this.getTypedRuleContext(Table_value_constructorContext,0);
};

Derived_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDerived_table(this);
	}
};

Derived_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDerived_table(this);
	}
};




TSqlParser.Derived_tableContext = Derived_tableContext;

TSqlParser.prototype.derived_table = function() {

    var localctx = new Derived_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 806, TSqlParser.RULE_derived_table);
    try {
        this.state = 9442;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1337,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 9432;
            this.subquery();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 9433;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9434;
            this.subquery();
            this.state = 9435;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 9437;
            this.table_value_constructor();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 9438;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9439;
            this.table_value_constructor();
            this.state = 9440;
            this.match(TSqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_callContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_function_call;
    return this;
}

Function_callContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_callContext.prototype.constructor = Function_callContext;


 
Function_callContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CURRENT_USERContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CURRENT_USERContext.prototype = Object.create(Function_callContext.prototype);
CURRENT_USERContext.prototype.constructor = CURRENT_USERContext;

TSqlParser.CURRENT_USERContext = CURRENT_USERContext;

CURRENT_USERContext.prototype.CURRENT_USER = function() {
    return this.getToken(TSqlParser.CURRENT_USER, 0);
};
CURRENT_USERContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCURRENT_USER(this);
	}
};

CURRENT_USERContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCURRENT_USER(this);
	}
};


function DATEADDContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DATEADDContext.prototype = Object.create(Function_callContext.prototype);
DATEADDContext.prototype.constructor = DATEADDContext;

TSqlParser.DATEADDContext = DATEADDContext;

DATEADDContext.prototype.DATEADD = function() {
    return this.getToken(TSqlParser.DATEADD, 0);
};

DATEADDContext.prototype.ID = function() {
    return this.getToken(TSqlParser.ID, 0);
};

DATEADDContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
DATEADDContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDATEADD(this);
	}
};

DATEADDContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDATEADD(this);
	}
};


function CHECKSUMContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CHECKSUMContext.prototype = Object.create(Function_callContext.prototype);
CHECKSUMContext.prototype.constructor = CHECKSUMContext;

TSqlParser.CHECKSUMContext = CHECKSUMContext;

CHECKSUMContext.prototype.CHECKSUM = function() {
    return this.getToken(TSqlParser.CHECKSUM, 0);
};
CHECKSUMContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCHECKSUM(this);
	}
};

CHECKSUMContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCHECKSUM(this);
	}
};


function CURRENT_TIMESTAMPContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CURRENT_TIMESTAMPContext.prototype = Object.create(Function_callContext.prototype);
CURRENT_TIMESTAMPContext.prototype.constructor = CURRENT_TIMESTAMPContext;

TSqlParser.CURRENT_TIMESTAMPContext = CURRENT_TIMESTAMPContext;

CURRENT_TIMESTAMPContext.prototype.CURRENT_TIMESTAMP = function() {
    return this.getToken(TSqlParser.CURRENT_TIMESTAMP, 0);
};
CURRENT_TIMESTAMPContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCURRENT_TIMESTAMP(this);
	}
};

CURRENT_TIMESTAMPContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCURRENT_TIMESTAMP(this);
	}
};


function BINARY_CHECKSUMContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BINARY_CHECKSUMContext.prototype = Object.create(Function_callContext.prototype);
BINARY_CHECKSUMContext.prototype.constructor = BINARY_CHECKSUMContext;

TSqlParser.BINARY_CHECKSUMContext = BINARY_CHECKSUMContext;

BINARY_CHECKSUMContext.prototype.BINARY_CHECKSUM = function() {
    return this.getToken(TSqlParser.BINARY_CHECKSUM, 0);
};
BINARY_CHECKSUMContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterBINARY_CHECKSUM(this);
	}
};

BINARY_CHECKSUMContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitBINARY_CHECKSUM(this);
	}
};


function SYSTEM_USERContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SYSTEM_USERContext.prototype = Object.create(Function_callContext.prototype);
SYSTEM_USERContext.prototype.constructor = SYSTEM_USERContext;

TSqlParser.SYSTEM_USERContext = SYSTEM_USERContext;

SYSTEM_USERContext.prototype.SYSTEM_USER = function() {
    return this.getToken(TSqlParser.SYSTEM_USER, 0);
};
SYSTEM_USERContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSYSTEM_USER(this);
	}
};

SYSTEM_USERContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSYSTEM_USER(this);
	}
};


function NULLIFContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NULLIFContext.prototype = Object.create(Function_callContext.prototype);
NULLIFContext.prototype.constructor = NULLIFContext;

TSqlParser.NULLIFContext = NULLIFContext;

NULLIFContext.prototype.NULLIF = function() {
    return this.getToken(TSqlParser.NULLIF, 0);
};

NULLIFContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
NULLIFContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterNULLIF(this);
	}
};

NULLIFContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitNULLIF(this);
	}
};


function SESSION_USERContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SESSION_USERContext.prototype = Object.create(Function_callContext.prototype);
SESSION_USERContext.prototype.constructor = SESSION_USERContext;

TSqlParser.SESSION_USERContext = SESSION_USERContext;

SESSION_USERContext.prototype.SESSION_USER = function() {
    return this.getToken(TSqlParser.SESSION_USER, 0);
};
SESSION_USERContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSESSION_USER(this);
	}
};

SESSION_USERContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSESSION_USER(this);
	}
};


function CONVERTContext(parser, ctx) {
	Function_callContext.call(this, parser);
    this.convert_data_type = null; // Data_typeContext;
    this.convert_expression = null; // ExpressionContext;
    this.style = null; // ExpressionContext;
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CONVERTContext.prototype = Object.create(Function_callContext.prototype);
CONVERTContext.prototype.constructor = CONVERTContext;

TSqlParser.CONVERTContext = CONVERTContext;

CONVERTContext.prototype.CONVERT = function() {
    return this.getToken(TSqlParser.CONVERT, 0);
};

CONVERTContext.prototype.data_type = function() {
    return this.getTypedRuleContext(Data_typeContext,0);
};

CONVERTContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
CONVERTContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCONVERT(this);
	}
};

CONVERTContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCONVERT(this);
	}
};


function XML_DATA_TYPE_FUNCContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

XML_DATA_TYPE_FUNCContext.prototype = Object.create(Function_callContext.prototype);
XML_DATA_TYPE_FUNCContext.prototype.constructor = XML_DATA_TYPE_FUNCContext;

TSqlParser.XML_DATA_TYPE_FUNCContext = XML_DATA_TYPE_FUNCContext;

XML_DATA_TYPE_FUNCContext.prototype.xml_data_type_methods = function() {
    return this.getTypedRuleContext(Xml_data_type_methodsContext,0);
};
XML_DATA_TYPE_FUNCContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterXML_DATA_TYPE_FUNC(this);
	}
};

XML_DATA_TYPE_FUNCContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitXML_DATA_TYPE_FUNC(this);
	}
};


function COALESCEContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

COALESCEContext.prototype = Object.create(Function_callContext.prototype);
COALESCEContext.prototype.constructor = COALESCEContext;

TSqlParser.COALESCEContext = COALESCEContext;

COALESCEContext.prototype.COALESCE = function() {
    return this.getToken(TSqlParser.COALESCE, 0);
};

COALESCEContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};
COALESCEContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCOALESCE(this);
	}
};

COALESCEContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCOALESCE(this);
	}
};


function CASTContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CASTContext.prototype = Object.create(Function_callContext.prototype);
CASTContext.prototype.constructor = CASTContext;

TSqlParser.CASTContext = CASTContext;

CASTContext.prototype.CAST = function() {
    return this.getToken(TSqlParser.CAST, 0);
};

CASTContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

CASTContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

CASTContext.prototype.data_type = function() {
    return this.getTypedRuleContext(Data_typeContext,0);
};
CASTContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCAST(this);
	}
};

CASTContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCAST(this);
	}
};


function MIN_ACTIVE_ROWVERSIONContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MIN_ACTIVE_ROWVERSIONContext.prototype = Object.create(Function_callContext.prototype);
MIN_ACTIVE_ROWVERSIONContext.prototype.constructor = MIN_ACTIVE_ROWVERSIONContext;

TSqlParser.MIN_ACTIVE_ROWVERSIONContext = MIN_ACTIVE_ROWVERSIONContext;

MIN_ACTIVE_ROWVERSIONContext.prototype.MIN_ACTIVE_ROWVERSION = function() {
    return this.getToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0);
};
MIN_ACTIVE_ROWVERSIONContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterMIN_ACTIVE_ROWVERSION(this);
	}
};

MIN_ACTIVE_ROWVERSIONContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitMIN_ACTIVE_ROWVERSION(this);
	}
};


function SCALAR_FUNCTIONContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SCALAR_FUNCTIONContext.prototype = Object.create(Function_callContext.prototype);
SCALAR_FUNCTIONContext.prototype.constructor = SCALAR_FUNCTIONContext;

TSqlParser.SCALAR_FUNCTIONContext = SCALAR_FUNCTIONContext;

SCALAR_FUNCTIONContext.prototype.scalar_function_name = function() {
    return this.getTypedRuleContext(Scalar_function_nameContext,0);
};

SCALAR_FUNCTIONContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};
SCALAR_FUNCTIONContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSCALAR_FUNCTION(this);
	}
};

SCALAR_FUNCTIONContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSCALAR_FUNCTION(this);
	}
};


function DATEPARTContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DATEPARTContext.prototype = Object.create(Function_callContext.prototype);
DATEPARTContext.prototype.constructor = DATEPARTContext;

TSqlParser.DATEPARTContext = DATEPARTContext;

DATEPARTContext.prototype.DATEPART = function() {
    return this.getToken(TSqlParser.DATEPART, 0);
};

DATEPARTContext.prototype.ID = function() {
    return this.getToken(TSqlParser.ID, 0);
};

DATEPARTContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
DATEPARTContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDATEPART(this);
	}
};

DATEPARTContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDATEPART(this);
	}
};


function STUFFContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

STUFFContext.prototype = Object.create(Function_callContext.prototype);
STUFFContext.prototype.constructor = STUFFContext;

TSqlParser.STUFFContext = STUFFContext;

STUFFContext.prototype.STUFF = function() {
    return this.getToken(TSqlParser.STUFF, 0);
};

STUFFContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

STUFFContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};

STUFFContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSTUFF(this);
	}
};

STUFFContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSTUFF(this);
	}
};


function AGGREGATE_WINDOWED_FUNCContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AGGREGATE_WINDOWED_FUNCContext.prototype = Object.create(Function_callContext.prototype);
AGGREGATE_WINDOWED_FUNCContext.prototype.constructor = AGGREGATE_WINDOWED_FUNCContext;

TSqlParser.AGGREGATE_WINDOWED_FUNCContext = AGGREGATE_WINDOWED_FUNCContext;

AGGREGATE_WINDOWED_FUNCContext.prototype.aggregate_windowed_function = function() {
    return this.getTypedRuleContext(Aggregate_windowed_functionContext,0);
};
AGGREGATE_WINDOWED_FUNCContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAGGREGATE_WINDOWED_FUNC(this);
	}
};

AGGREGATE_WINDOWED_FUNCContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAGGREGATE_WINDOWED_FUNC(this);
	}
};


function IDENTITYContext(parser, ctx) {
	Function_callContext.call(this, parser);
    this.seed = null; // Token;
    this.increment = null; // Token;
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IDENTITYContext.prototype = Object.create(Function_callContext.prototype);
IDENTITYContext.prototype.constructor = IDENTITYContext;

TSqlParser.IDENTITYContext = IDENTITYContext;

IDENTITYContext.prototype.IDENTITY = function() {
    return this.getToken(TSqlParser.IDENTITY, 0);
};

IDENTITYContext.prototype.data_type = function() {
    return this.getTypedRuleContext(Data_typeContext,0);
};

IDENTITYContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};

IDENTITYContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterIDENTITY(this);
	}
};

IDENTITYContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitIDENTITY(this);
	}
};


function RANKING_WINDOWED_FUNCContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RANKING_WINDOWED_FUNCContext.prototype = Object.create(Function_callContext.prototype);
RANKING_WINDOWED_FUNCContext.prototype.constructor = RANKING_WINDOWED_FUNCContext;

TSqlParser.RANKING_WINDOWED_FUNCContext = RANKING_WINDOWED_FUNCContext;

RANKING_WINDOWED_FUNCContext.prototype.ranking_windowed_function = function() {
    return this.getTypedRuleContext(Ranking_windowed_functionContext,0);
};
RANKING_WINDOWED_FUNCContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterRANKING_WINDOWED_FUNC(this);
	}
};

RANKING_WINDOWED_FUNCContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitRANKING_WINDOWED_FUNC(this);
	}
};


function DATENAMEContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DATENAMEContext.prototype = Object.create(Function_callContext.prototype);
DATENAMEContext.prototype.constructor = DATENAMEContext;

TSqlParser.DATENAMEContext = DATENAMEContext;

DATENAMEContext.prototype.DATENAME = function() {
    return this.getToken(TSqlParser.DATENAME, 0);
};

DATENAMEContext.prototype.ID = function() {
    return this.getToken(TSqlParser.ID, 0);
};

DATENAMEContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
DATENAMEContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDATENAME(this);
	}
};

DATENAMEContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDATENAME(this);
	}
};


function GETUTCDATEContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GETUTCDATEContext.prototype = Object.create(Function_callContext.prototype);
GETUTCDATEContext.prototype.constructor = GETUTCDATEContext;

TSqlParser.GETUTCDATEContext = GETUTCDATEContext;

GETUTCDATEContext.prototype.GETUTCDATE = function() {
    return this.getToken(TSqlParser.GETUTCDATE, 0);
};
GETUTCDATEContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterGETUTCDATE(this);
	}
};

GETUTCDATEContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitGETUTCDATE(this);
	}
};


function ANALYTIC_WINDOWED_FUNCContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ANALYTIC_WINDOWED_FUNCContext.prototype = Object.create(Function_callContext.prototype);
ANALYTIC_WINDOWED_FUNCContext.prototype.constructor = ANALYTIC_WINDOWED_FUNCContext;

TSqlParser.ANALYTIC_WINDOWED_FUNCContext = ANALYTIC_WINDOWED_FUNCContext;

ANALYTIC_WINDOWED_FUNCContext.prototype.analytic_windowed_function = function() {
    return this.getTypedRuleContext(Analytic_windowed_functionContext,0);
};
ANALYTIC_WINDOWED_FUNCContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterANALYTIC_WINDOWED_FUNC(this);
	}
};

ANALYTIC_WINDOWED_FUNCContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitANALYTIC_WINDOWED_FUNC(this);
	}
};


function ISNULLContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ISNULLContext.prototype = Object.create(Function_callContext.prototype);
ISNULLContext.prototype.constructor = ISNULLContext;

TSqlParser.ISNULLContext = ISNULLContext;

ISNULLContext.prototype.ISNULL = function() {
    return this.getToken(TSqlParser.ISNULL, 0);
};

ISNULLContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ISNULLContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterISNULL(this);
	}
};

ISNULLContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitISNULL(this);
	}
};


function DATEDIFFContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DATEDIFFContext.prototype = Object.create(Function_callContext.prototype);
DATEDIFFContext.prototype.constructor = DATEDIFFContext;

TSqlParser.DATEDIFFContext = DATEDIFFContext;

DATEDIFFContext.prototype.DATEDIFF = function() {
    return this.getToken(TSqlParser.DATEDIFF, 0);
};

DATEDIFFContext.prototype.ID = function() {
    return this.getToken(TSqlParser.ID, 0);
};

DATEDIFFContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
DATEDIFFContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDATEDIFF(this);
	}
};

DATEDIFFContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDATEDIFF(this);
	}
};


function GETDATEContext(parser, ctx) {
	Function_callContext.call(this, parser);
    Function_callContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GETDATEContext.prototype = Object.create(Function_callContext.prototype);
GETDATEContext.prototype.constructor = GETDATEContext;

TSqlParser.GETDATEContext = GETDATEContext;

GETDATEContext.prototype.GETDATE = function() {
    return this.getToken(TSqlParser.GETDATE, 0);
};
GETDATEContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterGETDATE(this);
	}
};

GETDATEContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitGETDATE(this);
	}
};



TSqlParser.Function_callContext = Function_callContext;

TSqlParser.prototype.function_call = function() {

    var localctx = new Function_callContext(this, this._ctx, this.state);
    this.enterRule(localctx, 808, TSqlParser.RULE_function_call);
    var _la = 0; // Token type
    try {
        this.state = 9567;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1342,this._ctx);
        switch(la_) {
        case 1:
            localctx = new RANKING_WINDOWED_FUNCContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 9444;
            this.ranking_windowed_function();
            break;

        case 2:
            localctx = new AGGREGATE_WINDOWED_FUNCContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 9445;
            this.aggregate_windowed_function();
            break;

        case 3:
            localctx = new ANALYTIC_WINDOWED_FUNCContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 9446;
            this.analytic_windowed_function();
            break;

        case 4:
            localctx = new SCALAR_FUNCTIONContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 9447;
            this.scalar_function_name();
            this.state = 9448;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9450;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (TSqlParser.BLOCKING_HIERARCHY - 29)) | (1 << (TSqlParser.CALLED - 29)) | (1 << (TSqlParser.CASE - 29)) | (1 << (TSqlParser.COALESCE - 29)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (TSqlParser.CONVERT - 68)) | (1 << (TSqlParser.CURRENT_TIMESTAMP - 68)) | (1 << (TSqlParser.CURRENT_USER - 68)) | (1 << (TSqlParser.DATA_COMPRESSION - 68)) | (1 << (TSqlParser.DEFAULT - 68)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (TSqlParser.IDENTITY - 148)) | (1 << (TSqlParser.ISNULL - 148)) | (1 << (TSqlParser.KEY - 148)) | (1 << (TSqlParser.LEFT - 148)))) !== 0) || _la===TSqlParser.MASTER || _la===TSqlParser.MAX_MEMORY || ((((_la - 220)) & ~0x1f) == 0 && ((1 << (_la - 220)) & ((1 << (TSqlParser.NULL - 220)) | (1 << (TSqlParser.NULLIF - 220)) | (1 << (TSqlParser.OFFSETS - 220)) | (1 << (TSqlParser.OVER - 220)) | (1 << (TSqlParser.PAGE - 220)))) !== 0) || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.RIGHT - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SESSION_USER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || ((((_la - 328)) & ~0x1f) == 0 && ((1 << (_la - 328)) & ((1 << (TSqlParser.STATE - 328)) | (1 << (TSqlParser.SYSTEM_USER - 328)) | (1 << (TSqlParser.TARGET - 328)))) !== 0) || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.ANSI_NULLS - 382)) | (1 << (TSqlParser.ANSI_PADDING - 382)) | (1 << (TSqlParser.ANSI_WARNINGS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.ARITHABORT - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.BINARY_CHECKSUM - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.COMPATIBILITY_LEVEL - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DATEADD - 447)) | (1 << (TSqlParser.DATEDIFF - 447)) | (1 << (TSqlParser.DATENAME - 447)) | (1 << (TSqlParser.DATEPART - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)) | (1 << (TSqlParser.FIRST_VALUE - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GETDATE - 511)) | (1 << (TSqlParser.GETUTCDATE - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAG - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LAST_VALUE - 545)) | (1 << (TSqlParser.LEAD - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MIN_ACTIVE_ROWVERSION - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.QUOTED_IDENTIFIER - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STATUS - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.STUFF - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.LOCAL_ID - 747)) | (1 << (TSqlParser.DECIMAL - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0) || ((((_la - 781)) & ~0x1f) == 0 && ((1 << (_la - 781)) & ((1 << (TSqlParser.STRING - 781)) | (1 << (TSqlParser.BINARY - 781)) | (1 << (TSqlParser.FLOAT - 781)) | (1 << (TSqlParser.REAL - 781)) | (1 << (TSqlParser.DOLLAR - 781)) | (1 << (TSqlParser.LR_BRACKET - 781)) | (1 << (TSqlParser.PLUS - 781)) | (1 << (TSqlParser.MINUS - 781)) | (1 << (TSqlParser.BIT_NOT - 781)))) !== 0)) {
                this.state = 9449;
                this.expression_list();
            }

            this.state = 9452;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 5:
            localctx = new BINARY_CHECKSUMContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 9454;
            this.match(TSqlParser.BINARY_CHECKSUM);
            this.state = 9455;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9456;
            this.match(TSqlParser.STAR);
            this.state = 9457;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 6:
            localctx = new CASTContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 9458;
            this.match(TSqlParser.CAST);
            this.state = 9459;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9460;
            this.expression(0);
            this.state = 9461;
            this.match(TSqlParser.AS);
            this.state = 9462;
            this.data_type();
            this.state = 9463;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 7:
            localctx = new CONVERTContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 9465;
            this.match(TSqlParser.CONVERT);
            this.state = 9466;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9467;
            localctx.convert_data_type = this.data_type();
            this.state = 9468;
            this.match(TSqlParser.COMMA);
            this.state = 9469;
            localctx.convert_expression = this.expression(0);
            this.state = 9472;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 9470;
                this.match(TSqlParser.COMMA);
                this.state = 9471;
                localctx.style = this.expression(0);
            }

            this.state = 9474;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 8:
            localctx = new CHECKSUMContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 9476;
            this.match(TSqlParser.CHECKSUM);
            this.state = 9477;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9478;
            this.match(TSqlParser.STAR);
            this.state = 9479;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 9:
            localctx = new COALESCEContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 9480;
            this.match(TSqlParser.COALESCE);
            this.state = 9481;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9482;
            this.expression_list();
            this.state = 9483;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 10:
            localctx = new CURRENT_TIMESTAMPContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 9485;
            this.match(TSqlParser.CURRENT_TIMESTAMP);
            break;

        case 11:
            localctx = new CURRENT_USERContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 9486;
            this.match(TSqlParser.CURRENT_USER);
            break;

        case 12:
            localctx = new DATEADDContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 9487;
            this.match(TSqlParser.DATEADD);
            this.state = 9488;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9489;
            this.match(TSqlParser.ID);
            this.state = 9490;
            this.match(TSqlParser.COMMA);
            this.state = 9491;
            this.expression(0);
            this.state = 9492;
            this.match(TSqlParser.COMMA);
            this.state = 9493;
            this.expression(0);
            this.state = 9494;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 13:
            localctx = new DATEDIFFContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 9496;
            this.match(TSqlParser.DATEDIFF);
            this.state = 9497;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9498;
            this.match(TSqlParser.ID);
            this.state = 9499;
            this.match(TSqlParser.COMMA);
            this.state = 9500;
            this.expression(0);
            this.state = 9501;
            this.match(TSqlParser.COMMA);
            this.state = 9502;
            this.expression(0);
            this.state = 9503;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 14:
            localctx = new DATENAMEContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 9505;
            this.match(TSqlParser.DATENAME);
            this.state = 9506;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9507;
            this.match(TSqlParser.ID);
            this.state = 9508;
            this.match(TSqlParser.COMMA);
            this.state = 9509;
            this.expression(0);
            this.state = 9510;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 15:
            localctx = new DATEPARTContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 9512;
            this.match(TSqlParser.DATEPART);
            this.state = 9513;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9514;
            this.match(TSqlParser.ID);
            this.state = 9515;
            this.match(TSqlParser.COMMA);
            this.state = 9516;
            this.expression(0);
            this.state = 9517;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 16:
            localctx = new GETDATEContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 9519;
            this.match(TSqlParser.GETDATE);
            this.state = 9520;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9521;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 17:
            localctx = new GETUTCDATEContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 9522;
            this.match(TSqlParser.GETUTCDATE);
            this.state = 9523;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9524;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 18:
            localctx = new IDENTITYContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 9525;
            this.match(TSqlParser.IDENTITY);
            this.state = 9526;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9527;
            this.data_type();
            this.state = 9530;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1340,this._ctx);
            if(la_===1) {
                this.state = 9528;
                this.match(TSqlParser.COMMA);
                this.state = 9529;
                localctx.seed = this.match(TSqlParser.DECIMAL);

            }
            this.state = 9534;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 9532;
                this.match(TSqlParser.COMMA);
                this.state = 9533;
                localctx.increment = this.match(TSqlParser.DECIMAL);
            }

            this.state = 9536;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 19:
            localctx = new MIN_ACTIVE_ROWVERSIONContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 9538;
            this.match(TSqlParser.MIN_ACTIVE_ROWVERSION);
            break;

        case 20:
            localctx = new NULLIFContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 9539;
            this.match(TSqlParser.NULLIF);
            this.state = 9540;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9541;
            this.expression(0);
            this.state = 9542;
            this.match(TSqlParser.COMMA);
            this.state = 9543;
            this.expression(0);
            this.state = 9544;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 21:
            localctx = new STUFFContext(this, localctx);
            this.enterOuterAlt(localctx, 21);
            this.state = 9546;
            this.match(TSqlParser.STUFF);
            this.state = 9547;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9548;
            this.expression(0);
            this.state = 9549;
            this.match(TSqlParser.COMMA);
            this.state = 9550;
            this.match(TSqlParser.DECIMAL);
            this.state = 9551;
            this.match(TSqlParser.COMMA);
            this.state = 9552;
            this.match(TSqlParser.DECIMAL);
            this.state = 9553;
            this.match(TSqlParser.COMMA);
            this.state = 9554;
            this.expression(0);
            this.state = 9555;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 22:
            localctx = new SESSION_USERContext(this, localctx);
            this.enterOuterAlt(localctx, 22);
            this.state = 9557;
            this.match(TSqlParser.SESSION_USER);
            break;

        case 23:
            localctx = new SYSTEM_USERContext(this, localctx);
            this.enterOuterAlt(localctx, 23);
            this.state = 9558;
            this.match(TSqlParser.SYSTEM_USER);
            break;

        case 24:
            localctx = new ISNULLContext(this, localctx);
            this.enterOuterAlt(localctx, 24);
            this.state = 9559;
            this.match(TSqlParser.ISNULL);
            this.state = 9560;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9561;
            this.expression(0);
            this.state = 9562;
            this.match(TSqlParser.COMMA);
            this.state = 9563;
            this.expression(0);
            this.state = 9564;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 25:
            localctx = new XML_DATA_TYPE_FUNCContext(this, localctx);
            this.enterOuterAlt(localctx, 25);
            this.state = 9566;
            this.xml_data_type_methods();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xml_data_type_methodsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_xml_data_type_methods;
    return this;
}

Xml_data_type_methodsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xml_data_type_methodsContext.prototype.constructor = Xml_data_type_methodsContext;

Xml_data_type_methodsContext.prototype.value_method = function() {
    return this.getTypedRuleContext(Value_methodContext,0);
};

Xml_data_type_methodsContext.prototype.query_method = function() {
    return this.getTypedRuleContext(Query_methodContext,0);
};

Xml_data_type_methodsContext.prototype.exist_method = function() {
    return this.getTypedRuleContext(Exist_methodContext,0);
};

Xml_data_type_methodsContext.prototype.modify_method = function() {
    return this.getTypedRuleContext(Modify_methodContext,0);
};

Xml_data_type_methodsContext.prototype.nodes_method = function() {
    return this.getTypedRuleContext(Nodes_methodContext,0);
};

Xml_data_type_methodsContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterXml_data_type_methods(this);
	}
};

Xml_data_type_methodsContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitXml_data_type_methods(this);
	}
};




TSqlParser.Xml_data_type_methodsContext = Xml_data_type_methodsContext;

TSqlParser.prototype.xml_data_type_methods = function() {

    var localctx = new Xml_data_type_methodsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 810, TSqlParser.RULE_xml_data_type_methods);
    try {
        this.state = 9574;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1343,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 9569;
            this.value_method();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 9570;
            this.query_method();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 9571;
            this.exist_method();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 9572;
            this.modify_method();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 9573;
            this.nodes_method();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Value_methodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_value_method;
    this.xquery = null; // Token
    this.sqltype = null; // Token
    return this;
}

Value_methodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Value_methodContext.prototype.constructor = Value_methodContext;

Value_methodContext.prototype.VALUE = function() {
    return this.getToken(TSqlParser.VALUE, 0);
};

Value_methodContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Value_methodContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Value_methodContext.prototype.ID = function() {
    return this.getToken(TSqlParser.ID, 0);
};

Value_methodContext.prototype.EVENTDATA = function() {
    return this.getToken(TSqlParser.EVENTDATA, 0);
};

Value_methodContext.prototype.query_method = function() {
    return this.getTypedRuleContext(Query_methodContext,0);
};

Value_methodContext.prototype.ROW = function() {
    return this.getToken(TSqlParser.ROW, 0);
};

Value_methodContext.prototype.PARAM_NODE = function() {
    return this.getToken(TSqlParser.PARAM_NODE, 0);
};

Value_methodContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterValue_method(this);
	}
};

Value_methodContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitValue_method(this);
	}
};




TSqlParser.Value_methodContext = Value_methodContext;

TSqlParser.prototype.value_method = function() {

    var localctx = new Value_methodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 812, TSqlParser.RULE_value_method);
    try {
        this.state = 9619;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1347,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 9580;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1344,this._ctx);
            switch(la_) {
            case 1:
                this.state = 9576;
                this.match(TSqlParser.LOCAL_ID);
                break;

            case 2:
                this.state = 9577;
                this.match(TSqlParser.ID);
                break;

            case 3:
                this.state = 9578;
                this.match(TSqlParser.EVENTDATA);
                break;

            case 4:
                this.state = 9579;
                this.query_method();
                break;

            }
            this.state = 9582;
            this.match(TSqlParser.DOT);
            this.state = 9583;
            this.match(TSqlParser.VALUE);
            this.state = 9584;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9585;
            localctx.xquery = this.match(TSqlParser.STRING);
            this.state = 9586;
            this.match(TSqlParser.COMMA);
            this.state = 9587;
            localctx.sqltype = this.match(TSqlParser.STRING);
            this.state = 9588;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 9593;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1345,this._ctx);
            switch(la_) {
            case 1:
                this.state = 9589;
                this.match(TSqlParser.LOCAL_ID);
                break;

            case 2:
                this.state = 9590;
                this.match(TSqlParser.ID);
                break;

            case 3:
                this.state = 9591;
                this.match(TSqlParser.EVENTDATA);
                break;

            case 4:
                this.state = 9592;
                this.query_method();
                break;

            }
            this.state = 9595;
            this.match(TSqlParser.DOT);
            this.state = 9596;
            this.match(TSqlParser.ROW);
            this.state = 9597;
            this.match(TSqlParser.DOT);
            this.state = 9598;
            this.match(TSqlParser.VALUE);
            this.state = 9599;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9600;
            localctx.xquery = this.match(TSqlParser.STRING);
            this.state = 9601;
            this.match(TSqlParser.COMMA);
            this.state = 9602;
            localctx.sqltype = this.match(TSqlParser.STRING);
            this.state = 9603;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 9608;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1346,this._ctx);
            switch(la_) {
            case 1:
                this.state = 9604;
                this.match(TSqlParser.LOCAL_ID);
                break;

            case 2:
                this.state = 9605;
                this.match(TSqlParser.ID);
                break;

            case 3:
                this.state = 9606;
                this.match(TSqlParser.EVENTDATA);
                break;

            case 4:
                this.state = 9607;
                this.query_method();
                break;

            }
            this.state = 9610;
            this.match(TSqlParser.DOT);
            this.state = 9611;
            this.match(TSqlParser.PARAM_NODE);
            this.state = 9612;
            this.match(TSqlParser.DOT);
            this.state = 9613;
            this.match(TSqlParser.VALUE);
            this.state = 9614;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9615;
            localctx.xquery = this.match(TSqlParser.STRING);
            this.state = 9616;
            this.match(TSqlParser.COMMA);
            this.state = 9617;
            localctx.sqltype = this.match(TSqlParser.STRING);
            this.state = 9618;
            this.match(TSqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Query_methodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_query_method;
    this.xquery = null; // Token
    return this;
}

Query_methodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Query_methodContext.prototype.constructor = Query_methodContext;

Query_methodContext.prototype.QUERY = function() {
    return this.getToken(TSqlParser.QUERY, 0);
};

Query_methodContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Query_methodContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Query_methodContext.prototype.ID = function() {
    return this.getToken(TSqlParser.ID, 0);
};

Query_methodContext.prototype.full_table_name = function() {
    return this.getTypedRuleContext(Full_table_nameContext,0);
};

Query_methodContext.prototype.ROW = function() {
    return this.getToken(TSqlParser.ROW, 0);
};

Query_methodContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterQuery_method(this);
	}
};

Query_methodContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitQuery_method(this);
	}
};




TSqlParser.Query_methodContext = Query_methodContext;

TSqlParser.prototype.query_method = function() {

    var localctx = new Query_methodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 814, TSqlParser.RULE_query_method);
    try {
        this.state = 9643;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1350,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 9624;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1348,this._ctx);
            switch(la_) {
            case 1:
                this.state = 9621;
                this.match(TSqlParser.LOCAL_ID);
                break;

            case 2:
                this.state = 9622;
                this.match(TSqlParser.ID);
                break;

            case 3:
                this.state = 9623;
                this.full_table_name();
                break;

            }
            this.state = 9626;
            this.match(TSqlParser.DOT);
            this.state = 9627;
            this.match(TSqlParser.QUERY);
            this.state = 9628;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9629;
            localctx.xquery = this.match(TSqlParser.STRING);
            this.state = 9630;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 9634;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1349,this._ctx);
            switch(la_) {
            case 1:
                this.state = 9631;
                this.match(TSqlParser.LOCAL_ID);
                break;

            case 2:
                this.state = 9632;
                this.match(TSqlParser.ID);
                break;

            case 3:
                this.state = 9633;
                this.full_table_name();
                break;

            }
            this.state = 9636;
            this.match(TSqlParser.DOT);
            this.state = 9637;
            this.match(TSqlParser.ROW);
            this.state = 9638;
            this.match(TSqlParser.DOT);
            this.state = 9639;
            this.match(TSqlParser.QUERY);
            this.state = 9640;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9641;
            localctx.xquery = this.match(TSqlParser.STRING);
            this.state = 9642;
            this.match(TSqlParser.RR_BRACKET);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Exist_methodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_exist_method;
    this.xquery = null; // Token
    return this;
}

Exist_methodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exist_methodContext.prototype.constructor = Exist_methodContext;

Exist_methodContext.prototype.EXIST = function() {
    return this.getToken(TSqlParser.EXIST, 0);
};

Exist_methodContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Exist_methodContext.prototype.ID = function() {
    return this.getToken(TSqlParser.ID, 0);
};

Exist_methodContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Exist_methodContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterExist_method(this);
	}
};

Exist_methodContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitExist_method(this);
	}
};




TSqlParser.Exist_methodContext = Exist_methodContext;

TSqlParser.prototype.exist_method = function() {

    var localctx = new Exist_methodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 816, TSqlParser.RULE_exist_method);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9645;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.LOCAL_ID || _la===TSqlParser.ID)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 9646;
        this.match(TSqlParser.DOT);
        this.state = 9647;
        this.match(TSqlParser.EXIST);
        this.state = 9648;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 9649;
        localctx.xquery = this.match(TSqlParser.STRING);
        this.state = 9650;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Modify_methodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_modify_method;
    this.xml_dml = null; // Token
    return this;
}

Modify_methodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Modify_methodContext.prototype.constructor = Modify_methodContext;

Modify_methodContext.prototype.MODIFY = function() {
    return this.getToken(TSqlParser.MODIFY, 0);
};

Modify_methodContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Modify_methodContext.prototype.ID = function() {
    return this.getToken(TSqlParser.ID, 0);
};

Modify_methodContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Modify_methodContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterModify_method(this);
	}
};

Modify_methodContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitModify_method(this);
	}
};




TSqlParser.Modify_methodContext = Modify_methodContext;

TSqlParser.prototype.modify_method = function() {

    var localctx = new Modify_methodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 818, TSqlParser.RULE_modify_method);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9652;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.LOCAL_ID || _la===TSqlParser.ID)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 9653;
        this.match(TSqlParser.DOT);
        this.state = 9654;
        this.match(TSqlParser.MODIFY);
        this.state = 9655;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 9656;
        localctx.xml_dml = this.match(TSqlParser.STRING);
        this.state = 9657;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Nodes_methodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_nodes_method;
    this.xquery = null; // Token
    return this;
}

Nodes_methodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nodes_methodContext.prototype.constructor = Nodes_methodContext;

Nodes_methodContext.prototype.NODES = function() {
    return this.getToken(TSqlParser.NODES, 0);
};

Nodes_methodContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Nodes_methodContext.prototype.ID = function() {
    return this.getToken(TSqlParser.ID, 0);
};

Nodes_methodContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Nodes_methodContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterNodes_method(this);
	}
};

Nodes_methodContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitNodes_method(this);
	}
};




TSqlParser.Nodes_methodContext = Nodes_methodContext;

TSqlParser.prototype.nodes_method = function() {

    var localctx = new Nodes_methodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 820, TSqlParser.RULE_nodes_method);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9659;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.LOCAL_ID || _la===TSqlParser.ID)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 9660;
        this.match(TSqlParser.DOT);
        this.state = 9661;
        this.match(TSqlParser.NODES);
        this.state = 9662;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 9663;
        localctx.xquery = this.match(TSqlParser.STRING);
        this.state = 9664;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_sectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_switch_section;
    return this;
}

Switch_sectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_sectionContext.prototype.constructor = Switch_sectionContext;

Switch_sectionContext.prototype.WHEN = function() {
    return this.getToken(TSqlParser.WHEN, 0);
};

Switch_sectionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Switch_sectionContext.prototype.THEN = function() {
    return this.getToken(TSqlParser.THEN, 0);
};

Switch_sectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSwitch_section(this);
	}
};

Switch_sectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSwitch_section(this);
	}
};




TSqlParser.Switch_sectionContext = Switch_sectionContext;

TSqlParser.prototype.switch_section = function() {

    var localctx = new Switch_sectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 822, TSqlParser.RULE_switch_section);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9666;
        this.match(TSqlParser.WHEN);
        this.state = 9667;
        this.expression(0);
        this.state = 9668;
        this.match(TSqlParser.THEN);
        this.state = 9669;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Switch_search_condition_sectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_switch_search_condition_section;
    return this;
}

Switch_search_condition_sectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Switch_search_condition_sectionContext.prototype.constructor = Switch_search_condition_sectionContext;

Switch_search_condition_sectionContext.prototype.WHEN = function() {
    return this.getToken(TSqlParser.WHEN, 0);
};

Switch_search_condition_sectionContext.prototype.search_condition = function() {
    return this.getTypedRuleContext(Search_conditionContext,0);
};

Switch_search_condition_sectionContext.prototype.THEN = function() {
    return this.getToken(TSqlParser.THEN, 0);
};

Switch_search_condition_sectionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Switch_search_condition_sectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSwitch_search_condition_section(this);
	}
};

Switch_search_condition_sectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSwitch_search_condition_section(this);
	}
};




TSqlParser.Switch_search_condition_sectionContext = Switch_search_condition_sectionContext;

TSqlParser.prototype.switch_search_condition_section = function() {

    var localctx = new Switch_search_condition_sectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 824, TSqlParser.RULE_switch_search_condition_section);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9671;
        this.match(TSqlParser.WHEN);
        this.state = 9672;
        this.search_condition();
        this.state = 9673;
        this.match(TSqlParser.THEN);
        this.state = 9674;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function As_column_aliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_as_column_alias;
    return this;
}

As_column_aliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
As_column_aliasContext.prototype.constructor = As_column_aliasContext;

As_column_aliasContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

As_column_aliasContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

As_column_aliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAs_column_alias(this);
	}
};

As_column_aliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAs_column_alias(this);
	}
};




TSqlParser.As_column_aliasContext = As_column_aliasContext;

TSqlParser.prototype.as_column_alias = function() {

    var localctx = new As_column_aliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 826, TSqlParser.RULE_as_column_alias);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9677;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AS) {
            this.state = 9676;
            this.match(TSqlParser.AS);
        }

        this.state = 9679;
        this.column_alias();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function As_table_aliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_as_table_alias;
    return this;
}

As_table_aliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
As_table_aliasContext.prototype.constructor = As_table_aliasContext;

As_table_aliasContext.prototype.table_alias = function() {
    return this.getTypedRuleContext(Table_aliasContext,0);
};

As_table_aliasContext.prototype.AS = function() {
    return this.getToken(TSqlParser.AS, 0);
};

As_table_aliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAs_table_alias(this);
	}
};

As_table_aliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAs_table_alias(this);
	}
};




TSqlParser.As_table_aliasContext = As_table_aliasContext;

TSqlParser.prototype.as_table_alias = function() {

    var localctx = new As_table_aliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 828, TSqlParser.RULE_as_table_alias);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9682;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.AS) {
            this.state = 9681;
            this.match(TSqlParser.AS);
        }

        this.state = 9684;
        this.table_alias();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_aliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_table_alias;
    return this;
}

Table_aliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_aliasContext.prototype.constructor = Table_aliasContext;

Table_aliasContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Table_aliasContext.prototype.with_table_hints = function() {
    return this.getTypedRuleContext(With_table_hintsContext,0);
};

Table_aliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTable_alias(this);
	}
};

Table_aliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTable_alias(this);
	}
};




TSqlParser.Table_aliasContext = Table_aliasContext;

TSqlParser.prototype.table_alias = function() {

    var localctx = new Table_aliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 830, TSqlParser.RULE_table_alias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9686;
        this.id();
        this.state = 9688;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1353,this._ctx);
        if(la_===1) {
            this.state = 9687;
            this.with_table_hints();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_table_hintsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_with_table_hints;
    return this;
}

With_table_hintsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_table_hintsContext.prototype.constructor = With_table_hintsContext;

With_table_hintsContext.prototype.table_hint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_hintContext);
    } else {
        return this.getTypedRuleContext(Table_hintContext,i);
    }
};

With_table_hintsContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

With_table_hintsContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterWith_table_hints(this);
	}
};

With_table_hintsContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitWith_table_hints(this);
	}
};




TSqlParser.With_table_hintsContext = With_table_hintsContext;

TSqlParser.prototype.with_table_hints = function() {

    var localctx = new With_table_hintsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 832, TSqlParser.RULE_with_table_hints);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9691;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WITH) {
            this.state = 9690;
            this.match(TSqlParser.WITH);
        }

        this.state = 9693;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 9694;
        this.table_hint();
        this.state = 9701;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.FORCESEEK || _la===TSqlParser.INDEX || _la===TSqlParser.NOEXPAND || ((((_la - 706)) & ~0x1f) == 0 && ((1 << (_la - 706)) & ((1 << (TSqlParser.SERIALIZABLE - 706)) | (1 << (TSqlParser.SNAPSHOT - 706)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 706)))) !== 0) || _la===TSqlParser.ID || _la===TSqlParser.COMMA) {
            this.state = 9696;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 9695;
                this.match(TSqlParser.COMMA);
            }

            this.state = 9698;
            this.table_hint();
            this.state = 9703;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 9704;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Insert_with_table_hintsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_insert_with_table_hints;
    return this;
}

Insert_with_table_hintsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Insert_with_table_hintsContext.prototype.constructor = Insert_with_table_hintsContext;

Insert_with_table_hintsContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Insert_with_table_hintsContext.prototype.table_hint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_hintContext);
    } else {
        return this.getTypedRuleContext(Table_hintContext,i);
    }
};

Insert_with_table_hintsContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterInsert_with_table_hints(this);
	}
};

Insert_with_table_hintsContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitInsert_with_table_hints(this);
	}
};




TSqlParser.Insert_with_table_hintsContext = Insert_with_table_hintsContext;

TSqlParser.prototype.insert_with_table_hints = function() {

    var localctx = new Insert_with_table_hintsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 834, TSqlParser.RULE_insert_with_table_hints);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9706;
        this.match(TSqlParser.WITH);
        this.state = 9707;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 9708;
        this.table_hint();
        this.state = 9715;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.FORCESEEK || _la===TSqlParser.INDEX || _la===TSqlParser.NOEXPAND || ((((_la - 706)) & ~0x1f) == 0 && ((1 << (_la - 706)) & ((1 << (TSqlParser.SERIALIZABLE - 706)) | (1 << (TSqlParser.SNAPSHOT - 706)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 706)))) !== 0) || _la===TSqlParser.ID || _la===TSqlParser.COMMA) {
            this.state = 9710;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 9709;
                this.match(TSqlParser.COMMA);
            }

            this.state = 9712;
            this.table_hint();
            this.state = 9717;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 9718;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_hintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_table_hint;
    return this;
}

Table_hintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_hintContext.prototype.constructor = Table_hintContext;

Table_hintContext.prototype.INDEX = function() {
    return this.getToken(TSqlParser.INDEX, 0);
};

Table_hintContext.prototype.index_value = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Index_valueContext);
    } else {
        return this.getTypedRuleContext(Index_valueContext,i);
    }
};

Table_hintContext.prototype.FORCESEEK = function() {
    return this.getToken(TSqlParser.FORCESEEK, 0);
};

Table_hintContext.prototype.SERIALIZABLE = function() {
    return this.getToken(TSqlParser.SERIALIZABLE, 0);
};

Table_hintContext.prototype.SNAPSHOT = function() {
    return this.getToken(TSqlParser.SNAPSHOT, 0);
};

Table_hintContext.prototype.SPATIAL_WINDOW_MAX_CELLS = function() {
    return this.getToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0);
};

Table_hintContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Table_hintContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ID);
    } else {
        return this.getToken(TSqlParser.ID, i);
    }
};


Table_hintContext.prototype.NOEXPAND = function() {
    return this.getToken(TSqlParser.NOEXPAND, 0);
};

Table_hintContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTable_hint(this);
	}
};

Table_hintContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTable_hint(this);
	}
};




TSqlParser.Table_hintContext = Table_hintContext;

TSqlParser.prototype.table_hint = function() {

    var localctx = new Table_hintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 836, TSqlParser.RULE_table_hint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9721;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.NOEXPAND) {
            this.state = 9720;
            this.match(TSqlParser.NOEXPAND);
        }

        this.state = 9761;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1363,this._ctx);
        switch(la_) {
        case 1:
            this.state = 9723;
            this.match(TSqlParser.INDEX);
            this.state = 9724;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9725;
            this.index_value();
            this.state = 9730;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===TSqlParser.COMMA) {
                this.state = 9726;
                this.match(TSqlParser.COMMA);
                this.state = 9727;
                this.index_value();
                this.state = 9732;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 9733;
            this.match(TSqlParser.RR_BRACKET);
            break;

        case 2:
            this.state = 9735;
            this.match(TSqlParser.INDEX);
            this.state = 9736;
            this.match(TSqlParser.EQUAL);
            this.state = 9737;
            this.index_value();
            break;

        case 3:
            this.state = 9738;
            this.match(TSqlParser.FORCESEEK);
            this.state = 9753;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.LR_BRACKET) {
                this.state = 9739;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 9740;
                this.index_value();
                this.state = 9741;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 9742;
                this.match(TSqlParser.ID);
                this.state = 9747;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===TSqlParser.COMMA) {
                    this.state = 9743;
                    this.match(TSqlParser.COMMA);
                    this.state = 9744;
                    this.match(TSqlParser.ID);
                    this.state = 9749;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 9750;
                this.match(TSqlParser.RR_BRACKET);
                this.state = 9751;
                this.match(TSqlParser.RR_BRACKET);
            }

            break;

        case 4:
            this.state = 9755;
            this.match(TSqlParser.SERIALIZABLE);
            break;

        case 5:
            this.state = 9756;
            this.match(TSqlParser.SNAPSHOT);
            break;

        case 6:
            this.state = 9757;
            this.match(TSqlParser.SPATIAL_WINDOW_MAX_CELLS);
            this.state = 9758;
            this.match(TSqlParser.EQUAL);
            this.state = 9759;
            this.match(TSqlParser.DECIMAL);
            break;

        case 7:
            this.state = 9760;
            this.match(TSqlParser.ID);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Index_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_index_value;
    return this;
}

Index_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Index_valueContext.prototype.constructor = Index_valueContext;

Index_valueContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Index_valueContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Index_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterIndex_value(this);
	}
};

Index_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitIndex_value(this);
	}
};




TSqlParser.Index_valueContext = Index_valueContext;

TSqlParser.prototype.index_value = function() {

    var localctx = new Index_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 838, TSqlParser.RULE_index_value);
    try {
        this.state = 9765;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 9763;
            this.id();
            break;
        case TSqlParser.DECIMAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 9764;
            this.match(TSqlParser.DECIMAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_alias_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_column_alias_list;
    return this;
}

Column_alias_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_alias_listContext.prototype.constructor = Column_alias_listContext;

Column_alias_listContext.prototype.column_alias = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_aliasContext);
    } else {
        return this.getTypedRuleContext(Column_aliasContext,i);
    }
};

Column_alias_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterColumn_alias_list(this);
	}
};

Column_alias_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitColumn_alias_list(this);
	}
};




TSqlParser.Column_alias_listContext = Column_alias_listContext;

TSqlParser.prototype.column_alias_list = function() {

    var localctx = new Column_alias_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 840, TSqlParser.RULE_column_alias_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9767;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 9768;
        this.column_alias();
        this.state = 9773;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 9769;
            this.match(TSqlParser.COMMA);
            this.state = 9770;
            this.column_alias();
            this.state = 9775;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 9776;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_aliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_column_alias;
    return this;
}

Column_aliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_aliasContext.prototype.constructor = Column_aliasContext;

Column_aliasContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Column_aliasContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Column_aliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterColumn_alias(this);
	}
};

Column_aliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitColumn_alias(this);
	}
};




TSqlParser.Column_aliasContext = Column_aliasContext;

TSqlParser.prototype.column_alias = function() {

    var localctx = new Column_aliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 842, TSqlParser.RULE_column_alias);
    try {
        this.state = 9780;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 9778;
            this.id();
            break;
        case TSqlParser.STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 9779;
            this.match(TSqlParser.STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_value_constructorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_table_value_constructor;
    return this;
}

Table_value_constructorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_value_constructorContext.prototype.constructor = Table_value_constructorContext;

Table_value_constructorContext.prototype.VALUES = function() {
    return this.getToken(TSqlParser.VALUES, 0);
};

Table_value_constructorContext.prototype.expression_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Expression_listContext);
    } else {
        return this.getTypedRuleContext(Expression_listContext,i);
    }
};

Table_value_constructorContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTable_value_constructor(this);
	}
};

Table_value_constructorContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTable_value_constructor(this);
	}
};




TSqlParser.Table_value_constructorContext = Table_value_constructorContext;

TSqlParser.prototype.table_value_constructor = function() {

    var localctx = new Table_value_constructorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 844, TSqlParser.RULE_table_value_constructor);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9782;
        this.match(TSqlParser.VALUES);
        this.state = 9783;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 9784;
        this.expression_list();
        this.state = 9785;
        this.match(TSqlParser.RR_BRACKET);
        this.state = 9793;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1367,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 9786;
                this.match(TSqlParser.COMMA);
                this.state = 9787;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 9788;
                this.expression_list();
                this.state = 9789;
                this.match(TSqlParser.RR_BRACKET); 
            }
            this.state = 9795;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1367,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expression_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_expression_list;
    return this;
}

Expression_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expression_listContext.prototype.constructor = Expression_listContext;

Expression_listContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Expression_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterExpression_list(this);
	}
};

Expression_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitExpression_list(this);
	}
};




TSqlParser.Expression_listContext = Expression_listContext;

TSqlParser.prototype.expression_list = function() {

    var localctx = new Expression_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 846, TSqlParser.RULE_expression_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9796;
        this.expression(0);
        this.state = 9801;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 9797;
            this.match(TSqlParser.COMMA);
            this.state = 9798;
            this.expression(0);
            this.state = 9803;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ranking_windowed_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_ranking_windowed_function;
    return this;
}

Ranking_windowed_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ranking_windowed_functionContext.prototype.constructor = Ranking_windowed_functionContext;

Ranking_windowed_functionContext.prototype.over_clause = function() {
    return this.getTypedRuleContext(Over_clauseContext,0);
};

Ranking_windowed_functionContext.prototype.RANK = function() {
    return this.getToken(TSqlParser.RANK, 0);
};

Ranking_windowed_functionContext.prototype.DENSE_RANK = function() {
    return this.getToken(TSqlParser.DENSE_RANK, 0);
};

Ranking_windowed_functionContext.prototype.ROW_NUMBER = function() {
    return this.getToken(TSqlParser.ROW_NUMBER, 0);
};

Ranking_windowed_functionContext.prototype.NTILE = function() {
    return this.getToken(TSqlParser.NTILE, 0);
};

Ranking_windowed_functionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Ranking_windowed_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterRanking_windowed_function(this);
	}
};

Ranking_windowed_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitRanking_windowed_function(this);
	}
};




TSqlParser.Ranking_windowed_functionContext = Ranking_windowed_functionContext;

TSqlParser.prototype.ranking_windowed_function = function() {

    var localctx = new Ranking_windowed_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 848, TSqlParser.RULE_ranking_windowed_function);
    var _la = 0; // Token type
    try {
        this.state = 9814;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.DENSE_RANK:
        case TSqlParser.RANK:
        case TSqlParser.ROW_NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 9804;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.DENSE_RANK || _la===TSqlParser.RANK || _la===TSqlParser.ROW_NUMBER)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 9805;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9806;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 9807;
            this.over_clause();
            break;
        case TSqlParser.NTILE:
            this.enterOuterAlt(localctx, 2);
            this.state = 9808;
            this.match(TSqlParser.NTILE);
            this.state = 9809;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9810;
            this.expression(0);
            this.state = 9811;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 9812;
            this.over_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Aggregate_windowed_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_aggregate_windowed_function;
    return this;
}

Aggregate_windowed_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Aggregate_windowed_functionContext.prototype.constructor = Aggregate_windowed_functionContext;

Aggregate_windowed_functionContext.prototype.all_distinct_expression = function() {
    return this.getTypedRuleContext(All_distinct_expressionContext,0);
};

Aggregate_windowed_functionContext.prototype.AVG = function() {
    return this.getToken(TSqlParser.AVG, 0);
};

Aggregate_windowed_functionContext.prototype.MAX = function() {
    return this.getToken(TSqlParser.MAX, 0);
};

Aggregate_windowed_functionContext.prototype.MIN = function() {
    return this.getToken(TSqlParser.MIN, 0);
};

Aggregate_windowed_functionContext.prototype.SUM = function() {
    return this.getToken(TSqlParser.SUM, 0);
};

Aggregate_windowed_functionContext.prototype.STDEV = function() {
    return this.getToken(TSqlParser.STDEV, 0);
};

Aggregate_windowed_functionContext.prototype.STDEVP = function() {
    return this.getToken(TSqlParser.STDEVP, 0);
};

Aggregate_windowed_functionContext.prototype.VAR = function() {
    return this.getToken(TSqlParser.VAR, 0);
};

Aggregate_windowed_functionContext.prototype.VARP = function() {
    return this.getToken(TSqlParser.VARP, 0);
};

Aggregate_windowed_functionContext.prototype.over_clause = function() {
    return this.getTypedRuleContext(Over_clauseContext,0);
};

Aggregate_windowed_functionContext.prototype.COUNT = function() {
    return this.getToken(TSqlParser.COUNT, 0);
};

Aggregate_windowed_functionContext.prototype.COUNT_BIG = function() {
    return this.getToken(TSqlParser.COUNT_BIG, 0);
};

Aggregate_windowed_functionContext.prototype.CHECKSUM_AGG = function() {
    return this.getToken(TSqlParser.CHECKSUM_AGG, 0);
};

Aggregate_windowed_functionContext.prototype.GROUPING = function() {
    return this.getToken(TSqlParser.GROUPING, 0);
};

Aggregate_windowed_functionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Aggregate_windowed_functionContext.prototype.GROUPING_ID = function() {
    return this.getToken(TSqlParser.GROUPING_ID, 0);
};

Aggregate_windowed_functionContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Aggregate_windowed_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAggregate_windowed_function(this);
	}
};

Aggregate_windowed_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAggregate_windowed_function(this);
	}
};




TSqlParser.Aggregate_windowed_functionContext = Aggregate_windowed_functionContext;

TSqlParser.prototype.aggregate_windowed_function = function() {

    var localctx = new Aggregate_windowed_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 850, TSqlParser.RULE_aggregate_windowed_function);
    var _la = 0; // Token type
    try {
        this.state = 9848;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.AVG:
        case TSqlParser.MAX:
        case TSqlParser.MIN:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
            this.enterOuterAlt(localctx, 1);
            this.state = 9816;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.AVG || _la===TSqlParser.MAX || _la===TSqlParser.MIN || ((((_la - 721)) & ~0x1f) == 0 && ((1 << (_la - 721)) & ((1 << (TSqlParser.STDEV - 721)) | (1 << (TSqlParser.STDEVP - 721)) | (1 << (TSqlParser.SUM - 721)))) !== 0) || _la===TSqlParser.VAR || _la===TSqlParser.VARP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 9817;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9818;
            this.all_distinct_expression();
            this.state = 9819;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 9821;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1370,this._ctx);
            if(la_===1) {
                this.state = 9820;
                this.over_clause();

            }
            break;
        case TSqlParser.COUNT:
        case TSqlParser.COUNT_BIG:
            this.enterOuterAlt(localctx, 2);
            this.state = 9823;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.COUNT || _la===TSqlParser.COUNT_BIG)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 9824;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9827;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.STAR:
                this.state = 9825;
                this.match(TSqlParser.STAR);
                break;
            case TSqlParser.ALL:
            case TSqlParser.BLOCKING_HIERARCHY:
            case TSqlParser.CALLED:
            case TSqlParser.CASE:
            case TSqlParser.COALESCE:
            case TSqlParser.CONVERT:
            case TSqlParser.CURRENT_TIMESTAMP:
            case TSqlParser.CURRENT_USER:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.DEFAULT:
            case TSqlParser.DISTINCT:
            case TSqlParser.EVENTDATA:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.IDENTITY:
            case TSqlParser.ISNULL:
            case TSqlParser.KEY:
            case TSqlParser.LEFT:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.NULL:
            case TSqlParser.NULLIF:
            case TSqlParser.OFFSETS:
            case TSqlParser.OVER:
            case TSqlParser.PAGE:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.RIGHT:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SERVER:
            case TSqlParser.SESSION_USER:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.SYSTEM_USER:
            case TSqlParser.TARGET:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.ANSI_NULLS:
            case TSqlParser.ANSI_PADDING:
            case TSqlParser.ANSI_WARNINGS:
            case TSqlParser.APPLY:
            case TSqlParser.ARITHABORT:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.BINARY_CHECKSUM:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.COMPATIBILITY_LEVEL:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DATEADD:
            case TSqlParser.DATEDIFF:
            case TSqlParser.DATENAME:
            case TSqlParser.DATEPART:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FIRST_VALUE:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GETDATE:
            case TSqlParser.GETUTCDATE:
            case TSqlParser.GLOBAL:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAG:
            case TSqlParser.LAST:
            case TSqlParser.LAST_VALUE:
            case TSqlParser.LEAD:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MIN_ACTIVE_ROWVERSION:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.QUOTED_IDENTIFIER:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STATUS:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.STUFF:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.LOCAL_ID:
            case TSqlParser.DECIMAL:
            case TSqlParser.ID:
            case TSqlParser.STRING:
            case TSqlParser.BINARY:
            case TSqlParser.FLOAT:
            case TSqlParser.REAL:
            case TSqlParser.DOLLAR:
            case TSqlParser.LR_BRACKET:
            case TSqlParser.PLUS:
            case TSqlParser.MINUS:
            case TSqlParser.BIT_NOT:
                this.state = 9826;
                this.all_distinct_expression();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 9829;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 9831;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1372,this._ctx);
            if(la_===1) {
                this.state = 9830;
                this.over_clause();

            }
            break;
        case TSqlParser.CHECKSUM_AGG:
            this.enterOuterAlt(localctx, 3);
            this.state = 9833;
            this.match(TSqlParser.CHECKSUM_AGG);
            this.state = 9834;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9835;
            this.all_distinct_expression();
            this.state = 9836;
            this.match(TSqlParser.RR_BRACKET);
            break;
        case TSqlParser.GROUPING:
            this.enterOuterAlt(localctx, 4);
            this.state = 9838;
            this.match(TSqlParser.GROUPING);
            this.state = 9839;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9840;
            this.expression(0);
            this.state = 9841;
            this.match(TSqlParser.RR_BRACKET);
            break;
        case TSqlParser.GROUPING_ID:
            this.enterOuterAlt(localctx, 5);
            this.state = 9843;
            this.match(TSqlParser.GROUPING_ID);
            this.state = 9844;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9845;
            this.expression_list();
            this.state = 9846;
            this.match(TSqlParser.RR_BRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Analytic_windowed_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_analytic_windowed_function;
    return this;
}

Analytic_windowed_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Analytic_windowed_functionContext.prototype.constructor = Analytic_windowed_functionContext;

Analytic_windowed_functionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

Analytic_windowed_functionContext.prototype.over_clause = function() {
    return this.getTypedRuleContext(Over_clauseContext,0);
};

Analytic_windowed_functionContext.prototype.FIRST_VALUE = function() {
    return this.getToken(TSqlParser.FIRST_VALUE, 0);
};

Analytic_windowed_functionContext.prototype.LAST_VALUE = function() {
    return this.getToken(TSqlParser.LAST_VALUE, 0);
};

Analytic_windowed_functionContext.prototype.LAG = function() {
    return this.getToken(TSqlParser.LAG, 0);
};

Analytic_windowed_functionContext.prototype.LEAD = function() {
    return this.getToken(TSqlParser.LEAD, 0);
};

Analytic_windowed_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAnalytic_windowed_function(this);
	}
};

Analytic_windowed_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAnalytic_windowed_function(this);
	}
};




TSqlParser.Analytic_windowed_functionContext = Analytic_windowed_functionContext;

TSqlParser.prototype.analytic_windowed_function = function() {

    var localctx = new Analytic_windowed_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 852, TSqlParser.RULE_analytic_windowed_function);
    var _la = 0; // Token type
    try {
        this.state = 9870;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.FIRST_VALUE:
        case TSqlParser.LAST_VALUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 9850;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.FIRST_VALUE || _la===TSqlParser.LAST_VALUE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 9851;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9852;
            this.expression(0);
            this.state = 9853;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 9854;
            this.over_clause();
            break;
        case TSqlParser.LAG:
        case TSqlParser.LEAD:
            this.enterOuterAlt(localctx, 2);
            this.state = 9856;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.LAG || _la===TSqlParser.LEAD)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 9857;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 9858;
            this.expression(0);
            this.state = 9865;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 9859;
                this.match(TSqlParser.COMMA);
                this.state = 9860;
                this.expression(0);
                this.state = 9863;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 9861;
                    this.match(TSqlParser.COMMA);
                    this.state = 9862;
                    this.expression(0);
                }

            }

            this.state = 9867;
            this.match(TSqlParser.RR_BRACKET);
            this.state = 9868;
            this.over_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function All_distinct_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_all_distinct_expression;
    return this;
}

All_distinct_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
All_distinct_expressionContext.prototype.constructor = All_distinct_expressionContext;

All_distinct_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

All_distinct_expressionContext.prototype.ALL = function() {
    return this.getToken(TSqlParser.ALL, 0);
};

All_distinct_expressionContext.prototype.DISTINCT = function() {
    return this.getToken(TSqlParser.DISTINCT, 0);
};

All_distinct_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAll_distinct_expression(this);
	}
};

All_distinct_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAll_distinct_expression(this);
	}
};




TSqlParser.All_distinct_expressionContext = All_distinct_expressionContext;

TSqlParser.prototype.all_distinct_expression = function() {

    var localctx = new All_distinct_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 854, TSqlParser.RULE_all_distinct_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9873;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.ALL || _la===TSqlParser.DISTINCT) {
            this.state = 9872;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.ALL || _la===TSqlParser.DISTINCT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 9875;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Over_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_over_clause;
    return this;
}

Over_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Over_clauseContext.prototype.constructor = Over_clauseContext;

Over_clauseContext.prototype.OVER = function() {
    return this.getToken(TSqlParser.OVER, 0);
};

Over_clauseContext.prototype.PARTITION = function() {
    return this.getToken(TSqlParser.PARTITION, 0);
};

Over_clauseContext.prototype.BY = function() {
    return this.getToken(TSqlParser.BY, 0);
};

Over_clauseContext.prototype.expression_list = function() {
    return this.getTypedRuleContext(Expression_listContext,0);
};

Over_clauseContext.prototype.order_by_clause = function() {
    return this.getTypedRuleContext(Order_by_clauseContext,0);
};

Over_clauseContext.prototype.row_or_range_clause = function() {
    return this.getTypedRuleContext(Row_or_range_clauseContext,0);
};

Over_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterOver_clause(this);
	}
};

Over_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitOver_clause(this);
	}
};




TSqlParser.Over_clauseContext = Over_clauseContext;

TSqlParser.prototype.over_clause = function() {

    var localctx = new Over_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 856, TSqlParser.RULE_over_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9877;
        this.match(TSqlParser.OVER);
        this.state = 9878;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 9882;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.PARTITION) {
            this.state = 9879;
            this.match(TSqlParser.PARTITION);
            this.state = 9880;
            this.match(TSqlParser.BY);
            this.state = 9881;
            this.expression_list();
        }

        this.state = 9885;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.ORDER) {
            this.state = 9884;
            this.order_by_clause();
        }

        this.state = 9888;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.RANGE || _la===TSqlParser.ROWS) {
            this.state = 9887;
            this.row_or_range_clause();
        }

        this.state = 9890;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Row_or_range_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_row_or_range_clause;
    return this;
}

Row_or_range_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Row_or_range_clauseContext.prototype.constructor = Row_or_range_clauseContext;

Row_or_range_clauseContext.prototype.window_frame_extent = function() {
    return this.getTypedRuleContext(Window_frame_extentContext,0);
};

Row_or_range_clauseContext.prototype.ROWS = function() {
    return this.getToken(TSqlParser.ROWS, 0);
};

Row_or_range_clauseContext.prototype.RANGE = function() {
    return this.getToken(TSqlParser.RANGE, 0);
};

Row_or_range_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterRow_or_range_clause(this);
	}
};

Row_or_range_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitRow_or_range_clause(this);
	}
};




TSqlParser.Row_or_range_clauseContext = Row_or_range_clauseContext;

TSqlParser.prototype.row_or_range_clause = function() {

    var localctx = new Row_or_range_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 858, TSqlParser.RULE_row_or_range_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9892;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.RANGE || _la===TSqlParser.ROWS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 9893;
        this.window_frame_extent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Window_frame_extentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_window_frame_extent;
    return this;
}

Window_frame_extentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Window_frame_extentContext.prototype.constructor = Window_frame_extentContext;

Window_frame_extentContext.prototype.window_frame_preceding = function() {
    return this.getTypedRuleContext(Window_frame_precedingContext,0);
};

Window_frame_extentContext.prototype.BETWEEN = function() {
    return this.getToken(TSqlParser.BETWEEN, 0);
};

Window_frame_extentContext.prototype.window_frame_bound = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Window_frame_boundContext);
    } else {
        return this.getTypedRuleContext(Window_frame_boundContext,i);
    }
};

Window_frame_extentContext.prototype.AND = function() {
    return this.getToken(TSqlParser.AND, 0);
};

Window_frame_extentContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterWindow_frame_extent(this);
	}
};

Window_frame_extentContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitWindow_frame_extent(this);
	}
};




TSqlParser.Window_frame_extentContext = Window_frame_extentContext;

TSqlParser.prototype.window_frame_extent = function() {

    var localctx = new Window_frame_extentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 860, TSqlParser.RULE_window_frame_extent);
    try {
        this.state = 9901;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CURRENT:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.DECIMAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 9895;
            this.window_frame_preceding();
            break;
        case TSqlParser.BETWEEN:
            this.enterOuterAlt(localctx, 2);
            this.state = 9896;
            this.match(TSqlParser.BETWEEN);
            this.state = 9897;
            this.window_frame_bound();
            this.state = 9898;
            this.match(TSqlParser.AND);
            this.state = 9899;
            this.window_frame_bound();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Window_frame_boundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_window_frame_bound;
    return this;
}

Window_frame_boundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Window_frame_boundContext.prototype.constructor = Window_frame_boundContext;

Window_frame_boundContext.prototype.window_frame_preceding = function() {
    return this.getTypedRuleContext(Window_frame_precedingContext,0);
};

Window_frame_boundContext.prototype.window_frame_following = function() {
    return this.getTypedRuleContext(Window_frame_followingContext,0);
};

Window_frame_boundContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterWindow_frame_bound(this);
	}
};

Window_frame_boundContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitWindow_frame_bound(this);
	}
};




TSqlParser.Window_frame_boundContext = Window_frame_boundContext;

TSqlParser.prototype.window_frame_bound = function() {

    var localctx = new Window_frame_boundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 862, TSqlParser.RULE_window_frame_bound);
    try {
        this.state = 9905;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1382,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 9903;
            this.window_frame_preceding();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 9904;
            this.window_frame_following();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Window_frame_precedingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_window_frame_preceding;
    return this;
}

Window_frame_precedingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Window_frame_precedingContext.prototype.constructor = Window_frame_precedingContext;

Window_frame_precedingContext.prototype.UNBOUNDED = function() {
    return this.getToken(TSqlParser.UNBOUNDED, 0);
};

Window_frame_precedingContext.prototype.PRECEDING = function() {
    return this.getToken(TSqlParser.PRECEDING, 0);
};

Window_frame_precedingContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Window_frame_precedingContext.prototype.CURRENT = function() {
    return this.getToken(TSqlParser.CURRENT, 0);
};

Window_frame_precedingContext.prototype.ROW = function() {
    return this.getToken(TSqlParser.ROW, 0);
};

Window_frame_precedingContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterWindow_frame_preceding(this);
	}
};

Window_frame_precedingContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitWindow_frame_preceding(this);
	}
};




TSqlParser.Window_frame_precedingContext = Window_frame_precedingContext;

TSqlParser.prototype.window_frame_preceding = function() {

    var localctx = new Window_frame_precedingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 864, TSqlParser.RULE_window_frame_preceding);
    try {
        this.state = 9913;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.UNBOUNDED:
            this.enterOuterAlt(localctx, 1);
            this.state = 9907;
            this.match(TSqlParser.UNBOUNDED);
            this.state = 9908;
            this.match(TSqlParser.PRECEDING);
            break;
        case TSqlParser.DECIMAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 9909;
            this.match(TSqlParser.DECIMAL);
            this.state = 9910;
            this.match(TSqlParser.PRECEDING);
            break;
        case TSqlParser.CURRENT:
            this.enterOuterAlt(localctx, 3);
            this.state = 9911;
            this.match(TSqlParser.CURRENT);
            this.state = 9912;
            this.match(TSqlParser.ROW);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Window_frame_followingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_window_frame_following;
    return this;
}

Window_frame_followingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Window_frame_followingContext.prototype.constructor = Window_frame_followingContext;

Window_frame_followingContext.prototype.UNBOUNDED = function() {
    return this.getToken(TSqlParser.UNBOUNDED, 0);
};

Window_frame_followingContext.prototype.FOLLOWING = function() {
    return this.getToken(TSqlParser.FOLLOWING, 0);
};

Window_frame_followingContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Window_frame_followingContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterWindow_frame_following(this);
	}
};

Window_frame_followingContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitWindow_frame_following(this);
	}
};




TSqlParser.Window_frame_followingContext = Window_frame_followingContext;

TSqlParser.prototype.window_frame_following = function() {

    var localctx = new Window_frame_followingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 866, TSqlParser.RULE_window_frame_following);
    try {
        this.state = 9919;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.UNBOUNDED:
            this.enterOuterAlt(localctx, 1);
            this.state = 9915;
            this.match(TSqlParser.UNBOUNDED);
            this.state = 9916;
            this.match(TSqlParser.FOLLOWING);
            break;
        case TSqlParser.DECIMAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 9917;
            this.match(TSqlParser.DECIMAL);
            this.state = 9918;
            this.match(TSqlParser.FOLLOWING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_database_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_create_database_option;
    return this;
}

Create_database_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_database_optionContext.prototype.constructor = Create_database_optionContext;

Create_database_optionContext.prototype.FILESTREAM = function() {
    return this.getToken(TSqlParser.FILESTREAM, 0);
};

Create_database_optionContext.prototype.database_filestream_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Database_filestream_optionContext);
    } else {
        return this.getTypedRuleContext(Database_filestream_optionContext,i);
    }
};

Create_database_optionContext.prototype.DEFAULT_LANGUAGE = function() {
    return this.getToken(TSqlParser.DEFAULT_LANGUAGE, 0);
};

Create_database_optionContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Create_database_optionContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Create_database_optionContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Create_database_optionContext.prototype.DEFAULT_FULLTEXT_LANGUAGE = function() {
    return this.getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0);
};

Create_database_optionContext.prototype.NESTED_TRIGGERS = function() {
    return this.getToken(TSqlParser.NESTED_TRIGGERS, 0);
};

Create_database_optionContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Create_database_optionContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Create_database_optionContext.prototype.TRANSFORM_NOISE_WORDS = function() {
    return this.getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0);
};

Create_database_optionContext.prototype.TWO_DIGIT_YEAR_CUTOFF = function() {
    return this.getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0);
};

Create_database_optionContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Create_database_optionContext.prototype.DB_CHAINING = function() {
    return this.getToken(TSqlParser.DB_CHAINING, 0);
};

Create_database_optionContext.prototype.TRUSTWORTHY = function() {
    return this.getToken(TSqlParser.TRUSTWORTHY, 0);
};

Create_database_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCreate_database_option(this);
	}
};

Create_database_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCreate_database_option(this);
	}
};




TSqlParser.Create_database_optionContext = Create_database_optionContext;

TSqlParser.prototype.create_database_option = function() {

    var localctx = new Create_database_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 868, TSqlParser.RULE_create_database_option);
    var _la = 0; // Token type
    try {
        this.state = 9955;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.FILESTREAM:
            this.enterOuterAlt(localctx, 1);
            this.state = 9921;
            this.match(TSqlParser.FILESTREAM);

            this.state = 9922;
            this.database_filestream_option();
            this.state = 9927;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,1385,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 9923;
                    this.match(TSqlParser.COMMA);
                    this.state = 9924;
                    this.database_filestream_option(); 
                }
                this.state = 9929;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,1385,this._ctx);
            }

            break;
        case TSqlParser.DEFAULT_LANGUAGE:
            this.enterOuterAlt(localctx, 2);
            this.state = 9930;
            this.match(TSqlParser.DEFAULT_LANGUAGE);
            this.state = 9931;
            this.match(TSqlParser.EQUAL);
            this.state = 9934;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.CALLED:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.EVENTDATA:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.KEY:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.OFFSETS:
            case TSqlParser.PAGE:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SERVER:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.TARGET:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.APPLY:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GLOBAL:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAST:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.ID:
                this.state = 9932;
                this.id();
                break;
            case TSqlParser.STRING:
                this.state = 9933;
                this.match(TSqlParser.STRING);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case TSqlParser.DEFAULT_FULLTEXT_LANGUAGE:
            this.enterOuterAlt(localctx, 3);
            this.state = 9936;
            this.match(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE);
            this.state = 9937;
            this.match(TSqlParser.EQUAL);
            this.state = 9940;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.CALLED:
            case TSqlParser.DATA_COMPRESSION:
            case TSqlParser.EVENTDATA:
            case TSqlParser.FILENAME:
            case TSqlParser.FILLFACTOR:
            case TSqlParser.FORCESEEK:
            case TSqlParser.KEY:
            case TSqlParser.MASTER:
            case TSqlParser.MAX_MEMORY:
            case TSqlParser.OFFSETS:
            case TSqlParser.PAGE:
            case TSqlParser.PUBLIC:
            case TSqlParser.RAW:
            case TSqlParser.RETURN:
            case TSqlParser.RETURNS:
            case TSqlParser.ROWCOUNT:
            case TSqlParser.SAFETY:
            case TSqlParser.SERVER:
            case TSqlParser.SID:
            case TSqlParser.SOURCE:
            case TSqlParser.STATE:
            case TSqlParser.TARGET:
            case TSqlParser.ABSOLUTE:
            case TSqlParser.ACTIVE:
            case TSqlParser.ADDRESS:
            case TSqlParser.APPLY:
            case TSqlParser.AUTO:
            case TSqlParser.AVAILABILITY:
            case TSqlParser.AVG:
            case TSqlParser.CALLER:
            case TSqlParser.CAST:
            case TSqlParser.CATCH:
            case TSqlParser.CHECKSUM_AGG:
            case TSqlParser.COMMITTED:
            case TSqlParser.CONCAT:
            case TSqlParser.CONCAT_NULL_YIELDS_NULL:
            case TSqlParser.CONTROL:
            case TSqlParser.COOKIE:
            case TSqlParser.COUNT:
            case TSqlParser.COUNTER:
            case TSqlParser.COUNT_BIG:
            case TSqlParser.DELAY:
            case TSqlParser.DELETED:
            case TSqlParser.DENSE_RANK:
            case TSqlParser.DISABLE:
            case TSqlParser.DYNAMIC:
            case TSqlParser.ENCRYPTION:
            case TSqlParser.EXPAND:
            case TSqlParser.FAST:
            case TSqlParser.FAST_FORWARD:
            case TSqlParser.FIRST:
            case TSqlParser.FOLLOWING:
            case TSqlParser.FORCE:
            case TSqlParser.FORCED:
            case TSqlParser.FORWARD_ONLY:
            case TSqlParser.FULLSCAN:
            case TSqlParser.GLOBAL:
            case TSqlParser.GROUPING:
            case TSqlParser.GROUPING_ID:
            case TSqlParser.HASH:
            case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
            case TSqlParser.IMPERSONATE:
            case TSqlParser.INPUT:
            case TSqlParser.INSENSITIVE:
            case TSqlParser.INSERTED:
            case TSqlParser.ISOLATION:
            case TSqlParser.KEEP:
            case TSqlParser.KEEPFIXED:
            case TSqlParser.KEYSET:
            case TSqlParser.LAST:
            case TSqlParser.LEVEL:
            case TSqlParser.LOCAL:
            case TSqlParser.LOCATION:
            case TSqlParser.LOCK_ESCALATION:
            case TSqlParser.LOGIN:
            case TSqlParser.LOOP:
            case TSqlParser.MARK:
            case TSqlParser.MAX:
            case TSqlParser.MAX_ROLLOVER_FILES:
            case TSqlParser.MAXDOP:
            case TSqlParser.MAXRECURSION:
            case TSqlParser.MIN:
            case TSqlParser.MODIFY:
            case TSqlParser.NAME:
            case TSqlParser.NEXT:
            case TSqlParser.NOCOUNT:
            case TSqlParser.NOEXPAND:
            case TSqlParser.NORECOMPUTE:
            case TSqlParser.NTILE:
            case TSqlParser.NUMBER:
            case TSqlParser.OFFSET:
            case TSqlParser.ONLINE:
            case TSqlParser.ONLY:
            case TSqlParser.OPTIMISTIC:
            case TSqlParser.OPTIMIZE:
            case TSqlParser.OUT:
            case TSqlParser.OUTPUT:
            case TSqlParser.OWNER:
            case TSqlParser.PARAMETERIZATION:
            case TSqlParser.PARTITION:
            case TSqlParser.PATH:
            case TSqlParser.PRECEDING:
            case TSqlParser.PRIOR:
            case TSqlParser.PRIVILEGES:
            case TSqlParser.RANGE:
            case TSqlParser.RANK:
            case TSqlParser.READONLY:
            case TSqlParser.READ_ONLY:
            case TSqlParser.RECOMPILE:
            case TSqlParser.RELATIVE:
            case TSqlParser.REMOTE:
            case TSqlParser.REPEATABLE:
            case TSqlParser.ROBUST:
            case TSqlParser.ROOT:
            case TSqlParser.ROW:
            case TSqlParser.ROWGUID:
            case TSqlParser.ROWS:
            case TSqlParser.ROW_NUMBER:
            case TSqlParser.SAMPLE:
            case TSqlParser.SCHEMABINDING:
            case TSqlParser.SCROLL:
            case TSqlParser.SCROLL_LOCKS:
            case TSqlParser.SELF:
            case TSqlParser.SERIALIZABLE:
            case TSqlParser.SIMPLE:
            case TSqlParser.SIZE:
            case TSqlParser.SNAPSHOT:
            case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
            case TSqlParser.STATIC:
            case TSqlParser.STATS_STREAM:
            case TSqlParser.STDEV:
            case TSqlParser.STDEVP:
            case TSqlParser.SUM:
            case TSqlParser.TEXTIMAGE_ON:
            case TSqlParser.THROW:
            case TSqlParser.TIES:
            case TSqlParser.TIME:
            case TSqlParser.TRY:
            case TSqlParser.TYPE:
            case TSqlParser.TYPE_WARNING:
            case TSqlParser.UNBOUNDED:
            case TSqlParser.UNCOMMITTED:
            case TSqlParser.UNKNOWN:
            case TSqlParser.USING:
            case TSqlParser.VALUE:
            case TSqlParser.VAR:
            case TSqlParser.VARP:
            case TSqlParser.VIEWS:
            case TSqlParser.VIEW_METADATA:
            case TSqlParser.WORK:
            case TSqlParser.XML:
            case TSqlParser.XMLNAMESPACES:
            case TSqlParser.DOUBLE_QUOTE_ID:
            case TSqlParser.SQUARE_BRACKET_ID:
            case TSqlParser.ID:
                this.state = 9938;
                this.id();
                break;
            case TSqlParser.STRING:
                this.state = 9939;
                this.match(TSqlParser.STRING);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case TSqlParser.NESTED_TRIGGERS:
            this.enterOuterAlt(localctx, 4);
            this.state = 9942;
            this.match(TSqlParser.NESTED_TRIGGERS);
            this.state = 9943;
            this.match(TSqlParser.EQUAL);
            this.state = 9944;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case TSqlParser.TRANSFORM_NOISE_WORDS:
            this.enterOuterAlt(localctx, 5);
            this.state = 9945;
            this.match(TSqlParser.TRANSFORM_NOISE_WORDS);
            this.state = 9946;
            this.match(TSqlParser.EQUAL);
            this.state = 9947;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case TSqlParser.TWO_DIGIT_YEAR_CUTOFF:
            this.enterOuterAlt(localctx, 6);
            this.state = 9948;
            this.match(TSqlParser.TWO_DIGIT_YEAR_CUTOFF);
            this.state = 9949;
            this.match(TSqlParser.EQUAL);
            this.state = 9950;
            this.match(TSqlParser.DECIMAL);
            break;
        case TSqlParser.DB_CHAINING:
            this.enterOuterAlt(localctx, 7);
            this.state = 9951;
            this.match(TSqlParser.DB_CHAINING);
            this.state = 9952;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case TSqlParser.TRUSTWORTHY:
            this.enterOuterAlt(localctx, 8);
            this.state = 9953;
            this.match(TSqlParser.TRUSTWORTHY);
            this.state = 9954;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Database_filestream_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_database_filestream_option;
    return this;
}

Database_filestream_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Database_filestream_optionContext.prototype.constructor = Database_filestream_optionContext;

Database_filestream_optionContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

Database_filestream_optionContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

Database_filestream_optionContext.prototype.NON_TRANSACTED_ACCESS = function() {
    return this.getToken(TSqlParser.NON_TRANSACTED_ACCESS, 0);
};

Database_filestream_optionContext.prototype.EQUAL = function() {
    return this.getToken(TSqlParser.EQUAL, 0);
};

Database_filestream_optionContext.prototype.DIRECTORY_NAME = function() {
    return this.getToken(TSqlParser.DIRECTORY_NAME, 0);
};

Database_filestream_optionContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Database_filestream_optionContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Database_filestream_optionContext.prototype.READ_ONLY = function() {
    return this.getToken(TSqlParser.READ_ONLY, 0);
};

Database_filestream_optionContext.prototype.FULL = function() {
    return this.getToken(TSqlParser.FULL, 0);
};

Database_filestream_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDatabase_filestream_option(this);
	}
};

Database_filestream_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDatabase_filestream_option(this);
	}
};




TSqlParser.Database_filestream_optionContext = Database_filestream_optionContext;

TSqlParser.prototype.database_filestream_option = function() {

    var localctx = new Database_filestream_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 870, TSqlParser.RULE_database_filestream_option);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9957;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 9964;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.NON_TRANSACTED_ACCESS:
            this.state = 9958;
            this.match(TSqlParser.NON_TRANSACTED_ACCESS);
            this.state = 9959;
            this.match(TSqlParser.EQUAL);
            this.state = 9960;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.FULL || _la===TSqlParser.OFF || _la===TSqlParser.READ_ONLY)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case TSqlParser.DIRECTORY_NAME:
            this.state = 9961;
            this.match(TSqlParser.DIRECTORY_NAME);
            this.state = 9962;
            this.match(TSqlParser.EQUAL);
            this.state = 9963;
            this.match(TSqlParser.STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 9966;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Database_file_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_database_file_spec;
    return this;
}

Database_file_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Database_file_specContext.prototype.constructor = Database_file_specContext;

Database_file_specContext.prototype.file_group = function() {
    return this.getTypedRuleContext(File_groupContext,0);
};

Database_file_specContext.prototype.file_spec = function() {
    return this.getTypedRuleContext(File_specContext,0);
};

Database_file_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDatabase_file_spec(this);
	}
};

Database_file_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDatabase_file_spec(this);
	}
};




TSqlParser.Database_file_specContext = Database_file_specContext;

TSqlParser.prototype.database_file_spec = function() {

    var localctx = new Database_file_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 872, TSqlParser.RULE_database_file_spec);
    try {
        this.state = 9970;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.FILEGROUP:
            this.enterOuterAlt(localctx, 1);
            this.state = 9968;
            this.file_group();
            break;
        case TSqlParser.LR_BRACKET:
            this.enterOuterAlt(localctx, 2);
            this.state = 9969;
            this.file_spec();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function File_groupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_file_group;
    return this;
}

File_groupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_groupContext.prototype.constructor = File_groupContext;

File_groupContext.prototype.FILEGROUP = function() {
    return this.getToken(TSqlParser.FILEGROUP, 0);
};

File_groupContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

File_groupContext.prototype.file_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(File_specContext);
    } else {
        return this.getTypedRuleContext(File_specContext,i);
    }
};

File_groupContext.prototype.CONTAINS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.CONTAINS);
    } else {
        return this.getToken(TSqlParser.CONTAINS, i);
    }
};


File_groupContext.prototype.FILESTREAM = function() {
    return this.getToken(TSqlParser.FILESTREAM, 0);
};

File_groupContext.prototype.DEFAULT = function() {
    return this.getToken(TSqlParser.DEFAULT, 0);
};

File_groupContext.prototype.MEMORY_OPTIMIZED_DATA = function() {
    return this.getToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0);
};

File_groupContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterFile_group(this);
	}
};

File_groupContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitFile_group(this);
	}
};




TSqlParser.File_groupContext = File_groupContext;

TSqlParser.prototype.file_group = function() {

    var localctx = new File_groupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 874, TSqlParser.RULE_file_group);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9972;
        this.match(TSqlParser.FILEGROUP);
        this.state = 9973;
        this.id();
        this.state = 9976;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1391,this._ctx);
        if(la_===1) {
            this.state = 9974;
            this.match(TSqlParser.CONTAINS);
            this.state = 9975;
            this.match(TSqlParser.FILESTREAM);

        }
        this.state = 9979;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.DEFAULT) {
            this.state = 9978;
            this.match(TSqlParser.DEFAULT);
        }

        this.state = 9983;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.CONTAINS) {
            this.state = 9981;
            this.match(TSqlParser.CONTAINS);
            this.state = 9982;
            this.match(TSqlParser.MEMORY_OPTIMIZED_DATA);
        }

        this.state = 9985;
        this.file_spec();
        this.state = 9990;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,1394,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 9986;
                this.match(TSqlParser.COMMA);
                this.state = 9987;
                this.file_spec(); 
            }
            this.state = 9992;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,1394,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function File_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_file_spec;
    this.file = null; // Token
    return this;
}

File_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_specContext.prototype.constructor = File_specContext;

File_specContext.prototype.LR_BRACKET = function() {
    return this.getToken(TSqlParser.LR_BRACKET, 0);
};

File_specContext.prototype.NAME = function() {
    return this.getToken(TSqlParser.NAME, 0);
};

File_specContext.prototype.EQUAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.EQUAL);
    } else {
        return this.getToken(TSqlParser.EQUAL, i);
    }
};


File_specContext.prototype.FILENAME = function() {
    return this.getToken(TSqlParser.FILENAME, 0);
};

File_specContext.prototype.RR_BRACKET = function() {
    return this.getToken(TSqlParser.RR_BRACKET, 0);
};

File_specContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


File_specContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

File_specContext.prototype.SIZE = function() {
    return this.getToken(TSqlParser.SIZE, 0);
};

File_specContext.prototype.file_size = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(File_sizeContext);
    } else {
        return this.getTypedRuleContext(File_sizeContext,i);
    }
};

File_specContext.prototype.MAXSIZE = function() {
    return this.getToken(TSqlParser.MAXSIZE, 0);
};

File_specContext.prototype.FILEGROWTH = function() {
    return this.getToken(TSqlParser.FILEGROWTH, 0);
};

File_specContext.prototype.UNLIMITED = function() {
    return this.getToken(TSqlParser.UNLIMITED, 0);
};

File_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterFile_spec(this);
	}
};

File_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitFile_spec(this);
	}
};




TSqlParser.File_specContext = File_specContext;

TSqlParser.prototype.file_spec = function() {

    var localctx = new File_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 876, TSqlParser.RULE_file_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 9993;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 9994;
        this.match(TSqlParser.NAME);
        this.state = 9995;
        this.match(TSqlParser.EQUAL);
        this.state = 9998;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.state = 9996;
            this.id();
            break;
        case TSqlParser.STRING:
            this.state = 9997;
            this.match(TSqlParser.STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 10001;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 10000;
            this.match(TSqlParser.COMMA);
        }

        this.state = 10003;
        this.match(TSqlParser.FILENAME);
        this.state = 10004;
        this.match(TSqlParser.EQUAL);
        this.state = 10005;
        localctx.file = this.match(TSqlParser.STRING);
        this.state = 10007;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 10006;
            this.match(TSqlParser.COMMA);
        }

        this.state = 10015;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.SIZE) {
            this.state = 10009;
            this.match(TSqlParser.SIZE);
            this.state = 10010;
            this.match(TSqlParser.EQUAL);
            this.state = 10011;
            this.file_size();
            this.state = 10013;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 10012;
                this.match(TSqlParser.COMMA);
            }

        }

        this.state = 10026;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.MAXSIZE) {
            this.state = 10017;
            this.match(TSqlParser.MAXSIZE);
            this.state = 10018;
            this.match(TSqlParser.EQUAL);
            this.state = 10021;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case TSqlParser.DECIMAL:
                this.state = 10019;
                this.file_size();
                break;
            case TSqlParser.UNLIMITED:
                this.state = 10020;
                this.match(TSqlParser.UNLIMITED);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 10024;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 10023;
                this.match(TSqlParser.COMMA);
            }

        }

        this.state = 10034;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.FILEGROWTH) {
            this.state = 10028;
            this.match(TSqlParser.FILEGROWTH);
            this.state = 10029;
            this.match(TSqlParser.EQUAL);
            this.state = 10030;
            this.file_size();
            this.state = 10032;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 10031;
                this.match(TSqlParser.COMMA);
            }

        }

        this.state = 10036;
        this.match(TSqlParser.RR_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Entity_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_entity_name;
    this.server = null; // IdContext
    this.database = null; // IdContext
    this.schema = null; // IdContext
    this.table = null; // IdContext
    return this;
}

Entity_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_nameContext.prototype.constructor = Entity_nameContext;

Entity_nameContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Entity_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterEntity_name(this);
	}
};

Entity_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitEntity_name(this);
	}
};




TSqlParser.Entity_nameContext = Entity_nameContext;

TSqlParser.prototype.entity_name = function() {

    var localctx = new Entity_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 878, TSqlParser.RULE_entity_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10055;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1406,this._ctx);
        if(la_===1) {
            this.state = 10038;
            localctx.server = this.id();
            this.state = 10039;
            this.match(TSqlParser.DOT);
            this.state = 10040;
            localctx.database = this.id();
            this.state = 10041;
            this.match(TSqlParser.DOT);
            this.state = 10042;
            localctx.schema = this.id();
            this.state = 10043;
            this.match(TSqlParser.DOT);

        } else if(la_===2) {
            this.state = 10045;
            localctx.database = this.id();
            this.state = 10046;
            this.match(TSqlParser.DOT);
            this.state = 10048;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0)) {
                this.state = 10047;
                localctx.schema = this.id();
            }

            this.state = 10050;
            this.match(TSqlParser.DOT);

        } else if(la_===3) {
            this.state = 10052;
            localctx.schema = this.id();
            this.state = 10053;
            this.match(TSqlParser.DOT);

        }
        this.state = 10057;
        localctx.table = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Entity_name_for_azure_dwContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_entity_name_for_azure_dw;
    this.schema = null; // IdContext
    this.object_name = null; // IdContext
    return this;
}

Entity_name_for_azure_dwContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_name_for_azure_dwContext.prototype.constructor = Entity_name_for_azure_dwContext;

Entity_name_for_azure_dwContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Entity_name_for_azure_dwContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterEntity_name_for_azure_dw(this);
	}
};

Entity_name_for_azure_dwContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitEntity_name_for_azure_dw(this);
	}
};




TSqlParser.Entity_name_for_azure_dwContext = Entity_name_for_azure_dwContext;

TSqlParser.prototype.entity_name_for_azure_dw = function() {

    var localctx = new Entity_name_for_azure_dwContext(this, this._ctx, this.state);
    this.enterRule(localctx, 880, TSqlParser.RULE_entity_name_for_azure_dw);
    try {
        this.state = 10064;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1407,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 10059;
            localctx.schema = this.id();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 10060;
            localctx.schema = this.id();
            this.state = 10061;
            this.match(TSqlParser.DOT);
            this.state = 10062;
            localctx.object_name = this.id();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Entity_name_for_parallel_dwContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_entity_name_for_parallel_dw;
    this.schema_database = null; // IdContext
    this.schema = null; // IdContext
    this.object_name = null; // IdContext
    return this;
}

Entity_name_for_parallel_dwContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Entity_name_for_parallel_dwContext.prototype.constructor = Entity_name_for_parallel_dwContext;

Entity_name_for_parallel_dwContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Entity_name_for_parallel_dwContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterEntity_name_for_parallel_dw(this);
	}
};

Entity_name_for_parallel_dwContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitEntity_name_for_parallel_dw(this);
	}
};




TSqlParser.Entity_name_for_parallel_dwContext = Entity_name_for_parallel_dwContext;

TSqlParser.prototype.entity_name_for_parallel_dw = function() {

    var localctx = new Entity_name_for_parallel_dwContext(this, this._ctx, this.state);
    this.enterRule(localctx, 882, TSqlParser.RULE_entity_name_for_parallel_dw);
    try {
        this.state = 10071;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1408,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 10066;
            localctx.schema_database = this.id();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 10067;
            localctx.schema = this.id();
            this.state = 10068;
            this.match(TSqlParser.DOT);
            this.state = 10069;
            localctx.object_name = this.id();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Full_table_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_full_table_name;
    this.server = null; // IdContext
    this.database = null; // IdContext
    this.schema = null; // IdContext
    this.table = null; // IdContext
    return this;
}

Full_table_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Full_table_nameContext.prototype.constructor = Full_table_nameContext;

Full_table_nameContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Full_table_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterFull_table_name(this);
	}
};

Full_table_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitFull_table_name(this);
	}
};




TSqlParser.Full_table_nameContext = Full_table_nameContext;

TSqlParser.prototype.full_table_name = function() {

    var localctx = new Full_table_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 884, TSqlParser.RULE_full_table_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10090;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1410,this._ctx);
        if(la_===1) {
            this.state = 10073;
            localctx.server = this.id();
            this.state = 10074;
            this.match(TSqlParser.DOT);
            this.state = 10075;
            localctx.database = this.id();
            this.state = 10076;
            this.match(TSqlParser.DOT);
            this.state = 10077;
            localctx.schema = this.id();
            this.state = 10078;
            this.match(TSqlParser.DOT);

        } else if(la_===2) {
            this.state = 10080;
            localctx.database = this.id();
            this.state = 10081;
            this.match(TSqlParser.DOT);
            this.state = 10083;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0)) {
                this.state = 10082;
                localctx.schema = this.id();
            }

            this.state = 10085;
            this.match(TSqlParser.DOT);

        } else if(la_===3) {
            this.state = 10087;
            localctx.schema = this.id();
            this.state = 10088;
            this.match(TSqlParser.DOT);

        }
        this.state = 10092;
        localctx.table = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_table_name;
    this.database = null; // IdContext
    this.schema = null; // IdContext
    this.table = null; // IdContext
    return this;
}

Table_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_nameContext.prototype.constructor = Table_nameContext;

Table_nameContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Table_nameContext.prototype.BLOCKING_HIERARCHY = function() {
    return this.getToken(TSqlParser.BLOCKING_HIERARCHY, 0);
};

Table_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterTable_name(this);
	}
};

Table_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitTable_name(this);
	}
};




TSqlParser.Table_nameContext = Table_nameContext;

TSqlParser.prototype.table_name = function() {

    var localctx = new Table_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 886, TSqlParser.RULE_table_name);
    var _la = 0; // Token type
    try {
        this.state = 10120;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1415,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 10104;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1412,this._ctx);
            if(la_===1) {
                this.state = 10094;
                localctx.database = this.id();
                this.state = 10095;
                this.match(TSqlParser.DOT);
                this.state = 10097;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0)) {
                    this.state = 10096;
                    localctx.schema = this.id();
                }

                this.state = 10099;
                this.match(TSqlParser.DOT);

            } else if(la_===2) {
                this.state = 10101;
                localctx.schema = this.id();
                this.state = 10102;
                this.match(TSqlParser.DOT);

            }
            this.state = 10106;
            localctx.table = this.id();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 10117;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1414,this._ctx);
            if(la_===1) {
                this.state = 10107;
                localctx.database = this.id();
                this.state = 10108;
                this.match(TSqlParser.DOT);
                this.state = 10110;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0)) {
                    this.state = 10109;
                    localctx.schema = this.id();
                }

                this.state = 10112;
                this.match(TSqlParser.DOT);

            } else if(la_===2) {
                this.state = 10114;
                localctx.schema = this.id();
                this.state = 10115;
                this.match(TSqlParser.DOT);

            }
            this.state = 10119;
            this.match(TSqlParser.BLOCKING_HIERARCHY);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_simple_name;
    this.schema = null; // IdContext
    this.name = null; // IdContext
    return this;
}

Simple_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_nameContext.prototype.constructor = Simple_nameContext;

Simple_nameContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Simple_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSimple_name(this);
	}
};

Simple_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSimple_name(this);
	}
};




TSqlParser.Simple_nameContext = Simple_nameContext;

TSqlParser.prototype.simple_name = function() {

    var localctx = new Simple_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 888, TSqlParser.RULE_simple_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10125;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1416,this._ctx);
        if(la_===1) {
            this.state = 10122;
            localctx.schema = this.id();
            this.state = 10123;
            this.match(TSqlParser.DOT);

        }
        this.state = 10127;
        localctx.name = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Func_proc_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_func_proc_name;
    this.database = null; // IdContext
    this.schema = null; // IdContext
    this.procedure = null; // IdContext
    return this;
}

Func_proc_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Func_proc_nameContext.prototype.constructor = Func_proc_nameContext;

Func_proc_nameContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Func_proc_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterFunc_proc_name(this);
	}
};

Func_proc_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitFunc_proc_name(this);
	}
};




TSqlParser.Func_proc_nameContext = Func_proc_nameContext;

TSqlParser.prototype.func_proc_name = function() {

    var localctx = new Func_proc_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 890, TSqlParser.RULE_func_proc_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10139;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1418,this._ctx);
        if(la_===1) {
            this.state = 10129;
            localctx.database = this.id();
            this.state = 10130;
            this.match(TSqlParser.DOT);
            this.state = 10132;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0)) {
                this.state = 10131;
                localctx.schema = this.id();
            }

            this.state = 10134;
            this.match(TSqlParser.DOT);

        } else if(la_===2) {
            this.state = 10136;
            localctx.schema = this.id();
            this.state = 10137;
            this.match(TSqlParser.DOT);

        }
        this.state = 10141;
        localctx.procedure = this.id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ddl_objectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_ddl_object;
    return this;
}

Ddl_objectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ddl_objectContext.prototype.constructor = Ddl_objectContext;

Ddl_objectContext.prototype.full_table_name = function() {
    return this.getTypedRuleContext(Full_table_nameContext,0);
};

Ddl_objectContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Ddl_objectContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDdl_object(this);
	}
};

Ddl_objectContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDdl_object(this);
	}
};




TSqlParser.Ddl_objectContext = Ddl_objectContext;

TSqlParser.prototype.ddl_object = function() {

    var localctx = new Ddl_objectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 892, TSqlParser.RULE_ddl_object);
    try {
        this.state = 10145;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 10143;
            this.full_table_name();
            break;
        case TSqlParser.LOCAL_ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 10144;
            this.match(TSqlParser.LOCAL_ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Full_column_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_full_column_name;
    this.column_name = null; // IdContext
    return this;
}

Full_column_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Full_column_nameContext.prototype.constructor = Full_column_nameContext;

Full_column_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Full_column_nameContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Full_column_nameContext.prototype.COMPATIBILITY_LEVEL = function() {
    return this.getToken(TSqlParser.COMPATIBILITY_LEVEL, 0);
};

Full_column_nameContext.prototype.STATUS = function() {
    return this.getToken(TSqlParser.STATUS, 0);
};

Full_column_nameContext.prototype.QUOTED_IDENTIFIER = function() {
    return this.getToken(TSqlParser.QUOTED_IDENTIFIER, 0);
};

Full_column_nameContext.prototype.ARITHABORT = function() {
    return this.getToken(TSqlParser.ARITHABORT, 0);
};

Full_column_nameContext.prototype.ANSI_WARNINGS = function() {
    return this.getToken(TSqlParser.ANSI_WARNINGS, 0);
};

Full_column_nameContext.prototype.ANSI_PADDING = function() {
    return this.getToken(TSqlParser.ANSI_PADDING, 0);
};

Full_column_nameContext.prototype.ANSI_NULLS = function() {
    return this.getToken(TSqlParser.ANSI_NULLS, 0);
};

Full_column_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterFull_column_name(this);
	}
};

Full_column_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitFull_column_name(this);
	}
};




TSqlParser.Full_column_nameContext = Full_column_nameContext;

TSqlParser.prototype.full_column_name = function() {

    var localctx = new Full_column_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 894, TSqlParser.RULE_full_column_name);
    var _la = 0; // Token type
    try {
        this.state = 10195;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1428,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 10150;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1420,this._ctx);
            if(la_===1) {
                this.state = 10147;
                this.table_name();
                this.state = 10148;
                this.match(TSqlParser.DOT);

            }
            this.state = 10152;
            localctx.column_name = this.id();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 10156;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.BLOCKING_HIERARCHY || _la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0)) {
                this.state = 10153;
                this.table_name();
                this.state = 10154;
                this.match(TSqlParser.DOT);
            }

            this.state = 10158;
            this.match(TSqlParser.COMPATIBILITY_LEVEL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 10162;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.BLOCKING_HIERARCHY || _la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0)) {
                this.state = 10159;
                this.table_name();
                this.state = 10160;
                this.match(TSqlParser.DOT);
            }

            this.state = 10164;
            this.match(TSqlParser.STATUS);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 10168;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.BLOCKING_HIERARCHY || _la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0)) {
                this.state = 10165;
                this.table_name();
                this.state = 10166;
                this.match(TSqlParser.DOT);
            }

            this.state = 10170;
            this.match(TSqlParser.QUOTED_IDENTIFIER);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 10174;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.BLOCKING_HIERARCHY || _la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0)) {
                this.state = 10171;
                this.table_name();
                this.state = 10172;
                this.match(TSqlParser.DOT);
            }

            this.state = 10176;
            this.match(TSqlParser.ARITHABORT);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 10180;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.BLOCKING_HIERARCHY || _la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0)) {
                this.state = 10177;
                this.table_name();
                this.state = 10178;
                this.match(TSqlParser.DOT);
            }

            this.state = 10182;
            this.match(TSqlParser.ANSI_WARNINGS);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 10186;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.BLOCKING_HIERARCHY || _la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0)) {
                this.state = 10183;
                this.table_name();
                this.state = 10184;
                this.match(TSqlParser.DOT);
            }

            this.state = 10188;
            this.match(TSqlParser.ANSI_PADDING);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 10192;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.BLOCKING_HIERARCHY || _la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.DOUBLE_QUOTE_ID - 747)) | (1 << (TSqlParser.SQUARE_BRACKET_ID - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0)) {
                this.state = 10189;
                this.table_name();
                this.state = 10190;
                this.match(TSqlParser.DOT);
            }

            this.state = 10194;
            this.match(TSqlParser.ANSI_NULLS);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_name_list_with_orderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_column_name_list_with_order;
    return this;
}

Column_name_list_with_orderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_name_list_with_orderContext.prototype.constructor = Column_name_list_with_orderContext;

Column_name_list_with_orderContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Column_name_list_with_orderContext.prototype.ASC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ASC);
    } else {
        return this.getToken(TSqlParser.ASC, i);
    }
};


Column_name_list_with_orderContext.prototype.DESC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DESC);
    } else {
        return this.getToken(TSqlParser.DESC, i);
    }
};


Column_name_list_with_orderContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterColumn_name_list_with_order(this);
	}
};

Column_name_list_with_orderContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitColumn_name_list_with_order(this);
	}
};




TSqlParser.Column_name_list_with_orderContext = Column_name_list_with_orderContext;

TSqlParser.prototype.column_name_list_with_order = function() {

    var localctx = new Column_name_list_with_orderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 896, TSqlParser.RULE_column_name_list_with_order);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10197;
        this.id();
        this.state = 10199;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.ASC || _la===TSqlParser.DESC) {
            this.state = 10198;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.ASC || _la===TSqlParser.DESC)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 10208;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 10201;
            this.match(TSqlParser.COMMA);
            this.state = 10202;
            this.id();
            this.state = 10204;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.ASC || _la===TSqlParser.DESC) {
                this.state = 10203;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.ASC || _la===TSqlParser.DESC)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 10210;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_name_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_column_name_list;
    return this;
}

Column_name_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_name_listContext.prototype.constructor = Column_name_listContext;

Column_name_listContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Column_name_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterColumn_name_list(this);
	}
};

Column_name_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitColumn_name_list(this);
	}
};




TSqlParser.Column_name_listContext = Column_name_listContext;

TSqlParser.prototype.column_name_list = function() {

    var localctx = new Column_name_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 898, TSqlParser.RULE_column_name_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10211;
        this.id();
        this.state = 10216;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===TSqlParser.COMMA) {
            this.state = 10212;
            this.match(TSqlParser.COMMA);
            this.state = 10213;
            this.id();
            this.state = 10218;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cursor_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_cursor_name;
    return this;
}

Cursor_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cursor_nameContext.prototype.constructor = Cursor_nameContext;

Cursor_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Cursor_nameContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Cursor_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterCursor_name(this);
	}
};

Cursor_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitCursor_name(this);
	}
};




TSqlParser.Cursor_nameContext = Cursor_nameContext;

TSqlParser.prototype.cursor_name = function() {

    var localctx = new Cursor_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 900, TSqlParser.RULE_cursor_name);
    try {
        this.state = 10221;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 10219;
            this.id();
            break;
        case TSqlParser.LOCAL_ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 10220;
            this.match(TSqlParser.LOCAL_ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function On_offContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_on_off;
    return this;
}

On_offContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
On_offContext.prototype.constructor = On_offContext;

On_offContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

On_offContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

On_offContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterOn_off(this);
	}
};

On_offContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitOn_off(this);
	}
};




TSqlParser.On_offContext = On_offContext;

TSqlParser.prototype.on_off = function() {

    var localctx = new On_offContext(this, this._ctx, this.state);
    this.enterRule(localctx, 902, TSqlParser.RULE_on_off);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10223;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClusteredContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_clustered;
    return this;
}

ClusteredContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClusteredContext.prototype.constructor = ClusteredContext;

ClusteredContext.prototype.CLUSTERED = function() {
    return this.getToken(TSqlParser.CLUSTERED, 0);
};

ClusteredContext.prototype.NONCLUSTERED = function() {
    return this.getToken(TSqlParser.NONCLUSTERED, 0);
};

ClusteredContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterClustered(this);
	}
};

ClusteredContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitClustered(this);
	}
};




TSqlParser.ClusteredContext = ClusteredContext;

TSqlParser.prototype.clustered = function() {

    var localctx = new ClusteredContext(this, this._ctx, this.state);
    this.enterRule(localctx, 904, TSqlParser.RULE_clustered);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10225;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.CLUSTERED || _la===TSqlParser.NONCLUSTERED)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Null_notnullContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_null_notnull;
    return this;
}

Null_notnullContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Null_notnullContext.prototype.constructor = Null_notnullContext;

Null_notnullContext.prototype.NULL = function() {
    return this.getToken(TSqlParser.NULL, 0);
};

Null_notnullContext.prototype.NOT = function() {
    return this.getToken(TSqlParser.NOT, 0);
};

Null_notnullContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterNull_notnull(this);
	}
};

Null_notnullContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitNull_notnull(this);
	}
};




TSqlParser.Null_notnullContext = Null_notnullContext;

TSqlParser.prototype.null_notnull = function() {

    var localctx = new Null_notnullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 906, TSqlParser.RULE_null_notnull);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10228;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.NOT) {
            this.state = 10227;
            this.match(TSqlParser.NOT);
        }

        this.state = 10230;
        this.match(TSqlParser.NULL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Null_or_defaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_null_or_default;
    return this;
}

Null_or_defaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Null_or_defaultContext.prototype.constructor = Null_or_defaultContext;

Null_or_defaultContext.prototype.null_notnull = function() {
    return this.getTypedRuleContext(Null_notnullContext,0);
};

Null_or_defaultContext.prototype.DEFAULT = function() {
    return this.getToken(TSqlParser.DEFAULT, 0);
};

Null_or_defaultContext.prototype.constant_expression = function() {
    return this.getTypedRuleContext(Constant_expressionContext,0);
};

Null_or_defaultContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Null_or_defaultContext.prototype.VALUES = function() {
    return this.getToken(TSqlParser.VALUES, 0);
};

Null_or_defaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterNull_or_default(this);
	}
};

Null_or_defaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitNull_or_default(this);
	}
};




TSqlParser.Null_or_defaultContext = Null_or_defaultContext;

TSqlParser.prototype.null_or_default = function() {

    var localctx = new Null_or_defaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 908, TSqlParser.RULE_null_or_default);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10239;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.NOT:
        case TSqlParser.NULL:
            this.state = 10232;
            this.null_notnull();
            break;
        case TSqlParser.DEFAULT:
            this.state = 10233;
            this.match(TSqlParser.DEFAULT);
            this.state = 10234;
            this.constant_expression();
            this.state = 10237;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1435,this._ctx);
            if(la_===1) {
                this.state = 10235;
                this.match(TSqlParser.WITH);
                this.state = 10236;
                this.match(TSqlParser.VALUES);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Scalar_function_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_scalar_function_name;
    return this;
}

Scalar_function_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Scalar_function_nameContext.prototype.constructor = Scalar_function_nameContext;

Scalar_function_nameContext.prototype.func_proc_name = function() {
    return this.getTypedRuleContext(Func_proc_nameContext,0);
};

Scalar_function_nameContext.prototype.RIGHT = function() {
    return this.getToken(TSqlParser.RIGHT, 0);
};

Scalar_function_nameContext.prototype.LEFT = function() {
    return this.getToken(TSqlParser.LEFT, 0);
};

Scalar_function_nameContext.prototype.BINARY_CHECKSUM = function() {
    return this.getToken(TSqlParser.BINARY_CHECKSUM, 0);
};

Scalar_function_nameContext.prototype.CHECKSUM = function() {
    return this.getToken(TSqlParser.CHECKSUM, 0);
};

Scalar_function_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterScalar_function_name(this);
	}
};

Scalar_function_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitScalar_function_name(this);
	}
};




TSqlParser.Scalar_function_nameContext = Scalar_function_nameContext;

TSqlParser.prototype.scalar_function_name = function() {

    var localctx = new Scalar_function_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 910, TSqlParser.RULE_scalar_function_name);
    try {
        this.state = 10246;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 10241;
            this.func_proc_name();
            break;
        case TSqlParser.RIGHT:
            this.enterOuterAlt(localctx, 2);
            this.state = 10242;
            this.match(TSqlParser.RIGHT);
            break;
        case TSqlParser.LEFT:
            this.enterOuterAlt(localctx, 3);
            this.state = 10243;
            this.match(TSqlParser.LEFT);
            break;
        case TSqlParser.BINARY_CHECKSUM:
            this.enterOuterAlt(localctx, 4);
            this.state = 10244;
            this.match(TSqlParser.BINARY_CHECKSUM);
            break;
        case TSqlParser.CHECKSUM:
            this.enterOuterAlt(localctx, 5);
            this.state = 10245;
            this.match(TSqlParser.CHECKSUM);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Begin_conversation_timerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_begin_conversation_timer;
    return this;
}

Begin_conversation_timerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Begin_conversation_timerContext.prototype.constructor = Begin_conversation_timerContext;

Begin_conversation_timerContext.prototype.BEGIN = function() {
    return this.getToken(TSqlParser.BEGIN, 0);
};

Begin_conversation_timerContext.prototype.CONVERSATION = function() {
    return this.getToken(TSqlParser.CONVERSATION, 0);
};

Begin_conversation_timerContext.prototype.TIMER = function() {
    return this.getToken(TSqlParser.TIMER, 0);
};

Begin_conversation_timerContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Begin_conversation_timerContext.prototype.TIMEOUT = function() {
    return this.getToken(TSqlParser.TIMEOUT, 0);
};

Begin_conversation_timerContext.prototype.time = function() {
    return this.getTypedRuleContext(TimeContext,0);
};

Begin_conversation_timerContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterBegin_conversation_timer(this);
	}
};

Begin_conversation_timerContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitBegin_conversation_timer(this);
	}
};




TSqlParser.Begin_conversation_timerContext = Begin_conversation_timerContext;

TSqlParser.prototype.begin_conversation_timer = function() {

    var localctx = new Begin_conversation_timerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 912, TSqlParser.RULE_begin_conversation_timer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10248;
        this.match(TSqlParser.BEGIN);
        this.state = 10249;
        this.match(TSqlParser.CONVERSATION);
        this.state = 10250;
        this.match(TSqlParser.TIMER);
        this.state = 10251;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 10252;
        this.match(TSqlParser.LOCAL_ID);
        this.state = 10253;
        this.match(TSqlParser.RR_BRACKET);
        this.state = 10254;
        this.match(TSqlParser.TIMEOUT);
        this.state = 10255;
        this.match(TSqlParser.EQUAL);
        this.state = 10256;
        this.time();
        this.state = 10258;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1438,this._ctx);
        if(la_===1) {
            this.state = 10257;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Begin_conversation_dialogContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_begin_conversation_dialog;
    this.dialog_handle = null; // Token
    this.initiator_service_name = null; // Service_nameContext
    this.target_service_name = null; // Service_nameContext
    this.service_broker_guid = null; // Token
    return this;
}

Begin_conversation_dialogContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Begin_conversation_dialogContext.prototype.constructor = Begin_conversation_dialogContext;

Begin_conversation_dialogContext.prototype.BEGIN = function() {
    return this.getToken(TSqlParser.BEGIN, 0);
};

Begin_conversation_dialogContext.prototype.DIALOG = function() {
    return this.getToken(TSqlParser.DIALOG, 0);
};

Begin_conversation_dialogContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Begin_conversation_dialogContext.prototype.SERVICE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.SERVICE);
    } else {
        return this.getToken(TSqlParser.SERVICE, i);
    }
};


Begin_conversation_dialogContext.prototype.TO = function() {
    return this.getToken(TSqlParser.TO, 0);
};

Begin_conversation_dialogContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.ON);
    } else {
        return this.getToken(TSqlParser.ON, i);
    }
};


Begin_conversation_dialogContext.prototype.CONTRACT = function() {
    return this.getToken(TSqlParser.CONTRACT, 0);
};

Begin_conversation_dialogContext.prototype.contract_name = function() {
    return this.getTypedRuleContext(Contract_nameContext,0);
};

Begin_conversation_dialogContext.prototype.LOCAL_ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LOCAL_ID);
    } else {
        return this.getToken(TSqlParser.LOCAL_ID, i);
    }
};


Begin_conversation_dialogContext.prototype.service_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Service_nameContext);
    } else {
        return this.getTypedRuleContext(Service_nameContext,i);
    }
};

Begin_conversation_dialogContext.prototype.CONVERSATION = function() {
    return this.getToken(TSqlParser.CONVERSATION, 0);
};

Begin_conversation_dialogContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

Begin_conversation_dialogContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Begin_conversation_dialogContext.prototype.LIFETIME = function() {
    return this.getToken(TSqlParser.LIFETIME, 0);
};

Begin_conversation_dialogContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Begin_conversation_dialogContext.prototype.RELATED_CONVERSATION = function() {
    return this.getToken(TSqlParser.RELATED_CONVERSATION, 0);
};

Begin_conversation_dialogContext.prototype.RELATED_CONVERSATION_GROUP = function() {
    return this.getToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0);
};

Begin_conversation_dialogContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

Begin_conversation_dialogContext.prototype.OFF = function() {
    return this.getToken(TSqlParser.OFF, 0);
};

Begin_conversation_dialogContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterBegin_conversation_dialog(this);
	}
};

Begin_conversation_dialogContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitBegin_conversation_dialog(this);
	}
};




TSqlParser.Begin_conversation_dialogContext = Begin_conversation_dialogContext;

TSqlParser.prototype.begin_conversation_dialog = function() {

    var localctx = new Begin_conversation_dialogContext(this, this._ctx, this.state);
    this.enterRule(localctx, 914, TSqlParser.RULE_begin_conversation_dialog);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10260;
        this.match(TSqlParser.BEGIN);
        this.state = 10261;
        this.match(TSqlParser.DIALOG);
        this.state = 10263;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.CONVERSATION) {
            this.state = 10262;
            this.match(TSqlParser.CONVERSATION);
        }

        this.state = 10265;
        localctx.dialog_handle = this.match(TSqlParser.LOCAL_ID);
        this.state = 10266;
        this.match(TSqlParser.FROM);
        this.state = 10267;
        this.match(TSqlParser.SERVICE);
        this.state = 10268;
        localctx.initiator_service_name = this.service_name();
        this.state = 10269;
        this.match(TSqlParser.TO);
        this.state = 10270;
        this.match(TSqlParser.SERVICE);
        this.state = 10271;
        localctx.target_service_name = this.service_name();
        this.state = 10274;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.COMMA) {
            this.state = 10272;
            this.match(TSqlParser.COMMA);
            this.state = 10273;
            localctx.service_broker_guid = this.match(TSqlParser.STRING);
        }

        this.state = 10276;
        this.match(TSqlParser.ON);
        this.state = 10277;
        this.match(TSqlParser.CONTRACT);
        this.state = 10278;
        this.contract_name();
        this.state = 10301;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1446,this._ctx);
        if(la_===1) {
            this.state = 10279;
            this.match(TSqlParser.WITH);
            this.state = 10286;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.RELATED_CONVERSATION || _la===TSqlParser.RELATED_CONVERSATION_GROUP) {
                this.state = 10280;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.RELATED_CONVERSATION || _la===TSqlParser.RELATED_CONVERSATION_GROUP)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 10281;
                this.match(TSqlParser.EQUAL);
                this.state = 10282;
                this.match(TSqlParser.LOCAL_ID);
                this.state = 10284;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 10283;
                    this.match(TSqlParser.COMMA);
                }

            }

            this.state = 10294;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.LIFETIME) {
                this.state = 10288;
                this.match(TSqlParser.LIFETIME);
                this.state = 10289;
                this.match(TSqlParser.EQUAL);
                this.state = 10290;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.LOCAL_ID || _la===TSqlParser.DECIMAL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 10292;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 10291;
                    this.match(TSqlParser.COMMA);
                }

            }

            this.state = 10299;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1445,this._ctx);
            if(la_===1) {
                this.state = 10296;
                this.match(TSqlParser.ENCRYPTION);
                this.state = 10297;
                this.match(TSqlParser.EQUAL);
                this.state = 10298;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.OFF || _la===TSqlParser.ON)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }

        }
        this.state = 10304;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1447,this._ctx);
        if(la_===1) {
            this.state = 10303;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Contract_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_contract_name;
    return this;
}

Contract_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Contract_nameContext.prototype.constructor = Contract_nameContext;

Contract_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Contract_nameContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Contract_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterContract_name(this);
	}
};

Contract_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitContract_name(this);
	}
};




TSqlParser.Contract_nameContext = Contract_nameContext;

TSqlParser.prototype.contract_name = function() {

    var localctx = new Contract_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 916, TSqlParser.RULE_contract_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10308;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1448,this._ctx);
        switch(la_) {
        case 1:
            this.state = 10306;
            this.id();
            break;

        case 2:
            this.state = 10307;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Service_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_service_name;
    return this;
}

Service_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Service_nameContext.prototype.constructor = Service_nameContext;

Service_nameContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Service_nameContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Service_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterService_name(this);
	}
};

Service_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitService_name(this);
	}
};




TSqlParser.Service_nameContext = Service_nameContext;

TSqlParser.prototype.service_name = function() {

    var localctx = new Service_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 918, TSqlParser.RULE_service_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10312;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1449,this._ctx);
        switch(la_) {
        case 1:
            this.state = 10310;
            this.id();
            break;

        case 2:
            this.state = 10311;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function End_conversationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_end_conversation;
    this.conversation_handle = null; // Token
    this.faliure_code = null; // Token
    this.failure_text = null; // Token
    return this;
}

End_conversationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
End_conversationContext.prototype.constructor = End_conversationContext;

End_conversationContext.prototype.END = function() {
    return this.getToken(TSqlParser.END, 0);
};

End_conversationContext.prototype.CONVERSATION = function() {
    return this.getToken(TSqlParser.CONVERSATION, 0);
};

End_conversationContext.prototype.LOCAL_ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LOCAL_ID);
    } else {
        return this.getToken(TSqlParser.LOCAL_ID, i);
    }
};


End_conversationContext.prototype.WITH = function() {
    return this.getToken(TSqlParser.WITH, 0);
};

End_conversationContext.prototype.ERROR = function() {
    return this.getToken(TSqlParser.ERROR, 0);
};

End_conversationContext.prototype.DESCRIPTION = function() {
    return this.getToken(TSqlParser.DESCRIPTION, 0);
};

End_conversationContext.prototype.CLEANUP = function() {
    return this.getToken(TSqlParser.CLEANUP, 0);
};

End_conversationContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


End_conversationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterEnd_conversation(this);
	}
};

End_conversationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitEnd_conversation(this);
	}
};




TSqlParser.End_conversationContext = End_conversationContext;

TSqlParser.prototype.end_conversation = function() {

    var localctx = new End_conversationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 920, TSqlParser.RULE_end_conversation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10314;
        this.match(TSqlParser.END);
        this.state = 10315;
        this.match(TSqlParser.CONVERSATION);
        this.state = 10316;
        localctx.conversation_handle = this.match(TSqlParser.LOCAL_ID);
        this.state = 10318;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1450,this._ctx);
        if(la_===1) {
            this.state = 10317;
            this.match(TSqlParser.SEMI);

        }
        this.state = 10332;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1453,this._ctx);
        if(la_===1) {
            this.state = 10320;
            this.match(TSqlParser.WITH);
            this.state = 10327;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.ERROR) {
                this.state = 10321;
                this.match(TSqlParser.ERROR);
                this.state = 10322;
                this.match(TSqlParser.EQUAL);
                this.state = 10323;
                localctx.faliure_code = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.LOCAL_ID || _la===TSqlParser.STRING)) {
                    localctx.faliure_code = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 10324;
                this.match(TSqlParser.DESCRIPTION);
                this.state = 10325;
                this.match(TSqlParser.EQUAL);
                this.state = 10326;
                localctx.failure_text = this._input.LT(1);
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.LOCAL_ID || _la===TSqlParser.STRING)) {
                    localctx.failure_text = this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 10330;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.CLEANUP) {
                this.state = 10329;
                this.match(TSqlParser.CLEANUP);
            }


        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Waitfor_conversationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_waitfor_conversation;
    this.timeout = null; // TimeContext
    return this;
}

Waitfor_conversationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Waitfor_conversationContext.prototype.constructor = Waitfor_conversationContext;

Waitfor_conversationContext.prototype.get_conversation = function() {
    return this.getTypedRuleContext(Get_conversationContext,0);
};

Waitfor_conversationContext.prototype.WAITFOR = function() {
    return this.getToken(TSqlParser.WAITFOR, 0);
};

Waitfor_conversationContext.prototype.TIMEOUT = function() {
    return this.getToken(TSqlParser.TIMEOUT, 0);
};

Waitfor_conversationContext.prototype.time = function() {
    return this.getTypedRuleContext(TimeContext,0);
};

Waitfor_conversationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterWaitfor_conversation(this);
	}
};

Waitfor_conversationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitWaitfor_conversation(this);
	}
};




TSqlParser.Waitfor_conversationContext = Waitfor_conversationContext;

TSqlParser.prototype.waitfor_conversation = function() {

    var localctx = new Waitfor_conversationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 922, TSqlParser.RULE_waitfor_conversation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10335;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.WAITFOR) {
            this.state = 10334;
            this.match(TSqlParser.WAITFOR);
        }

        this.state = 10337;
        this.match(TSqlParser.LR_BRACKET);
        this.state = 10338;
        this.get_conversation();
        this.state = 10339;
        this.match(TSqlParser.RR_BRACKET);
        this.state = 10345;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.TIMEOUT || _la===TSqlParser.COMMA) {
            this.state = 10341;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.COMMA) {
                this.state = 10340;
                this.match(TSqlParser.COMMA);
            }

            this.state = 10343;
            this.match(TSqlParser.TIMEOUT);
            this.state = 10344;
            localctx.timeout = this.time();
        }

        this.state = 10348;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1457,this._ctx);
        if(la_===1) {
            this.state = 10347;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Get_conversationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_get_conversation;
    this.conversation_group_id = null; // Token
    this.queue = null; // Queue_idContext
    return this;
}

Get_conversationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Get_conversationContext.prototype.constructor = Get_conversationContext;

Get_conversationContext.prototype.GET = function() {
    return this.getToken(TSqlParser.GET, 0);
};

Get_conversationContext.prototype.CONVERSATION = function() {
    return this.getToken(TSqlParser.CONVERSATION, 0);
};

Get_conversationContext.prototype.GROUP = function() {
    return this.getToken(TSqlParser.GROUP, 0);
};

Get_conversationContext.prototype.FROM = function() {
    return this.getToken(TSqlParser.FROM, 0);
};

Get_conversationContext.prototype.queue_id = function() {
    return this.getTypedRuleContext(Queue_idContext,0);
};

Get_conversationContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

Get_conversationContext.prototype.LOCAL_ID = function() {
    return this.getToken(TSqlParser.LOCAL_ID, 0);
};

Get_conversationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterGet_conversation(this);
	}
};

Get_conversationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitGet_conversation(this);
	}
};




TSqlParser.Get_conversationContext = Get_conversationContext;

TSqlParser.prototype.get_conversation = function() {

    var localctx = new Get_conversationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 924, TSqlParser.RULE_get_conversation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10350;
        this.match(TSqlParser.GET);
        this.state = 10351;
        this.match(TSqlParser.CONVERSATION);
        this.state = 10352;
        this.match(TSqlParser.GROUP);
        this.state = 10353;
        localctx.conversation_group_id = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.LOCAL_ID || _la===TSqlParser.STRING)) {
            localctx.conversation_group_id = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 10354;
        this.match(TSqlParser.FROM);
        this.state = 10355;
        localctx.queue = this.queue_id();
        this.state = 10357;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1458,this._ctx);
        if(la_===1) {
            this.state = 10356;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Queue_idContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_queue_id;
    this.database_name = null; // IdContext
    this.schema_name = null; // IdContext
    this.name = null; // IdContext
    return this;
}

Queue_idContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Queue_idContext.prototype.constructor = Queue_idContext;

Queue_idContext.prototype.id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdContext);
    } else {
        return this.getTypedRuleContext(IdContext,i);
    }
};

Queue_idContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterQueue_id(this);
	}
};

Queue_idContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitQueue_id(this);
	}
};




TSqlParser.Queue_idContext = Queue_idContext;

TSqlParser.prototype.queue_id = function() {

    var localctx = new Queue_idContext(this, this._ctx, this.state);
    this.enterRule(localctx, 926, TSqlParser.RULE_queue_id);
    try {
        this.state = 10366;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1459,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 10359;
            localctx.database_name = this.id();
            this.state = 10360;
            this.match(TSqlParser.DOT);
            this.state = 10361;
            localctx.schema_name = this.id();
            this.state = 10362;
            this.match(TSqlParser.DOT);
            this.state = 10363;
            localctx.name = this.id();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 10365;
            this.id();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Send_conversationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_send_conversation;
    this.conversation_handle = null; // Token
    this.message_type_name = null; // ExpressionContext
    this.message_body_expression = null; // Token
    return this;
}

Send_conversationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Send_conversationContext.prototype.constructor = Send_conversationContext;

Send_conversationContext.prototype.SEND = function() {
    return this.getToken(TSqlParser.SEND, 0);
};

Send_conversationContext.prototype.ON = function() {
    return this.getToken(TSqlParser.ON, 0);
};

Send_conversationContext.prototype.CONVERSATION = function() {
    return this.getToken(TSqlParser.CONVERSATION, 0);
};

Send_conversationContext.prototype.MESSAGE = function() {
    return this.getToken(TSqlParser.MESSAGE, 0);
};

Send_conversationContext.prototype.TYPE = function() {
    return this.getToken(TSqlParser.TYPE, 0);
};

Send_conversationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Send_conversationContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.STRING);
    } else {
        return this.getToken(TSqlParser.STRING, i);
    }
};


Send_conversationContext.prototype.LOCAL_ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.LOCAL_ID);
    } else {
        return this.getToken(TSqlParser.LOCAL_ID, i);
    }
};


Send_conversationContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSend_conversation(this);
	}
};

Send_conversationContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSend_conversation(this);
	}
};




TSqlParser.Send_conversationContext = Send_conversationContext;

TSqlParser.prototype.send_conversation = function() {

    var localctx = new Send_conversationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 928, TSqlParser.RULE_send_conversation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10368;
        this.match(TSqlParser.SEND);
        this.state = 10369;
        this.match(TSqlParser.ON);
        this.state = 10370;
        this.match(TSqlParser.CONVERSATION);
        this.state = 10371;
        localctx.conversation_handle = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.LOCAL_ID || _la===TSqlParser.STRING)) {
            localctx.conversation_handle = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 10372;
        this.match(TSqlParser.MESSAGE);
        this.state = 10373;
        this.match(TSqlParser.TYPE);
        this.state = 10374;
        localctx.message_type_name = this.expression(0);
        this.state = 10378;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1460,this._ctx);
        if(la_===1) {
            this.state = 10375;
            this.match(TSqlParser.LR_BRACKET);
            this.state = 10376;
            localctx.message_body_expression = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.LOCAL_ID || _la===TSqlParser.STRING)) {
                localctx.message_body_expression = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 10377;
            this.match(TSqlParser.RR_BRACKET);

        }
        this.state = 10381;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1461,this._ctx);
        if(la_===1) {
            this.state = 10380;
            this.match(TSqlParser.SEMI);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_data_type;
    return this;
}

Data_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_typeContext.prototype.constructor = Data_typeContext;

Data_typeContext.prototype.id = function() {
    return this.getTypedRuleContext(IdContext,0);
};

Data_typeContext.prototype.IDENTITY = function() {
    return this.getToken(TSqlParser.IDENTITY, 0);
};

Data_typeContext.prototype.DECIMAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(TSqlParser.DECIMAL);
    } else {
        return this.getToken(TSqlParser.DECIMAL, i);
    }
};


Data_typeContext.prototype.MAX = function() {
    return this.getToken(TSqlParser.MAX, 0);
};

Data_typeContext.prototype.INT = function() {
    return this.getToken(TSqlParser.INT, 0);
};

Data_typeContext.prototype.TINYINT = function() {
    return this.getToken(TSqlParser.TINYINT, 0);
};

Data_typeContext.prototype.SMALLINT = function() {
    return this.getToken(TSqlParser.SMALLINT, 0);
};

Data_typeContext.prototype.BIGINT = function() {
    return this.getToken(TSqlParser.BIGINT, 0);
};

Data_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterData_type(this);
	}
};

Data_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitData_type(this);
	}
};




TSqlParser.Data_typeContext = Data_typeContext;

TSqlParser.prototype.data_type = function() {

    var localctx = new Data_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 930, TSqlParser.RULE_data_type);
    var _la = 0; // Token type
    try {
        this.state = 10400;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.DOUBLE_QUOTE_ID:
        case TSqlParser.SQUARE_BRACKET_ID:
        case TSqlParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 10383;
            this.id();
            this.state = 10385;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1462,this._ctx);
            if(la_===1) {
                this.state = 10384;
                this.match(TSqlParser.IDENTITY);

            }
            this.state = 10394;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1464,this._ctx);
            if(la_===1) {
                this.state = 10387;
                this.match(TSqlParser.LR_BRACKET);
                this.state = 10388;
                _la = this._input.LA(1);
                if(!(_la===TSqlParser.MAX || _la===TSqlParser.DECIMAL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 10391;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===TSqlParser.COMMA) {
                    this.state = 10389;
                    this.match(TSqlParser.COMMA);
                    this.state = 10390;
                    this.match(TSqlParser.DECIMAL);
                }

                this.state = 10393;
                this.match(TSqlParser.RR_BRACKET);

            }
            break;
        case TSqlParser.INT:
            this.enterOuterAlt(localctx, 2);
            this.state = 10396;
            this.match(TSqlParser.INT);
            break;
        case TSqlParser.TINYINT:
            this.enterOuterAlt(localctx, 3);
            this.state = 10397;
            this.match(TSqlParser.TINYINT);
            break;
        case TSqlParser.SMALLINT:
            this.enterOuterAlt(localctx, 4);
            this.state = 10398;
            this.match(TSqlParser.SMALLINT);
            break;
        case TSqlParser.BIGINT:
            this.enterOuterAlt(localctx, 5);
            this.state = 10399;
            this.match(TSqlParser.BIGINT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Default_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_default_value;
    return this;
}

Default_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Default_valueContext.prototype.constructor = Default_valueContext;

Default_valueContext.prototype.NULL = function() {
    return this.getToken(TSqlParser.NULL, 0);
};

Default_valueContext.prototype.DEFAULT = function() {
    return this.getToken(TSqlParser.DEFAULT, 0);
};

Default_valueContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

Default_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterDefault_value(this);
	}
};

Default_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitDefault_value(this);
	}
};




TSqlParser.Default_valueContext = Default_valueContext;

TSqlParser.prototype.default_value = function() {

    var localctx = new Default_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 932, TSqlParser.RULE_default_value);
    try {
        this.state = 10405;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.NULL:
            this.enterOuterAlt(localctx, 1);
            this.state = 10402;
            this.match(TSqlParser.NULL);
            break;
        case TSqlParser.DEFAULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 10403;
            this.match(TSqlParser.DEFAULT);
            break;
        case TSqlParser.DECIMAL:
        case TSqlParser.STRING:
        case TSqlParser.BINARY:
        case TSqlParser.FLOAT:
        case TSqlParser.REAL:
        case TSqlParser.DOLLAR:
        case TSqlParser.PLUS:
        case TSqlParser.MINUS:
            this.enterOuterAlt(localctx, 3);
            this.state = 10404;
            this.constant();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_constant;
    this.dollar = null; // Token
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.STRING = function() {
    return this.getToken(TSqlParser.STRING, 0);
};

ConstantContext.prototype.BINARY = function() {
    return this.getToken(TSqlParser.BINARY, 0);
};

ConstantContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

ConstantContext.prototype.sign = function() {
    return this.getTypedRuleContext(SignContext,0);
};

ConstantContext.prototype.REAL = function() {
    return this.getToken(TSqlParser.REAL, 0);
};

ConstantContext.prototype.FLOAT = function() {
    return this.getToken(TSqlParser.FLOAT, 0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitConstant(this);
	}
};




TSqlParser.ConstantContext = ConstantContext;

TSqlParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 934, TSqlParser.RULE_constant);
    var _la = 0; // Token type
    try {
        this.state = 10422;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1470,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 10407;
            this.match(TSqlParser.STRING);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 10408;
            this.match(TSqlParser.BINARY);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 10410;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.PLUS || _la===TSqlParser.MINUS) {
                this.state = 10409;
                this.sign();
            }

            this.state = 10412;
            this.match(TSqlParser.DECIMAL);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 10414;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.PLUS || _la===TSqlParser.MINUS) {
                this.state = 10413;
                this.sign();
            }

            this.state = 10416;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.FLOAT || _la===TSqlParser.REAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 10418;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===TSqlParser.PLUS || _la===TSqlParser.MINUS) {
                this.state = 10417;
                this.sign();
            }

            this.state = 10420;
            localctx.dollar = this.match(TSqlParser.DOLLAR);
            this.state = 10421;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.DECIMAL || _la===TSqlParser.FLOAT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_sign;
    return this;
}

SignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignContext.prototype.constructor = SignContext;


SignContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSign(this);
	}
};

SignContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSign(this);
	}
};




TSqlParser.SignContext = SignContext;

TSqlParser.prototype.sign = function() {

    var localctx = new SignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 936, TSqlParser.RULE_sign);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10424;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.PLUS || _la===TSqlParser.MINUS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_id;
    return this;
}

IdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdContext.prototype.constructor = IdContext;

IdContext.prototype.simple_id = function() {
    return this.getTypedRuleContext(Simple_idContext,0);
};

IdContext.prototype.DOUBLE_QUOTE_ID = function() {
    return this.getToken(TSqlParser.DOUBLE_QUOTE_ID, 0);
};

IdContext.prototype.SQUARE_BRACKET_ID = function() {
    return this.getToken(TSqlParser.SQUARE_BRACKET_ID, 0);
};

IdContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterId(this);
	}
};

IdContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitId(this);
	}
};




TSqlParser.IdContext = IdContext;

TSqlParser.prototype.id = function() {

    var localctx = new IdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 938, TSqlParser.RULE_id);
    try {
        this.state = 10429;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case TSqlParser.CALLED:
        case TSqlParser.DATA_COMPRESSION:
        case TSqlParser.EVENTDATA:
        case TSqlParser.FILENAME:
        case TSqlParser.FILLFACTOR:
        case TSqlParser.FORCESEEK:
        case TSqlParser.KEY:
        case TSqlParser.MASTER:
        case TSqlParser.MAX_MEMORY:
        case TSqlParser.OFFSETS:
        case TSqlParser.PAGE:
        case TSqlParser.PUBLIC:
        case TSqlParser.RAW:
        case TSqlParser.RETURN:
        case TSqlParser.RETURNS:
        case TSqlParser.ROWCOUNT:
        case TSqlParser.SAFETY:
        case TSqlParser.SERVER:
        case TSqlParser.SID:
        case TSqlParser.SOURCE:
        case TSqlParser.STATE:
        case TSqlParser.TARGET:
        case TSqlParser.ABSOLUTE:
        case TSqlParser.ACTIVE:
        case TSqlParser.ADDRESS:
        case TSqlParser.APPLY:
        case TSqlParser.AUTO:
        case TSqlParser.AVAILABILITY:
        case TSqlParser.AVG:
        case TSqlParser.CALLER:
        case TSqlParser.CAST:
        case TSqlParser.CATCH:
        case TSqlParser.CHECKSUM_AGG:
        case TSqlParser.COMMITTED:
        case TSqlParser.CONCAT:
        case TSqlParser.CONCAT_NULL_YIELDS_NULL:
        case TSqlParser.CONTROL:
        case TSqlParser.COOKIE:
        case TSqlParser.COUNT:
        case TSqlParser.COUNTER:
        case TSqlParser.COUNT_BIG:
        case TSqlParser.DELAY:
        case TSqlParser.DELETED:
        case TSqlParser.DENSE_RANK:
        case TSqlParser.DISABLE:
        case TSqlParser.DYNAMIC:
        case TSqlParser.ENCRYPTION:
        case TSqlParser.EXPAND:
        case TSqlParser.FAST:
        case TSqlParser.FAST_FORWARD:
        case TSqlParser.FIRST:
        case TSqlParser.FOLLOWING:
        case TSqlParser.FORCE:
        case TSqlParser.FORCED:
        case TSqlParser.FORWARD_ONLY:
        case TSqlParser.FULLSCAN:
        case TSqlParser.GLOBAL:
        case TSqlParser.GROUPING:
        case TSqlParser.GROUPING_ID:
        case TSqlParser.HASH:
        case TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
        case TSqlParser.IMPERSONATE:
        case TSqlParser.INPUT:
        case TSqlParser.INSENSITIVE:
        case TSqlParser.INSERTED:
        case TSqlParser.ISOLATION:
        case TSqlParser.KEEP:
        case TSqlParser.KEEPFIXED:
        case TSqlParser.KEYSET:
        case TSqlParser.LAST:
        case TSqlParser.LEVEL:
        case TSqlParser.LOCAL:
        case TSqlParser.LOCATION:
        case TSqlParser.LOCK_ESCALATION:
        case TSqlParser.LOGIN:
        case TSqlParser.LOOP:
        case TSqlParser.MARK:
        case TSqlParser.MAX:
        case TSqlParser.MAX_ROLLOVER_FILES:
        case TSqlParser.MAXDOP:
        case TSqlParser.MAXRECURSION:
        case TSqlParser.MIN:
        case TSqlParser.MODIFY:
        case TSqlParser.NAME:
        case TSqlParser.NEXT:
        case TSqlParser.NOCOUNT:
        case TSqlParser.NOEXPAND:
        case TSqlParser.NORECOMPUTE:
        case TSqlParser.NTILE:
        case TSqlParser.NUMBER:
        case TSqlParser.OFFSET:
        case TSqlParser.ONLINE:
        case TSqlParser.ONLY:
        case TSqlParser.OPTIMISTIC:
        case TSqlParser.OPTIMIZE:
        case TSqlParser.OUT:
        case TSqlParser.OUTPUT:
        case TSqlParser.OWNER:
        case TSqlParser.PARAMETERIZATION:
        case TSqlParser.PARTITION:
        case TSqlParser.PATH:
        case TSqlParser.PRECEDING:
        case TSqlParser.PRIOR:
        case TSqlParser.PRIVILEGES:
        case TSqlParser.RANGE:
        case TSqlParser.RANK:
        case TSqlParser.READONLY:
        case TSqlParser.READ_ONLY:
        case TSqlParser.RECOMPILE:
        case TSqlParser.RELATIVE:
        case TSqlParser.REMOTE:
        case TSqlParser.REPEATABLE:
        case TSqlParser.ROBUST:
        case TSqlParser.ROOT:
        case TSqlParser.ROW:
        case TSqlParser.ROWGUID:
        case TSqlParser.ROWS:
        case TSqlParser.ROW_NUMBER:
        case TSqlParser.SAMPLE:
        case TSqlParser.SCHEMABINDING:
        case TSqlParser.SCROLL:
        case TSqlParser.SCROLL_LOCKS:
        case TSqlParser.SELF:
        case TSqlParser.SERIALIZABLE:
        case TSqlParser.SIMPLE:
        case TSqlParser.SIZE:
        case TSqlParser.SNAPSHOT:
        case TSqlParser.SPATIAL_WINDOW_MAX_CELLS:
        case TSqlParser.STATIC:
        case TSqlParser.STATS_STREAM:
        case TSqlParser.STDEV:
        case TSqlParser.STDEVP:
        case TSqlParser.SUM:
        case TSqlParser.TEXTIMAGE_ON:
        case TSqlParser.THROW:
        case TSqlParser.TIES:
        case TSqlParser.TIME:
        case TSqlParser.TRY:
        case TSqlParser.TYPE:
        case TSqlParser.TYPE_WARNING:
        case TSqlParser.UNBOUNDED:
        case TSqlParser.UNCOMMITTED:
        case TSqlParser.UNKNOWN:
        case TSqlParser.USING:
        case TSqlParser.VALUE:
        case TSqlParser.VAR:
        case TSqlParser.VARP:
        case TSqlParser.VIEWS:
        case TSqlParser.VIEW_METADATA:
        case TSqlParser.WORK:
        case TSqlParser.XML:
        case TSqlParser.XMLNAMESPACES:
        case TSqlParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 10426;
            this.simple_id();
            break;
        case TSqlParser.DOUBLE_QUOTE_ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 10427;
            this.match(TSqlParser.DOUBLE_QUOTE_ID);
            break;
        case TSqlParser.SQUARE_BRACKET_ID:
            this.enterOuterAlt(localctx, 3);
            this.state = 10428;
            this.match(TSqlParser.SQUARE_BRACKET_ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_idContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_simple_id;
    return this;
}

Simple_idContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_idContext.prototype.constructor = Simple_idContext;

Simple_idContext.prototype.ID = function() {
    return this.getToken(TSqlParser.ID, 0);
};

Simple_idContext.prototype.ABSOLUTE = function() {
    return this.getToken(TSqlParser.ABSOLUTE, 0);
};

Simple_idContext.prototype.ACTIVE = function() {
    return this.getToken(TSqlParser.ACTIVE, 0);
};

Simple_idContext.prototype.ADDRESS = function() {
    return this.getToken(TSqlParser.ADDRESS, 0);
};

Simple_idContext.prototype.APPLY = function() {
    return this.getToken(TSqlParser.APPLY, 0);
};

Simple_idContext.prototype.AUTO = function() {
    return this.getToken(TSqlParser.AUTO, 0);
};

Simple_idContext.prototype.AVAILABILITY = function() {
    return this.getToken(TSqlParser.AVAILABILITY, 0);
};

Simple_idContext.prototype.AVG = function() {
    return this.getToken(TSqlParser.AVG, 0);
};

Simple_idContext.prototype.CALLED = function() {
    return this.getToken(TSqlParser.CALLED, 0);
};

Simple_idContext.prototype.CALLER = function() {
    return this.getToken(TSqlParser.CALLER, 0);
};

Simple_idContext.prototype.CAST = function() {
    return this.getToken(TSqlParser.CAST, 0);
};

Simple_idContext.prototype.CATCH = function() {
    return this.getToken(TSqlParser.CATCH, 0);
};

Simple_idContext.prototype.CHECKSUM_AGG = function() {
    return this.getToken(TSqlParser.CHECKSUM_AGG, 0);
};

Simple_idContext.prototype.COMMITTED = function() {
    return this.getToken(TSqlParser.COMMITTED, 0);
};

Simple_idContext.prototype.CONCAT = function() {
    return this.getToken(TSqlParser.CONCAT, 0);
};

Simple_idContext.prototype.CONCAT_NULL_YIELDS_NULL = function() {
    return this.getToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0);
};

Simple_idContext.prototype.CONTROL = function() {
    return this.getToken(TSqlParser.CONTROL, 0);
};

Simple_idContext.prototype.COOKIE = function() {
    return this.getToken(TSqlParser.COOKIE, 0);
};

Simple_idContext.prototype.COUNT = function() {
    return this.getToken(TSqlParser.COUNT, 0);
};

Simple_idContext.prototype.COUNTER = function() {
    return this.getToken(TSqlParser.COUNTER, 0);
};

Simple_idContext.prototype.COUNT_BIG = function() {
    return this.getToken(TSqlParser.COUNT_BIG, 0);
};

Simple_idContext.prototype.DATA_COMPRESSION = function() {
    return this.getToken(TSqlParser.DATA_COMPRESSION, 0);
};

Simple_idContext.prototype.DELAY = function() {
    return this.getToken(TSqlParser.DELAY, 0);
};

Simple_idContext.prototype.DELETED = function() {
    return this.getToken(TSqlParser.DELETED, 0);
};

Simple_idContext.prototype.DENSE_RANK = function() {
    return this.getToken(TSqlParser.DENSE_RANK, 0);
};

Simple_idContext.prototype.DISABLE = function() {
    return this.getToken(TSqlParser.DISABLE, 0);
};

Simple_idContext.prototype.DYNAMIC = function() {
    return this.getToken(TSqlParser.DYNAMIC, 0);
};

Simple_idContext.prototype.ENCRYPTION = function() {
    return this.getToken(TSqlParser.ENCRYPTION, 0);
};

Simple_idContext.prototype.EVENTDATA = function() {
    return this.getToken(TSqlParser.EVENTDATA, 0);
};

Simple_idContext.prototype.EXPAND = function() {
    return this.getToken(TSqlParser.EXPAND, 0);
};

Simple_idContext.prototype.FAST = function() {
    return this.getToken(TSqlParser.FAST, 0);
};

Simple_idContext.prototype.FAST_FORWARD = function() {
    return this.getToken(TSqlParser.FAST_FORWARD, 0);
};

Simple_idContext.prototype.FILENAME = function() {
    return this.getToken(TSqlParser.FILENAME, 0);
};

Simple_idContext.prototype.FILLFACTOR = function() {
    return this.getToken(TSqlParser.FILLFACTOR, 0);
};

Simple_idContext.prototype.FIRST = function() {
    return this.getToken(TSqlParser.FIRST, 0);
};

Simple_idContext.prototype.FOLLOWING = function() {
    return this.getToken(TSqlParser.FOLLOWING, 0);
};

Simple_idContext.prototype.FORCE = function() {
    return this.getToken(TSqlParser.FORCE, 0);
};

Simple_idContext.prototype.FORCESEEK = function() {
    return this.getToken(TSqlParser.FORCESEEK, 0);
};

Simple_idContext.prototype.FORWARD_ONLY = function() {
    return this.getToken(TSqlParser.FORWARD_ONLY, 0);
};

Simple_idContext.prototype.FULLSCAN = function() {
    return this.getToken(TSqlParser.FULLSCAN, 0);
};

Simple_idContext.prototype.GLOBAL = function() {
    return this.getToken(TSqlParser.GLOBAL, 0);
};

Simple_idContext.prototype.GROUPING = function() {
    return this.getToken(TSqlParser.GROUPING, 0);
};

Simple_idContext.prototype.GROUPING_ID = function() {
    return this.getToken(TSqlParser.GROUPING_ID, 0);
};

Simple_idContext.prototype.HASH = function() {
    return this.getToken(TSqlParser.HASH, 0);
};

Simple_idContext.prototype.IMPERSONATE = function() {
    return this.getToken(TSqlParser.IMPERSONATE, 0);
};

Simple_idContext.prototype.INSENSITIVE = function() {
    return this.getToken(TSqlParser.INSENSITIVE, 0);
};

Simple_idContext.prototype.INSERTED = function() {
    return this.getToken(TSqlParser.INSERTED, 0);
};

Simple_idContext.prototype.ISOLATION = function() {
    return this.getToken(TSqlParser.ISOLATION, 0);
};

Simple_idContext.prototype.KEEP = function() {
    return this.getToken(TSqlParser.KEEP, 0);
};

Simple_idContext.prototype.KEEPFIXED = function() {
    return this.getToken(TSqlParser.KEEPFIXED, 0);
};

Simple_idContext.prototype.KEY = function() {
    return this.getToken(TSqlParser.KEY, 0);
};

Simple_idContext.prototype.FORCED = function() {
    return this.getToken(TSqlParser.FORCED, 0);
};

Simple_idContext.prototype.KEYSET = function() {
    return this.getToken(TSqlParser.KEYSET, 0);
};

Simple_idContext.prototype.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX = function() {
    return this.getToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0);
};

Simple_idContext.prototype.INPUT = function() {
    return this.getToken(TSqlParser.INPUT, 0);
};

Simple_idContext.prototype.LAST = function() {
    return this.getToken(TSqlParser.LAST, 0);
};

Simple_idContext.prototype.LEVEL = function() {
    return this.getToken(TSqlParser.LEVEL, 0);
};

Simple_idContext.prototype.LOCAL = function() {
    return this.getToken(TSqlParser.LOCAL, 0);
};

Simple_idContext.prototype.LOCATION = function() {
    return this.getToken(TSqlParser.LOCATION, 0);
};

Simple_idContext.prototype.LOCK_ESCALATION = function() {
    return this.getToken(TSqlParser.LOCK_ESCALATION, 0);
};

Simple_idContext.prototype.LOGIN = function() {
    return this.getToken(TSqlParser.LOGIN, 0);
};

Simple_idContext.prototype.LOOP = function() {
    return this.getToken(TSqlParser.LOOP, 0);
};

Simple_idContext.prototype.MASTER = function() {
    return this.getToken(TSqlParser.MASTER, 0);
};

Simple_idContext.prototype.MARK = function() {
    return this.getToken(TSqlParser.MARK, 0);
};

Simple_idContext.prototype.MAX = function() {
    return this.getToken(TSqlParser.MAX, 0);
};

Simple_idContext.prototype.MAXDOP = function() {
    return this.getToken(TSqlParser.MAXDOP, 0);
};

Simple_idContext.prototype.MAXRECURSION = function() {
    return this.getToken(TSqlParser.MAXRECURSION, 0);
};

Simple_idContext.prototype.MAX_ROLLOVER_FILES = function() {
    return this.getToken(TSqlParser.MAX_ROLLOVER_FILES, 0);
};

Simple_idContext.prototype.MAX_MEMORY = function() {
    return this.getToken(TSqlParser.MAX_MEMORY, 0);
};

Simple_idContext.prototype.MIN = function() {
    return this.getToken(TSqlParser.MIN, 0);
};

Simple_idContext.prototype.MODIFY = function() {
    return this.getToken(TSqlParser.MODIFY, 0);
};

Simple_idContext.prototype.NAME = function() {
    return this.getToken(TSqlParser.NAME, 0);
};

Simple_idContext.prototype.NEXT = function() {
    return this.getToken(TSqlParser.NEXT, 0);
};

Simple_idContext.prototype.NOCOUNT = function() {
    return this.getToken(TSqlParser.NOCOUNT, 0);
};

Simple_idContext.prototype.NOEXPAND = function() {
    return this.getToken(TSqlParser.NOEXPAND, 0);
};

Simple_idContext.prototype.NORECOMPUTE = function() {
    return this.getToken(TSqlParser.NORECOMPUTE, 0);
};

Simple_idContext.prototype.NTILE = function() {
    return this.getToken(TSqlParser.NTILE, 0);
};

Simple_idContext.prototype.NUMBER = function() {
    return this.getToken(TSqlParser.NUMBER, 0);
};

Simple_idContext.prototype.OFFSET = function() {
    return this.getToken(TSqlParser.OFFSET, 0);
};

Simple_idContext.prototype.OFFSETS = function() {
    return this.getToken(TSqlParser.OFFSETS, 0);
};

Simple_idContext.prototype.ONLINE = function() {
    return this.getToken(TSqlParser.ONLINE, 0);
};

Simple_idContext.prototype.ONLY = function() {
    return this.getToken(TSqlParser.ONLY, 0);
};

Simple_idContext.prototype.OPTIMISTIC = function() {
    return this.getToken(TSqlParser.OPTIMISTIC, 0);
};

Simple_idContext.prototype.OPTIMIZE = function() {
    return this.getToken(TSqlParser.OPTIMIZE, 0);
};

Simple_idContext.prototype.OUT = function() {
    return this.getToken(TSqlParser.OUT, 0);
};

Simple_idContext.prototype.OUTPUT = function() {
    return this.getToken(TSqlParser.OUTPUT, 0);
};

Simple_idContext.prototype.OWNER = function() {
    return this.getToken(TSqlParser.OWNER, 0);
};

Simple_idContext.prototype.PAGE = function() {
    return this.getToken(TSqlParser.PAGE, 0);
};

Simple_idContext.prototype.PARAMETERIZATION = function() {
    return this.getToken(TSqlParser.PARAMETERIZATION, 0);
};

Simple_idContext.prototype.PARTITION = function() {
    return this.getToken(TSqlParser.PARTITION, 0);
};

Simple_idContext.prototype.PATH = function() {
    return this.getToken(TSqlParser.PATH, 0);
};

Simple_idContext.prototype.PRECEDING = function() {
    return this.getToken(TSqlParser.PRECEDING, 0);
};

Simple_idContext.prototype.PRIOR = function() {
    return this.getToken(TSqlParser.PRIOR, 0);
};

Simple_idContext.prototype.PRIVILEGES = function() {
    return this.getToken(TSqlParser.PRIVILEGES, 0);
};

Simple_idContext.prototype.PUBLIC = function() {
    return this.getToken(TSqlParser.PUBLIC, 0);
};

Simple_idContext.prototype.RANGE = function() {
    return this.getToken(TSqlParser.RANGE, 0);
};

Simple_idContext.prototype.RANK = function() {
    return this.getToken(TSqlParser.RANK, 0);
};

Simple_idContext.prototype.RAW = function() {
    return this.getToken(TSqlParser.RAW, 0);
};

Simple_idContext.prototype.READONLY = function() {
    return this.getToken(TSqlParser.READONLY, 0);
};

Simple_idContext.prototype.READ_ONLY = function() {
    return this.getToken(TSqlParser.READ_ONLY, 0);
};

Simple_idContext.prototype.RECOMPILE = function() {
    return this.getToken(TSqlParser.RECOMPILE, 0);
};

Simple_idContext.prototype.RELATIVE = function() {
    return this.getToken(TSqlParser.RELATIVE, 0);
};

Simple_idContext.prototype.REMOTE = function() {
    return this.getToken(TSqlParser.REMOTE, 0);
};

Simple_idContext.prototype.REPEATABLE = function() {
    return this.getToken(TSqlParser.REPEATABLE, 0);
};

Simple_idContext.prototype.RETURN = function() {
    return this.getToken(TSqlParser.RETURN, 0);
};

Simple_idContext.prototype.RETURNS = function() {
    return this.getToken(TSqlParser.RETURNS, 0);
};

Simple_idContext.prototype.ROBUST = function() {
    return this.getToken(TSqlParser.ROBUST, 0);
};

Simple_idContext.prototype.ROOT = function() {
    return this.getToken(TSqlParser.ROOT, 0);
};

Simple_idContext.prototype.ROW = function() {
    return this.getToken(TSqlParser.ROW, 0);
};

Simple_idContext.prototype.ROWCOUNT = function() {
    return this.getToken(TSqlParser.ROWCOUNT, 0);
};

Simple_idContext.prototype.ROWGUID = function() {
    return this.getToken(TSqlParser.ROWGUID, 0);
};

Simple_idContext.prototype.ROWS = function() {
    return this.getToken(TSqlParser.ROWS, 0);
};

Simple_idContext.prototype.ROW_NUMBER = function() {
    return this.getToken(TSqlParser.ROW_NUMBER, 0);
};

Simple_idContext.prototype.SAFETY = function() {
    return this.getToken(TSqlParser.SAFETY, 0);
};

Simple_idContext.prototype.SAMPLE = function() {
    return this.getToken(TSqlParser.SAMPLE, 0);
};

Simple_idContext.prototype.SID = function() {
    return this.getToken(TSqlParser.SID, 0);
};

Simple_idContext.prototype.SIZE = function() {
    return this.getToken(TSqlParser.SIZE, 0);
};

Simple_idContext.prototype.SCHEMABINDING = function() {
    return this.getToken(TSqlParser.SCHEMABINDING, 0);
};

Simple_idContext.prototype.SCROLL = function() {
    return this.getToken(TSqlParser.SCROLL, 0);
};

Simple_idContext.prototype.SCROLL_LOCKS = function() {
    return this.getToken(TSqlParser.SCROLL_LOCKS, 0);
};

Simple_idContext.prototype.SELF = function() {
    return this.getToken(TSqlParser.SELF, 0);
};

Simple_idContext.prototype.SERIALIZABLE = function() {
    return this.getToken(TSqlParser.SERIALIZABLE, 0);
};

Simple_idContext.prototype.SERVER = function() {
    return this.getToken(TSqlParser.SERVER, 0);
};

Simple_idContext.prototype.SIMPLE = function() {
    return this.getToken(TSqlParser.SIMPLE, 0);
};

Simple_idContext.prototype.SNAPSHOT = function() {
    return this.getToken(TSqlParser.SNAPSHOT, 0);
};

Simple_idContext.prototype.SOURCE = function() {
    return this.getToken(TSqlParser.SOURCE, 0);
};

Simple_idContext.prototype.SPATIAL_WINDOW_MAX_CELLS = function() {
    return this.getToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0);
};

Simple_idContext.prototype.STATE = function() {
    return this.getToken(TSqlParser.STATE, 0);
};

Simple_idContext.prototype.STATIC = function() {
    return this.getToken(TSqlParser.STATIC, 0);
};

Simple_idContext.prototype.STATS_STREAM = function() {
    return this.getToken(TSqlParser.STATS_STREAM, 0);
};

Simple_idContext.prototype.STDEV = function() {
    return this.getToken(TSqlParser.STDEV, 0);
};

Simple_idContext.prototype.STDEVP = function() {
    return this.getToken(TSqlParser.STDEVP, 0);
};

Simple_idContext.prototype.SUM = function() {
    return this.getToken(TSqlParser.SUM, 0);
};

Simple_idContext.prototype.TARGET = function() {
    return this.getToken(TSqlParser.TARGET, 0);
};

Simple_idContext.prototype.TEXTIMAGE_ON = function() {
    return this.getToken(TSqlParser.TEXTIMAGE_ON, 0);
};

Simple_idContext.prototype.THROW = function() {
    return this.getToken(TSqlParser.THROW, 0);
};

Simple_idContext.prototype.TIES = function() {
    return this.getToken(TSqlParser.TIES, 0);
};

Simple_idContext.prototype.TIME = function() {
    return this.getToken(TSqlParser.TIME, 0);
};

Simple_idContext.prototype.TRY = function() {
    return this.getToken(TSqlParser.TRY, 0);
};

Simple_idContext.prototype.TYPE = function() {
    return this.getToken(TSqlParser.TYPE, 0);
};

Simple_idContext.prototype.TYPE_WARNING = function() {
    return this.getToken(TSqlParser.TYPE_WARNING, 0);
};

Simple_idContext.prototype.UNBOUNDED = function() {
    return this.getToken(TSqlParser.UNBOUNDED, 0);
};

Simple_idContext.prototype.UNCOMMITTED = function() {
    return this.getToken(TSqlParser.UNCOMMITTED, 0);
};

Simple_idContext.prototype.UNKNOWN = function() {
    return this.getToken(TSqlParser.UNKNOWN, 0);
};

Simple_idContext.prototype.USING = function() {
    return this.getToken(TSqlParser.USING, 0);
};

Simple_idContext.prototype.VAR = function() {
    return this.getToken(TSqlParser.VAR, 0);
};

Simple_idContext.prototype.VARP = function() {
    return this.getToken(TSqlParser.VARP, 0);
};

Simple_idContext.prototype.VALUE = function() {
    return this.getToken(TSqlParser.VALUE, 0);
};

Simple_idContext.prototype.VIEW_METADATA = function() {
    return this.getToken(TSqlParser.VIEW_METADATA, 0);
};

Simple_idContext.prototype.VIEWS = function() {
    return this.getToken(TSqlParser.VIEWS, 0);
};

Simple_idContext.prototype.WORK = function() {
    return this.getToken(TSqlParser.WORK, 0);
};

Simple_idContext.prototype.XML = function() {
    return this.getToken(TSqlParser.XML, 0);
};

Simple_idContext.prototype.XMLNAMESPACES = function() {
    return this.getToken(TSqlParser.XMLNAMESPACES, 0);
};

Simple_idContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterSimple_id(this);
	}
};

Simple_idContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitSimple_id(this);
	}
};




TSqlParser.Simple_idContext = Simple_idContext;

TSqlParser.prototype.simple_id = function() {

    var localctx = new Simple_idContext(this, this._ctx, this.state);
    this.enterRule(localctx, 940, TSqlParser.RULE_simple_id);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10431;
        _la = this._input.LA(1);
        if(!(_la===TSqlParser.CALLED || _la===TSqlParser.DATA_COMPRESSION || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (TSqlParser.EVENTDATA - 112)) | (1 << (TSqlParser.FILENAME - 112)) | (1 << (TSqlParser.FILLFACTOR - 112)) | (1 << (TSqlParser.FORCESEEK - 112)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (TSqlParser.KEY - 169)) | (1 << (TSqlParser.MASTER - 169)) | (1 << (TSqlParser.MAX_MEMORY - 169)))) !== 0) || _la===TSqlParser.OFFSETS || _la===TSqlParser.PAGE || ((((_la - 258)) & ~0x1f) == 0 && ((1 << (_la - 258)) & ((1 << (TSqlParser.PUBLIC - 258)) | (1 << (TSqlParser.RAW - 258)) | (1 << (TSqlParser.RETURN - 258)) | (1 << (TSqlParser.RETURNS - 258)) | (1 << (TSqlParser.ROWCOUNT - 258)))) !== 0) || ((((_la - 294)) & ~0x1f) == 0 && ((1 << (_la - 294)) & ((1 << (TSqlParser.SAFETY - 294)) | (1 << (TSqlParser.SERVER - 294)) | (1 << (TSqlParser.SID - 294)) | (1 << (TSqlParser.SOURCE - 294)))) !== 0) || _la===TSqlParser.STATE || _la===TSqlParser.TARGET || ((((_la - 382)) & ~0x1f) == 0 && ((1 << (_la - 382)) & ((1 << (TSqlParser.ABSOLUTE - 382)) | (1 << (TSqlParser.ACTIVE - 382)) | (1 << (TSqlParser.ADDRESS - 382)) | (1 << (TSqlParser.APPLY - 382)) | (1 << (TSqlParser.AUTO - 382)))) !== 0) || ((((_la - 415)) & ~0x1f) == 0 && ((1 << (_la - 415)) & ((1 << (TSqlParser.AVAILABILITY - 415)) | (1 << (TSqlParser.AVG - 415)) | (1 << (TSqlParser.CALLER - 415)) | (1 << (TSqlParser.CAST - 415)) | (1 << (TSqlParser.CATCH - 415)) | (1 << (TSqlParser.CHECKSUM_AGG - 415)) | (1 << (TSqlParser.COMMITTED - 415)) | (1 << (TSqlParser.CONCAT - 415)) | (1 << (TSqlParser.CONCAT_NULL_YIELDS_NULL - 415)) | (1 << (TSqlParser.CONTROL - 415)) | (1 << (TSqlParser.COOKIE - 415)) | (1 << (TSqlParser.COUNT - 415)))) !== 0) || ((((_la - 447)) & ~0x1f) == 0 && ((1 << (_la - 447)) & ((1 << (TSqlParser.COUNTER - 447)) | (1 << (TSqlParser.COUNT_BIG - 447)) | (1 << (TSqlParser.DELAY - 447)) | (1 << (TSqlParser.DELETED - 447)) | (1 << (TSqlParser.DENSE_RANK - 447)))) !== 0) || ((((_la - 479)) & ~0x1f) == 0 && ((1 << (_la - 479)) & ((1 << (TSqlParser.DISABLE - 479)) | (1 << (TSqlParser.DYNAMIC - 479)) | (1 << (TSqlParser.ENCRYPTION - 479)) | (1 << (TSqlParser.EXPAND - 479)) | (1 << (TSqlParser.FAST - 479)) | (1 << (TSqlParser.FAST_FORWARD - 479)) | (1 << (TSqlParser.FIRST - 479)))) !== 0) || ((((_la - 511)) & ~0x1f) == 0 && ((1 << (_la - 511)) & ((1 << (TSqlParser.FOLLOWING - 511)) | (1 << (TSqlParser.FORCE - 511)) | (1 << (TSqlParser.FORCED - 511)) | (1 << (TSqlParser.FORWARD_ONLY - 511)) | (1 << (TSqlParser.FULLSCAN - 511)) | (1 << (TSqlParser.GLOBAL - 511)) | (1 << (TSqlParser.GROUPING - 511)) | (1 << (TSqlParser.GROUPING_ID - 511)) | (1 << (TSqlParser.HASH - 511)) | (1 << (TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1 << (TSqlParser.IMPERSONATE - 511)) | (1 << (TSqlParser.INPUT - 511)) | (1 << (TSqlParser.INSENSITIVE - 511)) | (1 << (TSqlParser.INSERTED - 511)))) !== 0) || ((((_la - 545)) & ~0x1f) == 0 && ((1 << (_la - 545)) & ((1 << (TSqlParser.ISOLATION - 545)) | (1 << (TSqlParser.KEEP - 545)) | (1 << (TSqlParser.KEEPFIXED - 545)) | (1 << (TSqlParser.KEYSET - 545)) | (1 << (TSqlParser.LAST - 545)) | (1 << (TSqlParser.LEVEL - 545)) | (1 << (TSqlParser.LOCAL - 545)) | (1 << (TSqlParser.LOCATION - 545)) | (1 << (TSqlParser.LOCK_ESCALATION - 545)) | (1 << (TSqlParser.LOGIN - 545)) | (1 << (TSqlParser.LOOP - 545)) | (1 << (TSqlParser.MARK - 545)) | (1 << (TSqlParser.MAX - 545)))) !== 0) || ((((_la - 579)) & ~0x1f) == 0 && ((1 << (_la - 579)) & ((1 << (TSqlParser.MAX_ROLLOVER_FILES - 579)) | (1 << (TSqlParser.MAXDOP - 579)) | (1 << (TSqlParser.MAXRECURSION - 579)) | (1 << (TSqlParser.MIN - 579)) | (1 << (TSqlParser.MODIFY - 579)) | (1 << (TSqlParser.NAME - 579)) | (1 << (TSqlParser.NEXT - 579)) | (1 << (TSqlParser.NOCOUNT - 579)) | (1 << (TSqlParser.NOEXPAND - 579)) | (1 << (TSqlParser.NORECOMPUTE - 579)))) !== 0) || ((((_la - 611)) & ~0x1f) == 0 && ((1 << (_la - 611)) & ((1 << (TSqlParser.NTILE - 611)) | (1 << (TSqlParser.NUMBER - 611)) | (1 << (TSqlParser.OFFSET - 611)) | (1 << (TSqlParser.ONLINE - 611)) | (1 << (TSqlParser.ONLY - 611)) | (1 << (TSqlParser.OPTIMISTIC - 611)) | (1 << (TSqlParser.OPTIMIZE - 611)) | (1 << (TSqlParser.OUT - 611)) | (1 << (TSqlParser.OUTPUT - 611)) | (1 << (TSqlParser.OWNER - 611)) | (1 << (TSqlParser.PARAMETERIZATION - 611)) | (1 << (TSqlParser.PARTITION - 611)) | (1 << (TSqlParser.PATH - 611)) | (1 << (TSqlParser.PRECEDING - 611)) | (1 << (TSqlParser.PRIOR - 611)))) !== 0) || ((((_la - 643)) & ~0x1f) == 0 && ((1 << (_la - 643)) & ((1 << (TSqlParser.PRIVILEGES - 643)) | (1 << (TSqlParser.RANGE - 643)) | (1 << (TSqlParser.RANK - 643)) | (1 << (TSqlParser.READONLY - 643)) | (1 << (TSqlParser.READ_ONLY - 643)) | (1 << (TSqlParser.RECOMPILE - 643)) | (1 << (TSqlParser.RELATIVE - 643)) | (1 << (TSqlParser.REMOTE - 643)) | (1 << (TSqlParser.REPEATABLE - 643)))) !== 0) || ((((_la - 683)) & ~0x1f) == 0 && ((1 << (_la - 683)) & ((1 << (TSqlParser.ROBUST - 683)) | (1 << (TSqlParser.ROOT - 683)) | (1 << (TSqlParser.ROW - 683)) | (1 << (TSqlParser.ROWGUID - 683)) | (1 << (TSqlParser.ROWS - 683)) | (1 << (TSqlParser.ROW_NUMBER - 683)) | (1 << (TSqlParser.SAMPLE - 683)) | (1 << (TSqlParser.SCHEMABINDING - 683)) | (1 << (TSqlParser.SCROLL - 683)) | (1 << (TSqlParser.SCROLL_LOCKS - 683)) | (1 << (TSqlParser.SELF - 683)) | (1 << (TSqlParser.SERIALIZABLE - 683)) | (1 << (TSqlParser.SIMPLE - 683)) | (1 << (TSqlParser.SIZE - 683)))) !== 0) || ((((_la - 715)) & ~0x1f) == 0 && ((1 << (_la - 715)) & ((1 << (TSqlParser.SNAPSHOT - 715)) | (1 << (TSqlParser.SPATIAL_WINDOW_MAX_CELLS - 715)) | (1 << (TSqlParser.STATIC - 715)) | (1 << (TSqlParser.STATS_STREAM - 715)) | (1 << (TSqlParser.STDEV - 715)) | (1 << (TSqlParser.STDEVP - 715)) | (1 << (TSqlParser.SUM - 715)) | (1 << (TSqlParser.TEXTIMAGE_ON - 715)) | (1 << (TSqlParser.THROW - 715)) | (1 << (TSqlParser.TIES - 715)) | (1 << (TSqlParser.TIME - 715)))) !== 0) || ((((_la - 747)) & ~0x1f) == 0 && ((1 << (_la - 747)) & ((1 << (TSqlParser.TRY - 747)) | (1 << (TSqlParser.TYPE - 747)) | (1 << (TSqlParser.TYPE_WARNING - 747)) | (1 << (TSqlParser.UNBOUNDED - 747)) | (1 << (TSqlParser.UNCOMMITTED - 747)) | (1 << (TSqlParser.UNKNOWN - 747)) | (1 << (TSqlParser.USING - 747)) | (1 << (TSqlParser.VALUE - 747)) | (1 << (TSqlParser.VAR - 747)) | (1 << (TSqlParser.VARP - 747)) | (1 << (TSqlParser.VIEWS - 747)) | (1 << (TSqlParser.VIEW_METADATA - 747)) | (1 << (TSqlParser.WORK - 747)) | (1 << (TSqlParser.XML - 747)) | (1 << (TSqlParser.XMLNAMESPACES - 747)) | (1 << (TSqlParser.ID - 747)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comparison_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_comparison_operator;
    return this;
}

Comparison_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comparison_operatorContext.prototype.constructor = Comparison_operatorContext;


Comparison_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterComparison_operator(this);
	}
};

Comparison_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitComparison_operator(this);
	}
};




TSqlParser.Comparison_operatorContext = Comparison_operatorContext;

TSqlParser.prototype.comparison_operator = function() {

    var localctx = new Comparison_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 942, TSqlParser.RULE_comparison_operator);
    try {
        this.state = 10448;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1472,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 10433;
            this.match(TSqlParser.EQUAL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 10434;
            this.match(TSqlParser.GREATER);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 10435;
            this.match(TSqlParser.LESS);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 10436;
            this.match(TSqlParser.LESS);
            this.state = 10437;
            this.match(TSqlParser.EQUAL);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 10438;
            this.match(TSqlParser.GREATER);
            this.state = 10439;
            this.match(TSqlParser.EQUAL);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 10440;
            this.match(TSqlParser.LESS);
            this.state = 10441;
            this.match(TSqlParser.GREATER);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 10442;
            this.match(TSqlParser.EXCLAMATION);
            this.state = 10443;
            this.match(TSqlParser.EQUAL);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 10444;
            this.match(TSqlParser.EXCLAMATION);
            this.state = 10445;
            this.match(TSqlParser.GREATER);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 10446;
            this.match(TSqlParser.EXCLAMATION);
            this.state = 10447;
            this.match(TSqlParser.LESS);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assignment_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_assignment_operator;
    return this;
}

Assignment_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assignment_operatorContext.prototype.constructor = Assignment_operatorContext;


Assignment_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterAssignment_operator(this);
	}
};

Assignment_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitAssignment_operator(this);
	}
};




TSqlParser.Assignment_operatorContext = Assignment_operatorContext;

TSqlParser.prototype.assignment_operator = function() {

    var localctx = new Assignment_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 944, TSqlParser.RULE_assignment_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10450;
        _la = this._input.LA(1);
        if(!(((((_la - 789)) & ~0x1f) == 0 && ((1 << (_la - 789)) & ((1 << (TSqlParser.PLUS_ASSIGN - 789)) | (1 << (TSqlParser.MINUS_ASSIGN - 789)) | (1 << (TSqlParser.MULT_ASSIGN - 789)) | (1 << (TSqlParser.DIV_ASSIGN - 789)) | (1 << (TSqlParser.MOD_ASSIGN - 789)) | (1 << (TSqlParser.AND_ASSIGN - 789)) | (1 << (TSqlParser.XOR_ASSIGN - 789)) | (1 << (TSqlParser.OR_ASSIGN - 789)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function File_sizeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = TSqlParser.RULE_file_size;
    return this;
}

File_sizeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_sizeContext.prototype.constructor = File_sizeContext;

File_sizeContext.prototype.DECIMAL = function() {
    return this.getToken(TSqlParser.DECIMAL, 0);
};

File_sizeContext.prototype.KB = function() {
    return this.getToken(TSqlParser.KB, 0);
};

File_sizeContext.prototype.MB = function() {
    return this.getToken(TSqlParser.MB, 0);
};

File_sizeContext.prototype.GB = function() {
    return this.getToken(TSqlParser.GB, 0);
};

File_sizeContext.prototype.TB = function() {
    return this.getToken(TSqlParser.TB, 0);
};

File_sizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.enterFile_size(this);
	}
};

File_sizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof TSqlParserListener ) {
        listener.exitFile_size(this);
	}
};




TSqlParser.File_sizeContext = File_sizeContext;

TSqlParser.prototype.file_size = function() {

    var localctx = new File_sizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 946, TSqlParser.RULE_file_size);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 10452;
        this.match(TSqlParser.DECIMAL);
        this.state = 10454;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===TSqlParser.GB || _la===TSqlParser.KB || _la===TSqlParser.MB || _la===TSqlParser.TB || _la===TSqlParser.MODULE) {
            this.state = 10453;
            _la = this._input.LA(1);
            if(!(_la===TSqlParser.GB || _la===TSqlParser.KB || _la===TSqlParser.MB || _la===TSqlParser.TB || _la===TSqlParser.MODULE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


TSqlParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 46:
			return this.assembly_option_sempred(localctx, predIndex);
	case 352:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

TSqlParser.prototype.assembly_option_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

TSqlParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 5);
		case 2:
			return this.precpred(this._ctx, 4);
		case 3:
			return this.precpred(this._ctx, 3);
		case 4:
			return this.precpred(this._ctx, 2);
		case 5:
			return this.precpred(this._ctx, 10);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.TSqlParser = TSqlParser;
